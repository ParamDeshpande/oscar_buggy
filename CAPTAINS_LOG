3/02/2020
Starting with GIMBAL control codes.

A good website to start with 'apart from wiki'
http://www.olliw.eu/2013/storm32bgc/

23/02/2020
Added code for gimbal controls in .ino and .py.
    
11/03/2020
9.40 PM
Resuming testing Gimbal code.

12/03/2020
8.59PM
Fixed VSCODE arduino and platformIO, installed STM32 Programmer added as a path to environment variable.
STM32 blinky blinky code works good with ARDUINO extension. PlatformIO not tested, neither willing COZ of 
MAVLINK codes ? 
Maybe I might PORT the CODES. Might !
Currently soldering UART PINS on the Storm32.

13/03/2020
5.56PM 
 
 Still busy trying to figure out MAVLINK codes ,

 Maybe the code i downloaded was firmware code for the STORM32 and not for arduino or any other microcontroller. 
 
 USed FTDI for STORM32 connected well But has version 0.90
 Latest is 2.xx Older version is no longer supported by newer oliwells GUI (Windows) 
 Will be installating older GUI, to see if I can PAN / steer GIMBAL Then move to upgrading and inverting GIMBAL with {fingers cross} newer firmware.
 Shifted to windows for ease of WORK (Sed) bcoz installation is difficult on linux.

 Found a nice design quote 
 "An important thing to look for in a gimbal is how this attachment is done. The little rubber balls commonly used for this suspension are designed to work in compression not tension. What that means is that the gimbal should hang on the balls not from them."
 ie The gimbal used in this project *should* be inverted. For better vibration cancelling response.
 src https://www.rcgroups.com/forums/showthread.php?2818200-Gimbals-101

14/03/20
8.10 PM

Gimbal Scripts STORM32
For understanding the internal working one should realize, that the STorM32 controller code is essentially an endless loop, which is triggered and repeated every 1.5 ms.
src http://www.olliw.eu/storm32bgc-wiki/STorM32_Scripts

MAVLink_Communication
The baudrate of the selected serial port is determined by the respective baudrate parameter in the [GUI:Expert] tab. Per default it is 115200 bps. It is recommended to use a baudrate of 230400 bps, if possible.
src http://www.olliw.eu/storm32bgc-wiki/MAVLink_Communication

Later I will need to do pass through mavlink tunneling ie 
Accessing the gimbalGUI connection to GUI **through** a MCU/(or a autopilot etc..) coz GIMBAL is clamped DOWN to the SYSTEM (DRONE ETC.)

16/03/20
12.48PM 

Tested motion control via GUI now moving to STM32 CODE simple UART MAVLINK SWEEP CODE.

2.20 PM 
Trying D2 and D8 as first attempt for STM32 UART via arduino.
Now in elementary, Arduino / maple leaf leaflabs resources really suck at telling which port is port 2 and which port is port 3 and their respective pins.
Had to dig deep into platformio core to see the definitions now trying to test them.

5.17 PM 
Finally. 
Managed to fix the 2 uart ISSUE, NOW can communicate via two UARTS. 
Also the GIMBAL code compiled using platformIO.

11.58PM
Managed to control gimbal (hanging) from STM32 using MAVLINK codes.
Will move to inverting and FINE tuning after I get a hold of GOPRO camera.

3/04/20
3.23PM

Managed to invert the gimbal successfully , couldn't upgrade the FIRMWARE, still the firmware is V.90.

14/04/20 
4.11 PM
now moving to get the director module path, extracting from perl gimbal Scripts.
4.27 PM
S1 ) The test director profile 
The simplest director profile called test_case_around_the_world. The buggy wil complete one rotation around the football with radius such that area of the bounding box is constant.

S2 ) Getting the bounding boxes.
I will be tinkering with tensorflow today, once satisfied with familiarity move to getting bboxes.
 
22/04/20
7.01 PM 

Finished running of tracking a green ball opencv. from  https://www.pyimagesearch.com/2015/09/14/ball-tracking-with-opencv/
Finished communication between, python and STM32.
Tried to communicate via python and platformIO, couldn't communicate as platformIO also uses python at the backend.
Tried to communicate via cuteCom hyperterminal, couldn't communicate both simulatenously, sent GARBAGE VALUE on the port /dev/ttyACM0 (ie stm32 port). (YES rechecked the baudrate)
Used the port '/dev/ttyUSB0', interrupted the python terminal and could see the op on the hyperterminal.

23/04/20
8.01 PM 

Wrote bash scripts to create cpp and header file pairs.

25/04/20
1.25 PM 
Starting for obj tracking on Gimbal added robo_thoghts_code_linkedIn in references, continuing with green ball detection.

1.44 PM 
I will be needing to write bash scripts for python as well.

5.37 PM 
Managed to get to and fro comms for string data types.
Now moving to other types. https://python-forum.io/Thread-Writing-commands-to-serial
See dead Eye's Comment in this link.

10.11 PM 
Wrote cleaner versions of the UART codes for STM testing again the clean versions.

11.12 PM 
Done with send_until_ack and rec_and_ack on the MCU side. NOW NEED TO DO THE SAME FOR OBCOMP side. 


26/04/20
9.06 PM
Finished today with ONBOARD pc python clean codes.
Fixed camera and gimbal hardware setup.

Now moving to PID for object tracking via GIMBAL.

27/04/20
1.15 PM 

Some fucked up shit ..., need to convert from String types to getiing float via csv vals from Strings ( Note S is capital). ( Arduino fucked up libs.)

2.25 AM 
Theres isnt as much shit in this world wrong as there is wrong with arduino motherfucking Strings.
Still unresolved issue of unable to  convert it to plain strings and parse the motherfucking data.
shitty ARDUINO. Sadly need to rely for the bloody mavlink APIS.

2.51 AM 
Did a bloody brute force and copied String to string char by char and then parsed that string.

Now to the ugly PID for camera angles. but Finally getiing somewhere close ? 

10.57 AM
Moving to actual feedback and gimbal control.

1.01PM 
successfully sent area,cx, cy from ball_tracking to stm.

5.27 PM 
The python version to control gimbal was right under my nose, wonder why did I insist on sending from obcomp to mcu to gimbal.
Im sending directly from obcomp to gimbal.  TOO EASY ... :) 

For the moment I have kept the MCU aside, will be using it when I would be needing buggy controls part.

28/04/20

2.23 PM 

couldnt communicate with python and gimbal yesterday, UART errors, rechecked the wirings , changed the USB wires still no luck. 
Will try the same thing today, If fails / also need to move to MCU cause python is way too SLOW ...... :(

Unable to try on elementary, hoping to see if this works on windows !

6.16 PM
Came back on elementary.
Turns out there were big loose connections on the UART pins soldered on STM. Soldered header / jumper cables to the uart pins of gimbal.
Now everything seems to work good.
Both Python and MCU.

Will now be testing cam and pixels per degree of the Gimbal, maybe /may not be useful for object tracking.

Gimbal moved webcam opened, need to tweak the python code..

9.19 PM
Ran on a python script.
Although takes too long to change gimbal angles not possible for real time.
Will be moving to stm and see if it is good enough for real time. 
Found that del_pixels/deg = 18 pix\deg (+-) 1.5pix/deg # CALC around (+-) 1 deg 
Let me try to use around, +- 3 pixels in actual scenarios ? To be tested.


9.44 PM 
Just calculating the timing reqs, takes around 1.4ms (calc) for complete UART betn obcomp and stm32.

-----------------------
NOTE 
leave 5 pins from rightmost pins col the 6th pin is orange Wire ie connected to TX of gimbal or RX of mcu.
Yellow wire 7pin below orange RX of Gimbals and TX of MCU 
-----------------------

29/04/20 

3.53 PM 
Re Soldered gimbal, uart still had loose connections not on the pins but rather on the base of the pins.
Shaky output / improper tracking. Of the final run.
Seems frame pixels are different than what opencv outputs for object center.
Opencv cv outputs x,y for object center which means my 18pix/deg assumption needs to be redefined as 18 x,y coords per degree of the camera.
I dont know as of now what is x,y and where did it come from or its relation but for the time being i can safely send x,y, which i was considering pixels.

PS frame ht and frame wd is being sent in pixels, ie 480x640
x,y vals for the current scenario is 600,800


Now retesting the final run with frameht,framewd being sent as 600,800.

8.17 PM 
Trying different combinations, at t=0 delay goes too fast, ie unstable the angle.
At t=50ms delay overshoots.

At t= 250ms delay not real time video ,and hangs the video frame from opencv.
Trying t=75ms delay.

PS also hangs after some time usual cases mostly may be caused by use of stupid (S cap)Strings.

Still the motion of the camera is too fuzzy, at delay=75ms in orient gimbal function. too, Also I have way too many false positives. And the script hangs after some time, I dont know most likely due to while loops inside UART.
I will be needing to write a more reliabler system. This while 1 sysstem is too unreliable, also debugging not working with simultaneous UART running.

I am keeping this aside for now, will be back after some consultaion and making of a better operating system TTH hopefully.


30/04/20

10.00 PM
I am Currently sending back free memory usage, through uart back to pc
ie in while loop in python sending object coords and receiving freeMem from MCU. 

Trying to debug why does it stop working now after 10secs, seems memory WAS NOT THE ISSUE AFTER ALL.
The free memory seems to be constant, for whatever small number of iters my codde runs before it hangs out.
Most likely it gets struck in the while loops created for sending and receiving, Acknowledging messages. 

Solution: Dont us the while 1 loop architecture, start using TICK based TTH architecture. 
Also I should switch to using STM CUBE IDE to use ITM for MCU debugging instead of ancient printf. OR find a way to get working ITM in PLATFORMIO.

2/05/2020
1.01 PM

Working on the interrupt based uart.

4/05/2020

4.17 PM
Working on the new architecture, uart resolved,now calculating gimbal timings.
Also it takes around 10 MS to run the process part of OpenCV so WE can do 60fps grab, which is aroud 17MS time.
So currently my process is 10MS and grab is 17MS thus feasible and stable., in python module.


5/05/2020
10.57 AM
Resuming gimbal control and finding min time between each commnad sent and received(if possible).
Also added magnets as a counter balance for gimbal for better stabilization.

Seems yesterday the gimbal was behaving crazy headless chicken cause there was instability, now that magnets have been added its working pretty smooth.
I found the following values. 
Writing 1 angle to the gimbal takes around average 3.7ms, ie between 3ms and 4ms.
Assuming wcase 4MS per writing angle, reading angle not working maybe need to tweak the firmware.
Later..

11.21 AM 
Moving to python code and getting processing / threading / trajectory generation.


6/05/2020

10.13 AM

Resuming multithreading for python.

8.55 PM 
Found this statement if cv2.waitKey(10) == ord("q"):
      break
    is necessary for showing the image.
Dummy thread along with grabber thread managed to get working together, 
now moving to get the actual process thread running.

10.32 PM 
Done with the actual green ball threading.
Now moving to trajectory generation.

11.55 PM 
Done with linear trajectory generation.
Testing of comms and big picture, remaining.