
oscar_deployment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  080080d8  080080d8  000180d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008470  08008470  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008470  08008470  00018470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008478  08008478  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800847c  0800847c  0001847c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001498  200001dc  0800865c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001674  0800865c  00021674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb4b  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e09  00000000  00000000  0002bd57  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  0002db60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002e398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018750  00000000  00000000  0002eae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009610  00000000  00000000  00047238  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a8c8  00000000  00000000  00050848  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb110  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003334  00000000  00000000  000eb18c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080c0 	.word	0x080080c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080080c0 	.word	0x080080c0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <parseData>:
/* USER CODE END EV */

/**
  * @brief This function handles Hard fault interrupt.
  */
void parseData(byte * parseMsg){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  byte* frameToken = strtok_r(parseMsg,(byte *)startMarker,&saveptr1);
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <parseData+0x80>)
 8000fa2:	491e      	ldr	r1, [pc, #120]	; (800101c <parseData+0x84>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f004 fb55 	bl	8005654 <strtok_r>
 8000faa:	6178      	str	r0, [r7, #20]
  frameToken = strtok_r(NULL,(byte *)endMarker,&saveptr1); // Now it points to the first frame.
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <parseData+0x80>)
 8000fae:	491c      	ldr	r1, [pc, #112]	; (8001020 <parseData+0x88>)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f004 fb4f 	bl	8005654 <strtok_r>
 8000fb6:	6178      	str	r0, [r7, #20]

  int frameIndex = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  byte* frameTokenCopy = frameToken;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	60fb      	str	r3, [r7, #12]
  parseCoeffs(frameTokenCopy,frameIndex);
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f82e 	bl	8001024 <parseCoeffs>
  while (frameToken != NULL){
 8000fc8:	e01b      	b.n	8001002 <parseData+0x6a>
    /* code */

	  ++frameIndex;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
    frameToken = strtok_r(NULL, (byte *)startMarker,&saveptr1);
 8000fd0:	4a11      	ldr	r2, [pc, #68]	; (8001018 <parseData+0x80>)
 8000fd2:	4912      	ldr	r1, [pc, #72]	; (800101c <parseData+0x84>)
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f004 fb3d 	bl	8005654 <strtok_r>
 8000fda:	6178      	str	r0, [r7, #20]

    if(frameToken == NULL){
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d013      	beq.n	800100a <parseData+0x72>

        break;
    }

    frameToken = strtok_r(NULL, (byte *)endMarker,&saveptr1);
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <parseData+0x80>)
 8000fe4:	490e      	ldr	r1, [pc, #56]	; (8001020 <parseData+0x88>)
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f004 fb34 	bl	8005654 <strtok_r>
 8000fec:	6178      	str	r0, [r7, #20]

        if(frameToken == NULL){
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00c      	beq.n	800100e <parseData+0x76>

        break;
    }
    
    if(frameToken!=NULL){
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <parseData+0x6a>

        parseCoeffs(frameToken,frameIndex);
 8000ffa:	6939      	ldr	r1, [r7, #16]
 8000ffc:	6978      	ldr	r0, [r7, #20]
 8000ffe:	f000 f811 	bl	8001024 <parseCoeffs>
  while (frameToken != NULL){
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1e0      	bne.n	8000fca <parseData+0x32>
    }
    

  }
    
}
 8001008:	e002      	b.n	8001010 <parseData+0x78>
        break;
 800100a:	bf00      	nop
 800100c:	e000      	b.n	8001010 <parseData+0x78>
        break;
 800100e:	bf00      	nop
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001f8 	.word	0x200001f8
 800101c:	08008114 	.word	0x08008114
 8001020:	08008118 	.word	0x08008118

08001024 <parseCoeffs>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void parseCoeffs(byte * frameMsg, int index){
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  byte * coeffsToken = strtok_r(frameMsg,(byte*) delimiter, &saveptr2);
 800102e:	4ab0      	ldr	r2, [pc, #704]	; (80012f0 <parseCoeffs+0x2cc>)
 8001030:	49b0      	ldr	r1, [pc, #704]	; (80012f4 <parseCoeffs+0x2d0>)
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f004 fb0e 	bl	8005654 <strtok_r>
 8001038:	60f8      	str	r0, [r7, #12]

  area.curves[index].d = atof(coeffsToken);
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f002 fdec 	bl	8003c18 <atof>
 8001040:	ec54 3b10 	vmov	r3, r4, d0
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f7ff fdd6 	bl	8000bf8 <__aeabi_d2f>
 800104c:	4601      	mov	r1, r0
 800104e:	4aaa      	ldr	r2, [pc, #680]	; (80012f8 <parseCoeffs+0x2d4>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001058:	4aa5      	ldr	r2, [pc, #660]	; (80012f0 <parseCoeffs+0x2cc>)
 800105a:	49a6      	ldr	r1, [pc, #664]	; (80012f4 <parseCoeffs+0x2d0>)
 800105c:	2000      	movs	r0, #0
 800105e:	f004 faf9 	bl	8005654 <strtok_r>
 8001062:	60f8      	str	r0, [r7, #12]
  area.curves[index].c = atof(coeffsToken);
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f002 fdd7 	bl	8003c18 <atof>
 800106a:	ec54 3b10 	vmov	r3, r4, d0
 800106e:	4618      	mov	r0, r3
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fdc1 	bl	8000bf8 <__aeabi_d2f>
 8001076:	4601      	mov	r1, r0
 8001078:	4a9f      	ldr	r2, [pc, #636]	; (80012f8 <parseCoeffs+0x2d4>)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4413      	add	r3, r2
 8001080:	3304      	adds	r3, #4
 8001082:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001084:	4a9a      	ldr	r2, [pc, #616]	; (80012f0 <parseCoeffs+0x2cc>)
 8001086:	499b      	ldr	r1, [pc, #620]	; (80012f4 <parseCoeffs+0x2d0>)
 8001088:	2000      	movs	r0, #0
 800108a:	f004 fae3 	bl	8005654 <strtok_r>
 800108e:	60f8      	str	r0, [r7, #12]
  area.curves[index].b = atof(coeffsToken);
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f002 fdc1 	bl	8003c18 <atof>
 8001096:	ec54 3b10 	vmov	r3, r4, d0
 800109a:	4618      	mov	r0, r3
 800109c:	4621      	mov	r1, r4
 800109e:	f7ff fdab 	bl	8000bf8 <__aeabi_d2f>
 80010a2:	4601      	mov	r1, r0
 80010a4:	4a94      	ldr	r2, [pc, #592]	; (80012f8 <parseCoeffs+0x2d4>)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	3308      	adds	r3, #8
 80010ae:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80010b0:	4a8f      	ldr	r2, [pc, #572]	; (80012f0 <parseCoeffs+0x2cc>)
 80010b2:	4990      	ldr	r1, [pc, #576]	; (80012f4 <parseCoeffs+0x2d0>)
 80010b4:	2000      	movs	r0, #0
 80010b6:	f004 facd 	bl	8005654 <strtok_r>
 80010ba:	60f8      	str	r0, [r7, #12]
  area.curves[index].a = atof(coeffsToken);
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f002 fdab 	bl	8003c18 <atof>
 80010c2:	ec54 3b10 	vmov	r3, r4, d0
 80010c6:	4618      	mov	r0, r3
 80010c8:	4621      	mov	r1, r4
 80010ca:	f7ff fd95 	bl	8000bf8 <__aeabi_d2f>
 80010ce:	4601      	mov	r1, r0
 80010d0:	4a89      	ldr	r2, [pc, #548]	; (80012f8 <parseCoeffs+0x2d4>)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	4413      	add	r3, r2
 80010d8:	330c      	adds	r3, #12
 80010da:	6019      	str	r1, [r3, #0]
  
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80010dc:	4a84      	ldr	r2, [pc, #528]	; (80012f0 <parseCoeffs+0x2cc>)
 80010de:	4985      	ldr	r1, [pc, #532]	; (80012f4 <parseCoeffs+0x2d0>)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f004 fab7 	bl	8005654 <strtok_r>
 80010e6:	60f8      	str	r0, [r7, #12]
  roll.curves[index].d = atof(coeffsToken);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f002 fd95 	bl	8003c18 <atof>
 80010ee:	ec54 3b10 	vmov	r3, r4, d0
 80010f2:	4618      	mov	r0, r3
 80010f4:	4621      	mov	r1, r4
 80010f6:	f7ff fd7f 	bl	8000bf8 <__aeabi_d2f>
 80010fa:	4601      	mov	r1, r0
 80010fc:	4a7f      	ldr	r2, [pc, #508]	; (80012fc <parseCoeffs+0x2d8>)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001106:	4a7a      	ldr	r2, [pc, #488]	; (80012f0 <parseCoeffs+0x2cc>)
 8001108:	497a      	ldr	r1, [pc, #488]	; (80012f4 <parseCoeffs+0x2d0>)
 800110a:	2000      	movs	r0, #0
 800110c:	f004 faa2 	bl	8005654 <strtok_r>
 8001110:	60f8      	str	r0, [r7, #12]
  roll.curves[index].c = atof(coeffsToken);
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f002 fd80 	bl	8003c18 <atof>
 8001118:	ec54 3b10 	vmov	r3, r4, d0
 800111c:	4618      	mov	r0, r3
 800111e:	4621      	mov	r1, r4
 8001120:	f7ff fd6a 	bl	8000bf8 <__aeabi_d2f>
 8001124:	4601      	mov	r1, r0
 8001126:	4a75      	ldr	r2, [pc, #468]	; (80012fc <parseCoeffs+0x2d8>)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	4413      	add	r3, r2
 800112e:	3304      	adds	r3, #4
 8001130:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001132:	4a6f      	ldr	r2, [pc, #444]	; (80012f0 <parseCoeffs+0x2cc>)
 8001134:	496f      	ldr	r1, [pc, #444]	; (80012f4 <parseCoeffs+0x2d0>)
 8001136:	2000      	movs	r0, #0
 8001138:	f004 fa8c 	bl	8005654 <strtok_r>
 800113c:	60f8      	str	r0, [r7, #12]
  roll.curves[index].b = atof(coeffsToken);
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f002 fd6a 	bl	8003c18 <atof>
 8001144:	ec54 3b10 	vmov	r3, r4, d0
 8001148:	4618      	mov	r0, r3
 800114a:	4621      	mov	r1, r4
 800114c:	f7ff fd54 	bl	8000bf8 <__aeabi_d2f>
 8001150:	4601      	mov	r1, r0
 8001152:	4a6a      	ldr	r2, [pc, #424]	; (80012fc <parseCoeffs+0x2d8>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	3308      	adds	r3, #8
 800115c:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800115e:	4a64      	ldr	r2, [pc, #400]	; (80012f0 <parseCoeffs+0x2cc>)
 8001160:	4964      	ldr	r1, [pc, #400]	; (80012f4 <parseCoeffs+0x2d0>)
 8001162:	2000      	movs	r0, #0
 8001164:	f004 fa76 	bl	8005654 <strtok_r>
 8001168:	60f8      	str	r0, [r7, #12]
  roll.curves[index].a = atof(coeffsToken);
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f002 fd54 	bl	8003c18 <atof>
 8001170:	ec54 3b10 	vmov	r3, r4, d0
 8001174:	4618      	mov	r0, r3
 8001176:	4621      	mov	r1, r4
 8001178:	f7ff fd3e 	bl	8000bf8 <__aeabi_d2f>
 800117c:	4601      	mov	r1, r0
 800117e:	4a5f      	ldr	r2, [pc, #380]	; (80012fc <parseCoeffs+0x2d8>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	330c      	adds	r3, #12
 8001188:	6019      	str	r1, [r3, #0]

  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800118a:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <parseCoeffs+0x2cc>)
 800118c:	4959      	ldr	r1, [pc, #356]	; (80012f4 <parseCoeffs+0x2d0>)
 800118e:	2000      	movs	r0, #0
 8001190:	f004 fa60 	bl	8005654 <strtok_r>
 8001194:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].d = atof(coeffsToken);
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f002 fd3e 	bl	8003c18 <atof>
 800119c:	ec54 3b10 	vmov	r3, r4, d0
 80011a0:	4618      	mov	r0, r3
 80011a2:	4621      	mov	r1, r4
 80011a4:	f7ff fd28 	bl	8000bf8 <__aeabi_d2f>
 80011a8:	4601      	mov	r1, r0
 80011aa:	4a55      	ldr	r2, [pc, #340]	; (8001300 <parseCoeffs+0x2dc>)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <parseCoeffs+0x2cc>)
 80011b6:	494f      	ldr	r1, [pc, #316]	; (80012f4 <parseCoeffs+0x2d0>)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f004 fa4b 	bl	8005654 <strtok_r>
 80011be:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].c = atof(coeffsToken);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f002 fd29 	bl	8003c18 <atof>
 80011c6:	ec54 3b10 	vmov	r3, r4, d0
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	f7ff fd13 	bl	8000bf8 <__aeabi_d2f>
 80011d2:	4601      	mov	r1, r0
 80011d4:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <parseCoeffs+0x2dc>)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80011e0:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <parseCoeffs+0x2cc>)
 80011e2:	4944      	ldr	r1, [pc, #272]	; (80012f4 <parseCoeffs+0x2d0>)
 80011e4:	2000      	movs	r0, #0
 80011e6:	f004 fa35 	bl	8005654 <strtok_r>
 80011ea:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].b = atof(coeffsToken);
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f002 fd13 	bl	8003c18 <atof>
 80011f2:	ec54 3b10 	vmov	r3, r4, d0
 80011f6:	4618      	mov	r0, r3
 80011f8:	4621      	mov	r1, r4
 80011fa:	f7ff fcfd 	bl	8000bf8 <__aeabi_d2f>
 80011fe:	4601      	mov	r1, r0
 8001200:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <parseCoeffs+0x2dc>)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	3308      	adds	r3, #8
 800120a:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800120c:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <parseCoeffs+0x2cc>)
 800120e:	4939      	ldr	r1, [pc, #228]	; (80012f4 <parseCoeffs+0x2d0>)
 8001210:	2000      	movs	r0, #0
 8001212:	f004 fa1f 	bl	8005654 <strtok_r>
 8001216:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].a = atof(coeffsToken);
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f002 fcfd 	bl	8003c18 <atof>
 800121e:	ec54 3b10 	vmov	r3, r4, d0
 8001222:	4618      	mov	r0, r3
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff fce7 	bl	8000bf8 <__aeabi_d2f>
 800122a:	4601      	mov	r1, r0
 800122c:	4a34      	ldr	r2, [pc, #208]	; (8001300 <parseCoeffs+0x2dc>)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	330c      	adds	r3, #12
 8001236:	6019      	str	r1, [r3, #0]

  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001238:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <parseCoeffs+0x2cc>)
 800123a:	492e      	ldr	r1, [pc, #184]	; (80012f4 <parseCoeffs+0x2d0>)
 800123c:	2000      	movs	r0, #0
 800123e:	f004 fa09 	bl	8005654 <strtok_r>
 8001242:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].d = atof(coeffsToken);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f002 fce7 	bl	8003c18 <atof>
 800124a:	ec54 3b10 	vmov	r3, r4, d0
 800124e:	4618      	mov	r0, r3
 8001250:	4621      	mov	r1, r4
 8001252:	f7ff fcd1 	bl	8000bf8 <__aeabi_d2f>
 8001256:	4601      	mov	r1, r0
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <parseCoeffs+0x2e0>)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4413      	add	r3, r2
 8001260:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <parseCoeffs+0x2cc>)
 8001264:	4923      	ldr	r1, [pc, #140]	; (80012f4 <parseCoeffs+0x2d0>)
 8001266:	2000      	movs	r0, #0
 8001268:	f004 f9f4 	bl	8005654 <strtok_r>
 800126c:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].c = atof(coeffsToken);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f002 fcd2 	bl	8003c18 <atof>
 8001274:	ec54 3b10 	vmov	r3, r4, d0
 8001278:	4618      	mov	r0, r3
 800127a:	4621      	mov	r1, r4
 800127c:	f7ff fcbc 	bl	8000bf8 <__aeabi_d2f>
 8001280:	4601      	mov	r1, r0
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <parseCoeffs+0x2e0>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <parseCoeffs+0x2cc>)
 8001290:	4918      	ldr	r1, [pc, #96]	; (80012f4 <parseCoeffs+0x2d0>)
 8001292:	2000      	movs	r0, #0
 8001294:	f004 f9de 	bl	8005654 <strtok_r>
 8001298:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].b = atof(coeffsToken);
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f002 fcbc 	bl	8003c18 <atof>
 80012a0:	ec54 3b10 	vmov	r3, r4, d0
 80012a4:	4618      	mov	r0, r3
 80012a6:	4621      	mov	r1, r4
 80012a8:	f7ff fca6 	bl	8000bf8 <__aeabi_d2f>
 80012ac:	4601      	mov	r1, r0
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <parseCoeffs+0x2e0>)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	3308      	adds	r3, #8
 80012b8:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <parseCoeffs+0x2cc>)
 80012bc:	490d      	ldr	r1, [pc, #52]	; (80012f4 <parseCoeffs+0x2d0>)
 80012be:	2000      	movs	r0, #0
 80012c0:	f004 f9c8 	bl	8005654 <strtok_r>
 80012c4:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].a = atof(coeffsToken);
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f002 fca6 	bl	8003c18 <atof>
 80012cc:	ec54 3b10 	vmov	r3, r4, d0
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	f7ff fc90 	bl	8000bf8 <__aeabi_d2f>
 80012d8:	4601      	mov	r1, r0
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <parseCoeffs+0x2e0>)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	330c      	adds	r3, #12
 80012e4:	6019      	str	r1, [r3, #0]

}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001fc 	.word	0x200001fc
 80012f4:	0800811c 	.word	0x0800811c
 80012f8:	2000051c 	.word	0x2000051c
 80012fc:	2000042c 	.word	0x2000042c
 8001300:	2000033c 	.word	0x2000033c
 8001304:	2000024c 	.word	0x2000024c

08001308 <crc_accumulate>:
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
#ifndef HAVE_CRC_ACCUMULATE
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4053      	eors	r3, r2
 800131e:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	b25a      	sxtb	r2, r3
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4053      	eors	r3, r2
 800132c:	b25b      	sxtb	r3, r3
 800132e:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21b      	sxth	r3, r3
 8001340:	4053      	eors	r3, r2
 8001342:	b21a      	sxth	r2, r3
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	b21b      	sxth	r3, r3
 800134a:	4053      	eors	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	b2db      	uxtb	r3, r3
 8001354:	b21b      	sxth	r3, r3
 8001356:	4053      	eors	r3, r2
 8001358:	b21b      	sxth	r3, r3
 800135a:	b29a      	uxth	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	801a      	strh	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137a:	801a      	strh	r2, [r3, #0]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8001394:	f107 030e 	add.w	r3, r7, #14
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffe7 	bl	800136c <crc_init>
	while (length--) {
 800139e:	e009      	b.n	80013b4 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f107 020e 	add.w	r2, r7, #14
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffaa 	bl	8001308 <crc_accumulate>
	while (length--) {
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	1e5a      	subs	r2, r3, #1
 80013b8:	807a      	strh	r2, [r7, #2]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <crc_calculate+0x18>
        }
        return crcTmp;
 80013be:	89fb      	ldrh	r3, [r7, #14]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <mavlink_get_channel_status>:

/*
  internal function to give access to the channel status for each channel
 */
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <mavlink_get_channel_status+0x24>)
 80013de:	4413      	add	r3, r2
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	20000204 	.word	0x20000204

080013f0 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	70fb      	strb	r3, [r7, #3]
 8001402:	460b      	mov	r3, r1
 8001404:	70bb      	strb	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	uint16_t checksum;
	msg->magic = MAVLINK_STX;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	22fe      	movs	r2, #254	; 0xfe
 800140e:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001416:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	78ba      	ldrb	r2, [r7, #2]
 8001422:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffce 	bl	80013c8 <mavlink_get_channel_status>
 800142c:	4603      	mov	r3, r0
 800142e:	799a      	ldrb	r2, [r3, #6]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ffc6 	bl	80013c8 <mavlink_get_channel_status>
 800143c:	4603      	mov	r3, r0
 800143e:	799c      	ldrb	r4, [r3, #6]
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ffc0 	bl	80013c8 <mavlink_get_channel_status>
 8001448:	4603      	mov	r3, r0
 800144a:	1c62      	adds	r2, r4, #1
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	719a      	strb	r2, [r3, #6]
	checksum = crc_calculate((uint8_t*)&msg->len, length + MAVLINK_CORE_HEADER_LEN);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1cda      	adds	r2, r3, #3
 8001454:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001458:	b29b      	uxth	r3, r3
 800145a:	3305      	adds	r3, #5
 800145c:	b29b      	uxth	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	4610      	mov	r0, r2
 8001462:	f7ff ff91 	bl	8001388 <crc_calculate>
 8001466:	4603      	mov	r3, r0
 8001468:	81fb      	strh	r3, [r7, #14]
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
 800146a:	f107 020e 	add.w	r2, r7, #14
 800146e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff47 	bl	8001308 <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800147a:	89f9      	ldrh	r1, [r7, #14]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3308      	adds	r3, #8
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	78d2      	ldrb	r2, [r2, #3]
 8001484:	4413      	add	r3, r2
 8001486:	b2ca      	uxtb	r2, r1
 8001488:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	b299      	uxth	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f103 0208 	add.w	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	3301      	adds	r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 80014a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	3308      	adds	r3, #8
 80014aa:	b29b      	uxth	r3, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}

080014b4 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	70fb      	strb	r3, [r7, #3]
 80014c6:	460b      	mov	r3, r1
 80014c8:	70bb      	strb	r3, [r7, #2]
 80014ca:	4613      	mov	r3, r2
 80014cc:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 80014ce:	78ba      	ldrb	r2, [r7, #2]
 80014d0:	78f9      	ldrb	r1, [r7, #3]
 80014d2:	7c3b      	ldrb	r3, [r7, #16]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	787b      	ldrb	r3, [r7, #1]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2300      	movs	r3, #0
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff87 	bl	80013f0 <mavlink_finalize_message_chan>
 80014e2:	4603      	mov	r3, r0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	1c99      	adds	r1, r3, #2
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	3308      	adds	r3, #8
 8001500:	461a      	mov	r2, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f002 fbb6 	bl	8003c74 <memcpy>
	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	78db      	ldrb	r3, [r3, #3]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3308      	adds	r3, #8
 8001510:	b29b      	uxth	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <mavlink_msg_command_long_pack>:
 * @param param7 Parameter 7, as defined by MAV_CMD enum.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b096      	sub	sp, #88	; 0x58
 800151e:	af02      	add	r7, sp, #8
 8001520:	623a      	str	r2, [r7, #32]
 8001522:	461a      	mov	r2, r3
 8001524:	ed87 0a07 	vstr	s0, [r7, #28]
 8001528:	edc7 0a06 	vstr	s1, [r7, #24]
 800152c:	ed87 1a05 	vstr	s2, [r7, #20]
 8001530:	edc7 1a04 	vstr	s3, [r7, #16]
 8001534:	ed87 2a03 	vstr	s4, [r7, #12]
 8001538:	edc7 2a02 	vstr	s5, [r7, #8]
 800153c:	ed87 3a01 	vstr	s6, [r7, #4]
 8001540:	4603      	mov	r3, r0
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001546:	460b      	mov	r3, r1
 8001548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800154c:	4613      	mov	r3, r2
 800154e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	_mav_put_uint8_t(buf, 32, confirmation);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, 33);
#else
	mavlink_command_long_t packet;
	packet.param1 = param1;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet.param2 = param2;
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
	packet.param3 = param3;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
	packet.param4 = param4;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
	packet.param5 = param5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
	packet.param6 = param6;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	643b      	str	r3, [r7, #64]	; 0x40
	packet.param7 = param7;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
	packet.command = command;
 800156e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001572:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	packet.target_system = target_system;
 8001576:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800157a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	packet.target_component = target_component;
 800157e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001582:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	packet.confirmation = confirmation;
 8001586:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800158a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, 33);
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	3308      	adds	r3, #8
 8001592:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001596:	2221      	movs	r2, #33	; 0x21
 8001598:	4618      	mov	r0, r3
 800159a:	f002 fb6b 	bl	8003c74 <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_COMMAND_LONG;
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	224c      	movs	r2, #76	; 0x4c
 80015a2:	71da      	strb	r2, [r3, #7]
	return mavlink_finalize_message(msg, system_id, component_id, 33, 152);
 80015a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015a8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80015ac:	2398      	movs	r3, #152	; 0x98
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2321      	movs	r3, #33	; 0x21
 80015b2:	6a38      	ldr	r0, [r7, #32]
 80015b4:	f7ff ff7e 	bl	80014b4 <mavlink_finalize_message>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3750      	adds	r7, #80	; 0x50
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <setAngles>:
        
  }



  void setAngles(float roll, float pitch, float yaw){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0a4      	sub	sp, #144	; 0x90
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80015ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80015d2:	ed87 1a01 	vstr	s2, [r7, #4]
    
    mavlink_message_t msg;
    uint8_t buf[MAVLINK_MAX_PACKET_LEN];
    mavlink_msg_command_long_pack(255, 1, &msg, 71, 67, 205, 0, pitch, roll, yaw, 0.0, 0.0, 0.0, 0.0);
 80015d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015da:	2300      	movs	r3, #0
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	23cd      	movs	r3, #205	; 0xcd
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2343      	movs	r3, #67	; 0x43
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	ed9f 3a15 	vldr	s6, [pc, #84]	; 800163c <setAngles+0x78>
 80015ea:	eddf 2a14 	vldr	s5, [pc, #80]	; 800163c <setAngles+0x78>
 80015ee:	ed9f 2a13 	vldr	s4, [pc, #76]	; 800163c <setAngles+0x78>
 80015f2:	eddf 1a12 	vldr	s3, [pc, #72]	; 800163c <setAngles+0x78>
 80015f6:	ed97 1a01 	vldr	s2, [r7, #4]
 80015fa:	edd7 0a03 	vldr	s1, [r7, #12]
 80015fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8001602:	2347      	movs	r3, #71	; 0x47
 8001604:	2101      	movs	r1, #1
 8001606:	20ff      	movs	r0, #255	; 0xff
 8001608:	f7ff ff87 	bl	800151a <mavlink_msg_command_long_pack>
    uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 800160c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff68 	bl	80014ec <mavlink_msg_to_send_buffer>
 800161c:	4603      	mov	r3, r0
 800161e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    HAL_UART_Transmit(&uart_gimbal, (uint8_t*)buf, len, 100);
 8001622:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001626:	f107 0110 	add.w	r1, r7, #16
 800162a:	2364      	movs	r3, #100	; 0x64
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <setAngles+0x7c>)
 800162e:	f001 fbba 	bl	8002da6 <HAL_UART_Transmit>
      
  }
 8001632:	bf00      	nop
 8001634:	3780      	adds	r7, #128	; 0x80
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	00000000 	.word	0x00000000
 8001640:	200013f8 	.word	0x200013f8

08001644 <init_gimbal>:
    
  }

#endif

void init_gimbal(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  setAngles(3, -30, 20);
 8001648:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800164c:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 8001650:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001654:	f7ff ffb6 	bl	80015c4 <setAngles>
  HAL_Delay(1000); // MS
 8001658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165c:	f000 fc28 	bl	8001eb0 <HAL_Delay>
  setAngles(0, 0, 0);
 8001660:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80016a4 <init_gimbal+0x60>
 8001664:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80016a4 <init_gimbal+0x60>
 8001668:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80016a4 <init_gimbal+0x60>
 800166c:	f7ff ffaa 	bl	80015c4 <setAngles>
  HAL_Delay(1000); // MS
 8001670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001674:	f000 fc1c 	bl	8001eb0 <HAL_Delay>
  setAngles(-3, 30, -20);
 8001678:	eebb 1a04 	vmov.f32	s2, #180	; 0xc1a00000 -20.0
 800167c:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001680:	eeb8 0a08 	vmov.f32	s0, #136	; 0xc0400000 -3.0
 8001684:	f7ff ff9e 	bl	80015c4 <setAngles>
  HAL_Delay(1000); // MS
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f000 fc10 	bl	8001eb0 <HAL_Delay>
  setAngles(0, 0, 0);
 8001690:	ed9f 1a04 	vldr	s2, [pc, #16]	; 80016a4 <init_gimbal+0x60>
 8001694:	eddf 0a03 	vldr	s1, [pc, #12]	; 80016a4 <init_gimbal+0x60>
 8001698:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80016a4 <init_gimbal+0x60>
 800169c:	f7ff ff92 	bl	80015c4 <setAngles>
  
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	00000000 	.word	0x00000000

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b598      	push	{r3, r4, r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ac:	f000 fb8e 	bl	8001dcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b0:	f000 f86e 	bl	8001790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016b4:	f000 f91e 	bl	80018f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016b8:	f000 f8c8 	bl	800184c <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80016bc:	f000 f8f0 	bl	80018a0 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t debugMsg[] = "hi\n";

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // flag receive
 80016c0:	4b29      	ldr	r3, [pc, #164]	; (8001768 <main+0xc0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68da      	ldr	r2, [r3, #12]
 80016c6:	4b28      	ldr	r3, [pc, #160]	; (8001768 <main+0xc0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0220 	orr.w	r2, r2, #32
 80016ce:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC); // flat Tx_IT
 80016d0:	4b25      	ldr	r3, [pc, #148]	; (8001768 <main+0xc0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68da      	ldr	r2, [r3, #12]
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <main+0xc0>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016de:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init_gimbal();
 80016e0:	f7ff ffb0 	bl	8001644 <init_gimbal>

  HAL_UART_Transmit_IT(&huart2, (uint8_t*)setupInitMsg, sizeof(setupInitMsg));
 80016e4:	2213      	movs	r2, #19
 80016e6:	4921      	ldr	r1, [pc, #132]	; (800176c <main+0xc4>)
 80016e8:	481f      	ldr	r0, [pc, #124]	; (8001768 <main+0xc0>)
 80016ea:	f001 fbf5 	bl	8002ed8 <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   HAL_UART_Receive_IT(&huart2, &bufferRx[0], 5);
 80016ee:	2205      	movs	r2, #5
 80016f0:	491f      	ldr	r1, [pc, #124]	; (8001770 <main+0xc8>)
 80016f2:	481d      	ldr	r0, [pc, #116]	; (8001768 <main+0xc0>)
 80016f4:	f001 fc35 	bl	8002f62 <HAL_UART_Receive_IT>
	    // Magic pixie dust
	   if (UartReady != SET) {
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <main+0xcc>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d00f      	beq.n	8001722 <main+0x7a>
      /* do shit all... The Part When UART interrupt is not triggered  */
      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001702:	2201      	movs	r2, #1
 8001704:	2120      	movs	r1, #32
 8001706:	481c      	ldr	r0, [pc, #112]	; (8001778 <main+0xd0>)
 8001708:	f000 feaa 	bl	8002460 <HAL_GPIO_WritePin>
      if(newData == TRUE){
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <main+0xd4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d002      	beq.n	800171a <main+0x72>
        //parseData(commBuff);
        //regensplines
        //interpolate splines 
        // fire to gimbal 
        newData = FALSE;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <main+0xd4>)
 8001716:	2200      	movs	r2, #0
 8001718:	701a      	strb	r2, [r3, #0]
      }
      
      
      // Find sleep functionality later and replace this here ...
      HAL_Delay(100); // MS
 800171a:	2064      	movs	r0, #100	; 0x64
 800171c:	f000 fbc8 	bl	8001eb0 <HAL_Delay>
      continue;
 8001720:	e020      	b.n	8001764 <main+0xbc>
	    }
	   else {
       // The part when UART was triggered. 
	        UartReady = RESET;
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <main+0xcc>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
	        printf("command buffer is %s", commBuff);
 8001728:	4915      	ldr	r1, [pc, #84]	; (8001780 <main+0xd8>)
 800172a:	4816      	ldr	r0, [pc, #88]	; (8001784 <main+0xdc>)
 800172c:	f003 f8f4 	bl	8004918 <iprintf>
	        memset(commBuff,32,21);
 8001730:	2215      	movs	r2, #21
 8001732:	2120      	movs	r1, #32
 8001734:	4812      	ldr	r0, [pc, #72]	; (8001780 <main+0xd8>)
 8001736:	f002 faa8 	bl	8003c8a <memset>
	        parseData((byte* )commBuff);
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <main+0xd8>)
 800173c:	f7ff fc2c 	bl	8000f98 <parseData>
	        printf("area.curves[0].d = 99 should be :%f", area.curves[0].d);
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <main+0xe0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f7fe ff07 	bl	8000558 <__aeabi_f2d>
 800174a:	4603      	mov	r3, r0
 800174c:	460c      	mov	r4, r1
 800174e:	461a      	mov	r2, r3
 8001750:	4623      	mov	r3, r4
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <main+0xe4>)
 8001754:	f003 f8e0 	bl	8004918 <iprintf>
	        memset(commBuff,0,sizeof(commBuff));
 8001758:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800175c:	2100      	movs	r1, #0
 800175e:	4808      	ldr	r0, [pc, #32]	; (8001780 <main+0xd8>)
 8001760:	f002 fa93 	bl	8003c8a <memset>
	   HAL_UART_Receive_IT(&huart2, &bufferRx[0], 5);
 8001764:	e7c3      	b.n	80016ee <main+0x46>
 8001766:	bf00      	nop
 8001768:	2000162c 	.word	0x2000162c
 800176c:	08008120 	.word	0x08008120
 8001770:	20001204 	.word	0x20001204
 8001774:	20000234 	.word	0x20000234
 8001778:	40020000 	.word	0x40020000
 800177c:	20000235 	.word	0x20000235
 8001780:	2000060c 	.word	0x2000060c
 8001784:	080080d8 	.word	0x080080d8
 8001788:	2000051c 	.word	0x2000051c
 800178c:	080080f0 	.word	0x080080f0

08001790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b094      	sub	sp, #80	; 0x50
 8001794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001796:	f107 0320 	add.w	r3, r7, #32
 800179a:	2230      	movs	r2, #48	; 0x30
 800179c:	2100      	movs	r1, #0
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 fa73 	bl	8003c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a4:	f107 030c 	add.w	r3, r7, #12
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	4b22      	ldr	r3, [pc, #136]	; (8001844 <SystemClock_Config+0xb4>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a21      	ldr	r2, [pc, #132]	; (8001844 <SystemClock_Config+0xb4>)
 80017be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <SystemClock_Config+0xb4>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <SystemClock_Config+0xb8>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <SystemClock_Config+0xb8>)
 80017da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <SystemClock_Config+0xb8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017ec:	2302      	movs	r3, #2
 80017ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017f0:	2301      	movs	r3, #1
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017f4:	2310      	movs	r3, #16
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fc:	f107 0320 	add.w	r3, r7, #32
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fe47 	bl	8002494 <HAL_RCC_OscConfig>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800180c:	f000 f8a4 	bl	8001958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001810:	230f      	movs	r3, #15
 8001812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001814:	2300      	movs	r3, #0
 8001816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f001 f8a2 	bl	8002974 <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001836:	f000 f88f 	bl	8001958 <Error_Handler>
  }
}
 800183a:	bf00      	nop
 800183c:	3750      	adds	r7, #80	; 0x50
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800
 8001848:	40007000 	.word	0x40007000

0800184c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <MX_USART2_UART_Init+0x50>)
 8001854:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 8001858:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800185c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 8001872:	220c      	movs	r2, #12
 8001874:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_USART2_UART_Init+0x4c>)
 8001884:	f001 fa42 	bl	8002d0c <HAL_UART_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800188e:	f000 f863 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000162c 	.word	0x2000162c
 800189c:	40004400 	.word	0x40004400

080018a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018a4:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <MX_USART6_UART_Init+0x50>)
 80018a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80018aa:	4b10      	ldr	r3, [pc, #64]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018c6:	220c      	movs	r2, #12
 80018c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	4b08      	ldr	r3, [pc, #32]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <MX_USART6_UART_Init+0x4c>)
 80018d8:	f001 fa18 	bl	8002d0c <HAL_UART_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80018e2:	f000 f839 	bl	8001958 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200013f8 	.word	0x200013f8
 80018f0:	40011400 	.word	0x40011400

080018f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	4b10      	ldr	r3, [pc, #64]	; (8001950 <MX_GPIO_Init+0x5c>)
 800190e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001910:	4a0f      	ldr	r2, [pc, #60]	; (8001950 <MX_GPIO_Init+0x5c>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6313      	str	r3, [r2, #48]	; 0x30
 8001918:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <MX_GPIO_Init+0x5c>)
 800191a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	603b      	str	r3, [r7, #0]
 8001922:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001924:	2200      	movs	r2, #0
 8001926:	2120      	movs	r1, #32
 8001928:	480a      	ldr	r0, [pc, #40]	; (8001954 <MX_GPIO_Init+0x60>)
 800192a:	f000 fd99 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800192e:	2320      	movs	r3, #32
 8001930:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	4619      	mov	r1, r3
 8001942:	4804      	ldr	r0, [pc, #16]	; (8001954 <MX_GPIO_Init+0x60>)
 8001944:	f000 fc0a 	bl	800215c <HAL_GPIO_Init>

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40020000 	.word	0x40020000

08001958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_MspInit+0x4c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a0f      	ldr	r2, [pc, #60]	; (80019b4 <HAL_MspInit+0x4c>)
 8001978:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <HAL_MspInit+0x4c>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_MspInit+0x4c>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a08      	ldr	r2, [pc, #32]	; (80019b4 <HAL_MspInit+0x4c>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_MspInit+0x4c>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	; 0x30
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a36      	ldr	r2, [pc, #216]	; (8001ab0 <HAL_UART_MspInit+0xf8>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d134      	bne.n	8001a44 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	4a34      	ldr	r2, [pc, #208]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 80019e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e8:	6413      	str	r3, [r2, #64]	; 0x40
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	61bb      	str	r3, [r7, #24]
 80019f4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	4b2e      	ldr	r3, [pc, #184]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4a2d      	ldr	r2, [pc, #180]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4b2b      	ldr	r3, [pc, #172]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	617b      	str	r3, [r7, #20]
 8001a10:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a12:	230c      	movs	r3, #12
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a22:	2307      	movs	r3, #7
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4822      	ldr	r0, [pc, #136]	; (8001ab8 <HAL_UART_MspInit+0x100>)
 8001a2e:	f000 fb95 	bl	800215c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2026      	movs	r0, #38	; 0x26
 8001a38:	f000 fb37 	bl	80020aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a3c:	2026      	movs	r0, #38	; 0x26
 8001a3e:	f000 fb50 	bl	80020e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a42:	e031      	b.n	8001aa8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_UART_MspInit+0x104>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d12c      	bne.n	8001aa8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 8001a58:	f043 0320 	orr.w	r3, r3, #32
 8001a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f003 0320 	and.w	r3, r3, #32
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a10      	ldr	r2, [pc, #64]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b0e      	ldr	r3, [pc, #56]	; (8001ab4 <HAL_UART_MspInit+0xfc>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a86:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a94:	2303      	movs	r3, #3
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a98:	2308      	movs	r3, #8
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <HAL_UART_MspInit+0x100>)
 8001aa4:	f000 fb5a 	bl	800215c <HAL_GPIO_Init>
}
 8001aa8:	bf00      	nop
 8001aaa:	3730      	adds	r7, #48	; 0x30
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40004400 	.word	0x40004400
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40011400 	.word	0x40011400

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac4:	bf00      	nop
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b14:	f000 f9ac 	bl	8001e70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* A hyperframe is time between 2 consecutive UART interrrupts in this scenario */
  hyperframeTime++;
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <SysTick_Handler+0x18>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <SysTick_Handler+0x18>)
 8001b22:	801a      	strh	r2, [r3, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	20000200 	.word	0x20000200

08001b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b30:	4819      	ldr	r0, [pc, #100]	; (8001b98 <USART2_IRQHandler+0x6c>)
 8001b32:	f001 fa6b 	bl	800300c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)bufferRx, 1 );
 8001b36:	2201      	movs	r2, #1
 8001b38:	4918      	ldr	r1, [pc, #96]	; (8001b9c <USART2_IRQHandler+0x70>)
 8001b3a:	4817      	ldr	r0, [pc, #92]	; (8001b98 <USART2_IRQHandler+0x6c>)
 8001b3c:	f001 fa11 	bl	8002f62 <HAL_UART_Receive_IT>
   // write the bytes to our Command buffer
   commBuff[commBuff_index] = bufferRx[0];
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <USART2_IRQHandler+0x74>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a15      	ldr	r2, [pc, #84]	; (8001b9c <USART2_IRQHandler+0x70>)
 8001b46:	7811      	ldrb	r1, [r2, #0]
 8001b48:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <USART2_IRQHandler+0x78>)
 8001b4a:	54d1      	strb	r1, [r2, r3]
   if (bufferRx[0] == '\r' || bufferRx[0] == '\n')
 8001b4c:	4b13      	ldr	r3, [pc, #76]	; (8001b9c <USART2_IRQHandler+0x70>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b0d      	cmp	r3, #13
 8001b52:	d003      	beq.n	8001b5c <USART2_IRQHandler+0x30>
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <USART2_IRQHandler+0x70>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b0a      	cmp	r3, #10
 8001b5a:	d116      	bne.n	8001b8a <USART2_IRQHandler+0x5e>
   {
       UartReady = SET;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <USART2_IRQHandler+0x7c>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	701a      	strb	r2, [r3, #0]
       HAL_UART_Transmit(&huart2, (uint8_t*)commBuff, 500, 100);
 8001b62:	2364      	movs	r3, #100	; 0x64
 8001b64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <USART2_IRQHandler+0x78>)
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <USART2_IRQHandler+0x6c>)
 8001b6c:	f001 f91b 	bl	8002da6 <HAL_UART_Transmit>
       sent_index=commBuff_index;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <USART2_IRQHandler+0x74>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <USART2_IRQHandler+0x80>)
 8001b76:	6013      	str	r3, [r2, #0]
       bufferRx[0] = '\0';
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <USART2_IRQHandler+0x70>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	701a      	strb	r2, [r3, #0]
       commBuff_index = 0;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <USART2_IRQHandler+0x74>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
       newData = TRUE;  
 8001b84:	4b0a      	ldr	r3, [pc, #40]	; (8001bb0 <USART2_IRQHandler+0x84>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
   }
   // use normal transmit (not transmit_IT) so we don't
   // get duplicates in the buffer
   // TODO - stop using this dirty hack...
   //HAL_UART_Transmit(&huart2, bufferRx, 5,100);
   commBuff_index++;
 8001b8a:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <USART2_IRQHandler+0x74>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4a03      	ldr	r2, [pc, #12]	; (8001ba0 <USART2_IRQHandler+0x74>)
 8001b92:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000162c 	.word	0x2000162c
 8001b9c:	20001204 	.word	0x20001204
 8001ba0:	2000023c 	.word	0x2000023c
 8001ba4:	2000060c 	.word	0x2000060c
 8001ba8:	20000234 	.word	0x20000234
 8001bac:	20000238 	.word	0x20000238
 8001bb0:	20000235 	.word	0x20000235

08001bb4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <ITM_SendChar+0x48>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <ITM_SendChar+0x48>)
 8001bc4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <ITM_SendChar+0x4c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <ITM_SendChar+0x4c>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001bd6:	bf00      	nop
 8001bd8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f8      	beq.n	8001bd8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001be6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	6013      	str	r3, [r2, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	e000edfc 	.word	0xe000edfc
 8001c00:	e0000e00 	.word	0xe0000e00

08001c04 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e00a      	b.n	8001c2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c16:	f3af 8000 	nop.w
 8001c1a:	4601      	mov	r1, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	60ba      	str	r2, [r7, #8]
 8001c22:	b2ca      	uxtb	r2, r1
 8001c24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf0      	blt.n	8001c16 <_read+0x12>
	}

return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	e009      	b.n	8001c64 <_write+0x26>
	{
		/*__io_putchar(*ptr++);*/
		ITM_SendChar(*ptr++);
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	60ba      	str	r2, [r7, #8]
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ffab 	bl	8001bb4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	dbf1      	blt.n	8001c50 <_write+0x12>
	}
	return len;
 8001c6c:	687b      	ldr	r3, [r7, #4]
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_close>:

int _close(int file)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <_isatty>:

int _isatty(int file)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cb6:	2301      	movs	r3, #1
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
	return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
	...

08001ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce8:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <_sbrk+0x5c>)
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <_sbrk+0x60>)
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf4:	4b13      	ldr	r3, [pc, #76]	; (8001d44 <_sbrk+0x64>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d102      	bne.n	8001d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <_sbrk+0x64>)
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <_sbrk+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d10:	f001 ff86 	bl	8003c20 <__errno>
 8001d14:	4602      	mov	r2, r0
 8001d16:	230c      	movs	r3, #12
 8001d18:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e009      	b.n	8001d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d20:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <_sbrk+0x64>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <_sbrk+0x64>)
 8001d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d32:	68fb      	ldr	r3, [r7, #12]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20020000 	.word	0x20020000
 8001d40:	00000400 	.word	0x00000400
 8001d44:	20000240 	.word	0x20000240
 8001d48:	20001678 	.word	0x20001678

08001d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <SystemInit+0x28>)
 8001d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d56:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <SystemInit+0x28>)
 8001d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <SystemInit+0x28>)
 8001d62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d66:	609a      	str	r2, [r3, #8]
#endif
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d7e:	e003      	b.n	8001d88 <LoopCopyDataInit>

08001d80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d86:	3104      	adds	r1, #4

08001d88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d90:	d3f6      	bcc.n	8001d80 <CopyDataInit>
  ldr  r2, =_sbss
 8001d92:	4a0b      	ldr	r2, [pc, #44]	; (8001dc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d94:	e002      	b.n	8001d9c <LoopFillZerobss>

08001d96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d98:	f842 3b04 	str.w	r3, [r2], #4

08001d9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001da0:	d3f9      	bcc.n	8001d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001da2:	f7ff ffd3 	bl	8001d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001da6:	f001 ff41 	bl	8003c2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001daa:	f7ff fc7d 	bl	80016a8 <main>
  bx  lr    
 8001dae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001db4:	08008480 	.word	0x08008480
  ldr  r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001dbc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001dc0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001dc4:	20001674 	.word	0x20001674

08001dc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc8:	e7fe      	b.n	8001dc8 <ADC_IRQHandler>
	...

08001dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd0:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_Init+0x40>)
 8001dd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <HAL_Init+0x40>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_Init+0x40>)
 8001de2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de8:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <HAL_Init+0x40>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a07      	ldr	r2, [pc, #28]	; (8001e0c <HAL_Init+0x40>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f000 f94d 	bl	8002094 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 f808 	bl	8001e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e00:	f7ff fdb2 	bl	8001968 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <HAL_InitTick+0x54>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	4b12      	ldr	r3, [pc, #72]	; (8001e68 <HAL_InitTick+0x58>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f965 	bl	80020fe <HAL_SYSTICK_Config>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00e      	b.n	8001e5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b0f      	cmp	r3, #15
 8001e42:	d80a      	bhi.n	8001e5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e44:	2200      	movs	r2, #0
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	f04f 30ff 	mov.w	r0, #4294967295
 8001e4c:	f000 f92d 	bl	80020aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e50:	4a06      	ldr	r2, [pc, #24]	; (8001e6c <HAL_InitTick+0x5c>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000000 	.word	0x20000000
 8001e68:	20000008 	.word	0x20000008
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008
 8001e94:	2000166c 	.word	0x2000166c

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000166c 	.word	0x2000166c

08001eb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001eb8:	f7ff ffee 	bl	8001e98 <HAL_GetTick>
 8001ebc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec8:	d005      	beq.n	8001ed6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_Delay+0x40>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ed6:	bf00      	nop
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	68fa      	ldr	r2, [r7, #12]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d8f7      	bhi.n	8001ed8 <HAL_Delay+0x28>
  {
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f10:	4013      	ands	r3, r2
 8001f12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <__NVIC_SetPriorityGrouping+0x44>)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	60d3      	str	r3, [r2, #12]
}
 8001f2c:	bf00      	nop
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000ed00 	.word	0xe000ed00

08001f3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f40:	4b04      	ldr	r3, [pc, #16]	; (8001f54 <__NVIC_GetPriorityGrouping+0x18>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	0a1b      	lsrs	r3, r3, #8
 8001f46:	f003 0307 	and.w	r3, r3, #7
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db0b      	blt.n	8001f82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	f003 021f 	and.w	r2, r3, #31
 8001f70:	4907      	ldr	r1, [pc, #28]	; (8001f90 <__NVIC_EnableIRQ+0x38>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	2001      	movs	r0, #1
 8001f7a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f82:	bf00      	nop
 8001f84:	370c      	adds	r7, #12
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	e000e100 	.word	0xe000e100

08001f94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	6039      	str	r1, [r7, #0]
 8001f9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db0a      	blt.n	8001fbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	b2da      	uxtb	r2, r3
 8001fac:	490c      	ldr	r1, [pc, #48]	; (8001fe0 <__NVIC_SetPriority+0x4c>)
 8001fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb2:	0112      	lsls	r2, r2, #4
 8001fb4:	b2d2      	uxtb	r2, r2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fbc:	e00a      	b.n	8001fd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4908      	ldr	r1, [pc, #32]	; (8001fe4 <__NVIC_SetPriority+0x50>)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	f003 030f 	and.w	r3, r3, #15
 8001fca:	3b04      	subs	r3, #4
 8001fcc:	0112      	lsls	r2, r2, #4
 8001fce:	b2d2      	uxtb	r2, r2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	761a      	strb	r2, [r3, #24]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000e100 	.word	0xe000e100
 8001fe4:	e000ed00 	.word	0xe000ed00

08001fe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	; 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f1c3 0307 	rsb	r3, r3, #7
 8002002:	2b04      	cmp	r3, #4
 8002004:	bf28      	it	cs
 8002006:	2304      	movcs	r3, #4
 8002008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	3304      	adds	r3, #4
 800200e:	2b06      	cmp	r3, #6
 8002010:	d902      	bls.n	8002018 <NVIC_EncodePriority+0x30>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3b03      	subs	r3, #3
 8002016:	e000      	b.n	800201a <NVIC_EncodePriority+0x32>
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	f04f 32ff 	mov.w	r2, #4294967295
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	fa02 f303 	lsl.w	r3, r2, r3
 8002026:	43da      	mvns	r2, r3
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	401a      	ands	r2, r3
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002030:	f04f 31ff 	mov.w	r1, #4294967295
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	43d9      	mvns	r1, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002040:	4313      	orrs	r3, r2
         );
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
	...

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002060:	d301      	bcc.n	8002066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002062:	2301      	movs	r3, #1
 8002064:	e00f      	b.n	8002086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <SysTick_Config+0x40>)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3b01      	subs	r3, #1
 800206c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800206e:	210f      	movs	r1, #15
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f7ff ff8e 	bl	8001f94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <SysTick_Config+0x40>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800207e:	4b04      	ldr	r3, [pc, #16]	; (8002090 <SysTick_Config+0x40>)
 8002080:	2207      	movs	r2, #7
 8002082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	e000e010 	.word	0xe000e010

08002094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ff29 	bl	8001ef4 <__NVIC_SetPriorityGrouping>
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b086      	sub	sp, #24
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4603      	mov	r3, r0
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020bc:	f7ff ff3e 	bl	8001f3c <__NVIC_GetPriorityGrouping>
 80020c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	6978      	ldr	r0, [r7, #20]
 80020c8:	f7ff ff8e 	bl	8001fe8 <NVIC_EncodePriority>
 80020cc:	4602      	mov	r2, r0
 80020ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d2:	4611      	mov	r1, r2
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff ff5d 	bl	8001f94 <__NVIC_SetPriority>
}
 80020da:	bf00      	nop
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	4603      	mov	r3, r0
 80020ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff31 	bl	8001f58 <__NVIC_EnableIRQ>
}
 80020f6:	bf00      	nop
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffa2 	bl	8002050 <SysTick_Config>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d004      	beq.n	8002134 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e00c      	b.n	800214e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2205      	movs	r2, #5
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800215c:	b480      	push	{r7}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002172:	2300      	movs	r3, #0
 8002174:	61fb      	str	r3, [r7, #28]
 8002176:	e159      	b.n	800242c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002178:	2201      	movs	r2, #1
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	429a      	cmp	r2, r3
 8002192:	f040 8148 	bne.w	8002426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d00b      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d007      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021aa:	2b11      	cmp	r3, #17
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b12      	cmp	r3, #18
 80021b4:	d130      	bne.n	8002218 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	2203      	movs	r2, #3
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	091b      	lsrs	r3, r3, #4
 8002202:	f003 0201 	and.w	r2, r3, #1
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	4313      	orrs	r3, r2
 8002210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0xfc>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b12      	cmp	r3, #18
 8002256:	d123      	bne.n	80022a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	08da      	lsrs	r2, r3, #3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3208      	adds	r2, #8
 8002260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	220f      	movs	r2, #15
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	43db      	mvns	r3, r3
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4013      	ands	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	691a      	ldr	r2, [r3, #16]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4313      	orrs	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	08da      	lsrs	r2, r3, #3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	3208      	adds	r2, #8
 800229a:	69b9      	ldr	r1, [r7, #24]
 800229c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	2203      	movs	r2, #3
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0203 	and.w	r2, r3, #3
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f000 80a2 	beq.w	8002426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b56      	ldr	r3, [pc, #344]	; (8002440 <HAL_GPIO_Init+0x2e4>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	4a55      	ldr	r2, [pc, #340]	; (8002440 <HAL_GPIO_Init+0x2e4>)
 80022ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f0:	6453      	str	r3, [r2, #68]	; 0x44
 80022f2:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_GPIO_Init+0x2e4>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fe:	4a51      	ldr	r2, [pc, #324]	; (8002444 <HAL_GPIO_Init+0x2e8>)
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	089b      	lsrs	r3, r3, #2
 8002304:	3302      	adds	r3, #2
 8002306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	220f      	movs	r2, #15
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a48      	ldr	r2, [pc, #288]	; (8002448 <HAL_GPIO_Init+0x2ec>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d019      	beq.n	800235e <HAL_GPIO_Init+0x202>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a47      	ldr	r2, [pc, #284]	; (800244c <HAL_GPIO_Init+0x2f0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <HAL_GPIO_Init+0x1fe>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a46      	ldr	r2, [pc, #280]	; (8002450 <HAL_GPIO_Init+0x2f4>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00d      	beq.n	8002356 <HAL_GPIO_Init+0x1fa>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a45      	ldr	r2, [pc, #276]	; (8002454 <HAL_GPIO_Init+0x2f8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d007      	beq.n	8002352 <HAL_GPIO_Init+0x1f6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a44      	ldr	r2, [pc, #272]	; (8002458 <HAL_GPIO_Init+0x2fc>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d101      	bne.n	800234e <HAL_GPIO_Init+0x1f2>
 800234a:	2304      	movs	r3, #4
 800234c:	e008      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800234e:	2307      	movs	r3, #7
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x204>
 8002352:	2303      	movs	r3, #3
 8002354:	e004      	b.n	8002360 <HAL_GPIO_Init+0x204>
 8002356:	2302      	movs	r3, #2
 8002358:	e002      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x204>
 800235e:	2300      	movs	r3, #0
 8002360:	69fa      	ldr	r2, [r7, #28]
 8002362:	f002 0203 	and.w	r2, r2, #3
 8002366:	0092      	lsls	r2, r2, #2
 8002368:	4093      	lsls	r3, r2
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	4313      	orrs	r3, r2
 800236e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002370:	4934      	ldr	r1, [pc, #208]	; (8002444 <HAL_GPIO_Init+0x2e8>)
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	089b      	lsrs	r3, r3, #2
 8002376:	3302      	adds	r3, #2
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237e:	4b37      	ldr	r3, [pc, #220]	; (800245c <HAL_GPIO_Init+0x300>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023a2:	4a2e      	ldr	r2, [pc, #184]	; (800245c <HAL_GPIO_Init+0x300>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a8:	4b2c      	ldr	r3, [pc, #176]	; (800245c <HAL_GPIO_Init+0x300>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023cc:	4a23      	ldr	r2, [pc, #140]	; (800245c <HAL_GPIO_Init+0x300>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <HAL_GPIO_Init+0x300>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d003      	beq.n	80023f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f6:	4a19      	ldr	r2, [pc, #100]	; (800245c <HAL_GPIO_Init+0x300>)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023fc:	4b17      	ldr	r3, [pc, #92]	; (800245c <HAL_GPIO_Init+0x300>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002420:	4a0e      	ldr	r2, [pc, #56]	; (800245c <HAL_GPIO_Init+0x300>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3301      	adds	r3, #1
 800242a:	61fb      	str	r3, [r7, #28]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	2b0f      	cmp	r3, #15
 8002430:	f67f aea2 	bls.w	8002178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002434:	bf00      	nop
 8002436:	3724      	adds	r7, #36	; 0x24
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e25b      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d075      	beq.n	800259e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024b2:	4ba3      	ldr	r3, [pc, #652]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d00c      	beq.n	80024d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024be:	4ba0      	ldr	r3, [pc, #640]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d112      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b9d      	ldr	r3, [pc, #628]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024d6:	d10b      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	4b99      	ldr	r3, [pc, #612]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d05b      	beq.n	800259c <HAL_RCC_OscConfig+0x108>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d157      	bne.n	800259c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e236      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f8:	d106      	bne.n	8002508 <HAL_RCC_OscConfig+0x74>
 80024fa:	4b91      	ldr	r3, [pc, #580]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a90      	ldr	r2, [pc, #576]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e01d      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x98>
 8002512:	4b8b      	ldr	r3, [pc, #556]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a8a      	ldr	r2, [pc, #552]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a87      	ldr	r2, [pc, #540]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	e00b      	b.n	8002544 <HAL_RCC_OscConfig+0xb0>
 800252c:	4b84      	ldr	r3, [pc, #528]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a83      	ldr	r2, [pc, #524]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002536:	6013      	str	r3, [r2, #0]
 8002538:	4b81      	ldr	r3, [pc, #516]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a80      	ldr	r2, [pc, #512]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 800253e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d013      	beq.n	8002574 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254c:	f7ff fca4 	bl	8001e98 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002554:	f7ff fca0 	bl	8001e98 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b64      	cmp	r3, #100	; 0x64
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e1fb      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0xc0>
 8002572:	e014      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff fc90 	bl	8001e98 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800257c:	f7ff fc8c 	bl	8001e98 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b64      	cmp	r3, #100	; 0x64
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e1e7      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800258e:	4b6c      	ldr	r3, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0xe8>
 800259a:	e000      	b.n	800259e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d063      	beq.n	8002672 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025aa:	4b65      	ldr	r3, [pc, #404]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d00b      	beq.n	80025ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025b6:	4b62      	ldr	r3, [pc, #392]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025be:	2b08      	cmp	r3, #8
 80025c0:	d11c      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d116      	bne.n	80025fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ce:	4b5c      	ldr	r3, [pc, #368]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d005      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e1bb      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	4b56      	ldr	r3, [pc, #344]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	4952      	ldr	r1, [pc, #328]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fa:	e03a      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d020      	beq.n	8002646 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 8002606:	2201      	movs	r2, #1
 8002608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260a:	f7ff fc45 	bl	8001e98 <HAL_GetTick>
 800260e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002610:	e008      	b.n	8002624 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002612:	f7ff fc41 	bl	8001e98 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e19c      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002624:	4b46      	ldr	r3, [pc, #280]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0f0      	beq.n	8002612 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b43      	ldr	r3, [pc, #268]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	4940      	ldr	r1, [pc, #256]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	4313      	orrs	r3, r2
 8002642:	600b      	str	r3, [r1, #0]
 8002644:	e015      	b.n	8002672 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002646:	4b3f      	ldr	r3, [pc, #252]	; (8002744 <HAL_RCC_OscConfig+0x2b0>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7ff fc24 	bl	8001e98 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002654:	f7ff fc20 	bl	8001e98 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e17b      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0308 	and.w	r3, r3, #8
 800267a:	2b00      	cmp	r3, #0
 800267c:	d030      	beq.n	80026e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <HAL_RCC_OscConfig+0x2b4>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7ff fc04 	bl	8001e98 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002694:	f7ff fc00 	bl	8001e98 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e15b      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x200>
 80026b2:	e015      	b.n	80026e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <HAL_RCC_OscConfig+0x2b4>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ba:	f7ff fbed 	bl	8001e98 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c2:	f7ff fbe9 	bl	8001e98 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e144      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d4:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80026d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80a0 	beq.w	800282e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ee:	2300      	movs	r3, #0
 80026f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10f      	bne.n	800271e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	4a0e      	ldr	r2, [pc, #56]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800270c:	6413      	str	r3, [r2, #64]	; 0x40
 800270e:	4b0c      	ldr	r3, [pc, #48]	; (8002740 <HAL_RCC_OscConfig+0x2ac>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002716:	60bb      	str	r3, [r7, #8]
 8002718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b0b      	ldr	r3, [pc, #44]	; (800274c <HAL_RCC_OscConfig+0x2b8>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d121      	bne.n	800276e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_RCC_OscConfig+0x2b8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a07      	ldr	r2, [pc, #28]	; (800274c <HAL_RCC_OscConfig+0x2b8>)
 8002730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002734:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002736:	f7ff fbaf 	bl	8001e98 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	e011      	b.n	8002762 <HAL_RCC_OscConfig+0x2ce>
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	42470000 	.word	0x42470000
 8002748:	42470e80 	.word	0x42470e80
 800274c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7ff fba2 	bl	8001e98 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e0fd      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002762:	4b81      	ldr	r3, [pc, #516]	; (8002968 <HAL_RCC_OscConfig+0x4d4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f0      	beq.n	8002750 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d106      	bne.n	8002784 <HAL_RCC_OscConfig+0x2f0>
 8002776:	4b7d      	ldr	r3, [pc, #500]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 8002778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277a:	4a7c      	ldr	r2, [pc, #496]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6713      	str	r3, [r2, #112]	; 0x70
 8002782:	e01c      	b.n	80027be <HAL_RCC_OscConfig+0x32a>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b05      	cmp	r3, #5
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_OscConfig+0x312>
 800278c:	4b77      	ldr	r3, [pc, #476]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a76      	ldr	r2, [pc, #472]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 8002792:	f043 0304 	orr.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
 8002798:	4b74      	ldr	r3, [pc, #464]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a73      	ldr	r2, [pc, #460]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 800279e:	f043 0301 	orr.w	r3, r3, #1
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
 80027a4:	e00b      	b.n	80027be <HAL_RCC_OscConfig+0x32a>
 80027a6:	4b71      	ldr	r3, [pc, #452]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a70      	ldr	r2, [pc, #448]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	4b6e      	ldr	r3, [pc, #440]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b6:	4a6d      	ldr	r2, [pc, #436]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 80027b8:	f023 0304 	bic.w	r3, r3, #4
 80027bc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d015      	beq.n	80027f2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c6:	f7ff fb67 	bl	8001e98 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027cc:	e00a      	b.n	80027e4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ce:	f7ff fb63 	bl	8001e98 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027dc:	4293      	cmp	r3, r2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0bc      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e4:	4b61      	ldr	r3, [pc, #388]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ee      	beq.n	80027ce <HAL_RCC_OscConfig+0x33a>
 80027f0:	e014      	b.n	800281c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7ff fb51 	bl	8001e98 <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027f8:	e00a      	b.n	8002810 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fa:	f7ff fb4d 	bl	8001e98 <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	f241 3288 	movw	r2, #5000	; 0x1388
 8002808:	4293      	cmp	r3, r2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e0a6      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002810:	4b56      	ldr	r3, [pc, #344]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 8002812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d1ee      	bne.n	80027fa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800281c:	7dfb      	ldrb	r3, [r7, #23]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002822:	4b52      	ldr	r3, [pc, #328]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	4a51      	ldr	r2, [pc, #324]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 8002828:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8092 	beq.w	800295c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002838:	4b4c      	ldr	r3, [pc, #304]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
 8002840:	2b08      	cmp	r3, #8
 8002842:	d05c      	beq.n	80028fe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b02      	cmp	r3, #2
 800284a:	d141      	bne.n	80028d0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284c:	4b48      	ldr	r3, [pc, #288]	; (8002970 <HAL_RCC_OscConfig+0x4dc>)
 800284e:	2200      	movs	r2, #0
 8002850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002852:	f7ff fb21 	bl	8001e98 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800285a:	f7ff fb1d 	bl	8001e98 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e078      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286c:	4b3f      	ldr	r3, [pc, #252]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69da      	ldr	r2, [r3, #28]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	019b      	lsls	r3, r3, #6
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	085b      	lsrs	r3, r3, #1
 8002890:	3b01      	subs	r3, #1
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	431a      	orrs	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289a:	061b      	lsls	r3, r3, #24
 800289c:	4933      	ldr	r1, [pc, #204]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a2:	4b33      	ldr	r3, [pc, #204]	; (8002970 <HAL_RCC_OscConfig+0x4dc>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a8:	f7ff faf6 	bl	8001e98 <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b0:	f7ff faf2 	bl	8001e98 <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e04d      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b2a      	ldr	r3, [pc, #168]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d0f0      	beq.n	80028b0 <HAL_RCC_OscConfig+0x41c>
 80028ce:	e045      	b.n	800295c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x4dc>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d6:	f7ff fadf 	bl	8001e98 <HAL_GetTick>
 80028da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff fadb 	bl	8001e98 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e036      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f0:	4b1e      	ldr	r3, [pc, #120]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f0      	bne.n	80028de <HAL_RCC_OscConfig+0x44a>
 80028fc:	e02e      	b.n	800295c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e029      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800290a:	4b18      	ldr	r3, [pc, #96]	; (800296c <HAL_RCC_OscConfig+0x4d8>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	429a      	cmp	r2, r3
 800291c:	d11c      	bne.n	8002958 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d115      	bne.n	8002958 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002932:	4013      	ands	r3, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002938:	4293      	cmp	r3, r2
 800293a:	d10d      	bne.n	8002958 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d106      	bne.n	8002958 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002954:	429a      	cmp	r2, r3
 8002956:	d001      	beq.n	800295c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	40007000 	.word	0x40007000
 800296c:	40023800 	.word	0x40023800
 8002970:	42470060 	.word	0x42470060

08002974 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d101      	bne.n	8002988 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0cc      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002988:	4b68      	ldr	r3, [pc, #416]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 030f 	and.w	r3, r3, #15
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	429a      	cmp	r2, r3
 8002994:	d90c      	bls.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002996:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b63      	ldr	r3, [pc, #396]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0b8      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d020      	beq.n	80029fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c8:	4b59      	ldr	r3, [pc, #356]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4a58      	ldr	r2, [pc, #352]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0308 	and.w	r3, r3, #8
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e0:	4b53      	ldr	r3, [pc, #332]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a52      	ldr	r2, [pc, #328]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ec:	4b50      	ldr	r3, [pc, #320]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	494d      	ldr	r1, [pc, #308]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d044      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d107      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	4b47      	ldr	r3, [pc, #284]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d119      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e07f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d003      	beq.n	8002a32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d107      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a32:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d109      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e06f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e067      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a52:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 0203 	bic.w	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4934      	ldr	r1, [pc, #208]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a64:	f7ff fa18 	bl	8001e98 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6a:	e00a      	b.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6c:	f7ff fa14 	bl	8001e98 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e04f      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 020c 	and.w	r2, r3, #12
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d1eb      	bne.n	8002a6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a94:	4b25      	ldr	r3, [pc, #148]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 030f 	and.w	r3, r3, #15
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d20c      	bcs.n	8002abc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aaa:	4b20      	ldr	r3, [pc, #128]	; (8002b2c <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d001      	beq.n	8002abc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e032      	b.n	8002b22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d008      	beq.n	8002ada <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4916      	ldr	r1, [pc, #88]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0308 	and.w	r3, r3, #8
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d009      	beq.n	8002afa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ae6:	4b12      	ldr	r3, [pc, #72]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	490e      	ldr	r1, [pc, #56]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002afa:	f000 f821 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002afe:	4601      	mov	r1, r0
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	091b      	lsrs	r3, r3, #4
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <HAL_RCC_ClockConfig+0x1c0>)
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b12:	4a09      	ldr	r2, [pc, #36]	; (8002b38 <HAL_RCC_ClockConfig+0x1c4>)
 8002b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff f978 	bl	8001e10 <HAL_InitTick>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40023c00 	.word	0x40023c00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	08008134 	.word	0x08008134
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	20000004 	.word	0x20000004

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b42:	b085      	sub	sp, #20
 8002b44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b46:	2300      	movs	r3, #0
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b56:	4b50      	ldr	r3, [pc, #320]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d007      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x32>
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d008      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x38>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 808d 	bne.w	8002c86 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4b4b      	ldr	r3, [pc, #300]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b6e:	60bb      	str	r3, [r7, #8]
       break;
 8002b70:	e08c      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b72:	4b4b      	ldr	r3, [pc, #300]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002b74:	60bb      	str	r3, [r7, #8]
      break;
 8002b76:	e089      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b78:	4b47      	ldr	r3, [pc, #284]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b82:	4b45      	ldr	r3, [pc, #276]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d023      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b8e:	4b42      	ldr	r3, [pc, #264]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	099b      	lsrs	r3, r3, #6
 8002b94:	f04f 0400 	mov.w	r4, #0
 8002b98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	ea03 0501 	and.w	r5, r3, r1
 8002ba4:	ea04 0602 	and.w	r6, r4, r2
 8002ba8:	4a3d      	ldr	r2, [pc, #244]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002baa:	fb02 f106 	mul.w	r1, r2, r6
 8002bae:	2200      	movs	r2, #0
 8002bb0:	fb02 f205 	mul.w	r2, r2, r5
 8002bb4:	440a      	add	r2, r1
 8002bb6:	493a      	ldr	r1, [pc, #232]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002bb8:	fba5 0101 	umull	r0, r1, r5, r1
 8002bbc:	1853      	adds	r3, r2, r1
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f04f 0400 	mov.w	r4, #0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4623      	mov	r3, r4
 8002bca:	f7fe f865 	bl	8000c98 <__aeabi_uldivmod>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	460c      	mov	r4, r1
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e049      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd6:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	f04f 0400 	mov.w	r4, #0
 8002be0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	ea03 0501 	and.w	r5, r3, r1
 8002bec:	ea04 0602 	and.w	r6, r4, r2
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	4632      	mov	r2, r6
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	f04f 0400 	mov.w	r4, #0
 8002bfc:	0154      	lsls	r4, r2, #5
 8002bfe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c02:	014b      	lsls	r3, r1, #5
 8002c04:	4619      	mov	r1, r3
 8002c06:	4622      	mov	r2, r4
 8002c08:	1b49      	subs	r1, r1, r5
 8002c0a:	eb62 0206 	sbc.w	r2, r2, r6
 8002c0e:	f04f 0300 	mov.w	r3, #0
 8002c12:	f04f 0400 	mov.w	r4, #0
 8002c16:	0194      	lsls	r4, r2, #6
 8002c18:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c1c:	018b      	lsls	r3, r1, #6
 8002c1e:	1a5b      	subs	r3, r3, r1
 8002c20:	eb64 0402 	sbc.w	r4, r4, r2
 8002c24:	f04f 0100 	mov.w	r1, #0
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	00e2      	lsls	r2, r4, #3
 8002c2e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c32:	00d9      	lsls	r1, r3, #3
 8002c34:	460b      	mov	r3, r1
 8002c36:	4614      	mov	r4, r2
 8002c38:	195b      	adds	r3, r3, r5
 8002c3a:	eb44 0406 	adc.w	r4, r4, r6
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	02a2      	lsls	r2, r4, #10
 8002c48:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c4c:	0299      	lsls	r1, r3, #10
 8002c4e:	460b      	mov	r3, r1
 8002c50:	4614      	mov	r4, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	4621      	mov	r1, r4
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f04f 0400 	mov.w	r4, #0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	4623      	mov	r3, r4
 8002c60:	f7fe f81a 	bl	8000c98 <__aeabi_uldivmod>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	0c1b      	lsrs	r3, r3, #16
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	3301      	adds	r3, #1
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	60bb      	str	r3, [r7, #8]
      break;
 8002c84:	e002      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c88:	60bb      	str	r3, [r7, #8]
      break;
 8002c8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3714      	adds	r7, #20
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	00f42400 	.word	0x00f42400
 8002ca0:	017d7840 	.word	0x017d7840

08002ca4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	20000000 	.word	0x20000000

08002cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cc0:	f7ff fff0 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	0a9b      	lsrs	r3, r3, #10
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4a03      	ldr	r2, [pc, #12]	; (8002ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd2:	5cd3      	ldrb	r3, [r2, r3]
 8002cd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	08008144 	.word	0x08008144

08002ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ce8:	f7ff ffdc 	bl	8002ca4 <HAL_RCC_GetHCLKFreq>
 8002cec:	4601      	mov	r1, r0
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	0b5b      	lsrs	r3, r3, #13
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	4a03      	ldr	r2, [pc, #12]	; (8002d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40023800 	.word	0x40023800
 8002d08:	08008144 	.word	0x08008144

08002d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e03f      	b.n	8002d9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d106      	bne.n	8002d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fe40 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2224      	movs	r2, #36	; 0x24
 8002d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fbe5 	bl	8003520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b088      	sub	sp, #32
 8002daa:	af02      	add	r7, sp, #8
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	603b      	str	r3, [r7, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	f040 8083 	bne.w	8002ece <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d002      	beq.n	8002dd4 <HAL_UART_Transmit+0x2e>
 8002dce:	88fb      	ldrh	r3, [r7, #6]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e07b      	b.n	8002ed0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d101      	bne.n	8002de6 <HAL_UART_Transmit+0x40>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e074      	b.n	8002ed0 <HAL_UART_Transmit+0x12a>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2221      	movs	r2, #33	; 0x21
 8002df8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002dfc:	f7ff f84c 	bl	8001e98 <HAL_GetTick>
 8002e00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	88fa      	ldrh	r2, [r7, #6]
 8002e06:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	88fa      	ldrh	r2, [r7, #6]
 8002e0c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002e16:	e042      	b.n	8002e9e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e2e:	d122      	bne.n	8002e76 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	9300      	str	r3, [sp, #0]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2200      	movs	r2, #0
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa04 	bl	8003248 <UART_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e042      	b.n	8002ed0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	461a      	mov	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e5c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d103      	bne.n	8002e6e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	3302      	adds	r3, #2
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	e017      	b.n	8002e9e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	3301      	adds	r3, #1
 8002e72:	60bb      	str	r3, [r7, #8]
 8002e74:	e013      	b.n	8002e9e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f9e1 	bl	8003248 <UART_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e01f      	b.n	8002ed0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	60ba      	str	r2, [r7, #8]
 8002e96:	781a      	ldrb	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1b7      	bne.n	8002e18 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2140      	movs	r1, #64	; 0x40
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f9c8 	bl	8003248 <UART_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e006      	b.n	8002ed0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002ece:	2302      	movs	r3, #2
  }
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	d130      	bne.n	8002f54 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d002      	beq.n	8002efe <HAL_UART_Transmit_IT+0x26>
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e029      	b.n	8002f56 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d101      	bne.n	8002f10 <HAL_UART_Transmit_IT+0x38>
 8002f0c:	2302      	movs	r3, #2
 8002f0e:	e022      	b.n	8002f56 <HAL_UART_Transmit_IT+0x7e>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68ba      	ldr	r2, [r7, #8]
 8002f1c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	88fa      	ldrh	r2, [r7, #6]
 8002f22:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	88fa      	ldrh	r2, [r7, #6]
 8002f28:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2221      	movs	r2, #33	; 0x21
 8002f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	68da      	ldr	r2, [r3, #12]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f4e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	60f8      	str	r0, [r7, #12]
 8002f6a:	60b9      	str	r1, [r7, #8]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b20      	cmp	r3, #32
 8002f7a:	d140      	bne.n	8002ffe <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d002      	beq.n	8002f88 <HAL_UART_Receive_IT+0x26>
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e039      	b.n	8003000 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_UART_Receive_IT+0x38>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e032      	b.n	8003000 <HAL_UART_Receive_IT+0x9e>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	88fa      	ldrh	r2, [r7, #6]
 8002fac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	88fa      	ldrh	r2, [r7, #6]
 8002fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2222      	movs	r2, #34	; 0x22
 8002fbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fd8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0220 	orr.w	r2, r2, #32
 8002ff8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e000      	b.n	8003000 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002ffe:	2302      	movs	r3, #2
  }
}
 8003000:	4618      	mov	r0, r3
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800302c:	2300      	movs	r3, #0
 800302e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003030:	2300      	movs	r3, #0
 8003032:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0320 	and.w	r3, r3, #32
 8003048:	2b00      	cmp	r3, #0
 800304a:	d008      	beq.n	800305e <HAL_UART_IRQHandler+0x52>
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9e0 	bl	800341c <UART_Receive_IT>
      return;
 800305c:	e0d1      	b.n	8003202 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	2b00      	cmp	r3, #0
 8003062:	f000 80b0 	beq.w	80031c6 <HAL_UART_IRQHandler+0x1ba>
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_UART_IRQHandler+0x70>
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80a5 	beq.w	80031c6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_UART_IRQHandler+0x90>
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003094:	f043 0201 	orr.w	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_UART_IRQHandler+0xb0>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	f043 0202 	orr.w	r2, r3, #2
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_UART_IRQHandler+0xd0>
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	f043 0204 	orr.w	r2, r3, #4
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00f      	beq.n	8003106 <HAL_UART_IRQHandler+0xfa>
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	f003 0320 	and.w	r3, r3, #32
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d104      	bne.n	80030fa <HAL_UART_IRQHandler+0xee>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d005      	beq.n	8003106 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fe:	f043 0208 	orr.w	r2, r3, #8
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d078      	beq.n	8003200 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_UART_IRQHandler+0x11c>
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f97a 	bl	800341c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003132:	2b40      	cmp	r3, #64	; 0x40
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <HAL_UART_IRQHandler+0x144>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d031      	beq.n	80031b4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f8c3 	bl	80032dc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d123      	bne.n	80031ac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695a      	ldr	r2, [r3, #20]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003172:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003178:	2b00      	cmp	r3, #0
 800317a:	d013      	beq.n	80031a4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003180:	4a21      	ldr	r2, [pc, #132]	; (8003208 <HAL_UART_IRQHandler+0x1fc>)
 8003182:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003188:	4618      	mov	r0, r3
 800318a:	f7fe ffc4 	bl	8002116 <HAL_DMA_Abort_IT>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d016      	beq.n	80031c2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800319e:	4610      	mov	r0, r2
 80031a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a2:	e00e      	b.n	80031c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f845 	bl	8003234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031aa:	e00a      	b.n	80031c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 f841 	bl	8003234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b2:	e006      	b.n	80031c2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 f83d 	bl	8003234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80031c0:	e01e      	b.n	8003200 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c2:	bf00      	nop
    return;
 80031c4:	e01c      	b.n	8003200 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d008      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1d6>
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f8b0 	bl	8003340 <UART_Transmit_IT>
    return;
 80031e0:	e00f      	b.n	8003202 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00a      	beq.n	8003202 <HAL_UART_IRQHandler+0x1f6>
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f8f8 	bl	80033ec <UART_EndTransmit_IT>
    return;
 80031fc:	bf00      	nop
 80031fe:	e000      	b.n	8003202 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003200:	bf00      	nop
  }
}
 8003202:	3720      	adds	r7, #32
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	08003319 	.word	0x08003319

0800320c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	603b      	str	r3, [r7, #0]
 8003254:	4613      	mov	r3, r2
 8003256:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003258:	e02c      	b.n	80032b4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003260:	d028      	beq.n	80032b4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <UART_WaitOnFlagUntilTimeout+0x30>
 8003268:	f7fe fe16 	bl	8001e98 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	429a      	cmp	r2, r3
 8003276:	d21d      	bcs.n	80032b4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68da      	ldr	r2, [r3, #12]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003286:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0201 	bic.w	r2, r2, #1
 8003296:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2220      	movs	r2, #32
 80032a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e00f      	b.n	80032d4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	4013      	ands	r3, r2
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d0c3      	beq.n	800325a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68da      	ldr	r2, [r3, #12]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032f2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695a      	ldr	r2, [r3, #20]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f022 0201 	bic.w	r2, r2, #1
 8003302:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2220      	movs	r2, #32
 8003308:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr

08003318 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff ff7e 	bl	8003234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b21      	cmp	r3, #33	; 0x21
 8003352:	d144      	bne.n	80033de <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d11a      	bne.n	8003394 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003372:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d105      	bne.n	8003388 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]
 8003386:	e00e      	b.n	80033a6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	621a      	str	r2, [r3, #32]
 8003392:	e008      	b.n	80033a6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	1c59      	adds	r1, r3, #1
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6211      	str	r1, [r2, #32]
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	4619      	mov	r1, r3
 80033b4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d10f      	bne.n	80033da <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033d8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003402:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fefd 	bl	800320c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3708      	adds	r7, #8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b22      	cmp	r3, #34	; 0x22
 800342e:	d171      	bne.n	8003514 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003438:	d123      	bne.n	8003482 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10e      	bne.n	8003466 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	b29b      	uxth	r3, r3
 8003450:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345e:	1c9a      	adds	r2, r3, #2
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	629a      	str	r2, [r3, #40]	; 0x28
 8003464:	e029      	b.n	80034ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	b29b      	uxth	r3, r3
 800346e:	b2db      	uxtb	r3, r3
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28
 8003480:	e01b      	b.n	80034ba <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10a      	bne.n	80034a0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6858      	ldr	r0, [r3, #4]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003494:	1c59      	adds	r1, r3, #1
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6291      	str	r1, [r2, #40]	; 0x28
 800349a:	b2c2      	uxtb	r2, r0
 800349c:	701a      	strb	r2, [r3, #0]
 800349e:	e00c      	b.n	80034ba <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ac:	1c58      	adds	r0, r3, #1
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	6288      	str	r0, [r1, #40]	; 0x28
 80034b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	4619      	mov	r1, r3
 80034c8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d120      	bne.n	8003510 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0220 	bic.w	r2, r2, #32
 80034dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68da      	ldr	r2, [r3, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 0201 	bic.w	r2, r2, #1
 80034fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2220      	movs	r2, #32
 8003502:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff fe8a 	bl	8003220 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e002      	b.n	8003516 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	689a      	ldr	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	431a      	orrs	r2, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	4313      	orrs	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003562:	f023 030c 	bic.w	r3, r3, #12
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6812      	ldr	r2, [r2, #0]
 800356a:	68f9      	ldr	r1, [r7, #12]
 800356c:	430b      	orrs	r3, r1
 800356e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800358e:	f040 818b 	bne.w	80038a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4ac1      	ldr	r2, [pc, #772]	; (800389c <UART_SetConfig+0x37c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d005      	beq.n	80035a8 <UART_SetConfig+0x88>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4abf      	ldr	r2, [pc, #764]	; (80038a0 <UART_SetConfig+0x380>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f040 80bd 	bne.w	8003722 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035a8:	f7ff fb9c 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
 80035ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	461d      	mov	r5, r3
 80035b2:	f04f 0600 	mov.w	r6, #0
 80035b6:	46a8      	mov	r8, r5
 80035b8:	46b1      	mov	r9, r6
 80035ba:	eb18 0308 	adds.w	r3, r8, r8
 80035be:	eb49 0409 	adc.w	r4, r9, r9
 80035c2:	4698      	mov	r8, r3
 80035c4:	46a1      	mov	r9, r4
 80035c6:	eb18 0805 	adds.w	r8, r8, r5
 80035ca:	eb49 0906 	adc.w	r9, r9, r6
 80035ce:	f04f 0100 	mov.w	r1, #0
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035e2:	4688      	mov	r8, r1
 80035e4:	4691      	mov	r9, r2
 80035e6:	eb18 0005 	adds.w	r0, r8, r5
 80035ea:	eb49 0106 	adc.w	r1, r9, r6
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	461d      	mov	r5, r3
 80035f4:	f04f 0600 	mov.w	r6, #0
 80035f8:	196b      	adds	r3, r5, r5
 80035fa:	eb46 0406 	adc.w	r4, r6, r6
 80035fe:	461a      	mov	r2, r3
 8003600:	4623      	mov	r3, r4
 8003602:	f7fd fb49 	bl	8000c98 <__aeabi_uldivmod>
 8003606:	4603      	mov	r3, r0
 8003608:	460c      	mov	r4, r1
 800360a:	461a      	mov	r2, r3
 800360c:	4ba5      	ldr	r3, [pc, #660]	; (80038a4 <UART_SetConfig+0x384>)
 800360e:	fba3 2302 	umull	r2, r3, r3, r2
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	461d      	mov	r5, r3
 800361c:	f04f 0600 	mov.w	r6, #0
 8003620:	46a9      	mov	r9, r5
 8003622:	46b2      	mov	sl, r6
 8003624:	eb19 0309 	adds.w	r3, r9, r9
 8003628:	eb4a 040a 	adc.w	r4, sl, sl
 800362c:	4699      	mov	r9, r3
 800362e:	46a2      	mov	sl, r4
 8003630:	eb19 0905 	adds.w	r9, r9, r5
 8003634:	eb4a 0a06 	adc.w	sl, sl, r6
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	f04f 0200 	mov.w	r2, #0
 8003640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003644:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003648:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800364c:	4689      	mov	r9, r1
 800364e:	4692      	mov	sl, r2
 8003650:	eb19 0005 	adds.w	r0, r9, r5
 8003654:	eb4a 0106 	adc.w	r1, sl, r6
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	461d      	mov	r5, r3
 800365e:	f04f 0600 	mov.w	r6, #0
 8003662:	196b      	adds	r3, r5, r5
 8003664:	eb46 0406 	adc.w	r4, r6, r6
 8003668:	461a      	mov	r2, r3
 800366a:	4623      	mov	r3, r4
 800366c:	f7fd fb14 	bl	8000c98 <__aeabi_uldivmod>
 8003670:	4603      	mov	r3, r0
 8003672:	460c      	mov	r4, r1
 8003674:	461a      	mov	r2, r3
 8003676:	4b8b      	ldr	r3, [pc, #556]	; (80038a4 <UART_SetConfig+0x384>)
 8003678:	fba3 1302 	umull	r1, r3, r3, r2
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	2164      	movs	r1, #100	; 0x64
 8003680:	fb01 f303 	mul.w	r3, r1, r3
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	3332      	adds	r3, #50	; 0x32
 800368a:	4a86      	ldr	r2, [pc, #536]	; (80038a4 <UART_SetConfig+0x384>)
 800368c:	fba2 2303 	umull	r2, r3, r2, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003698:	4498      	add	r8, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	461d      	mov	r5, r3
 800369e:	f04f 0600 	mov.w	r6, #0
 80036a2:	46a9      	mov	r9, r5
 80036a4:	46b2      	mov	sl, r6
 80036a6:	eb19 0309 	adds.w	r3, r9, r9
 80036aa:	eb4a 040a 	adc.w	r4, sl, sl
 80036ae:	4699      	mov	r9, r3
 80036b0:	46a2      	mov	sl, r4
 80036b2:	eb19 0905 	adds.w	r9, r9, r5
 80036b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036ce:	4689      	mov	r9, r1
 80036d0:	4692      	mov	sl, r2
 80036d2:	eb19 0005 	adds.w	r0, r9, r5
 80036d6:	eb4a 0106 	adc.w	r1, sl, r6
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	461d      	mov	r5, r3
 80036e0:	f04f 0600 	mov.w	r6, #0
 80036e4:	196b      	adds	r3, r5, r5
 80036e6:	eb46 0406 	adc.w	r4, r6, r6
 80036ea:	461a      	mov	r2, r3
 80036ec:	4623      	mov	r3, r4
 80036ee:	f7fd fad3 	bl	8000c98 <__aeabi_uldivmod>
 80036f2:	4603      	mov	r3, r0
 80036f4:	460c      	mov	r4, r1
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <UART_SetConfig+0x384>)
 80036fa:	fba3 1302 	umull	r1, r3, r3, r2
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	2164      	movs	r1, #100	; 0x64
 8003702:	fb01 f303 	mul.w	r3, r1, r3
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	3332      	adds	r3, #50	; 0x32
 800370c:	4a65      	ldr	r2, [pc, #404]	; (80038a4 <UART_SetConfig+0x384>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	f003 0207 	and.w	r2, r3, #7
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4442      	add	r2, r8
 800371e:	609a      	str	r2, [r3, #8]
 8003720:	e26f      	b.n	8003c02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003722:	f7ff facb 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 8003726:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	461d      	mov	r5, r3
 800372c:	f04f 0600 	mov.w	r6, #0
 8003730:	46a8      	mov	r8, r5
 8003732:	46b1      	mov	r9, r6
 8003734:	eb18 0308 	adds.w	r3, r8, r8
 8003738:	eb49 0409 	adc.w	r4, r9, r9
 800373c:	4698      	mov	r8, r3
 800373e:	46a1      	mov	r9, r4
 8003740:	eb18 0805 	adds.w	r8, r8, r5
 8003744:	eb49 0906 	adc.w	r9, r9, r6
 8003748:	f04f 0100 	mov.w	r1, #0
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003754:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003758:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800375c:	4688      	mov	r8, r1
 800375e:	4691      	mov	r9, r2
 8003760:	eb18 0005 	adds.w	r0, r8, r5
 8003764:	eb49 0106 	adc.w	r1, r9, r6
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	461d      	mov	r5, r3
 800376e:	f04f 0600 	mov.w	r6, #0
 8003772:	196b      	adds	r3, r5, r5
 8003774:	eb46 0406 	adc.w	r4, r6, r6
 8003778:	461a      	mov	r2, r3
 800377a:	4623      	mov	r3, r4
 800377c:	f7fd fa8c 	bl	8000c98 <__aeabi_uldivmod>
 8003780:	4603      	mov	r3, r0
 8003782:	460c      	mov	r4, r1
 8003784:	461a      	mov	r2, r3
 8003786:	4b47      	ldr	r3, [pc, #284]	; (80038a4 <UART_SetConfig+0x384>)
 8003788:	fba3 2302 	umull	r2, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	461d      	mov	r5, r3
 8003796:	f04f 0600 	mov.w	r6, #0
 800379a:	46a9      	mov	r9, r5
 800379c:	46b2      	mov	sl, r6
 800379e:	eb19 0309 	adds.w	r3, r9, r9
 80037a2:	eb4a 040a 	adc.w	r4, sl, sl
 80037a6:	4699      	mov	r9, r3
 80037a8:	46a2      	mov	sl, r4
 80037aa:	eb19 0905 	adds.w	r9, r9, r5
 80037ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80037b2:	f04f 0100 	mov.w	r1, #0
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037c6:	4689      	mov	r9, r1
 80037c8:	4692      	mov	sl, r2
 80037ca:	eb19 0005 	adds.w	r0, r9, r5
 80037ce:	eb4a 0106 	adc.w	r1, sl, r6
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	461d      	mov	r5, r3
 80037d8:	f04f 0600 	mov.w	r6, #0
 80037dc:	196b      	adds	r3, r5, r5
 80037de:	eb46 0406 	adc.w	r4, r6, r6
 80037e2:	461a      	mov	r2, r3
 80037e4:	4623      	mov	r3, r4
 80037e6:	f7fd fa57 	bl	8000c98 <__aeabi_uldivmod>
 80037ea:	4603      	mov	r3, r0
 80037ec:	460c      	mov	r4, r1
 80037ee:	461a      	mov	r2, r3
 80037f0:	4b2c      	ldr	r3, [pc, #176]	; (80038a4 <UART_SetConfig+0x384>)
 80037f2:	fba3 1302 	umull	r1, r3, r3, r2
 80037f6:	095b      	lsrs	r3, r3, #5
 80037f8:	2164      	movs	r1, #100	; 0x64
 80037fa:	fb01 f303 	mul.w	r3, r1, r3
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	00db      	lsls	r3, r3, #3
 8003802:	3332      	adds	r3, #50	; 0x32
 8003804:	4a27      	ldr	r2, [pc, #156]	; (80038a4 <UART_SetConfig+0x384>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003812:	4498      	add	r8, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	461d      	mov	r5, r3
 8003818:	f04f 0600 	mov.w	r6, #0
 800381c:	46a9      	mov	r9, r5
 800381e:	46b2      	mov	sl, r6
 8003820:	eb19 0309 	adds.w	r3, r9, r9
 8003824:	eb4a 040a 	adc.w	r4, sl, sl
 8003828:	4699      	mov	r9, r3
 800382a:	46a2      	mov	sl, r4
 800382c:	eb19 0905 	adds.w	r9, r9, r5
 8003830:	eb4a 0a06 	adc.w	sl, sl, r6
 8003834:	f04f 0100 	mov.w	r1, #0
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003840:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003844:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003848:	4689      	mov	r9, r1
 800384a:	4692      	mov	sl, r2
 800384c:	eb19 0005 	adds.w	r0, r9, r5
 8003850:	eb4a 0106 	adc.w	r1, sl, r6
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	461d      	mov	r5, r3
 800385a:	f04f 0600 	mov.w	r6, #0
 800385e:	196b      	adds	r3, r5, r5
 8003860:	eb46 0406 	adc.w	r4, r6, r6
 8003864:	461a      	mov	r2, r3
 8003866:	4623      	mov	r3, r4
 8003868:	f7fd fa16 	bl	8000c98 <__aeabi_uldivmod>
 800386c:	4603      	mov	r3, r0
 800386e:	460c      	mov	r4, r1
 8003870:	461a      	mov	r2, r3
 8003872:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <UART_SetConfig+0x384>)
 8003874:	fba3 1302 	umull	r1, r3, r3, r2
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	2164      	movs	r1, #100	; 0x64
 800387c:	fb01 f303 	mul.w	r3, r1, r3
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	00db      	lsls	r3, r3, #3
 8003884:	3332      	adds	r3, #50	; 0x32
 8003886:	4a07      	ldr	r2, [pc, #28]	; (80038a4 <UART_SetConfig+0x384>)
 8003888:	fba2 2303 	umull	r2, r3, r2, r3
 800388c:	095b      	lsrs	r3, r3, #5
 800388e:	f003 0207 	and.w	r2, r3, #7
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4442      	add	r2, r8
 8003898:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800389a:	e1b2      	b.n	8003c02 <UART_SetConfig+0x6e2>
 800389c:	40011000 	.word	0x40011000
 80038a0:	40011400 	.word	0x40011400
 80038a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4ad7      	ldr	r2, [pc, #860]	; (8003c0c <UART_SetConfig+0x6ec>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d005      	beq.n	80038be <UART_SetConfig+0x39e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4ad6      	ldr	r2, [pc, #856]	; (8003c10 <UART_SetConfig+0x6f0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	f040 80d1 	bne.w	8003a60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80038be:	f7ff fa11 	bl	8002ce4 <HAL_RCC_GetPCLK2Freq>
 80038c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	469a      	mov	sl, r3
 80038c8:	f04f 0b00 	mov.w	fp, #0
 80038cc:	46d0      	mov	r8, sl
 80038ce:	46d9      	mov	r9, fp
 80038d0:	eb18 0308 	adds.w	r3, r8, r8
 80038d4:	eb49 0409 	adc.w	r4, r9, r9
 80038d8:	4698      	mov	r8, r3
 80038da:	46a1      	mov	r9, r4
 80038dc:	eb18 080a 	adds.w	r8, r8, sl
 80038e0:	eb49 090b 	adc.w	r9, r9, fp
 80038e4:	f04f 0100 	mov.w	r1, #0
 80038e8:	f04f 0200 	mov.w	r2, #0
 80038ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80038f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80038f8:	4688      	mov	r8, r1
 80038fa:	4691      	mov	r9, r2
 80038fc:	eb1a 0508 	adds.w	r5, sl, r8
 8003900:	eb4b 0609 	adc.w	r6, fp, r9
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	4619      	mov	r1, r3
 800390a:	f04f 0200 	mov.w	r2, #0
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	f04f 0400 	mov.w	r4, #0
 8003916:	0094      	lsls	r4, r2, #2
 8003918:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800391c:	008b      	lsls	r3, r1, #2
 800391e:	461a      	mov	r2, r3
 8003920:	4623      	mov	r3, r4
 8003922:	4628      	mov	r0, r5
 8003924:	4631      	mov	r1, r6
 8003926:	f7fd f9b7 	bl	8000c98 <__aeabi_uldivmod>
 800392a:	4603      	mov	r3, r0
 800392c:	460c      	mov	r4, r1
 800392e:	461a      	mov	r2, r3
 8003930:	4bb8      	ldr	r3, [pc, #736]	; (8003c14 <UART_SetConfig+0x6f4>)
 8003932:	fba3 2302 	umull	r2, r3, r3, r2
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	469b      	mov	fp, r3
 8003940:	f04f 0c00 	mov.w	ip, #0
 8003944:	46d9      	mov	r9, fp
 8003946:	46e2      	mov	sl, ip
 8003948:	eb19 0309 	adds.w	r3, r9, r9
 800394c:	eb4a 040a 	adc.w	r4, sl, sl
 8003950:	4699      	mov	r9, r3
 8003952:	46a2      	mov	sl, r4
 8003954:	eb19 090b 	adds.w	r9, r9, fp
 8003958:	eb4a 0a0c 	adc.w	sl, sl, ip
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800396c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003970:	4689      	mov	r9, r1
 8003972:	4692      	mov	sl, r2
 8003974:	eb1b 0509 	adds.w	r5, fp, r9
 8003978:	eb4c 060a 	adc.w	r6, ip, sl
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	4619      	mov	r1, r3
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	f04f 0400 	mov.w	r4, #0
 800398e:	0094      	lsls	r4, r2, #2
 8003990:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003994:	008b      	lsls	r3, r1, #2
 8003996:	461a      	mov	r2, r3
 8003998:	4623      	mov	r3, r4
 800399a:	4628      	mov	r0, r5
 800399c:	4631      	mov	r1, r6
 800399e:	f7fd f97b 	bl	8000c98 <__aeabi_uldivmod>
 80039a2:	4603      	mov	r3, r0
 80039a4:	460c      	mov	r4, r1
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b9a      	ldr	r3, [pc, #616]	; (8003c14 <UART_SetConfig+0x6f4>)
 80039aa:	fba3 1302 	umull	r1, r3, r3, r2
 80039ae:	095b      	lsrs	r3, r3, #5
 80039b0:	2164      	movs	r1, #100	; 0x64
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	3332      	adds	r3, #50	; 0x32
 80039bc:	4a95      	ldr	r2, [pc, #596]	; (8003c14 <UART_SetConfig+0x6f4>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	095b      	lsrs	r3, r3, #5
 80039c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c8:	4498      	add	r8, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	469b      	mov	fp, r3
 80039ce:	f04f 0c00 	mov.w	ip, #0
 80039d2:	46d9      	mov	r9, fp
 80039d4:	46e2      	mov	sl, ip
 80039d6:	eb19 0309 	adds.w	r3, r9, r9
 80039da:	eb4a 040a 	adc.w	r4, sl, sl
 80039de:	4699      	mov	r9, r3
 80039e0:	46a2      	mov	sl, r4
 80039e2:	eb19 090b 	adds.w	r9, r9, fp
 80039e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80039ea:	f04f 0100 	mov.w	r1, #0
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039fe:	4689      	mov	r9, r1
 8003a00:	4692      	mov	sl, r2
 8003a02:	eb1b 0509 	adds.w	r5, fp, r9
 8003a06:	eb4c 060a 	adc.w	r6, ip, sl
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	f04f 0200 	mov.w	r2, #0
 8003a14:	f04f 0300 	mov.w	r3, #0
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	0094      	lsls	r4, r2, #2
 8003a1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a22:	008b      	lsls	r3, r1, #2
 8003a24:	461a      	mov	r2, r3
 8003a26:	4623      	mov	r3, r4
 8003a28:	4628      	mov	r0, r5
 8003a2a:	4631      	mov	r1, r6
 8003a2c:	f7fd f934 	bl	8000c98 <__aeabi_uldivmod>
 8003a30:	4603      	mov	r3, r0
 8003a32:	460c      	mov	r4, r1
 8003a34:	461a      	mov	r2, r3
 8003a36:	4b77      	ldr	r3, [pc, #476]	; (8003c14 <UART_SetConfig+0x6f4>)
 8003a38:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3c:	095b      	lsrs	r3, r3, #5
 8003a3e:	2164      	movs	r1, #100	; 0x64
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	3332      	adds	r3, #50	; 0x32
 8003a4a:	4a72      	ldr	r2, [pc, #456]	; (8003c14 <UART_SetConfig+0x6f4>)
 8003a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	f003 020f 	and.w	r2, r3, #15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4442      	add	r2, r8
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	e0d0      	b.n	8003c02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a60:	f7ff f92c 	bl	8002cbc <HAL_RCC_GetPCLK1Freq>
 8003a64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	469a      	mov	sl, r3
 8003a6a:	f04f 0b00 	mov.w	fp, #0
 8003a6e:	46d0      	mov	r8, sl
 8003a70:	46d9      	mov	r9, fp
 8003a72:	eb18 0308 	adds.w	r3, r8, r8
 8003a76:	eb49 0409 	adc.w	r4, r9, r9
 8003a7a:	4698      	mov	r8, r3
 8003a7c:	46a1      	mov	r9, r4
 8003a7e:	eb18 080a 	adds.w	r8, r8, sl
 8003a82:	eb49 090b 	adc.w	r9, r9, fp
 8003a86:	f04f 0100 	mov.w	r1, #0
 8003a8a:	f04f 0200 	mov.w	r2, #0
 8003a8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a9a:	4688      	mov	r8, r1
 8003a9c:	4691      	mov	r9, r2
 8003a9e:	eb1a 0508 	adds.w	r5, sl, r8
 8003aa2:	eb4b 0609 	adc.w	r6, fp, r9
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	0094      	lsls	r4, r2, #2
 8003aba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003abe:	008b      	lsls	r3, r1, #2
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	4623      	mov	r3, r4
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	f7fd f8e6 	bl	8000c98 <__aeabi_uldivmod>
 8003acc:	4603      	mov	r3, r0
 8003ace:	460c      	mov	r4, r1
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <UART_SetConfig+0x6f4>)
 8003ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	469b      	mov	fp, r3
 8003ae2:	f04f 0c00 	mov.w	ip, #0
 8003ae6:	46d9      	mov	r9, fp
 8003ae8:	46e2      	mov	sl, ip
 8003aea:	eb19 0309 	adds.w	r3, r9, r9
 8003aee:	eb4a 040a 	adc.w	r4, sl, sl
 8003af2:	4699      	mov	r9, r3
 8003af4:	46a2      	mov	sl, r4
 8003af6:	eb19 090b 	adds.w	r9, r9, fp
 8003afa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003afe:	f04f 0100 	mov.w	r1, #0
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b12:	4689      	mov	r9, r1
 8003b14:	4692      	mov	sl, r2
 8003b16:	eb1b 0509 	adds.w	r5, fp, r9
 8003b1a:	eb4c 060a 	adc.w	r6, ip, sl
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4619      	mov	r1, r3
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	f04f 0400 	mov.w	r4, #0
 8003b30:	0094      	lsls	r4, r2, #2
 8003b32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b36:	008b      	lsls	r3, r1, #2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4623      	mov	r3, r4
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	4631      	mov	r1, r6
 8003b40:	f7fd f8aa 	bl	8000c98 <__aeabi_uldivmod>
 8003b44:	4603      	mov	r3, r0
 8003b46:	460c      	mov	r4, r1
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b32      	ldr	r3, [pc, #200]	; (8003c14 <UART_SetConfig+0x6f4>)
 8003b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b50:	095b      	lsrs	r3, r3, #5
 8003b52:	2164      	movs	r1, #100	; 0x64
 8003b54:	fb01 f303 	mul.w	r3, r1, r3
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	3332      	adds	r3, #50	; 0x32
 8003b5e:	4a2d      	ldr	r2, [pc, #180]	; (8003c14 <UART_SetConfig+0x6f4>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	095b      	lsrs	r3, r3, #5
 8003b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b6a:	4498      	add	r8, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	469b      	mov	fp, r3
 8003b70:	f04f 0c00 	mov.w	ip, #0
 8003b74:	46d9      	mov	r9, fp
 8003b76:	46e2      	mov	sl, ip
 8003b78:	eb19 0309 	adds.w	r3, r9, r9
 8003b7c:	eb4a 040a 	adc.w	r4, sl, sl
 8003b80:	4699      	mov	r9, r3
 8003b82:	46a2      	mov	sl, r4
 8003b84:	eb19 090b 	adds.w	r9, r9, fp
 8003b88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b8c:	f04f 0100 	mov.w	r1, #0
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ba0:	4689      	mov	r9, r1
 8003ba2:	4692      	mov	sl, r2
 8003ba4:	eb1b 0509 	adds.w	r5, fp, r9
 8003ba8:	eb4c 060a 	adc.w	r6, ip, sl
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	f04f 0400 	mov.w	r4, #0
 8003bbe:	0094      	lsls	r4, r2, #2
 8003bc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bc4:	008b      	lsls	r3, r1, #2
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4623      	mov	r3, r4
 8003bca:	4628      	mov	r0, r5
 8003bcc:	4631      	mov	r1, r6
 8003bce:	f7fd f863 	bl	8000c98 <__aeabi_uldivmod>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	460c      	mov	r4, r1
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <UART_SetConfig+0x6f4>)
 8003bda:	fba3 1302 	umull	r1, r3, r3, r2
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2164      	movs	r1, #100	; 0x64
 8003be2:	fb01 f303 	mul.w	r3, r1, r3
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	3332      	adds	r3, #50	; 0x32
 8003bec:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <UART_SetConfig+0x6f4>)
 8003bee:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf2:	095b      	lsrs	r3, r3, #5
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4442      	add	r2, r8
 8003bfe:	609a      	str	r2, [r3, #8]
}
 8003c00:	e7ff      	b.n	8003c02 <UART_SetConfig+0x6e2>
 8003c02:	bf00      	nop
 8003c04:	3714      	adds	r7, #20
 8003c06:	46bd      	mov	sp, r7
 8003c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c0c:	40011000 	.word	0x40011000
 8003c10:	40011400 	.word	0x40011400
 8003c14:	51eb851f 	.word	0x51eb851f

08003c18 <atof>:
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f001 bcdd 	b.w	80055d8 <strtod>
	...

08003c20 <__errno>:
 8003c20:	4b01      	ldr	r3, [pc, #4]	; (8003c28 <__errno+0x8>)
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	2000000c 	.word	0x2000000c

08003c2c <__libc_init_array>:
 8003c2c:	b570      	push	{r4, r5, r6, lr}
 8003c2e:	4e0d      	ldr	r6, [pc, #52]	; (8003c64 <__libc_init_array+0x38>)
 8003c30:	4c0d      	ldr	r4, [pc, #52]	; (8003c68 <__libc_init_array+0x3c>)
 8003c32:	1ba4      	subs	r4, r4, r6
 8003c34:	10a4      	asrs	r4, r4, #2
 8003c36:	2500      	movs	r5, #0
 8003c38:	42a5      	cmp	r5, r4
 8003c3a:	d109      	bne.n	8003c50 <__libc_init_array+0x24>
 8003c3c:	4e0b      	ldr	r6, [pc, #44]	; (8003c6c <__libc_init_array+0x40>)
 8003c3e:	4c0c      	ldr	r4, [pc, #48]	; (8003c70 <__libc_init_array+0x44>)
 8003c40:	f004 fa3e 	bl	80080c0 <_init>
 8003c44:	1ba4      	subs	r4, r4, r6
 8003c46:	10a4      	asrs	r4, r4, #2
 8003c48:	2500      	movs	r5, #0
 8003c4a:	42a5      	cmp	r5, r4
 8003c4c:	d105      	bne.n	8003c5a <__libc_init_array+0x2e>
 8003c4e:	bd70      	pop	{r4, r5, r6, pc}
 8003c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c54:	4798      	blx	r3
 8003c56:	3501      	adds	r5, #1
 8003c58:	e7ee      	b.n	8003c38 <__libc_init_array+0xc>
 8003c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c5e:	4798      	blx	r3
 8003c60:	3501      	adds	r5, #1
 8003c62:	e7f2      	b.n	8003c4a <__libc_init_array+0x1e>
 8003c64:	08008478 	.word	0x08008478
 8003c68:	08008478 	.word	0x08008478
 8003c6c:	08008478 	.word	0x08008478
 8003c70:	0800847c 	.word	0x0800847c

08003c74 <memcpy>:
 8003c74:	b510      	push	{r4, lr}
 8003c76:	1e43      	subs	r3, r0, #1
 8003c78:	440a      	add	r2, r1
 8003c7a:	4291      	cmp	r1, r2
 8003c7c:	d100      	bne.n	8003c80 <memcpy+0xc>
 8003c7e:	bd10      	pop	{r4, pc}
 8003c80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c84:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c88:	e7f7      	b.n	8003c7a <memcpy+0x6>

08003c8a <memset>:
 8003c8a:	4402      	add	r2, r0
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d100      	bne.n	8003c94 <memset+0xa>
 8003c92:	4770      	bx	lr
 8003c94:	f803 1b01 	strb.w	r1, [r3], #1
 8003c98:	e7f9      	b.n	8003c8e <memset+0x4>

08003c9a <__cvt>:
 8003c9a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c9e:	ec55 4b10 	vmov	r4, r5, d0
 8003ca2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003ca4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003ca8:	2d00      	cmp	r5, #0
 8003caa:	460e      	mov	r6, r1
 8003cac:	4691      	mov	r9, r2
 8003cae:	4619      	mov	r1, r3
 8003cb0:	bfb8      	it	lt
 8003cb2:	4622      	movlt	r2, r4
 8003cb4:	462b      	mov	r3, r5
 8003cb6:	f027 0720 	bic.w	r7, r7, #32
 8003cba:	bfbb      	ittet	lt
 8003cbc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003cc0:	461d      	movlt	r5, r3
 8003cc2:	2300      	movge	r3, #0
 8003cc4:	232d      	movlt	r3, #45	; 0x2d
 8003cc6:	bfb8      	it	lt
 8003cc8:	4614      	movlt	r4, r2
 8003cca:	2f46      	cmp	r7, #70	; 0x46
 8003ccc:	700b      	strb	r3, [r1, #0]
 8003cce:	d004      	beq.n	8003cda <__cvt+0x40>
 8003cd0:	2f45      	cmp	r7, #69	; 0x45
 8003cd2:	d100      	bne.n	8003cd6 <__cvt+0x3c>
 8003cd4:	3601      	adds	r6, #1
 8003cd6:	2102      	movs	r1, #2
 8003cd8:	e000      	b.n	8003cdc <__cvt+0x42>
 8003cda:	2103      	movs	r1, #3
 8003cdc:	ab03      	add	r3, sp, #12
 8003cde:	9301      	str	r3, [sp, #4]
 8003ce0:	ab02      	add	r3, sp, #8
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	4632      	mov	r2, r6
 8003ce6:	4653      	mov	r3, sl
 8003ce8:	ec45 4b10 	vmov	d0, r4, r5
 8003cec:	f001 fdd0 	bl	8005890 <_dtoa_r>
 8003cf0:	2f47      	cmp	r7, #71	; 0x47
 8003cf2:	4680      	mov	r8, r0
 8003cf4:	d102      	bne.n	8003cfc <__cvt+0x62>
 8003cf6:	f019 0f01 	tst.w	r9, #1
 8003cfa:	d026      	beq.n	8003d4a <__cvt+0xb0>
 8003cfc:	2f46      	cmp	r7, #70	; 0x46
 8003cfe:	eb08 0906 	add.w	r9, r8, r6
 8003d02:	d111      	bne.n	8003d28 <__cvt+0x8e>
 8003d04:	f898 3000 	ldrb.w	r3, [r8]
 8003d08:	2b30      	cmp	r3, #48	; 0x30
 8003d0a:	d10a      	bne.n	8003d22 <__cvt+0x88>
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2300      	movs	r3, #0
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fee0 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d18:	b918      	cbnz	r0, 8003d22 <__cvt+0x88>
 8003d1a:	f1c6 0601 	rsb	r6, r6, #1
 8003d1e:	f8ca 6000 	str.w	r6, [sl]
 8003d22:	f8da 3000 	ldr.w	r3, [sl]
 8003d26:	4499      	add	r9, r3
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	4620      	mov	r0, r4
 8003d2e:	4629      	mov	r1, r5
 8003d30:	f7fc fed2 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d34:	b938      	cbnz	r0, 8003d46 <__cvt+0xac>
 8003d36:	2230      	movs	r2, #48	; 0x30
 8003d38:	9b03      	ldr	r3, [sp, #12]
 8003d3a:	454b      	cmp	r3, r9
 8003d3c:	d205      	bcs.n	8003d4a <__cvt+0xb0>
 8003d3e:	1c59      	adds	r1, r3, #1
 8003d40:	9103      	str	r1, [sp, #12]
 8003d42:	701a      	strb	r2, [r3, #0]
 8003d44:	e7f8      	b.n	8003d38 <__cvt+0x9e>
 8003d46:	f8cd 900c 	str.w	r9, [sp, #12]
 8003d4a:	9b03      	ldr	r3, [sp, #12]
 8003d4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d4e:	eba3 0308 	sub.w	r3, r3, r8
 8003d52:	4640      	mov	r0, r8
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	b004      	add	sp, #16
 8003d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d5c <__exponent>:
 8003d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d5e:	2900      	cmp	r1, #0
 8003d60:	4604      	mov	r4, r0
 8003d62:	bfba      	itte	lt
 8003d64:	4249      	neglt	r1, r1
 8003d66:	232d      	movlt	r3, #45	; 0x2d
 8003d68:	232b      	movge	r3, #43	; 0x2b
 8003d6a:	2909      	cmp	r1, #9
 8003d6c:	f804 2b02 	strb.w	r2, [r4], #2
 8003d70:	7043      	strb	r3, [r0, #1]
 8003d72:	dd20      	ble.n	8003db6 <__exponent+0x5a>
 8003d74:	f10d 0307 	add.w	r3, sp, #7
 8003d78:	461f      	mov	r7, r3
 8003d7a:	260a      	movs	r6, #10
 8003d7c:	fb91 f5f6 	sdiv	r5, r1, r6
 8003d80:	fb06 1115 	mls	r1, r6, r5, r1
 8003d84:	3130      	adds	r1, #48	; 0x30
 8003d86:	2d09      	cmp	r5, #9
 8003d88:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d8c:	f103 32ff 	add.w	r2, r3, #4294967295
 8003d90:	4629      	mov	r1, r5
 8003d92:	dc09      	bgt.n	8003da8 <__exponent+0x4c>
 8003d94:	3130      	adds	r1, #48	; 0x30
 8003d96:	3b02      	subs	r3, #2
 8003d98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003d9c:	42bb      	cmp	r3, r7
 8003d9e:	4622      	mov	r2, r4
 8003da0:	d304      	bcc.n	8003dac <__exponent+0x50>
 8003da2:	1a10      	subs	r0, r2, r0
 8003da4:	b003      	add	sp, #12
 8003da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003da8:	4613      	mov	r3, r2
 8003daa:	e7e7      	b.n	8003d7c <__exponent+0x20>
 8003dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003db0:	f804 2b01 	strb.w	r2, [r4], #1
 8003db4:	e7f2      	b.n	8003d9c <__exponent+0x40>
 8003db6:	2330      	movs	r3, #48	; 0x30
 8003db8:	4419      	add	r1, r3
 8003dba:	7083      	strb	r3, [r0, #2]
 8003dbc:	1d02      	adds	r2, r0, #4
 8003dbe:	70c1      	strb	r1, [r0, #3]
 8003dc0:	e7ef      	b.n	8003da2 <__exponent+0x46>
	...

08003dc4 <_printf_float>:
 8003dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc8:	b08d      	sub	sp, #52	; 0x34
 8003dca:	460c      	mov	r4, r1
 8003dcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003dd0:	4616      	mov	r6, r2
 8003dd2:	461f      	mov	r7, r3
 8003dd4:	4605      	mov	r5, r0
 8003dd6:	f002 ff09 	bl	8006bec <_localeconv_r>
 8003dda:	6803      	ldr	r3, [r0, #0]
 8003ddc:	9304      	str	r3, [sp, #16]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc f9fe 	bl	80001e0 <strlen>
 8003de4:	2300      	movs	r3, #0
 8003de6:	930a      	str	r3, [sp, #40]	; 0x28
 8003de8:	f8d8 3000 	ldr.w	r3, [r8]
 8003dec:	9005      	str	r0, [sp, #20]
 8003dee:	3307      	adds	r3, #7
 8003df0:	f023 0307 	bic.w	r3, r3, #7
 8003df4:	f103 0208 	add.w	r2, r3, #8
 8003df8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003dfc:	f8d4 b000 	ldr.w	fp, [r4]
 8003e00:	f8c8 2000 	str.w	r2, [r8]
 8003e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e08:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003e0c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003e10:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003e14:	9307      	str	r3, [sp, #28]
 8003e16:	f8cd 8018 	str.w	r8, [sp, #24]
 8003e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e1e:	4ba7      	ldr	r3, [pc, #668]	; (80040bc <_printf_float+0x2f8>)
 8003e20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e24:	f7fc fe8a 	bl	8000b3c <__aeabi_dcmpun>
 8003e28:	bb70      	cbnz	r0, 8003e88 <_printf_float+0xc4>
 8003e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003e2e:	4ba3      	ldr	r3, [pc, #652]	; (80040bc <_printf_float+0x2f8>)
 8003e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e34:	f7fc fe64 	bl	8000b00 <__aeabi_dcmple>
 8003e38:	bb30      	cbnz	r0, 8003e88 <_printf_float+0xc4>
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	4640      	mov	r0, r8
 8003e40:	4649      	mov	r1, r9
 8003e42:	f7fc fe53 	bl	8000aec <__aeabi_dcmplt>
 8003e46:	b110      	cbz	r0, 8003e4e <_printf_float+0x8a>
 8003e48:	232d      	movs	r3, #45	; 0x2d
 8003e4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e4e:	4a9c      	ldr	r2, [pc, #624]	; (80040c0 <_printf_float+0x2fc>)
 8003e50:	4b9c      	ldr	r3, [pc, #624]	; (80040c4 <_printf_float+0x300>)
 8003e52:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003e56:	bf8c      	ite	hi
 8003e58:	4690      	movhi	r8, r2
 8003e5a:	4698      	movls	r8, r3
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	f02b 0204 	bic.w	r2, fp, #4
 8003e62:	6123      	str	r3, [r4, #16]
 8003e64:	6022      	str	r2, [r4, #0]
 8003e66:	f04f 0900 	mov.w	r9, #0
 8003e6a:	9700      	str	r7, [sp, #0]
 8003e6c:	4633      	mov	r3, r6
 8003e6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003e70:	4621      	mov	r1, r4
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 f9e6 	bl	8004244 <_printf_common>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	f040 808d 	bne.w	8003f98 <_printf_float+0x1d4>
 8003e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e82:	b00d      	add	sp, #52	; 0x34
 8003e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e88:	4642      	mov	r2, r8
 8003e8a:	464b      	mov	r3, r9
 8003e8c:	4640      	mov	r0, r8
 8003e8e:	4649      	mov	r1, r9
 8003e90:	f7fc fe54 	bl	8000b3c <__aeabi_dcmpun>
 8003e94:	b110      	cbz	r0, 8003e9c <_printf_float+0xd8>
 8003e96:	4a8c      	ldr	r2, [pc, #560]	; (80040c8 <_printf_float+0x304>)
 8003e98:	4b8c      	ldr	r3, [pc, #560]	; (80040cc <_printf_float+0x308>)
 8003e9a:	e7da      	b.n	8003e52 <_printf_float+0x8e>
 8003e9c:	6861      	ldr	r1, [r4, #4]
 8003e9e:	1c4b      	adds	r3, r1, #1
 8003ea0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003ea4:	a80a      	add	r0, sp, #40	; 0x28
 8003ea6:	d13e      	bne.n	8003f26 <_printf_float+0x162>
 8003ea8:	2306      	movs	r3, #6
 8003eaa:	6063      	str	r3, [r4, #4]
 8003eac:	2300      	movs	r3, #0
 8003eae:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003eb2:	ab09      	add	r3, sp, #36	; 0x24
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	ec49 8b10 	vmov	d0, r8, r9
 8003eba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003ebe:	6022      	str	r2, [r4, #0]
 8003ec0:	f8cd a004 	str.w	sl, [sp, #4]
 8003ec4:	6861      	ldr	r1, [r4, #4]
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	f7ff fee7 	bl	8003c9a <__cvt>
 8003ecc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003ed0:	2b47      	cmp	r3, #71	; 0x47
 8003ed2:	4680      	mov	r8, r0
 8003ed4:	d109      	bne.n	8003eea <_printf_float+0x126>
 8003ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ed8:	1cd8      	adds	r0, r3, #3
 8003eda:	db02      	blt.n	8003ee2 <_printf_float+0x11e>
 8003edc:	6862      	ldr	r2, [r4, #4]
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	dd47      	ble.n	8003f72 <_printf_float+0x1ae>
 8003ee2:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ee6:	fa5f fa8a 	uxtb.w	sl, sl
 8003eea:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003eee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003ef0:	d824      	bhi.n	8003f3c <_printf_float+0x178>
 8003ef2:	3901      	subs	r1, #1
 8003ef4:	4652      	mov	r2, sl
 8003ef6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003efa:	9109      	str	r1, [sp, #36]	; 0x24
 8003efc:	f7ff ff2e 	bl	8003d5c <__exponent>
 8003f00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f02:	1813      	adds	r3, r2, r0
 8003f04:	2a01      	cmp	r2, #1
 8003f06:	4681      	mov	r9, r0
 8003f08:	6123      	str	r3, [r4, #16]
 8003f0a:	dc02      	bgt.n	8003f12 <_printf_float+0x14e>
 8003f0c:	6822      	ldr	r2, [r4, #0]
 8003f0e:	07d1      	lsls	r1, r2, #31
 8003f10:	d501      	bpl.n	8003f16 <_printf_float+0x152>
 8003f12:	3301      	adds	r3, #1
 8003f14:	6123      	str	r3, [r4, #16]
 8003f16:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0a5      	beq.n	8003e6a <_printf_float+0xa6>
 8003f1e:	232d      	movs	r3, #45	; 0x2d
 8003f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f24:	e7a1      	b.n	8003e6a <_printf_float+0xa6>
 8003f26:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003f2a:	f000 8177 	beq.w	800421c <_printf_float+0x458>
 8003f2e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003f32:	d1bb      	bne.n	8003eac <_printf_float+0xe8>
 8003f34:	2900      	cmp	r1, #0
 8003f36:	d1b9      	bne.n	8003eac <_printf_float+0xe8>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e7b6      	b.n	8003eaa <_printf_float+0xe6>
 8003f3c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003f40:	d119      	bne.n	8003f76 <_printf_float+0x1b2>
 8003f42:	2900      	cmp	r1, #0
 8003f44:	6863      	ldr	r3, [r4, #4]
 8003f46:	dd0c      	ble.n	8003f62 <_printf_float+0x19e>
 8003f48:	6121      	str	r1, [r4, #16]
 8003f4a:	b913      	cbnz	r3, 8003f52 <_printf_float+0x18e>
 8003f4c:	6822      	ldr	r2, [r4, #0]
 8003f4e:	07d2      	lsls	r2, r2, #31
 8003f50:	d502      	bpl.n	8003f58 <_printf_float+0x194>
 8003f52:	3301      	adds	r3, #1
 8003f54:	440b      	add	r3, r1
 8003f56:	6123      	str	r3, [r4, #16]
 8003f58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f5a:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f5c:	f04f 0900 	mov.w	r9, #0
 8003f60:	e7d9      	b.n	8003f16 <_printf_float+0x152>
 8003f62:	b913      	cbnz	r3, 8003f6a <_printf_float+0x1a6>
 8003f64:	6822      	ldr	r2, [r4, #0]
 8003f66:	07d0      	lsls	r0, r2, #31
 8003f68:	d501      	bpl.n	8003f6e <_printf_float+0x1aa>
 8003f6a:	3302      	adds	r3, #2
 8003f6c:	e7f3      	b.n	8003f56 <_printf_float+0x192>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e7f1      	b.n	8003f56 <_printf_float+0x192>
 8003f72:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003f76:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	db05      	blt.n	8003f8a <_printf_float+0x1c6>
 8003f7e:	6822      	ldr	r2, [r4, #0]
 8003f80:	6123      	str	r3, [r4, #16]
 8003f82:	07d1      	lsls	r1, r2, #31
 8003f84:	d5e8      	bpl.n	8003f58 <_printf_float+0x194>
 8003f86:	3301      	adds	r3, #1
 8003f88:	e7e5      	b.n	8003f56 <_printf_float+0x192>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	bfd4      	ite	le
 8003f8e:	f1c3 0302 	rsble	r3, r3, #2
 8003f92:	2301      	movgt	r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	e7de      	b.n	8003f56 <_printf_float+0x192>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	055a      	lsls	r2, r3, #21
 8003f9c:	d407      	bmi.n	8003fae <_printf_float+0x1ea>
 8003f9e:	6923      	ldr	r3, [r4, #16]
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b8      	blx	r7
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d12b      	bne.n	8004004 <_printf_float+0x240>
 8003fac:	e767      	b.n	8003e7e <_printf_float+0xba>
 8003fae:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003fb2:	f240 80dc 	bls.w	800416e <_printf_float+0x3aa>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	2300      	movs	r3, #0
 8003fba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003fbe:	f7fc fd8b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003fc2:	2800      	cmp	r0, #0
 8003fc4:	d033      	beq.n	800402e <_printf_float+0x26a>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4a41      	ldr	r2, [pc, #260]	; (80040d0 <_printf_float+0x30c>)
 8003fca:	4631      	mov	r1, r6
 8003fcc:	4628      	mov	r0, r5
 8003fce:	47b8      	blx	r7
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	f43f af54 	beq.w	8003e7e <_printf_float+0xba>
 8003fd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	db02      	blt.n	8003fe4 <_printf_float+0x220>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	07d8      	lsls	r0, r3, #31
 8003fe2:	d50f      	bpl.n	8004004 <_printf_float+0x240>
 8003fe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fe8:	4631      	mov	r1, r6
 8003fea:	4628      	mov	r0, r5
 8003fec:	47b8      	blx	r7
 8003fee:	3001      	adds	r0, #1
 8003ff0:	f43f af45 	beq.w	8003e7e <_printf_float+0xba>
 8003ff4:	f04f 0800 	mov.w	r8, #0
 8003ff8:	f104 091a 	add.w	r9, r4, #26
 8003ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003ffe:	3b01      	subs	r3, #1
 8004000:	4543      	cmp	r3, r8
 8004002:	dc09      	bgt.n	8004018 <_printf_float+0x254>
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	079b      	lsls	r3, r3, #30
 8004008:	f100 8103 	bmi.w	8004212 <_printf_float+0x44e>
 800400c:	68e0      	ldr	r0, [r4, #12]
 800400e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004010:	4298      	cmp	r0, r3
 8004012:	bfb8      	it	lt
 8004014:	4618      	movlt	r0, r3
 8004016:	e734      	b.n	8003e82 <_printf_float+0xbe>
 8004018:	2301      	movs	r3, #1
 800401a:	464a      	mov	r2, r9
 800401c:	4631      	mov	r1, r6
 800401e:	4628      	mov	r0, r5
 8004020:	47b8      	blx	r7
 8004022:	3001      	adds	r0, #1
 8004024:	f43f af2b 	beq.w	8003e7e <_printf_float+0xba>
 8004028:	f108 0801 	add.w	r8, r8, #1
 800402c:	e7e6      	b.n	8003ffc <_printf_float+0x238>
 800402e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	dc2b      	bgt.n	800408c <_printf_float+0x2c8>
 8004034:	2301      	movs	r3, #1
 8004036:	4a26      	ldr	r2, [pc, #152]	; (80040d0 <_printf_float+0x30c>)
 8004038:	4631      	mov	r1, r6
 800403a:	4628      	mov	r0, r5
 800403c:	47b8      	blx	r7
 800403e:	3001      	adds	r0, #1
 8004040:	f43f af1d 	beq.w	8003e7e <_printf_float+0xba>
 8004044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004046:	b923      	cbnz	r3, 8004052 <_printf_float+0x28e>
 8004048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800404a:	b913      	cbnz	r3, 8004052 <_printf_float+0x28e>
 800404c:	6823      	ldr	r3, [r4, #0]
 800404e:	07d9      	lsls	r1, r3, #31
 8004050:	d5d8      	bpl.n	8004004 <_printf_float+0x240>
 8004052:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004056:	4631      	mov	r1, r6
 8004058:	4628      	mov	r0, r5
 800405a:	47b8      	blx	r7
 800405c:	3001      	adds	r0, #1
 800405e:	f43f af0e 	beq.w	8003e7e <_printf_float+0xba>
 8004062:	f04f 0900 	mov.w	r9, #0
 8004066:	f104 0a1a 	add.w	sl, r4, #26
 800406a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800406c:	425b      	negs	r3, r3
 800406e:	454b      	cmp	r3, r9
 8004070:	dc01      	bgt.n	8004076 <_printf_float+0x2b2>
 8004072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004074:	e794      	b.n	8003fa0 <_printf_float+0x1dc>
 8004076:	2301      	movs	r3, #1
 8004078:	4652      	mov	r2, sl
 800407a:	4631      	mov	r1, r6
 800407c:	4628      	mov	r0, r5
 800407e:	47b8      	blx	r7
 8004080:	3001      	adds	r0, #1
 8004082:	f43f aefc 	beq.w	8003e7e <_printf_float+0xba>
 8004086:	f109 0901 	add.w	r9, r9, #1
 800408a:	e7ee      	b.n	800406a <_printf_float+0x2a6>
 800408c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800408e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004090:	429a      	cmp	r2, r3
 8004092:	bfa8      	it	ge
 8004094:	461a      	movge	r2, r3
 8004096:	2a00      	cmp	r2, #0
 8004098:	4691      	mov	r9, r2
 800409a:	dd07      	ble.n	80040ac <_printf_float+0x2e8>
 800409c:	4613      	mov	r3, r2
 800409e:	4631      	mov	r1, r6
 80040a0:	4642      	mov	r2, r8
 80040a2:	4628      	mov	r0, r5
 80040a4:	47b8      	blx	r7
 80040a6:	3001      	adds	r0, #1
 80040a8:	f43f aee9 	beq.w	8003e7e <_printf_float+0xba>
 80040ac:	f104 031a 	add.w	r3, r4, #26
 80040b0:	f04f 0b00 	mov.w	fp, #0
 80040b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040b8:	9306      	str	r3, [sp, #24]
 80040ba:	e015      	b.n	80040e8 <_printf_float+0x324>
 80040bc:	7fefffff 	.word	0x7fefffff
 80040c0:	08008154 	.word	0x08008154
 80040c4:	08008150 	.word	0x08008150
 80040c8:	0800815c 	.word	0x0800815c
 80040cc:	08008158 	.word	0x08008158
 80040d0:	08008160 	.word	0x08008160
 80040d4:	2301      	movs	r3, #1
 80040d6:	9a06      	ldr	r2, [sp, #24]
 80040d8:	4631      	mov	r1, r6
 80040da:	4628      	mov	r0, r5
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	f43f aecd 	beq.w	8003e7e <_printf_float+0xba>
 80040e4:	f10b 0b01 	add.w	fp, fp, #1
 80040e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80040ec:	ebaa 0309 	sub.w	r3, sl, r9
 80040f0:	455b      	cmp	r3, fp
 80040f2:	dcef      	bgt.n	80040d4 <_printf_float+0x310>
 80040f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040f8:	429a      	cmp	r2, r3
 80040fa:	44d0      	add	r8, sl
 80040fc:	db15      	blt.n	800412a <_printf_float+0x366>
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	07da      	lsls	r2, r3, #31
 8004102:	d412      	bmi.n	800412a <_printf_float+0x366>
 8004104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004106:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004108:	eba3 020a 	sub.w	r2, r3, sl
 800410c:	eba3 0a01 	sub.w	sl, r3, r1
 8004110:	4592      	cmp	sl, r2
 8004112:	bfa8      	it	ge
 8004114:	4692      	movge	sl, r2
 8004116:	f1ba 0f00 	cmp.w	sl, #0
 800411a:	dc0e      	bgt.n	800413a <_printf_float+0x376>
 800411c:	f04f 0800 	mov.w	r8, #0
 8004120:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004124:	f104 091a 	add.w	r9, r4, #26
 8004128:	e019      	b.n	800415e <_printf_float+0x39a>
 800412a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800412e:	4631      	mov	r1, r6
 8004130:	4628      	mov	r0, r5
 8004132:	47b8      	blx	r7
 8004134:	3001      	adds	r0, #1
 8004136:	d1e5      	bne.n	8004104 <_printf_float+0x340>
 8004138:	e6a1      	b.n	8003e7e <_printf_float+0xba>
 800413a:	4653      	mov	r3, sl
 800413c:	4642      	mov	r2, r8
 800413e:	4631      	mov	r1, r6
 8004140:	4628      	mov	r0, r5
 8004142:	47b8      	blx	r7
 8004144:	3001      	adds	r0, #1
 8004146:	d1e9      	bne.n	800411c <_printf_float+0x358>
 8004148:	e699      	b.n	8003e7e <_printf_float+0xba>
 800414a:	2301      	movs	r3, #1
 800414c:	464a      	mov	r2, r9
 800414e:	4631      	mov	r1, r6
 8004150:	4628      	mov	r0, r5
 8004152:	47b8      	blx	r7
 8004154:	3001      	adds	r0, #1
 8004156:	f43f ae92 	beq.w	8003e7e <_printf_float+0xba>
 800415a:	f108 0801 	add.w	r8, r8, #1
 800415e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004162:	1a9b      	subs	r3, r3, r2
 8004164:	eba3 030a 	sub.w	r3, r3, sl
 8004168:	4543      	cmp	r3, r8
 800416a:	dcee      	bgt.n	800414a <_printf_float+0x386>
 800416c:	e74a      	b.n	8004004 <_printf_float+0x240>
 800416e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004170:	2a01      	cmp	r2, #1
 8004172:	dc01      	bgt.n	8004178 <_printf_float+0x3b4>
 8004174:	07db      	lsls	r3, r3, #31
 8004176:	d53a      	bpl.n	80041ee <_printf_float+0x42a>
 8004178:	2301      	movs	r3, #1
 800417a:	4642      	mov	r2, r8
 800417c:	4631      	mov	r1, r6
 800417e:	4628      	mov	r0, r5
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	f43f ae7b 	beq.w	8003e7e <_printf_float+0xba>
 8004188:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f108 0801 	add.w	r8, r8, #1
 8004198:	f43f ae71 	beq.w	8003e7e <_printf_float+0xba>
 800419c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800419e:	2200      	movs	r2, #0
 80041a0:	f103 3aff 	add.w	sl, r3, #4294967295
 80041a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80041a8:	2300      	movs	r3, #0
 80041aa:	f7fc fc95 	bl	8000ad8 <__aeabi_dcmpeq>
 80041ae:	b9c8      	cbnz	r0, 80041e4 <_printf_float+0x420>
 80041b0:	4653      	mov	r3, sl
 80041b2:	4642      	mov	r2, r8
 80041b4:	4631      	mov	r1, r6
 80041b6:	4628      	mov	r0, r5
 80041b8:	47b8      	blx	r7
 80041ba:	3001      	adds	r0, #1
 80041bc:	d10e      	bne.n	80041dc <_printf_float+0x418>
 80041be:	e65e      	b.n	8003e7e <_printf_float+0xba>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4652      	mov	r2, sl
 80041c4:	4631      	mov	r1, r6
 80041c6:	4628      	mov	r0, r5
 80041c8:	47b8      	blx	r7
 80041ca:	3001      	adds	r0, #1
 80041cc:	f43f ae57 	beq.w	8003e7e <_printf_float+0xba>
 80041d0:	f108 0801 	add.w	r8, r8, #1
 80041d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041d6:	3b01      	subs	r3, #1
 80041d8:	4543      	cmp	r3, r8
 80041da:	dcf1      	bgt.n	80041c0 <_printf_float+0x3fc>
 80041dc:	464b      	mov	r3, r9
 80041de:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80041e2:	e6de      	b.n	8003fa2 <_printf_float+0x1de>
 80041e4:	f04f 0800 	mov.w	r8, #0
 80041e8:	f104 0a1a 	add.w	sl, r4, #26
 80041ec:	e7f2      	b.n	80041d4 <_printf_float+0x410>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e7df      	b.n	80041b2 <_printf_float+0x3ee>
 80041f2:	2301      	movs	r3, #1
 80041f4:	464a      	mov	r2, r9
 80041f6:	4631      	mov	r1, r6
 80041f8:	4628      	mov	r0, r5
 80041fa:	47b8      	blx	r7
 80041fc:	3001      	adds	r0, #1
 80041fe:	f43f ae3e 	beq.w	8003e7e <_printf_float+0xba>
 8004202:	f108 0801 	add.w	r8, r8, #1
 8004206:	68e3      	ldr	r3, [r4, #12]
 8004208:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800420a:	1a9b      	subs	r3, r3, r2
 800420c:	4543      	cmp	r3, r8
 800420e:	dcf0      	bgt.n	80041f2 <_printf_float+0x42e>
 8004210:	e6fc      	b.n	800400c <_printf_float+0x248>
 8004212:	f04f 0800 	mov.w	r8, #0
 8004216:	f104 0919 	add.w	r9, r4, #25
 800421a:	e7f4      	b.n	8004206 <_printf_float+0x442>
 800421c:	2900      	cmp	r1, #0
 800421e:	f43f ae8b 	beq.w	8003f38 <_printf_float+0x174>
 8004222:	2300      	movs	r3, #0
 8004224:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8004228:	ab09      	add	r3, sp, #36	; 0x24
 800422a:	9300      	str	r3, [sp, #0]
 800422c:	ec49 8b10 	vmov	d0, r8, r9
 8004230:	6022      	str	r2, [r4, #0]
 8004232:	f8cd a004 	str.w	sl, [sp, #4]
 8004236:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800423a:	4628      	mov	r0, r5
 800423c:	f7ff fd2d 	bl	8003c9a <__cvt>
 8004240:	4680      	mov	r8, r0
 8004242:	e648      	b.n	8003ed6 <_printf_float+0x112>

08004244 <_printf_common>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	4691      	mov	r9, r2
 800424a:	461f      	mov	r7, r3
 800424c:	688a      	ldr	r2, [r1, #8]
 800424e:	690b      	ldr	r3, [r1, #16]
 8004250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004254:	4293      	cmp	r3, r2
 8004256:	bfb8      	it	lt
 8004258:	4613      	movlt	r3, r2
 800425a:	f8c9 3000 	str.w	r3, [r9]
 800425e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004262:	4606      	mov	r6, r0
 8004264:	460c      	mov	r4, r1
 8004266:	b112      	cbz	r2, 800426e <_printf_common+0x2a>
 8004268:	3301      	adds	r3, #1
 800426a:	f8c9 3000 	str.w	r3, [r9]
 800426e:	6823      	ldr	r3, [r4, #0]
 8004270:	0699      	lsls	r1, r3, #26
 8004272:	bf42      	ittt	mi
 8004274:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004278:	3302      	addmi	r3, #2
 800427a:	f8c9 3000 	strmi.w	r3, [r9]
 800427e:	6825      	ldr	r5, [r4, #0]
 8004280:	f015 0506 	ands.w	r5, r5, #6
 8004284:	d107      	bne.n	8004296 <_printf_common+0x52>
 8004286:	f104 0a19 	add.w	sl, r4, #25
 800428a:	68e3      	ldr	r3, [r4, #12]
 800428c:	f8d9 2000 	ldr.w	r2, [r9]
 8004290:	1a9b      	subs	r3, r3, r2
 8004292:	42ab      	cmp	r3, r5
 8004294:	dc28      	bgt.n	80042e8 <_printf_common+0xa4>
 8004296:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800429a:	6822      	ldr	r2, [r4, #0]
 800429c:	3300      	adds	r3, #0
 800429e:	bf18      	it	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	0692      	lsls	r2, r2, #26
 80042a4:	d42d      	bmi.n	8004302 <_printf_common+0xbe>
 80042a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042aa:	4639      	mov	r1, r7
 80042ac:	4630      	mov	r0, r6
 80042ae:	47c0      	blx	r8
 80042b0:	3001      	adds	r0, #1
 80042b2:	d020      	beq.n	80042f6 <_printf_common+0xb2>
 80042b4:	6823      	ldr	r3, [r4, #0]
 80042b6:	68e5      	ldr	r5, [r4, #12]
 80042b8:	f8d9 2000 	ldr.w	r2, [r9]
 80042bc:	f003 0306 	and.w	r3, r3, #6
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	bf08      	it	eq
 80042c4:	1aad      	subeq	r5, r5, r2
 80042c6:	68a3      	ldr	r3, [r4, #8]
 80042c8:	6922      	ldr	r2, [r4, #16]
 80042ca:	bf0c      	ite	eq
 80042cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d0:	2500      	movne	r5, #0
 80042d2:	4293      	cmp	r3, r2
 80042d4:	bfc4      	itt	gt
 80042d6:	1a9b      	subgt	r3, r3, r2
 80042d8:	18ed      	addgt	r5, r5, r3
 80042da:	f04f 0900 	mov.w	r9, #0
 80042de:	341a      	adds	r4, #26
 80042e0:	454d      	cmp	r5, r9
 80042e2:	d11a      	bne.n	800431a <_printf_common+0xd6>
 80042e4:	2000      	movs	r0, #0
 80042e6:	e008      	b.n	80042fa <_printf_common+0xb6>
 80042e8:	2301      	movs	r3, #1
 80042ea:	4652      	mov	r2, sl
 80042ec:	4639      	mov	r1, r7
 80042ee:	4630      	mov	r0, r6
 80042f0:	47c0      	blx	r8
 80042f2:	3001      	adds	r0, #1
 80042f4:	d103      	bne.n	80042fe <_printf_common+0xba>
 80042f6:	f04f 30ff 	mov.w	r0, #4294967295
 80042fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042fe:	3501      	adds	r5, #1
 8004300:	e7c3      	b.n	800428a <_printf_common+0x46>
 8004302:	18e1      	adds	r1, r4, r3
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	2030      	movs	r0, #48	; 0x30
 8004308:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800430c:	4422      	add	r2, r4
 800430e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004312:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004316:	3302      	adds	r3, #2
 8004318:	e7c5      	b.n	80042a6 <_printf_common+0x62>
 800431a:	2301      	movs	r3, #1
 800431c:	4622      	mov	r2, r4
 800431e:	4639      	mov	r1, r7
 8004320:	4630      	mov	r0, r6
 8004322:	47c0      	blx	r8
 8004324:	3001      	adds	r0, #1
 8004326:	d0e6      	beq.n	80042f6 <_printf_common+0xb2>
 8004328:	f109 0901 	add.w	r9, r9, #1
 800432c:	e7d8      	b.n	80042e0 <_printf_common+0x9c>
	...

08004330 <_printf_i>:
 8004330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004334:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004338:	460c      	mov	r4, r1
 800433a:	7e09      	ldrb	r1, [r1, #24]
 800433c:	b085      	sub	sp, #20
 800433e:	296e      	cmp	r1, #110	; 0x6e
 8004340:	4617      	mov	r7, r2
 8004342:	4606      	mov	r6, r0
 8004344:	4698      	mov	r8, r3
 8004346:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004348:	f000 80b3 	beq.w	80044b2 <_printf_i+0x182>
 800434c:	d822      	bhi.n	8004394 <_printf_i+0x64>
 800434e:	2963      	cmp	r1, #99	; 0x63
 8004350:	d036      	beq.n	80043c0 <_printf_i+0x90>
 8004352:	d80a      	bhi.n	800436a <_printf_i+0x3a>
 8004354:	2900      	cmp	r1, #0
 8004356:	f000 80b9 	beq.w	80044cc <_printf_i+0x19c>
 800435a:	2958      	cmp	r1, #88	; 0x58
 800435c:	f000 8083 	beq.w	8004466 <_printf_i+0x136>
 8004360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004364:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004368:	e032      	b.n	80043d0 <_printf_i+0xa0>
 800436a:	2964      	cmp	r1, #100	; 0x64
 800436c:	d001      	beq.n	8004372 <_printf_i+0x42>
 800436e:	2969      	cmp	r1, #105	; 0x69
 8004370:	d1f6      	bne.n	8004360 <_printf_i+0x30>
 8004372:	6820      	ldr	r0, [r4, #0]
 8004374:	6813      	ldr	r3, [r2, #0]
 8004376:	0605      	lsls	r5, r0, #24
 8004378:	f103 0104 	add.w	r1, r3, #4
 800437c:	d52a      	bpl.n	80043d4 <_printf_i+0xa4>
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6011      	str	r1, [r2, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	da03      	bge.n	800438e <_printf_i+0x5e>
 8004386:	222d      	movs	r2, #45	; 0x2d
 8004388:	425b      	negs	r3, r3
 800438a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800438e:	486f      	ldr	r0, [pc, #444]	; (800454c <_printf_i+0x21c>)
 8004390:	220a      	movs	r2, #10
 8004392:	e039      	b.n	8004408 <_printf_i+0xd8>
 8004394:	2973      	cmp	r1, #115	; 0x73
 8004396:	f000 809d 	beq.w	80044d4 <_printf_i+0x1a4>
 800439a:	d808      	bhi.n	80043ae <_printf_i+0x7e>
 800439c:	296f      	cmp	r1, #111	; 0x6f
 800439e:	d020      	beq.n	80043e2 <_printf_i+0xb2>
 80043a0:	2970      	cmp	r1, #112	; 0x70
 80043a2:	d1dd      	bne.n	8004360 <_printf_i+0x30>
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	f043 0320 	orr.w	r3, r3, #32
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	e003      	b.n	80043b6 <_printf_i+0x86>
 80043ae:	2975      	cmp	r1, #117	; 0x75
 80043b0:	d017      	beq.n	80043e2 <_printf_i+0xb2>
 80043b2:	2978      	cmp	r1, #120	; 0x78
 80043b4:	d1d4      	bne.n	8004360 <_printf_i+0x30>
 80043b6:	2378      	movs	r3, #120	; 0x78
 80043b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043bc:	4864      	ldr	r0, [pc, #400]	; (8004550 <_printf_i+0x220>)
 80043be:	e055      	b.n	800446c <_printf_i+0x13c>
 80043c0:	6813      	ldr	r3, [r2, #0]
 80043c2:	1d19      	adds	r1, r3, #4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6011      	str	r1, [r2, #0]
 80043c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043d0:	2301      	movs	r3, #1
 80043d2:	e08c      	b.n	80044ee <_printf_i+0x1be>
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6011      	str	r1, [r2, #0]
 80043d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043dc:	bf18      	it	ne
 80043de:	b21b      	sxthne	r3, r3
 80043e0:	e7cf      	b.n	8004382 <_printf_i+0x52>
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	1d18      	adds	r0, r3, #4
 80043e8:	6010      	str	r0, [r2, #0]
 80043ea:	0628      	lsls	r0, r5, #24
 80043ec:	d501      	bpl.n	80043f2 <_printf_i+0xc2>
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	e002      	b.n	80043f8 <_printf_i+0xc8>
 80043f2:	0668      	lsls	r0, r5, #25
 80043f4:	d5fb      	bpl.n	80043ee <_printf_i+0xbe>
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	4854      	ldr	r0, [pc, #336]	; (800454c <_printf_i+0x21c>)
 80043fa:	296f      	cmp	r1, #111	; 0x6f
 80043fc:	bf14      	ite	ne
 80043fe:	220a      	movne	r2, #10
 8004400:	2208      	moveq	r2, #8
 8004402:	2100      	movs	r1, #0
 8004404:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004408:	6865      	ldr	r5, [r4, #4]
 800440a:	60a5      	str	r5, [r4, #8]
 800440c:	2d00      	cmp	r5, #0
 800440e:	f2c0 8095 	blt.w	800453c <_printf_i+0x20c>
 8004412:	6821      	ldr	r1, [r4, #0]
 8004414:	f021 0104 	bic.w	r1, r1, #4
 8004418:	6021      	str	r1, [r4, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d13d      	bne.n	800449a <_printf_i+0x16a>
 800441e:	2d00      	cmp	r5, #0
 8004420:	f040 808e 	bne.w	8004540 <_printf_i+0x210>
 8004424:	4665      	mov	r5, ip
 8004426:	2a08      	cmp	r2, #8
 8004428:	d10b      	bne.n	8004442 <_printf_i+0x112>
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	07db      	lsls	r3, r3, #31
 800442e:	d508      	bpl.n	8004442 <_printf_i+0x112>
 8004430:	6923      	ldr	r3, [r4, #16]
 8004432:	6862      	ldr	r2, [r4, #4]
 8004434:	429a      	cmp	r2, r3
 8004436:	bfde      	ittt	le
 8004438:	2330      	movle	r3, #48	; 0x30
 800443a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800443e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004442:	ebac 0305 	sub.w	r3, ip, r5
 8004446:	6123      	str	r3, [r4, #16]
 8004448:	f8cd 8000 	str.w	r8, [sp]
 800444c:	463b      	mov	r3, r7
 800444e:	aa03      	add	r2, sp, #12
 8004450:	4621      	mov	r1, r4
 8004452:	4630      	mov	r0, r6
 8004454:	f7ff fef6 	bl	8004244 <_printf_common>
 8004458:	3001      	adds	r0, #1
 800445a:	d14d      	bne.n	80044f8 <_printf_i+0x1c8>
 800445c:	f04f 30ff 	mov.w	r0, #4294967295
 8004460:	b005      	add	sp, #20
 8004462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004466:	4839      	ldr	r0, [pc, #228]	; (800454c <_printf_i+0x21c>)
 8004468:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800446c:	6813      	ldr	r3, [r2, #0]
 800446e:	6821      	ldr	r1, [r4, #0]
 8004470:	1d1d      	adds	r5, r3, #4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6015      	str	r5, [r2, #0]
 8004476:	060a      	lsls	r2, r1, #24
 8004478:	d50b      	bpl.n	8004492 <_printf_i+0x162>
 800447a:	07ca      	lsls	r2, r1, #31
 800447c:	bf44      	itt	mi
 800447e:	f041 0120 	orrmi.w	r1, r1, #32
 8004482:	6021      	strmi	r1, [r4, #0]
 8004484:	b91b      	cbnz	r3, 800448e <_printf_i+0x15e>
 8004486:	6822      	ldr	r2, [r4, #0]
 8004488:	f022 0220 	bic.w	r2, r2, #32
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	2210      	movs	r2, #16
 8004490:	e7b7      	b.n	8004402 <_printf_i+0xd2>
 8004492:	064d      	lsls	r5, r1, #25
 8004494:	bf48      	it	mi
 8004496:	b29b      	uxthmi	r3, r3
 8004498:	e7ef      	b.n	800447a <_printf_i+0x14a>
 800449a:	4665      	mov	r5, ip
 800449c:	fbb3 f1f2 	udiv	r1, r3, r2
 80044a0:	fb02 3311 	mls	r3, r2, r1, r3
 80044a4:	5cc3      	ldrb	r3, [r0, r3]
 80044a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044aa:	460b      	mov	r3, r1
 80044ac:	2900      	cmp	r1, #0
 80044ae:	d1f5      	bne.n	800449c <_printf_i+0x16c>
 80044b0:	e7b9      	b.n	8004426 <_printf_i+0xf6>
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	6825      	ldr	r5, [r4, #0]
 80044b6:	6961      	ldr	r1, [r4, #20]
 80044b8:	1d18      	adds	r0, r3, #4
 80044ba:	6010      	str	r0, [r2, #0]
 80044bc:	0628      	lsls	r0, r5, #24
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	d501      	bpl.n	80044c6 <_printf_i+0x196>
 80044c2:	6019      	str	r1, [r3, #0]
 80044c4:	e002      	b.n	80044cc <_printf_i+0x19c>
 80044c6:	066a      	lsls	r2, r5, #25
 80044c8:	d5fb      	bpl.n	80044c2 <_printf_i+0x192>
 80044ca:	8019      	strh	r1, [r3, #0]
 80044cc:	2300      	movs	r3, #0
 80044ce:	6123      	str	r3, [r4, #16]
 80044d0:	4665      	mov	r5, ip
 80044d2:	e7b9      	b.n	8004448 <_printf_i+0x118>
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	1d19      	adds	r1, r3, #4
 80044d8:	6011      	str	r1, [r2, #0]
 80044da:	681d      	ldr	r5, [r3, #0]
 80044dc:	6862      	ldr	r2, [r4, #4]
 80044de:	2100      	movs	r1, #0
 80044e0:	4628      	mov	r0, r5
 80044e2:	f7fb fe85 	bl	80001f0 <memchr>
 80044e6:	b108      	cbz	r0, 80044ec <_printf_i+0x1bc>
 80044e8:	1b40      	subs	r0, r0, r5
 80044ea:	6060      	str	r0, [r4, #4]
 80044ec:	6863      	ldr	r3, [r4, #4]
 80044ee:	6123      	str	r3, [r4, #16]
 80044f0:	2300      	movs	r3, #0
 80044f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044f6:	e7a7      	b.n	8004448 <_printf_i+0x118>
 80044f8:	6923      	ldr	r3, [r4, #16]
 80044fa:	462a      	mov	r2, r5
 80044fc:	4639      	mov	r1, r7
 80044fe:	4630      	mov	r0, r6
 8004500:	47c0      	blx	r8
 8004502:	3001      	adds	r0, #1
 8004504:	d0aa      	beq.n	800445c <_printf_i+0x12c>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	079b      	lsls	r3, r3, #30
 800450a:	d413      	bmi.n	8004534 <_printf_i+0x204>
 800450c:	68e0      	ldr	r0, [r4, #12]
 800450e:	9b03      	ldr	r3, [sp, #12]
 8004510:	4298      	cmp	r0, r3
 8004512:	bfb8      	it	lt
 8004514:	4618      	movlt	r0, r3
 8004516:	e7a3      	b.n	8004460 <_printf_i+0x130>
 8004518:	2301      	movs	r3, #1
 800451a:	464a      	mov	r2, r9
 800451c:	4639      	mov	r1, r7
 800451e:	4630      	mov	r0, r6
 8004520:	47c0      	blx	r8
 8004522:	3001      	adds	r0, #1
 8004524:	d09a      	beq.n	800445c <_printf_i+0x12c>
 8004526:	3501      	adds	r5, #1
 8004528:	68e3      	ldr	r3, [r4, #12]
 800452a:	9a03      	ldr	r2, [sp, #12]
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	42ab      	cmp	r3, r5
 8004530:	dcf2      	bgt.n	8004518 <_printf_i+0x1e8>
 8004532:	e7eb      	b.n	800450c <_printf_i+0x1dc>
 8004534:	2500      	movs	r5, #0
 8004536:	f104 0919 	add.w	r9, r4, #25
 800453a:	e7f5      	b.n	8004528 <_printf_i+0x1f8>
 800453c:	2b00      	cmp	r3, #0
 800453e:	d1ac      	bne.n	800449a <_printf_i+0x16a>
 8004540:	7803      	ldrb	r3, [r0, #0]
 8004542:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004546:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800454a:	e76c      	b.n	8004426 <_printf_i+0xf6>
 800454c:	08008162 	.word	0x08008162
 8004550:	08008173 	.word	0x08008173

08004554 <_scanf_float>:
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	469a      	mov	sl, r3
 800455a:	688b      	ldr	r3, [r1, #8]
 800455c:	4616      	mov	r6, r2
 800455e:	1e5a      	subs	r2, r3, #1
 8004560:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004564:	b087      	sub	sp, #28
 8004566:	bf83      	ittte	hi
 8004568:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800456c:	189b      	addhi	r3, r3, r2
 800456e:	9301      	strhi	r3, [sp, #4]
 8004570:	2300      	movls	r3, #0
 8004572:	bf86      	itte	hi
 8004574:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004578:	608b      	strhi	r3, [r1, #8]
 800457a:	9301      	strls	r3, [sp, #4]
 800457c:	680b      	ldr	r3, [r1, #0]
 800457e:	4688      	mov	r8, r1
 8004580:	f04f 0b00 	mov.w	fp, #0
 8004584:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004588:	f848 3b1c 	str.w	r3, [r8], #28
 800458c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8004590:	4607      	mov	r7, r0
 8004592:	460c      	mov	r4, r1
 8004594:	4645      	mov	r5, r8
 8004596:	465a      	mov	r2, fp
 8004598:	46d9      	mov	r9, fp
 800459a:	f8cd b008 	str.w	fp, [sp, #8]
 800459e:	68a1      	ldr	r1, [r4, #8]
 80045a0:	b181      	cbz	r1, 80045c4 <_scanf_float+0x70>
 80045a2:	6833      	ldr	r3, [r6, #0]
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b49      	cmp	r3, #73	; 0x49
 80045a8:	d071      	beq.n	800468e <_scanf_float+0x13a>
 80045aa:	d84d      	bhi.n	8004648 <_scanf_float+0xf4>
 80045ac:	2b39      	cmp	r3, #57	; 0x39
 80045ae:	d840      	bhi.n	8004632 <_scanf_float+0xde>
 80045b0:	2b31      	cmp	r3, #49	; 0x31
 80045b2:	f080 8088 	bcs.w	80046c6 <_scanf_float+0x172>
 80045b6:	2b2d      	cmp	r3, #45	; 0x2d
 80045b8:	f000 8090 	beq.w	80046dc <_scanf_float+0x188>
 80045bc:	d815      	bhi.n	80045ea <_scanf_float+0x96>
 80045be:	2b2b      	cmp	r3, #43	; 0x2b
 80045c0:	f000 808c 	beq.w	80046dc <_scanf_float+0x188>
 80045c4:	f1b9 0f00 	cmp.w	r9, #0
 80045c8:	d003      	beq.n	80045d2 <_scanf_float+0x7e>
 80045ca:	6823      	ldr	r3, [r4, #0]
 80045cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d0:	6023      	str	r3, [r4, #0]
 80045d2:	3a01      	subs	r2, #1
 80045d4:	2a01      	cmp	r2, #1
 80045d6:	f200 80ea 	bhi.w	80047ae <_scanf_float+0x25a>
 80045da:	4545      	cmp	r5, r8
 80045dc:	f200 80dc 	bhi.w	8004798 <_scanf_float+0x244>
 80045e0:	2601      	movs	r6, #1
 80045e2:	4630      	mov	r0, r6
 80045e4:	b007      	add	sp, #28
 80045e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ea:	2b2e      	cmp	r3, #46	; 0x2e
 80045ec:	f000 809f 	beq.w	800472e <_scanf_float+0x1da>
 80045f0:	2b30      	cmp	r3, #48	; 0x30
 80045f2:	d1e7      	bne.n	80045c4 <_scanf_float+0x70>
 80045f4:	6820      	ldr	r0, [r4, #0]
 80045f6:	f410 7f80 	tst.w	r0, #256	; 0x100
 80045fa:	d064      	beq.n	80046c6 <_scanf_float+0x172>
 80045fc:	9b01      	ldr	r3, [sp, #4]
 80045fe:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004602:	6020      	str	r0, [r4, #0]
 8004604:	f109 0901 	add.w	r9, r9, #1
 8004608:	b11b      	cbz	r3, 8004612 <_scanf_float+0xbe>
 800460a:	3b01      	subs	r3, #1
 800460c:	3101      	adds	r1, #1
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	60a1      	str	r1, [r4, #8]
 8004612:	68a3      	ldr	r3, [r4, #8]
 8004614:	3b01      	subs	r3, #1
 8004616:	60a3      	str	r3, [r4, #8]
 8004618:	6923      	ldr	r3, [r4, #16]
 800461a:	3301      	adds	r3, #1
 800461c:	6123      	str	r3, [r4, #16]
 800461e:	6873      	ldr	r3, [r6, #4]
 8004620:	3b01      	subs	r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	6073      	str	r3, [r6, #4]
 8004626:	f340 80ac 	ble.w	8004782 <_scanf_float+0x22e>
 800462a:	6833      	ldr	r3, [r6, #0]
 800462c:	3301      	adds	r3, #1
 800462e:	6033      	str	r3, [r6, #0]
 8004630:	e7b5      	b.n	800459e <_scanf_float+0x4a>
 8004632:	2b45      	cmp	r3, #69	; 0x45
 8004634:	f000 8085 	beq.w	8004742 <_scanf_float+0x1ee>
 8004638:	2b46      	cmp	r3, #70	; 0x46
 800463a:	d06a      	beq.n	8004712 <_scanf_float+0x1be>
 800463c:	2b41      	cmp	r3, #65	; 0x41
 800463e:	d1c1      	bne.n	80045c4 <_scanf_float+0x70>
 8004640:	2a01      	cmp	r2, #1
 8004642:	d1bf      	bne.n	80045c4 <_scanf_float+0x70>
 8004644:	2202      	movs	r2, #2
 8004646:	e046      	b.n	80046d6 <_scanf_float+0x182>
 8004648:	2b65      	cmp	r3, #101	; 0x65
 800464a:	d07a      	beq.n	8004742 <_scanf_float+0x1ee>
 800464c:	d818      	bhi.n	8004680 <_scanf_float+0x12c>
 800464e:	2b54      	cmp	r3, #84	; 0x54
 8004650:	d066      	beq.n	8004720 <_scanf_float+0x1cc>
 8004652:	d811      	bhi.n	8004678 <_scanf_float+0x124>
 8004654:	2b4e      	cmp	r3, #78	; 0x4e
 8004656:	d1b5      	bne.n	80045c4 <_scanf_float+0x70>
 8004658:	2a00      	cmp	r2, #0
 800465a:	d146      	bne.n	80046ea <_scanf_float+0x196>
 800465c:	f1b9 0f00 	cmp.w	r9, #0
 8004660:	d145      	bne.n	80046ee <_scanf_float+0x19a>
 8004662:	6821      	ldr	r1, [r4, #0]
 8004664:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8004668:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800466c:	d13f      	bne.n	80046ee <_scanf_float+0x19a>
 800466e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004672:	6021      	str	r1, [r4, #0]
 8004674:	2201      	movs	r2, #1
 8004676:	e02e      	b.n	80046d6 <_scanf_float+0x182>
 8004678:	2b59      	cmp	r3, #89	; 0x59
 800467a:	d01e      	beq.n	80046ba <_scanf_float+0x166>
 800467c:	2b61      	cmp	r3, #97	; 0x61
 800467e:	e7de      	b.n	800463e <_scanf_float+0xea>
 8004680:	2b6e      	cmp	r3, #110	; 0x6e
 8004682:	d0e9      	beq.n	8004658 <_scanf_float+0x104>
 8004684:	d815      	bhi.n	80046b2 <_scanf_float+0x15e>
 8004686:	2b66      	cmp	r3, #102	; 0x66
 8004688:	d043      	beq.n	8004712 <_scanf_float+0x1be>
 800468a:	2b69      	cmp	r3, #105	; 0x69
 800468c:	d19a      	bne.n	80045c4 <_scanf_float+0x70>
 800468e:	f1bb 0f00 	cmp.w	fp, #0
 8004692:	d138      	bne.n	8004706 <_scanf_float+0x1b2>
 8004694:	f1b9 0f00 	cmp.w	r9, #0
 8004698:	d197      	bne.n	80045ca <_scanf_float+0x76>
 800469a:	6821      	ldr	r1, [r4, #0]
 800469c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80046a0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80046a4:	d195      	bne.n	80045d2 <_scanf_float+0x7e>
 80046a6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80046aa:	6021      	str	r1, [r4, #0]
 80046ac:	f04f 0b01 	mov.w	fp, #1
 80046b0:	e011      	b.n	80046d6 <_scanf_float+0x182>
 80046b2:	2b74      	cmp	r3, #116	; 0x74
 80046b4:	d034      	beq.n	8004720 <_scanf_float+0x1cc>
 80046b6:	2b79      	cmp	r3, #121	; 0x79
 80046b8:	d184      	bne.n	80045c4 <_scanf_float+0x70>
 80046ba:	f1bb 0f07 	cmp.w	fp, #7
 80046be:	d181      	bne.n	80045c4 <_scanf_float+0x70>
 80046c0:	f04f 0b08 	mov.w	fp, #8
 80046c4:	e007      	b.n	80046d6 <_scanf_float+0x182>
 80046c6:	eb12 0f0b 	cmn.w	r2, fp
 80046ca:	f47f af7b 	bne.w	80045c4 <_scanf_float+0x70>
 80046ce:	6821      	ldr	r1, [r4, #0]
 80046d0:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80046d4:	6021      	str	r1, [r4, #0]
 80046d6:	702b      	strb	r3, [r5, #0]
 80046d8:	3501      	adds	r5, #1
 80046da:	e79a      	b.n	8004612 <_scanf_float+0xbe>
 80046dc:	6821      	ldr	r1, [r4, #0]
 80046de:	0608      	lsls	r0, r1, #24
 80046e0:	f57f af70 	bpl.w	80045c4 <_scanf_float+0x70>
 80046e4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80046e8:	e7f4      	b.n	80046d4 <_scanf_float+0x180>
 80046ea:	2a02      	cmp	r2, #2
 80046ec:	d047      	beq.n	800477e <_scanf_float+0x22a>
 80046ee:	f1bb 0f01 	cmp.w	fp, #1
 80046f2:	d003      	beq.n	80046fc <_scanf_float+0x1a8>
 80046f4:	f1bb 0f04 	cmp.w	fp, #4
 80046f8:	f47f af64 	bne.w	80045c4 <_scanf_float+0x70>
 80046fc:	f10b 0b01 	add.w	fp, fp, #1
 8004700:	fa5f fb8b 	uxtb.w	fp, fp
 8004704:	e7e7      	b.n	80046d6 <_scanf_float+0x182>
 8004706:	f1bb 0f03 	cmp.w	fp, #3
 800470a:	d0f7      	beq.n	80046fc <_scanf_float+0x1a8>
 800470c:	f1bb 0f05 	cmp.w	fp, #5
 8004710:	e7f2      	b.n	80046f8 <_scanf_float+0x1a4>
 8004712:	f1bb 0f02 	cmp.w	fp, #2
 8004716:	f47f af55 	bne.w	80045c4 <_scanf_float+0x70>
 800471a:	f04f 0b03 	mov.w	fp, #3
 800471e:	e7da      	b.n	80046d6 <_scanf_float+0x182>
 8004720:	f1bb 0f06 	cmp.w	fp, #6
 8004724:	f47f af4e 	bne.w	80045c4 <_scanf_float+0x70>
 8004728:	f04f 0b07 	mov.w	fp, #7
 800472c:	e7d3      	b.n	80046d6 <_scanf_float+0x182>
 800472e:	6821      	ldr	r1, [r4, #0]
 8004730:	0588      	lsls	r0, r1, #22
 8004732:	f57f af47 	bpl.w	80045c4 <_scanf_float+0x70>
 8004736:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800473a:	6021      	str	r1, [r4, #0]
 800473c:	f8cd 9008 	str.w	r9, [sp, #8]
 8004740:	e7c9      	b.n	80046d6 <_scanf_float+0x182>
 8004742:	6821      	ldr	r1, [r4, #0]
 8004744:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8004748:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800474c:	d006      	beq.n	800475c <_scanf_float+0x208>
 800474e:	0548      	lsls	r0, r1, #21
 8004750:	f57f af38 	bpl.w	80045c4 <_scanf_float+0x70>
 8004754:	f1b9 0f00 	cmp.w	r9, #0
 8004758:	f43f af3b 	beq.w	80045d2 <_scanf_float+0x7e>
 800475c:	0588      	lsls	r0, r1, #22
 800475e:	bf58      	it	pl
 8004760:	9802      	ldrpl	r0, [sp, #8]
 8004762:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004766:	bf58      	it	pl
 8004768:	eba9 0000 	subpl.w	r0, r9, r0
 800476c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004770:	bf58      	it	pl
 8004772:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8004776:	6021      	str	r1, [r4, #0]
 8004778:	f04f 0900 	mov.w	r9, #0
 800477c:	e7ab      	b.n	80046d6 <_scanf_float+0x182>
 800477e:	2203      	movs	r2, #3
 8004780:	e7a9      	b.n	80046d6 <_scanf_float+0x182>
 8004782:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004786:	9205      	str	r2, [sp, #20]
 8004788:	4631      	mov	r1, r6
 800478a:	4638      	mov	r0, r7
 800478c:	4798      	blx	r3
 800478e:	9a05      	ldr	r2, [sp, #20]
 8004790:	2800      	cmp	r0, #0
 8004792:	f43f af04 	beq.w	800459e <_scanf_float+0x4a>
 8004796:	e715      	b.n	80045c4 <_scanf_float+0x70>
 8004798:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800479c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80047a0:	4632      	mov	r2, r6
 80047a2:	4638      	mov	r0, r7
 80047a4:	4798      	blx	r3
 80047a6:	6923      	ldr	r3, [r4, #16]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	6123      	str	r3, [r4, #16]
 80047ac:	e715      	b.n	80045da <_scanf_float+0x86>
 80047ae:	f10b 33ff 	add.w	r3, fp, #4294967295
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d80a      	bhi.n	80047cc <_scanf_float+0x278>
 80047b6:	f1bb 0f02 	cmp.w	fp, #2
 80047ba:	d968      	bls.n	800488e <_scanf_float+0x33a>
 80047bc:	f1ab 0b03 	sub.w	fp, fp, #3
 80047c0:	fa5f fb8b 	uxtb.w	fp, fp
 80047c4:	eba5 0b0b 	sub.w	fp, r5, fp
 80047c8:	455d      	cmp	r5, fp
 80047ca:	d14b      	bne.n	8004864 <_scanf_float+0x310>
 80047cc:	6823      	ldr	r3, [r4, #0]
 80047ce:	05da      	lsls	r2, r3, #23
 80047d0:	d51f      	bpl.n	8004812 <_scanf_float+0x2be>
 80047d2:	055b      	lsls	r3, r3, #21
 80047d4:	d468      	bmi.n	80048a8 <_scanf_float+0x354>
 80047d6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80047da:	6923      	ldr	r3, [r4, #16]
 80047dc:	2965      	cmp	r1, #101	; 0x65
 80047de:	f103 33ff 	add.w	r3, r3, #4294967295
 80047e2:	f105 3bff 	add.w	fp, r5, #4294967295
 80047e6:	6123      	str	r3, [r4, #16]
 80047e8:	d00d      	beq.n	8004806 <_scanf_float+0x2b2>
 80047ea:	2945      	cmp	r1, #69	; 0x45
 80047ec:	d00b      	beq.n	8004806 <_scanf_float+0x2b2>
 80047ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80047f2:	4632      	mov	r2, r6
 80047f4:	4638      	mov	r0, r7
 80047f6:	4798      	blx	r3
 80047f8:	6923      	ldr	r3, [r4, #16]
 80047fa:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80047fe:	3b01      	subs	r3, #1
 8004800:	f1a5 0b02 	sub.w	fp, r5, #2
 8004804:	6123      	str	r3, [r4, #16]
 8004806:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800480a:	4632      	mov	r2, r6
 800480c:	4638      	mov	r0, r7
 800480e:	4798      	blx	r3
 8004810:	465d      	mov	r5, fp
 8004812:	6826      	ldr	r6, [r4, #0]
 8004814:	f016 0610 	ands.w	r6, r6, #16
 8004818:	d17a      	bne.n	8004910 <_scanf_float+0x3bc>
 800481a:	702e      	strb	r6, [r5, #0]
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004826:	d142      	bne.n	80048ae <_scanf_float+0x35a>
 8004828:	9b02      	ldr	r3, [sp, #8]
 800482a:	eba9 0303 	sub.w	r3, r9, r3
 800482e:	425a      	negs	r2, r3
 8004830:	2b00      	cmp	r3, #0
 8004832:	d149      	bne.n	80048c8 <_scanf_float+0x374>
 8004834:	2200      	movs	r2, #0
 8004836:	4641      	mov	r1, r8
 8004838:	4638      	mov	r0, r7
 800483a:	f000 febd 	bl	80055b8 <_strtod_r>
 800483e:	6825      	ldr	r5, [r4, #0]
 8004840:	f8da 3000 	ldr.w	r3, [sl]
 8004844:	f015 0f02 	tst.w	r5, #2
 8004848:	f103 0204 	add.w	r2, r3, #4
 800484c:	ec59 8b10 	vmov	r8, r9, d0
 8004850:	f8ca 2000 	str.w	r2, [sl]
 8004854:	d043      	beq.n	80048de <_scanf_float+0x38a>
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	e9c3 8900 	strd	r8, r9, [r3]
 800485c:	68e3      	ldr	r3, [r4, #12]
 800485e:	3301      	adds	r3, #1
 8004860:	60e3      	str	r3, [r4, #12]
 8004862:	e6be      	b.n	80045e2 <_scanf_float+0x8e>
 8004864:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004868:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800486c:	4632      	mov	r2, r6
 800486e:	4638      	mov	r0, r7
 8004870:	4798      	blx	r3
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	3b01      	subs	r3, #1
 8004876:	6123      	str	r3, [r4, #16]
 8004878:	e7a6      	b.n	80047c8 <_scanf_float+0x274>
 800487a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800487e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004882:	4632      	mov	r2, r6
 8004884:	4638      	mov	r0, r7
 8004886:	4798      	blx	r3
 8004888:	6923      	ldr	r3, [r4, #16]
 800488a:	3b01      	subs	r3, #1
 800488c:	6123      	str	r3, [r4, #16]
 800488e:	4545      	cmp	r5, r8
 8004890:	d8f3      	bhi.n	800487a <_scanf_float+0x326>
 8004892:	e6a5      	b.n	80045e0 <_scanf_float+0x8c>
 8004894:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004898:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800489c:	4632      	mov	r2, r6
 800489e:	4638      	mov	r0, r7
 80048a0:	4798      	blx	r3
 80048a2:	6923      	ldr	r3, [r4, #16]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	6123      	str	r3, [r4, #16]
 80048a8:	4545      	cmp	r5, r8
 80048aa:	d8f3      	bhi.n	8004894 <_scanf_float+0x340>
 80048ac:	e698      	b.n	80045e0 <_scanf_float+0x8c>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d0bf      	beq.n	8004834 <_scanf_float+0x2e0>
 80048b4:	9904      	ldr	r1, [sp, #16]
 80048b6:	230a      	movs	r3, #10
 80048b8:	4632      	mov	r2, r6
 80048ba:	3101      	adds	r1, #1
 80048bc:	4638      	mov	r0, r7
 80048be:	f000 ff47 	bl	8005750 <_strtol_r>
 80048c2:	9b03      	ldr	r3, [sp, #12]
 80048c4:	9d04      	ldr	r5, [sp, #16]
 80048c6:	1ac2      	subs	r2, r0, r3
 80048c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80048cc:	429d      	cmp	r5, r3
 80048ce:	bf28      	it	cs
 80048d0:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80048d4:	490f      	ldr	r1, [pc, #60]	; (8004914 <_scanf_float+0x3c0>)
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f83c 	bl	8004954 <siprintf>
 80048dc:	e7aa      	b.n	8004834 <_scanf_float+0x2e0>
 80048de:	f015 0504 	ands.w	r5, r5, #4
 80048e2:	d1b8      	bne.n	8004856 <_scanf_float+0x302>
 80048e4:	681f      	ldr	r7, [r3, #0]
 80048e6:	ee10 2a10 	vmov	r2, s0
 80048ea:	464b      	mov	r3, r9
 80048ec:	ee10 0a10 	vmov	r0, s0
 80048f0:	4649      	mov	r1, r9
 80048f2:	f7fc f923 	bl	8000b3c <__aeabi_dcmpun>
 80048f6:	b128      	cbz	r0, 8004904 <_scanf_float+0x3b0>
 80048f8:	4628      	mov	r0, r5
 80048fa:	f000 f825 	bl	8004948 <nanf>
 80048fe:	ed87 0a00 	vstr	s0, [r7]
 8004902:	e7ab      	b.n	800485c <_scanf_float+0x308>
 8004904:	4640      	mov	r0, r8
 8004906:	4649      	mov	r1, r9
 8004908:	f7fc f976 	bl	8000bf8 <__aeabi_d2f>
 800490c:	6038      	str	r0, [r7, #0]
 800490e:	e7a5      	b.n	800485c <_scanf_float+0x308>
 8004910:	2600      	movs	r6, #0
 8004912:	e666      	b.n	80045e2 <_scanf_float+0x8e>
 8004914:	08008184 	.word	0x08008184

08004918 <iprintf>:
 8004918:	b40f      	push	{r0, r1, r2, r3}
 800491a:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <iprintf+0x2c>)
 800491c:	b513      	push	{r0, r1, r4, lr}
 800491e:	681c      	ldr	r4, [r3, #0]
 8004920:	b124      	cbz	r4, 800492c <iprintf+0x14>
 8004922:	69a3      	ldr	r3, [r4, #24]
 8004924:	b913      	cbnz	r3, 800492c <iprintf+0x14>
 8004926:	4620      	mov	r0, r4
 8004928:	f001 fdaa 	bl	8006480 <__sinit>
 800492c:	ab05      	add	r3, sp, #20
 800492e:	9a04      	ldr	r2, [sp, #16]
 8004930:	68a1      	ldr	r1, [r4, #8]
 8004932:	9301      	str	r3, [sp, #4]
 8004934:	4620      	mov	r0, r4
 8004936:	f002 ffb3 	bl	80078a0 <_vfiprintf_r>
 800493a:	b002      	add	sp, #8
 800493c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004940:	b004      	add	sp, #16
 8004942:	4770      	bx	lr
 8004944:	2000000c 	.word	0x2000000c

08004948 <nanf>:
 8004948:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004950 <nanf+0x8>
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	7fc00000 	.word	0x7fc00000

08004954 <siprintf>:
 8004954:	b40e      	push	{r1, r2, r3}
 8004956:	b500      	push	{lr}
 8004958:	b09c      	sub	sp, #112	; 0x70
 800495a:	ab1d      	add	r3, sp, #116	; 0x74
 800495c:	9002      	str	r0, [sp, #8]
 800495e:	9006      	str	r0, [sp, #24]
 8004960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004964:	4809      	ldr	r0, [pc, #36]	; (800498c <siprintf+0x38>)
 8004966:	9107      	str	r1, [sp, #28]
 8004968:	9104      	str	r1, [sp, #16]
 800496a:	4909      	ldr	r1, [pc, #36]	; (8004990 <siprintf+0x3c>)
 800496c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004970:	9105      	str	r1, [sp, #20]
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	a902      	add	r1, sp, #8
 8004978:	f002 fe70 	bl	800765c <_svfiprintf_r>
 800497c:	9b02      	ldr	r3, [sp, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	b01c      	add	sp, #112	; 0x70
 8004984:	f85d eb04 	ldr.w	lr, [sp], #4
 8004988:	b003      	add	sp, #12
 800498a:	4770      	bx	lr
 800498c:	2000000c 	.word	0x2000000c
 8004990:	ffff0208 	.word	0xffff0208

08004994 <sulp>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	4604      	mov	r4, r0
 8004998:	460d      	mov	r5, r1
 800499a:	ec45 4b10 	vmov	d0, r4, r5
 800499e:	4616      	mov	r6, r2
 80049a0:	f002 fc18 	bl	80071d4 <__ulp>
 80049a4:	ec51 0b10 	vmov	r0, r1, d0
 80049a8:	b17e      	cbz	r6, 80049ca <sulp+0x36>
 80049aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80049ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	dd09      	ble.n	80049ca <sulp+0x36>
 80049b6:	051b      	lsls	r3, r3, #20
 80049b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80049bc:	2400      	movs	r4, #0
 80049be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80049c2:	4622      	mov	r2, r4
 80049c4:	462b      	mov	r3, r5
 80049c6:	f7fb fe1f 	bl	8000608 <__aeabi_dmul>
 80049ca:	bd70      	pop	{r4, r5, r6, pc}
 80049cc:	0000      	movs	r0, r0
	...

080049d0 <_strtod_l>:
 80049d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d4:	461f      	mov	r7, r3
 80049d6:	b0a1      	sub	sp, #132	; 0x84
 80049d8:	2300      	movs	r3, #0
 80049da:	4681      	mov	r9, r0
 80049dc:	4638      	mov	r0, r7
 80049de:	460e      	mov	r6, r1
 80049e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80049e2:	931c      	str	r3, [sp, #112]	; 0x70
 80049e4:	f002 f8ff 	bl	8006be6 <__localeconv_l>
 80049e8:	4680      	mov	r8, r0
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	f7fb fbf8 	bl	80001e0 <strlen>
 80049f0:	f04f 0a00 	mov.w	sl, #0
 80049f4:	4604      	mov	r4, r0
 80049f6:	f04f 0b00 	mov.w	fp, #0
 80049fa:	961b      	str	r6, [sp, #108]	; 0x6c
 80049fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80049fe:	781a      	ldrb	r2, [r3, #0]
 8004a00:	2a0d      	cmp	r2, #13
 8004a02:	d832      	bhi.n	8004a6a <_strtod_l+0x9a>
 8004a04:	2a09      	cmp	r2, #9
 8004a06:	d236      	bcs.n	8004a76 <_strtod_l+0xa6>
 8004a08:	2a00      	cmp	r2, #0
 8004a0a:	d03e      	beq.n	8004a8a <_strtod_l+0xba>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8004a10:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8004a12:	782b      	ldrb	r3, [r5, #0]
 8004a14:	2b30      	cmp	r3, #48	; 0x30
 8004a16:	f040 80ac 	bne.w	8004b72 <_strtod_l+0x1a2>
 8004a1a:	786b      	ldrb	r3, [r5, #1]
 8004a1c:	2b58      	cmp	r3, #88	; 0x58
 8004a1e:	d001      	beq.n	8004a24 <_strtod_l+0x54>
 8004a20:	2b78      	cmp	r3, #120	; 0x78
 8004a22:	d167      	bne.n	8004af4 <_strtod_l+0x124>
 8004a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a26:	9301      	str	r3, [sp, #4]
 8004a28:	ab1c      	add	r3, sp, #112	; 0x70
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	9702      	str	r7, [sp, #8]
 8004a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a30:	4a88      	ldr	r2, [pc, #544]	; (8004c54 <_strtod_l+0x284>)
 8004a32:	a91b      	add	r1, sp, #108	; 0x6c
 8004a34:	4648      	mov	r0, r9
 8004a36:	f001 fdfc 	bl	8006632 <__gethex>
 8004a3a:	f010 0407 	ands.w	r4, r0, #7
 8004a3e:	4606      	mov	r6, r0
 8004a40:	d005      	beq.n	8004a4e <_strtod_l+0x7e>
 8004a42:	2c06      	cmp	r4, #6
 8004a44:	d12b      	bne.n	8004a9e <_strtod_l+0xce>
 8004a46:	3501      	adds	r5, #1
 8004a48:	2300      	movs	r3, #0
 8004a4a:	951b      	str	r5, [sp, #108]	; 0x6c
 8004a4c:	930d      	str	r3, [sp, #52]	; 0x34
 8004a4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f040 859a 	bne.w	800558a <_strtod_l+0xbba>
 8004a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a58:	b1e3      	cbz	r3, 8004a94 <_strtod_l+0xc4>
 8004a5a:	4652      	mov	r2, sl
 8004a5c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004a60:	ec43 2b10 	vmov	d0, r2, r3
 8004a64:	b021      	add	sp, #132	; 0x84
 8004a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a6a:	2a2b      	cmp	r2, #43	; 0x2b
 8004a6c:	d015      	beq.n	8004a9a <_strtod_l+0xca>
 8004a6e:	2a2d      	cmp	r2, #45	; 0x2d
 8004a70:	d004      	beq.n	8004a7c <_strtod_l+0xac>
 8004a72:	2a20      	cmp	r2, #32
 8004a74:	d1ca      	bne.n	8004a0c <_strtod_l+0x3c>
 8004a76:	3301      	adds	r3, #1
 8004a78:	931b      	str	r3, [sp, #108]	; 0x6c
 8004a7a:	e7bf      	b.n	80049fc <_strtod_l+0x2c>
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	920d      	str	r2, [sp, #52]	; 0x34
 8004a80:	1c5a      	adds	r2, r3, #1
 8004a82:	921b      	str	r2, [sp, #108]	; 0x6c
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1c2      	bne.n	8004a10 <_strtod_l+0x40>
 8004a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004a8c:	961b      	str	r6, [sp, #108]	; 0x6c
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 8579 	bne.w	8005586 <_strtod_l+0xbb6>
 8004a94:	4652      	mov	r2, sl
 8004a96:	465b      	mov	r3, fp
 8004a98:	e7e2      	b.n	8004a60 <_strtod_l+0x90>
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	e7ef      	b.n	8004a7e <_strtod_l+0xae>
 8004a9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004aa0:	b13a      	cbz	r2, 8004ab2 <_strtod_l+0xe2>
 8004aa2:	2135      	movs	r1, #53	; 0x35
 8004aa4:	a81e      	add	r0, sp, #120	; 0x78
 8004aa6:	f002 fc8d 	bl	80073c4 <__copybits>
 8004aaa:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004aac:	4648      	mov	r0, r9
 8004aae:	f002 f8f9 	bl	8006ca4 <_Bfree>
 8004ab2:	3c01      	subs	r4, #1
 8004ab4:	2c04      	cmp	r4, #4
 8004ab6:	d806      	bhi.n	8004ac6 <_strtod_l+0xf6>
 8004ab8:	e8df f004 	tbb	[pc, r4]
 8004abc:	1714030a 	.word	0x1714030a
 8004ac0:	0a          	.byte	0x0a
 8004ac1:	00          	.byte	0x00
 8004ac2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8004ac6:	0730      	lsls	r0, r6, #28
 8004ac8:	d5c1      	bpl.n	8004a4e <_strtod_l+0x7e>
 8004aca:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004ace:	e7be      	b.n	8004a4e <_strtod_l+0x7e>
 8004ad0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8004ad4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004ad6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004ada:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004ade:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004ae2:	e7f0      	b.n	8004ac6 <_strtod_l+0xf6>
 8004ae4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004c58 <_strtod_l+0x288>
 8004ae8:	e7ed      	b.n	8004ac6 <_strtod_l+0xf6>
 8004aea:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004aee:	f04f 3aff 	mov.w	sl, #4294967295
 8004af2:	e7e8      	b.n	8004ac6 <_strtod_l+0xf6>
 8004af4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004af6:	1c5a      	adds	r2, r3, #1
 8004af8:	921b      	str	r2, [sp, #108]	; 0x6c
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	2b30      	cmp	r3, #48	; 0x30
 8004afe:	d0f9      	beq.n	8004af4 <_strtod_l+0x124>
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d0a4      	beq.n	8004a4e <_strtod_l+0x7e>
 8004b04:	2301      	movs	r3, #1
 8004b06:	2500      	movs	r5, #0
 8004b08:	9306      	str	r3, [sp, #24]
 8004b0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b0c:	9308      	str	r3, [sp, #32]
 8004b0e:	9507      	str	r5, [sp, #28]
 8004b10:	9505      	str	r5, [sp, #20]
 8004b12:	220a      	movs	r2, #10
 8004b14:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8004b16:	7807      	ldrb	r7, [r0, #0]
 8004b18:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004b1c:	b2d9      	uxtb	r1, r3
 8004b1e:	2909      	cmp	r1, #9
 8004b20:	d929      	bls.n	8004b76 <_strtod_l+0x1a6>
 8004b22:	4622      	mov	r2, r4
 8004b24:	f8d8 1000 	ldr.w	r1, [r8]
 8004b28:	f003 f823 	bl	8007b72 <strncmp>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d031      	beq.n	8004b94 <_strtod_l+0x1c4>
 8004b30:	2000      	movs	r0, #0
 8004b32:	9c05      	ldr	r4, [sp, #20]
 8004b34:	9004      	str	r0, [sp, #16]
 8004b36:	463b      	mov	r3, r7
 8004b38:	4602      	mov	r2, r0
 8004b3a:	2b65      	cmp	r3, #101	; 0x65
 8004b3c:	d001      	beq.n	8004b42 <_strtod_l+0x172>
 8004b3e:	2b45      	cmp	r3, #69	; 0x45
 8004b40:	d114      	bne.n	8004b6c <_strtod_l+0x19c>
 8004b42:	b924      	cbnz	r4, 8004b4e <_strtod_l+0x17e>
 8004b44:	b910      	cbnz	r0, 8004b4c <_strtod_l+0x17c>
 8004b46:	9b06      	ldr	r3, [sp, #24]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d09e      	beq.n	8004a8a <_strtod_l+0xba>
 8004b4c:	2400      	movs	r4, #0
 8004b4e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004b50:	1c73      	adds	r3, r6, #1
 8004b52:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b54:	7873      	ldrb	r3, [r6, #1]
 8004b56:	2b2b      	cmp	r3, #43	; 0x2b
 8004b58:	d078      	beq.n	8004c4c <_strtod_l+0x27c>
 8004b5a:	2b2d      	cmp	r3, #45	; 0x2d
 8004b5c:	d070      	beq.n	8004c40 <_strtod_l+0x270>
 8004b5e:	f04f 0c00 	mov.w	ip, #0
 8004b62:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004b66:	2f09      	cmp	r7, #9
 8004b68:	d97c      	bls.n	8004c64 <_strtod_l+0x294>
 8004b6a:	961b      	str	r6, [sp, #108]	; 0x6c
 8004b6c:	f04f 0e00 	mov.w	lr, #0
 8004b70:	e09a      	b.n	8004ca8 <_strtod_l+0x2d8>
 8004b72:	2300      	movs	r3, #0
 8004b74:	e7c7      	b.n	8004b06 <_strtod_l+0x136>
 8004b76:	9905      	ldr	r1, [sp, #20]
 8004b78:	2908      	cmp	r1, #8
 8004b7a:	bfdd      	ittte	le
 8004b7c:	9907      	ldrle	r1, [sp, #28]
 8004b7e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004b82:	9307      	strle	r3, [sp, #28]
 8004b84:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004b88:	9b05      	ldr	r3, [sp, #20]
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	9305      	str	r3, [sp, #20]
 8004b90:	901b      	str	r0, [sp, #108]	; 0x6c
 8004b92:	e7bf      	b.n	8004b14 <_strtod_l+0x144>
 8004b94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004b96:	191a      	adds	r2, r3, r4
 8004b98:	921b      	str	r2, [sp, #108]	; 0x6c
 8004b9a:	9a05      	ldr	r2, [sp, #20]
 8004b9c:	5d1b      	ldrb	r3, [r3, r4]
 8004b9e:	2a00      	cmp	r2, #0
 8004ba0:	d037      	beq.n	8004c12 <_strtod_l+0x242>
 8004ba2:	9c05      	ldr	r4, [sp, #20]
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004baa:	2909      	cmp	r1, #9
 8004bac:	d913      	bls.n	8004bd6 <_strtod_l+0x206>
 8004bae:	2101      	movs	r1, #1
 8004bb0:	9104      	str	r1, [sp, #16]
 8004bb2:	e7c2      	b.n	8004b3a <_strtod_l+0x16a>
 8004bb4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	921b      	str	r2, [sp, #108]	; 0x6c
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	3001      	adds	r0, #1
 8004bbe:	2b30      	cmp	r3, #48	; 0x30
 8004bc0:	d0f8      	beq.n	8004bb4 <_strtod_l+0x1e4>
 8004bc2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8004bc6:	2a08      	cmp	r2, #8
 8004bc8:	f200 84e4 	bhi.w	8005594 <_strtod_l+0xbc4>
 8004bcc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004bce:	9208      	str	r2, [sp, #32]
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004bda:	f100 0101 	add.w	r1, r0, #1
 8004bde:	d012      	beq.n	8004c06 <_strtod_l+0x236>
 8004be0:	440a      	add	r2, r1
 8004be2:	eb00 0c04 	add.w	ip, r0, r4
 8004be6:	4621      	mov	r1, r4
 8004be8:	270a      	movs	r7, #10
 8004bea:	458c      	cmp	ip, r1
 8004bec:	d113      	bne.n	8004c16 <_strtod_l+0x246>
 8004bee:	1821      	adds	r1, r4, r0
 8004bf0:	2908      	cmp	r1, #8
 8004bf2:	f104 0401 	add.w	r4, r4, #1
 8004bf6:	4404      	add	r4, r0
 8004bf8:	dc19      	bgt.n	8004c2e <_strtod_l+0x25e>
 8004bfa:	9b07      	ldr	r3, [sp, #28]
 8004bfc:	210a      	movs	r1, #10
 8004bfe:	fb01 e303 	mla	r3, r1, r3, lr
 8004c02:	9307      	str	r3, [sp, #28]
 8004c04:	2100      	movs	r1, #0
 8004c06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c08:	1c58      	adds	r0, r3, #1
 8004c0a:	901b      	str	r0, [sp, #108]	; 0x6c
 8004c0c:	785b      	ldrb	r3, [r3, #1]
 8004c0e:	4608      	mov	r0, r1
 8004c10:	e7c9      	b.n	8004ba6 <_strtod_l+0x1d6>
 8004c12:	9805      	ldr	r0, [sp, #20]
 8004c14:	e7d3      	b.n	8004bbe <_strtod_l+0x1ee>
 8004c16:	2908      	cmp	r1, #8
 8004c18:	f101 0101 	add.w	r1, r1, #1
 8004c1c:	dc03      	bgt.n	8004c26 <_strtod_l+0x256>
 8004c1e:	9b07      	ldr	r3, [sp, #28]
 8004c20:	437b      	muls	r3, r7
 8004c22:	9307      	str	r3, [sp, #28]
 8004c24:	e7e1      	b.n	8004bea <_strtod_l+0x21a>
 8004c26:	2910      	cmp	r1, #16
 8004c28:	bfd8      	it	le
 8004c2a:	437d      	mulle	r5, r7
 8004c2c:	e7dd      	b.n	8004bea <_strtod_l+0x21a>
 8004c2e:	2c10      	cmp	r4, #16
 8004c30:	bfdc      	itt	le
 8004c32:	210a      	movle	r1, #10
 8004c34:	fb01 e505 	mlale	r5, r1, r5, lr
 8004c38:	e7e4      	b.n	8004c04 <_strtod_l+0x234>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	9304      	str	r3, [sp, #16]
 8004c3e:	e781      	b.n	8004b44 <_strtod_l+0x174>
 8004c40:	f04f 0c01 	mov.w	ip, #1
 8004c44:	1cb3      	adds	r3, r6, #2
 8004c46:	931b      	str	r3, [sp, #108]	; 0x6c
 8004c48:	78b3      	ldrb	r3, [r6, #2]
 8004c4a:	e78a      	b.n	8004b62 <_strtod_l+0x192>
 8004c4c:	f04f 0c00 	mov.w	ip, #0
 8004c50:	e7f8      	b.n	8004c44 <_strtod_l+0x274>
 8004c52:	bf00      	nop
 8004c54:	0800818c 	.word	0x0800818c
 8004c58:	7ff00000 	.word	0x7ff00000
 8004c5c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c5e:	1c5f      	adds	r7, r3, #1
 8004c60:	971b      	str	r7, [sp, #108]	; 0x6c
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2b30      	cmp	r3, #48	; 0x30
 8004c66:	d0f9      	beq.n	8004c5c <_strtod_l+0x28c>
 8004c68:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8004c6c:	2f08      	cmp	r7, #8
 8004c6e:	f63f af7d 	bhi.w	8004b6c <_strtod_l+0x19c>
 8004c72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004c76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c78:	930a      	str	r3, [sp, #40]	; 0x28
 8004c7a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004c7c:	1c5f      	adds	r7, r3, #1
 8004c7e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004c86:	f1b8 0f09 	cmp.w	r8, #9
 8004c8a:	d937      	bls.n	8004cfc <_strtod_l+0x32c>
 8004c8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004c8e:	1a7f      	subs	r7, r7, r1
 8004c90:	2f08      	cmp	r7, #8
 8004c92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004c96:	dc37      	bgt.n	8004d08 <_strtod_l+0x338>
 8004c98:	45be      	cmp	lr, r7
 8004c9a:	bfa8      	it	ge
 8004c9c:	46be      	movge	lr, r7
 8004c9e:	f1bc 0f00 	cmp.w	ip, #0
 8004ca2:	d001      	beq.n	8004ca8 <_strtod_l+0x2d8>
 8004ca4:	f1ce 0e00 	rsb	lr, lr, #0
 8004ca8:	2c00      	cmp	r4, #0
 8004caa:	d151      	bne.n	8004d50 <_strtod_l+0x380>
 8004cac:	2800      	cmp	r0, #0
 8004cae:	f47f aece 	bne.w	8004a4e <_strtod_l+0x7e>
 8004cb2:	9a06      	ldr	r2, [sp, #24]
 8004cb4:	2a00      	cmp	r2, #0
 8004cb6:	f47f aeca 	bne.w	8004a4e <_strtod_l+0x7e>
 8004cba:	9a04      	ldr	r2, [sp, #16]
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	f47f aee4 	bne.w	8004a8a <_strtod_l+0xba>
 8004cc2:	2b4e      	cmp	r3, #78	; 0x4e
 8004cc4:	d027      	beq.n	8004d16 <_strtod_l+0x346>
 8004cc6:	dc21      	bgt.n	8004d0c <_strtod_l+0x33c>
 8004cc8:	2b49      	cmp	r3, #73	; 0x49
 8004cca:	f47f aede 	bne.w	8004a8a <_strtod_l+0xba>
 8004cce:	49a0      	ldr	r1, [pc, #640]	; (8004f50 <_strtod_l+0x580>)
 8004cd0:	a81b      	add	r0, sp, #108	; 0x6c
 8004cd2:	f001 fee1 	bl	8006a98 <__match>
 8004cd6:	2800      	cmp	r0, #0
 8004cd8:	f43f aed7 	beq.w	8004a8a <_strtod_l+0xba>
 8004cdc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cde:	499d      	ldr	r1, [pc, #628]	; (8004f54 <_strtod_l+0x584>)
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	a81b      	add	r0, sp, #108	; 0x6c
 8004ce4:	931b      	str	r3, [sp, #108]	; 0x6c
 8004ce6:	f001 fed7 	bl	8006a98 <__match>
 8004cea:	b910      	cbnz	r0, 8004cf2 <_strtod_l+0x322>
 8004cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004cee:	3301      	adds	r3, #1
 8004cf0:	931b      	str	r3, [sp, #108]	; 0x6c
 8004cf2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004f68 <_strtod_l+0x598>
 8004cf6:	f04f 0a00 	mov.w	sl, #0
 8004cfa:	e6a8      	b.n	8004a4e <_strtod_l+0x7e>
 8004cfc:	210a      	movs	r1, #10
 8004cfe:	fb01 3e0e 	mla	lr, r1, lr, r3
 8004d02:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004d06:	e7b8      	b.n	8004c7a <_strtod_l+0x2aa>
 8004d08:	46be      	mov	lr, r7
 8004d0a:	e7c8      	b.n	8004c9e <_strtod_l+0x2ce>
 8004d0c:	2b69      	cmp	r3, #105	; 0x69
 8004d0e:	d0de      	beq.n	8004cce <_strtod_l+0x2fe>
 8004d10:	2b6e      	cmp	r3, #110	; 0x6e
 8004d12:	f47f aeba 	bne.w	8004a8a <_strtod_l+0xba>
 8004d16:	4990      	ldr	r1, [pc, #576]	; (8004f58 <_strtod_l+0x588>)
 8004d18:	a81b      	add	r0, sp, #108	; 0x6c
 8004d1a:	f001 febd 	bl	8006a98 <__match>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	f43f aeb3 	beq.w	8004a8a <_strtod_l+0xba>
 8004d24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b28      	cmp	r3, #40	; 0x28
 8004d2a:	d10e      	bne.n	8004d4a <_strtod_l+0x37a>
 8004d2c:	aa1e      	add	r2, sp, #120	; 0x78
 8004d2e:	498b      	ldr	r1, [pc, #556]	; (8004f5c <_strtod_l+0x58c>)
 8004d30:	a81b      	add	r0, sp, #108	; 0x6c
 8004d32:	f001 fec5 	bl	8006ac0 <__hexnan>
 8004d36:	2805      	cmp	r0, #5
 8004d38:	d107      	bne.n	8004d4a <_strtod_l+0x37a>
 8004d3a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004d3c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004d40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004d44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004d48:	e681      	b.n	8004a4e <_strtod_l+0x7e>
 8004d4a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004f70 <_strtod_l+0x5a0>
 8004d4e:	e7d2      	b.n	8004cf6 <_strtod_l+0x326>
 8004d50:	ebae 0302 	sub.w	r3, lr, r2
 8004d54:	9306      	str	r3, [sp, #24]
 8004d56:	9b05      	ldr	r3, [sp, #20]
 8004d58:	9807      	ldr	r0, [sp, #28]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	bf08      	it	eq
 8004d5e:	4623      	moveq	r3, r4
 8004d60:	2c10      	cmp	r4, #16
 8004d62:	9305      	str	r3, [sp, #20]
 8004d64:	46a0      	mov	r8, r4
 8004d66:	bfa8      	it	ge
 8004d68:	f04f 0810 	movge.w	r8, #16
 8004d6c:	f7fb fbd2 	bl	8000514 <__aeabi_ui2d>
 8004d70:	2c09      	cmp	r4, #9
 8004d72:	4682      	mov	sl, r0
 8004d74:	468b      	mov	fp, r1
 8004d76:	dc13      	bgt.n	8004da0 <_strtod_l+0x3d0>
 8004d78:	9b06      	ldr	r3, [sp, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f43f ae67 	beq.w	8004a4e <_strtod_l+0x7e>
 8004d80:	9b06      	ldr	r3, [sp, #24]
 8004d82:	dd7a      	ble.n	8004e7a <_strtod_l+0x4aa>
 8004d84:	2b16      	cmp	r3, #22
 8004d86:	dc61      	bgt.n	8004e4c <_strtod_l+0x47c>
 8004d88:	4a75      	ldr	r2, [pc, #468]	; (8004f60 <_strtod_l+0x590>)
 8004d8a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004d8e:	e9de 0100 	ldrd	r0, r1, [lr]
 8004d92:	4652      	mov	r2, sl
 8004d94:	465b      	mov	r3, fp
 8004d96:	f7fb fc37 	bl	8000608 <__aeabi_dmul>
 8004d9a:	4682      	mov	sl, r0
 8004d9c:	468b      	mov	fp, r1
 8004d9e:	e656      	b.n	8004a4e <_strtod_l+0x7e>
 8004da0:	4b6f      	ldr	r3, [pc, #444]	; (8004f60 <_strtod_l+0x590>)
 8004da2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004da6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004daa:	f7fb fc2d 	bl	8000608 <__aeabi_dmul>
 8004dae:	4606      	mov	r6, r0
 8004db0:	4628      	mov	r0, r5
 8004db2:	460f      	mov	r7, r1
 8004db4:	f7fb fbae 	bl	8000514 <__aeabi_ui2d>
 8004db8:	4602      	mov	r2, r0
 8004dba:	460b      	mov	r3, r1
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	4639      	mov	r1, r7
 8004dc0:	f7fb fa6c 	bl	800029c <__adddf3>
 8004dc4:	2c0f      	cmp	r4, #15
 8004dc6:	4682      	mov	sl, r0
 8004dc8:	468b      	mov	fp, r1
 8004dca:	ddd5      	ble.n	8004d78 <_strtod_l+0x3a8>
 8004dcc:	9b06      	ldr	r3, [sp, #24]
 8004dce:	eba4 0808 	sub.w	r8, r4, r8
 8004dd2:	4498      	add	r8, r3
 8004dd4:	f1b8 0f00 	cmp.w	r8, #0
 8004dd8:	f340 8096 	ble.w	8004f08 <_strtod_l+0x538>
 8004ddc:	f018 030f 	ands.w	r3, r8, #15
 8004de0:	d00a      	beq.n	8004df8 <_strtod_l+0x428>
 8004de2:	495f      	ldr	r1, [pc, #380]	; (8004f60 <_strtod_l+0x590>)
 8004de4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004de8:	4652      	mov	r2, sl
 8004dea:	465b      	mov	r3, fp
 8004dec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004df0:	f7fb fc0a 	bl	8000608 <__aeabi_dmul>
 8004df4:	4682      	mov	sl, r0
 8004df6:	468b      	mov	fp, r1
 8004df8:	f038 080f 	bics.w	r8, r8, #15
 8004dfc:	d073      	beq.n	8004ee6 <_strtod_l+0x516>
 8004dfe:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8004e02:	dd47      	ble.n	8004e94 <_strtod_l+0x4c4>
 8004e04:	2400      	movs	r4, #0
 8004e06:	46a0      	mov	r8, r4
 8004e08:	9407      	str	r4, [sp, #28]
 8004e0a:	9405      	str	r4, [sp, #20]
 8004e0c:	2322      	movs	r3, #34	; 0x22
 8004e0e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004f68 <_strtod_l+0x598>
 8004e12:	f8c9 3000 	str.w	r3, [r9]
 8004e16:	f04f 0a00 	mov.w	sl, #0
 8004e1a:	9b07      	ldr	r3, [sp, #28]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f43f ae16 	beq.w	8004a4e <_strtod_l+0x7e>
 8004e22:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004e24:	4648      	mov	r0, r9
 8004e26:	f001 ff3d 	bl	8006ca4 <_Bfree>
 8004e2a:	9905      	ldr	r1, [sp, #20]
 8004e2c:	4648      	mov	r0, r9
 8004e2e:	f001 ff39 	bl	8006ca4 <_Bfree>
 8004e32:	4641      	mov	r1, r8
 8004e34:	4648      	mov	r0, r9
 8004e36:	f001 ff35 	bl	8006ca4 <_Bfree>
 8004e3a:	9907      	ldr	r1, [sp, #28]
 8004e3c:	4648      	mov	r0, r9
 8004e3e:	f001 ff31 	bl	8006ca4 <_Bfree>
 8004e42:	4621      	mov	r1, r4
 8004e44:	4648      	mov	r0, r9
 8004e46:	f001 ff2d 	bl	8006ca4 <_Bfree>
 8004e4a:	e600      	b.n	8004a4e <_strtod_l+0x7e>
 8004e4c:	9a06      	ldr	r2, [sp, #24]
 8004e4e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004e52:	4293      	cmp	r3, r2
 8004e54:	dbba      	blt.n	8004dcc <_strtod_l+0x3fc>
 8004e56:	4d42      	ldr	r5, [pc, #264]	; (8004f60 <_strtod_l+0x590>)
 8004e58:	f1c4 040f 	rsb	r4, r4, #15
 8004e5c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004e60:	4652      	mov	r2, sl
 8004e62:	465b      	mov	r3, fp
 8004e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004e68:	f7fb fbce 	bl	8000608 <__aeabi_dmul>
 8004e6c:	9b06      	ldr	r3, [sp, #24]
 8004e6e:	1b1c      	subs	r4, r3, r4
 8004e70:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004e74:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e78:	e78d      	b.n	8004d96 <_strtod_l+0x3c6>
 8004e7a:	f113 0f16 	cmn.w	r3, #22
 8004e7e:	dba5      	blt.n	8004dcc <_strtod_l+0x3fc>
 8004e80:	4a37      	ldr	r2, [pc, #220]	; (8004f60 <_strtod_l+0x590>)
 8004e82:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004e86:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004e8a:	4650      	mov	r0, sl
 8004e8c:	4659      	mov	r1, fp
 8004e8e:	f7fb fce5 	bl	800085c <__aeabi_ddiv>
 8004e92:	e782      	b.n	8004d9a <_strtod_l+0x3ca>
 8004e94:	2300      	movs	r3, #0
 8004e96:	4e33      	ldr	r6, [pc, #204]	; (8004f64 <_strtod_l+0x594>)
 8004e98:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004e9c:	4650      	mov	r0, sl
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	461d      	mov	r5, r3
 8004ea2:	f1b8 0f01 	cmp.w	r8, #1
 8004ea6:	dc21      	bgt.n	8004eec <_strtod_l+0x51c>
 8004ea8:	b10b      	cbz	r3, 8004eae <_strtod_l+0x4de>
 8004eaa:	4682      	mov	sl, r0
 8004eac:	468b      	mov	fp, r1
 8004eae:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <_strtod_l+0x594>)
 8004eb0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004eb4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004eb8:	4652      	mov	r2, sl
 8004eba:	465b      	mov	r3, fp
 8004ebc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004ec0:	f7fb fba2 	bl	8000608 <__aeabi_dmul>
 8004ec4:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <_strtod_l+0x598>)
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	400b      	ands	r3, r1
 8004eca:	4928      	ldr	r1, [pc, #160]	; (8004f6c <_strtod_l+0x59c>)
 8004ecc:	428b      	cmp	r3, r1
 8004ece:	4682      	mov	sl, r0
 8004ed0:	d898      	bhi.n	8004e04 <_strtod_l+0x434>
 8004ed2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ed6:	428b      	cmp	r3, r1
 8004ed8:	bf86      	itte	hi
 8004eda:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004f74 <_strtod_l+0x5a4>
 8004ede:	f04f 3aff 	movhi.w	sl, #4294967295
 8004ee2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9304      	str	r3, [sp, #16]
 8004eea:	e077      	b.n	8004fdc <_strtod_l+0x60c>
 8004eec:	f018 0f01 	tst.w	r8, #1
 8004ef0:	d006      	beq.n	8004f00 <_strtod_l+0x530>
 8004ef2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f7fb fb85 	bl	8000608 <__aeabi_dmul>
 8004efe:	2301      	movs	r3, #1
 8004f00:	3501      	adds	r5, #1
 8004f02:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004f06:	e7cc      	b.n	8004ea2 <_strtod_l+0x4d2>
 8004f08:	d0ed      	beq.n	8004ee6 <_strtod_l+0x516>
 8004f0a:	f1c8 0800 	rsb	r8, r8, #0
 8004f0e:	f018 020f 	ands.w	r2, r8, #15
 8004f12:	d00a      	beq.n	8004f2a <_strtod_l+0x55a>
 8004f14:	4b12      	ldr	r3, [pc, #72]	; (8004f60 <_strtod_l+0x590>)
 8004f16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	f7fb fc9b 	bl	800085c <__aeabi_ddiv>
 8004f26:	4682      	mov	sl, r0
 8004f28:	468b      	mov	fp, r1
 8004f2a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004f2e:	d0da      	beq.n	8004ee6 <_strtod_l+0x516>
 8004f30:	f1b8 0f1f 	cmp.w	r8, #31
 8004f34:	dd20      	ble.n	8004f78 <_strtod_l+0x5a8>
 8004f36:	2400      	movs	r4, #0
 8004f38:	46a0      	mov	r8, r4
 8004f3a:	9407      	str	r4, [sp, #28]
 8004f3c:	9405      	str	r4, [sp, #20]
 8004f3e:	2322      	movs	r3, #34	; 0x22
 8004f40:	f04f 0a00 	mov.w	sl, #0
 8004f44:	f04f 0b00 	mov.w	fp, #0
 8004f48:	f8c9 3000 	str.w	r3, [r9]
 8004f4c:	e765      	b.n	8004e1a <_strtod_l+0x44a>
 8004f4e:	bf00      	nop
 8004f50:	08008155 	.word	0x08008155
 8004f54:	080081e3 	.word	0x080081e3
 8004f58:	0800815d 	.word	0x0800815d
 8004f5c:	080081a0 	.word	0x080081a0
 8004f60:	08008288 	.word	0x08008288
 8004f64:	08008260 	.word	0x08008260
 8004f68:	7ff00000 	.word	0x7ff00000
 8004f6c:	7ca00000 	.word	0x7ca00000
 8004f70:	fff80000 	.word	0xfff80000
 8004f74:	7fefffff 	.word	0x7fefffff
 8004f78:	f018 0310 	ands.w	r3, r8, #16
 8004f7c:	bf18      	it	ne
 8004f7e:	236a      	movne	r3, #106	; 0x6a
 8004f80:	4da0      	ldr	r5, [pc, #640]	; (8005204 <_strtod_l+0x834>)
 8004f82:	9304      	str	r3, [sp, #16]
 8004f84:	4650      	mov	r0, sl
 8004f86:	4659      	mov	r1, fp
 8004f88:	2300      	movs	r3, #0
 8004f8a:	f1b8 0f00 	cmp.w	r8, #0
 8004f8e:	f300 810a 	bgt.w	80051a6 <_strtod_l+0x7d6>
 8004f92:	b10b      	cbz	r3, 8004f98 <_strtod_l+0x5c8>
 8004f94:	4682      	mov	sl, r0
 8004f96:	468b      	mov	fp, r1
 8004f98:	9b04      	ldr	r3, [sp, #16]
 8004f9a:	b1bb      	cbz	r3, 8004fcc <_strtod_l+0x5fc>
 8004f9c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004fa0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	4659      	mov	r1, fp
 8004fa8:	dd10      	ble.n	8004fcc <_strtod_l+0x5fc>
 8004faa:	2b1f      	cmp	r3, #31
 8004fac:	f340 8107 	ble.w	80051be <_strtod_l+0x7ee>
 8004fb0:	2b34      	cmp	r3, #52	; 0x34
 8004fb2:	bfde      	ittt	le
 8004fb4:	3b20      	suble	r3, #32
 8004fb6:	f04f 32ff 	movle.w	r2, #4294967295
 8004fba:	fa02 f303 	lslle.w	r3, r2, r3
 8004fbe:	f04f 0a00 	mov.w	sl, #0
 8004fc2:	bfcc      	ite	gt
 8004fc4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004fc8:	ea03 0b01 	andle.w	fp, r3, r1
 8004fcc:	2200      	movs	r2, #0
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4650      	mov	r0, sl
 8004fd2:	4659      	mov	r1, fp
 8004fd4:	f7fb fd80 	bl	8000ad8 <__aeabi_dcmpeq>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d1ac      	bne.n	8004f36 <_strtod_l+0x566>
 8004fdc:	9b07      	ldr	r3, [sp, #28]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	9a05      	ldr	r2, [sp, #20]
 8004fe2:	9908      	ldr	r1, [sp, #32]
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	4648      	mov	r0, r9
 8004fe8:	f001 feae 	bl	8006d48 <__s2b>
 8004fec:	9007      	str	r0, [sp, #28]
 8004fee:	2800      	cmp	r0, #0
 8004ff0:	f43f af08 	beq.w	8004e04 <_strtod_l+0x434>
 8004ff4:	9a06      	ldr	r2, [sp, #24]
 8004ff6:	9b06      	ldr	r3, [sp, #24]
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	f1c3 0300 	rsb	r3, r3, #0
 8004ffe:	bfa8      	it	ge
 8005000:	2300      	movge	r3, #0
 8005002:	930e      	str	r3, [sp, #56]	; 0x38
 8005004:	2400      	movs	r4, #0
 8005006:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800500a:	9316      	str	r3, [sp, #88]	; 0x58
 800500c:	46a0      	mov	r8, r4
 800500e:	9b07      	ldr	r3, [sp, #28]
 8005010:	4648      	mov	r0, r9
 8005012:	6859      	ldr	r1, [r3, #4]
 8005014:	f001 fe12 	bl	8006c3c <_Balloc>
 8005018:	9005      	str	r0, [sp, #20]
 800501a:	2800      	cmp	r0, #0
 800501c:	f43f aef6 	beq.w	8004e0c <_strtod_l+0x43c>
 8005020:	9b07      	ldr	r3, [sp, #28]
 8005022:	691a      	ldr	r2, [r3, #16]
 8005024:	3202      	adds	r2, #2
 8005026:	f103 010c 	add.w	r1, r3, #12
 800502a:	0092      	lsls	r2, r2, #2
 800502c:	300c      	adds	r0, #12
 800502e:	f7fe fe21 	bl	8003c74 <memcpy>
 8005032:	aa1e      	add	r2, sp, #120	; 0x78
 8005034:	a91d      	add	r1, sp, #116	; 0x74
 8005036:	ec4b ab10 	vmov	d0, sl, fp
 800503a:	4648      	mov	r0, r9
 800503c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005040:	f002 f93e 	bl	80072c0 <__d2b>
 8005044:	901c      	str	r0, [sp, #112]	; 0x70
 8005046:	2800      	cmp	r0, #0
 8005048:	f43f aee0 	beq.w	8004e0c <_strtod_l+0x43c>
 800504c:	2101      	movs	r1, #1
 800504e:	4648      	mov	r0, r9
 8005050:	f001 ff06 	bl	8006e60 <__i2b>
 8005054:	4680      	mov	r8, r0
 8005056:	2800      	cmp	r0, #0
 8005058:	f43f aed8 	beq.w	8004e0c <_strtod_l+0x43c>
 800505c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800505e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005060:	2e00      	cmp	r6, #0
 8005062:	bfab      	itete	ge
 8005064:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005066:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005068:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800506a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800506c:	bfac      	ite	ge
 800506e:	18f7      	addge	r7, r6, r3
 8005070:	1b9d      	sublt	r5, r3, r6
 8005072:	9b04      	ldr	r3, [sp, #16]
 8005074:	1af6      	subs	r6, r6, r3
 8005076:	4416      	add	r6, r2
 8005078:	4b63      	ldr	r3, [pc, #396]	; (8005208 <_strtod_l+0x838>)
 800507a:	3e01      	subs	r6, #1
 800507c:	429e      	cmp	r6, r3
 800507e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005082:	f280 80af 	bge.w	80051e4 <_strtod_l+0x814>
 8005086:	1b9b      	subs	r3, r3, r6
 8005088:	2b1f      	cmp	r3, #31
 800508a:	eba2 0203 	sub.w	r2, r2, r3
 800508e:	f04f 0101 	mov.w	r1, #1
 8005092:	f300 809b 	bgt.w	80051cc <_strtod_l+0x7fc>
 8005096:	fa01 f303 	lsl.w	r3, r1, r3
 800509a:	930f      	str	r3, [sp, #60]	; 0x3c
 800509c:	2300      	movs	r3, #0
 800509e:	930a      	str	r3, [sp, #40]	; 0x28
 80050a0:	18be      	adds	r6, r7, r2
 80050a2:	9b04      	ldr	r3, [sp, #16]
 80050a4:	42b7      	cmp	r7, r6
 80050a6:	4415      	add	r5, r2
 80050a8:	441d      	add	r5, r3
 80050aa:	463b      	mov	r3, r7
 80050ac:	bfa8      	it	ge
 80050ae:	4633      	movge	r3, r6
 80050b0:	42ab      	cmp	r3, r5
 80050b2:	bfa8      	it	ge
 80050b4:	462b      	movge	r3, r5
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	bfc2      	ittt	gt
 80050ba:	1af6      	subgt	r6, r6, r3
 80050bc:	1aed      	subgt	r5, r5, r3
 80050be:	1aff      	subgt	r7, r7, r3
 80050c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050c2:	b1bb      	cbz	r3, 80050f4 <_strtod_l+0x724>
 80050c4:	4641      	mov	r1, r8
 80050c6:	461a      	mov	r2, r3
 80050c8:	4648      	mov	r0, r9
 80050ca:	f001 ff69 	bl	8006fa0 <__pow5mult>
 80050ce:	4680      	mov	r8, r0
 80050d0:	2800      	cmp	r0, #0
 80050d2:	f43f ae9b 	beq.w	8004e0c <_strtod_l+0x43c>
 80050d6:	4601      	mov	r1, r0
 80050d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80050da:	4648      	mov	r0, r9
 80050dc:	f001 fec9 	bl	8006e72 <__multiply>
 80050e0:	900c      	str	r0, [sp, #48]	; 0x30
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f43f ae92 	beq.w	8004e0c <_strtod_l+0x43c>
 80050e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80050ea:	4648      	mov	r0, r9
 80050ec:	f001 fdda 	bl	8006ca4 <_Bfree>
 80050f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050f2:	931c      	str	r3, [sp, #112]	; 0x70
 80050f4:	2e00      	cmp	r6, #0
 80050f6:	dc7a      	bgt.n	80051ee <_strtod_l+0x81e>
 80050f8:	9b06      	ldr	r3, [sp, #24]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	dd08      	ble.n	8005110 <_strtod_l+0x740>
 80050fe:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005100:	9905      	ldr	r1, [sp, #20]
 8005102:	4648      	mov	r0, r9
 8005104:	f001 ff4c 	bl	8006fa0 <__pow5mult>
 8005108:	9005      	str	r0, [sp, #20]
 800510a:	2800      	cmp	r0, #0
 800510c:	f43f ae7e 	beq.w	8004e0c <_strtod_l+0x43c>
 8005110:	2d00      	cmp	r5, #0
 8005112:	dd08      	ble.n	8005126 <_strtod_l+0x756>
 8005114:	462a      	mov	r2, r5
 8005116:	9905      	ldr	r1, [sp, #20]
 8005118:	4648      	mov	r0, r9
 800511a:	f001 ff8f 	bl	800703c <__lshift>
 800511e:	9005      	str	r0, [sp, #20]
 8005120:	2800      	cmp	r0, #0
 8005122:	f43f ae73 	beq.w	8004e0c <_strtod_l+0x43c>
 8005126:	2f00      	cmp	r7, #0
 8005128:	dd08      	ble.n	800513c <_strtod_l+0x76c>
 800512a:	4641      	mov	r1, r8
 800512c:	463a      	mov	r2, r7
 800512e:	4648      	mov	r0, r9
 8005130:	f001 ff84 	bl	800703c <__lshift>
 8005134:	4680      	mov	r8, r0
 8005136:	2800      	cmp	r0, #0
 8005138:	f43f ae68 	beq.w	8004e0c <_strtod_l+0x43c>
 800513c:	9a05      	ldr	r2, [sp, #20]
 800513e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005140:	4648      	mov	r0, r9
 8005142:	f001 ffe9 	bl	8007118 <__mdiff>
 8005146:	4604      	mov	r4, r0
 8005148:	2800      	cmp	r0, #0
 800514a:	f43f ae5f 	beq.w	8004e0c <_strtod_l+0x43c>
 800514e:	68c3      	ldr	r3, [r0, #12]
 8005150:	930c      	str	r3, [sp, #48]	; 0x30
 8005152:	2300      	movs	r3, #0
 8005154:	60c3      	str	r3, [r0, #12]
 8005156:	4641      	mov	r1, r8
 8005158:	f001 ffc4 	bl	80070e4 <__mcmp>
 800515c:	2800      	cmp	r0, #0
 800515e:	da55      	bge.n	800520c <_strtod_l+0x83c>
 8005160:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005162:	b9e3      	cbnz	r3, 800519e <_strtod_l+0x7ce>
 8005164:	f1ba 0f00 	cmp.w	sl, #0
 8005168:	d119      	bne.n	800519e <_strtod_l+0x7ce>
 800516a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800516e:	b9b3      	cbnz	r3, 800519e <_strtod_l+0x7ce>
 8005170:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005174:	0d1b      	lsrs	r3, r3, #20
 8005176:	051b      	lsls	r3, r3, #20
 8005178:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800517c:	d90f      	bls.n	800519e <_strtod_l+0x7ce>
 800517e:	6963      	ldr	r3, [r4, #20]
 8005180:	b913      	cbnz	r3, 8005188 <_strtod_l+0x7b8>
 8005182:	6923      	ldr	r3, [r4, #16]
 8005184:	2b01      	cmp	r3, #1
 8005186:	dd0a      	ble.n	800519e <_strtod_l+0x7ce>
 8005188:	4621      	mov	r1, r4
 800518a:	2201      	movs	r2, #1
 800518c:	4648      	mov	r0, r9
 800518e:	f001 ff55 	bl	800703c <__lshift>
 8005192:	4641      	mov	r1, r8
 8005194:	4604      	mov	r4, r0
 8005196:	f001 ffa5 	bl	80070e4 <__mcmp>
 800519a:	2800      	cmp	r0, #0
 800519c:	dc67      	bgt.n	800526e <_strtod_l+0x89e>
 800519e:	9b04      	ldr	r3, [sp, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d171      	bne.n	8005288 <_strtod_l+0x8b8>
 80051a4:	e63d      	b.n	8004e22 <_strtod_l+0x452>
 80051a6:	f018 0f01 	tst.w	r8, #1
 80051aa:	d004      	beq.n	80051b6 <_strtod_l+0x7e6>
 80051ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80051b0:	f7fb fa2a 	bl	8000608 <__aeabi_dmul>
 80051b4:	2301      	movs	r3, #1
 80051b6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80051ba:	3508      	adds	r5, #8
 80051bc:	e6e5      	b.n	8004f8a <_strtod_l+0x5ba>
 80051be:	f04f 32ff 	mov.w	r2, #4294967295
 80051c2:	fa02 f303 	lsl.w	r3, r2, r3
 80051c6:	ea03 0a0a 	and.w	sl, r3, sl
 80051ca:	e6ff      	b.n	8004fcc <_strtod_l+0x5fc>
 80051cc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80051d0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80051d4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80051d8:	36e2      	adds	r6, #226	; 0xe2
 80051da:	fa01 f306 	lsl.w	r3, r1, r6
 80051de:	930a      	str	r3, [sp, #40]	; 0x28
 80051e0:	910f      	str	r1, [sp, #60]	; 0x3c
 80051e2:	e75d      	b.n	80050a0 <_strtod_l+0x6d0>
 80051e4:	2300      	movs	r3, #0
 80051e6:	930a      	str	r3, [sp, #40]	; 0x28
 80051e8:	2301      	movs	r3, #1
 80051ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80051ec:	e758      	b.n	80050a0 <_strtod_l+0x6d0>
 80051ee:	4632      	mov	r2, r6
 80051f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80051f2:	4648      	mov	r0, r9
 80051f4:	f001 ff22 	bl	800703c <__lshift>
 80051f8:	901c      	str	r0, [sp, #112]	; 0x70
 80051fa:	2800      	cmp	r0, #0
 80051fc:	f47f af7c 	bne.w	80050f8 <_strtod_l+0x728>
 8005200:	e604      	b.n	8004e0c <_strtod_l+0x43c>
 8005202:	bf00      	nop
 8005204:	080081b8 	.word	0x080081b8
 8005208:	fffffc02 	.word	0xfffffc02
 800520c:	465d      	mov	r5, fp
 800520e:	f040 8086 	bne.w	800531e <_strtod_l+0x94e>
 8005212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005214:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005218:	b32a      	cbz	r2, 8005266 <_strtod_l+0x896>
 800521a:	4aaf      	ldr	r2, [pc, #700]	; (80054d8 <_strtod_l+0xb08>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d153      	bne.n	80052c8 <_strtod_l+0x8f8>
 8005220:	9b04      	ldr	r3, [sp, #16]
 8005222:	4650      	mov	r0, sl
 8005224:	b1d3      	cbz	r3, 800525c <_strtod_l+0x88c>
 8005226:	4aad      	ldr	r2, [pc, #692]	; (80054dc <_strtod_l+0xb0c>)
 8005228:	402a      	ands	r2, r5
 800522a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800522e:	f04f 31ff 	mov.w	r1, #4294967295
 8005232:	d816      	bhi.n	8005262 <_strtod_l+0x892>
 8005234:	0d12      	lsrs	r2, r2, #20
 8005236:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	4298      	cmp	r0, r3
 8005240:	d142      	bne.n	80052c8 <_strtod_l+0x8f8>
 8005242:	4ba7      	ldr	r3, [pc, #668]	; (80054e0 <_strtod_l+0xb10>)
 8005244:	429d      	cmp	r5, r3
 8005246:	d102      	bne.n	800524e <_strtod_l+0x87e>
 8005248:	3001      	adds	r0, #1
 800524a:	f43f addf 	beq.w	8004e0c <_strtod_l+0x43c>
 800524e:	4ba3      	ldr	r3, [pc, #652]	; (80054dc <_strtod_l+0xb0c>)
 8005250:	402b      	ands	r3, r5
 8005252:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005256:	f04f 0a00 	mov.w	sl, #0
 800525a:	e7a0      	b.n	800519e <_strtod_l+0x7ce>
 800525c:	f04f 33ff 	mov.w	r3, #4294967295
 8005260:	e7ed      	b.n	800523e <_strtod_l+0x86e>
 8005262:	460b      	mov	r3, r1
 8005264:	e7eb      	b.n	800523e <_strtod_l+0x86e>
 8005266:	bb7b      	cbnz	r3, 80052c8 <_strtod_l+0x8f8>
 8005268:	f1ba 0f00 	cmp.w	sl, #0
 800526c:	d12c      	bne.n	80052c8 <_strtod_l+0x8f8>
 800526e:	9904      	ldr	r1, [sp, #16]
 8005270:	4a9a      	ldr	r2, [pc, #616]	; (80054dc <_strtod_l+0xb0c>)
 8005272:	465b      	mov	r3, fp
 8005274:	b1f1      	cbz	r1, 80052b4 <_strtod_l+0x8e4>
 8005276:	ea02 010b 	and.w	r1, r2, fp
 800527a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800527e:	dc19      	bgt.n	80052b4 <_strtod_l+0x8e4>
 8005280:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005284:	f77f ae5b 	ble.w	8004f3e <_strtod_l+0x56e>
 8005288:	4a96      	ldr	r2, [pc, #600]	; (80054e4 <_strtod_l+0xb14>)
 800528a:	2300      	movs	r3, #0
 800528c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005290:	4650      	mov	r0, sl
 8005292:	4659      	mov	r1, fp
 8005294:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005298:	f7fb f9b6 	bl	8000608 <__aeabi_dmul>
 800529c:	4682      	mov	sl, r0
 800529e:	468b      	mov	fp, r1
 80052a0:	2900      	cmp	r1, #0
 80052a2:	f47f adbe 	bne.w	8004e22 <_strtod_l+0x452>
 80052a6:	2800      	cmp	r0, #0
 80052a8:	f47f adbb 	bne.w	8004e22 <_strtod_l+0x452>
 80052ac:	2322      	movs	r3, #34	; 0x22
 80052ae:	f8c9 3000 	str.w	r3, [r9]
 80052b2:	e5b6      	b.n	8004e22 <_strtod_l+0x452>
 80052b4:	4013      	ands	r3, r2
 80052b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80052ba:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80052be:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80052c2:	f04f 3aff 	mov.w	sl, #4294967295
 80052c6:	e76a      	b.n	800519e <_strtod_l+0x7ce>
 80052c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ca:	b193      	cbz	r3, 80052f2 <_strtod_l+0x922>
 80052cc:	422b      	tst	r3, r5
 80052ce:	f43f af66 	beq.w	800519e <_strtod_l+0x7ce>
 80052d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80052d4:	9a04      	ldr	r2, [sp, #16]
 80052d6:	4650      	mov	r0, sl
 80052d8:	4659      	mov	r1, fp
 80052da:	b173      	cbz	r3, 80052fa <_strtod_l+0x92a>
 80052dc:	f7ff fb5a 	bl	8004994 <sulp>
 80052e0:	4602      	mov	r2, r0
 80052e2:	460b      	mov	r3, r1
 80052e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052e8:	f7fa ffd8 	bl	800029c <__adddf3>
 80052ec:	4682      	mov	sl, r0
 80052ee:	468b      	mov	fp, r1
 80052f0:	e755      	b.n	800519e <_strtod_l+0x7ce>
 80052f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052f4:	ea13 0f0a 	tst.w	r3, sl
 80052f8:	e7e9      	b.n	80052ce <_strtod_l+0x8fe>
 80052fa:	f7ff fb4b 	bl	8004994 <sulp>
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005306:	f7fa ffc7 	bl	8000298 <__aeabi_dsub>
 800530a:	2200      	movs	r2, #0
 800530c:	2300      	movs	r3, #0
 800530e:	4682      	mov	sl, r0
 8005310:	468b      	mov	fp, r1
 8005312:	f7fb fbe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005316:	2800      	cmp	r0, #0
 8005318:	f47f ae11 	bne.w	8004f3e <_strtod_l+0x56e>
 800531c:	e73f      	b.n	800519e <_strtod_l+0x7ce>
 800531e:	4641      	mov	r1, r8
 8005320:	4620      	mov	r0, r4
 8005322:	f002 f81c 	bl	800735e <__ratio>
 8005326:	ec57 6b10 	vmov	r6, r7, d0
 800532a:	2200      	movs	r2, #0
 800532c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005330:	ee10 0a10 	vmov	r0, s0
 8005334:	4639      	mov	r1, r7
 8005336:	f7fb fbe3 	bl	8000b00 <__aeabi_dcmple>
 800533a:	2800      	cmp	r0, #0
 800533c:	d077      	beq.n	800542e <_strtod_l+0xa5e>
 800533e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005340:	2b00      	cmp	r3, #0
 8005342:	d04a      	beq.n	80053da <_strtod_l+0xa0a>
 8005344:	4b68      	ldr	r3, [pc, #416]	; (80054e8 <_strtod_l+0xb18>)
 8005346:	2200      	movs	r2, #0
 8005348:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800534c:	4f66      	ldr	r7, [pc, #408]	; (80054e8 <_strtod_l+0xb18>)
 800534e:	2600      	movs	r6, #0
 8005350:	4b62      	ldr	r3, [pc, #392]	; (80054dc <_strtod_l+0xb0c>)
 8005352:	402b      	ands	r3, r5
 8005354:	930f      	str	r3, [sp, #60]	; 0x3c
 8005356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005358:	4b64      	ldr	r3, [pc, #400]	; (80054ec <_strtod_l+0xb1c>)
 800535a:	429a      	cmp	r2, r3
 800535c:	f040 80ce 	bne.w	80054fc <_strtod_l+0xb2c>
 8005360:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005364:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005368:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800536c:	ec4b ab10 	vmov	d0, sl, fp
 8005370:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005374:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005378:	f001 ff2c 	bl	80071d4 <__ulp>
 800537c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005380:	ec53 2b10 	vmov	r2, r3, d0
 8005384:	f7fb f940 	bl	8000608 <__aeabi_dmul>
 8005388:	4652      	mov	r2, sl
 800538a:	465b      	mov	r3, fp
 800538c:	f7fa ff86 	bl	800029c <__adddf3>
 8005390:	460b      	mov	r3, r1
 8005392:	4952      	ldr	r1, [pc, #328]	; (80054dc <_strtod_l+0xb0c>)
 8005394:	4a56      	ldr	r2, [pc, #344]	; (80054f0 <_strtod_l+0xb20>)
 8005396:	4019      	ands	r1, r3
 8005398:	4291      	cmp	r1, r2
 800539a:	4682      	mov	sl, r0
 800539c:	d95b      	bls.n	8005456 <_strtod_l+0xa86>
 800539e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053a0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d103      	bne.n	80053b0 <_strtod_l+0x9e0>
 80053a8:	9b08      	ldr	r3, [sp, #32]
 80053aa:	3301      	adds	r3, #1
 80053ac:	f43f ad2e 	beq.w	8004e0c <_strtod_l+0x43c>
 80053b0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80054e0 <_strtod_l+0xb10>
 80053b4:	f04f 3aff 	mov.w	sl, #4294967295
 80053b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80053ba:	4648      	mov	r0, r9
 80053bc:	f001 fc72 	bl	8006ca4 <_Bfree>
 80053c0:	9905      	ldr	r1, [sp, #20]
 80053c2:	4648      	mov	r0, r9
 80053c4:	f001 fc6e 	bl	8006ca4 <_Bfree>
 80053c8:	4641      	mov	r1, r8
 80053ca:	4648      	mov	r0, r9
 80053cc:	f001 fc6a 	bl	8006ca4 <_Bfree>
 80053d0:	4621      	mov	r1, r4
 80053d2:	4648      	mov	r0, r9
 80053d4:	f001 fc66 	bl	8006ca4 <_Bfree>
 80053d8:	e619      	b.n	800500e <_strtod_l+0x63e>
 80053da:	f1ba 0f00 	cmp.w	sl, #0
 80053de:	d11a      	bne.n	8005416 <_strtod_l+0xa46>
 80053e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053e4:	b9eb      	cbnz	r3, 8005422 <_strtod_l+0xa52>
 80053e6:	2200      	movs	r2, #0
 80053e8:	4b3f      	ldr	r3, [pc, #252]	; (80054e8 <_strtod_l+0xb18>)
 80053ea:	4630      	mov	r0, r6
 80053ec:	4639      	mov	r1, r7
 80053ee:	f7fb fb7d 	bl	8000aec <__aeabi_dcmplt>
 80053f2:	b9c8      	cbnz	r0, 8005428 <_strtod_l+0xa58>
 80053f4:	4630      	mov	r0, r6
 80053f6:	4639      	mov	r1, r7
 80053f8:	2200      	movs	r2, #0
 80053fa:	4b3e      	ldr	r3, [pc, #248]	; (80054f4 <_strtod_l+0xb24>)
 80053fc:	f7fb f904 	bl	8000608 <__aeabi_dmul>
 8005400:	4606      	mov	r6, r0
 8005402:	460f      	mov	r7, r1
 8005404:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005408:	9618      	str	r6, [sp, #96]	; 0x60
 800540a:	9319      	str	r3, [sp, #100]	; 0x64
 800540c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8005410:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005414:	e79c      	b.n	8005350 <_strtod_l+0x980>
 8005416:	f1ba 0f01 	cmp.w	sl, #1
 800541a:	d102      	bne.n	8005422 <_strtod_l+0xa52>
 800541c:	2d00      	cmp	r5, #0
 800541e:	f43f ad8e 	beq.w	8004f3e <_strtod_l+0x56e>
 8005422:	2200      	movs	r2, #0
 8005424:	4b34      	ldr	r3, [pc, #208]	; (80054f8 <_strtod_l+0xb28>)
 8005426:	e78f      	b.n	8005348 <_strtod_l+0x978>
 8005428:	2600      	movs	r6, #0
 800542a:	4f32      	ldr	r7, [pc, #200]	; (80054f4 <_strtod_l+0xb24>)
 800542c:	e7ea      	b.n	8005404 <_strtod_l+0xa34>
 800542e:	4b31      	ldr	r3, [pc, #196]	; (80054f4 <_strtod_l+0xb24>)
 8005430:	4630      	mov	r0, r6
 8005432:	4639      	mov	r1, r7
 8005434:	2200      	movs	r2, #0
 8005436:	f7fb f8e7 	bl	8000608 <__aeabi_dmul>
 800543a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800543c:	4606      	mov	r6, r0
 800543e:	460f      	mov	r7, r1
 8005440:	b933      	cbnz	r3, 8005450 <_strtod_l+0xa80>
 8005442:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005446:	9010      	str	r0, [sp, #64]	; 0x40
 8005448:	9311      	str	r3, [sp, #68]	; 0x44
 800544a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800544e:	e7df      	b.n	8005410 <_strtod_l+0xa40>
 8005450:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005454:	e7f9      	b.n	800544a <_strtod_l+0xa7a>
 8005456:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800545a:	9b04      	ldr	r3, [sp, #16]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1ab      	bne.n	80053b8 <_strtod_l+0x9e8>
 8005460:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005464:	0d1b      	lsrs	r3, r3, #20
 8005466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005468:	051b      	lsls	r3, r3, #20
 800546a:	429a      	cmp	r2, r3
 800546c:	465d      	mov	r5, fp
 800546e:	d1a3      	bne.n	80053b8 <_strtod_l+0x9e8>
 8005470:	4639      	mov	r1, r7
 8005472:	4630      	mov	r0, r6
 8005474:	f7fb fb78 	bl	8000b68 <__aeabi_d2iz>
 8005478:	f7fb f85c 	bl	8000534 <__aeabi_i2d>
 800547c:	460b      	mov	r3, r1
 800547e:	4602      	mov	r2, r0
 8005480:	4639      	mov	r1, r7
 8005482:	4630      	mov	r0, r6
 8005484:	f7fa ff08 	bl	8000298 <__aeabi_dsub>
 8005488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800548a:	4606      	mov	r6, r0
 800548c:	460f      	mov	r7, r1
 800548e:	b933      	cbnz	r3, 800549e <_strtod_l+0xace>
 8005490:	f1ba 0f00 	cmp.w	sl, #0
 8005494:	d103      	bne.n	800549e <_strtod_l+0xace>
 8005496:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800549a:	2d00      	cmp	r5, #0
 800549c:	d06d      	beq.n	800557a <_strtod_l+0xbaa>
 800549e:	a30a      	add	r3, pc, #40	; (adr r3, 80054c8 <_strtod_l+0xaf8>)
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	4630      	mov	r0, r6
 80054a6:	4639      	mov	r1, r7
 80054a8:	f7fb fb20 	bl	8000aec <__aeabi_dcmplt>
 80054ac:	2800      	cmp	r0, #0
 80054ae:	f47f acb8 	bne.w	8004e22 <_strtod_l+0x452>
 80054b2:	a307      	add	r3, pc, #28	; (adr r3, 80054d0 <_strtod_l+0xb00>)
 80054b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b8:	4630      	mov	r0, r6
 80054ba:	4639      	mov	r1, r7
 80054bc:	f7fb fb34 	bl	8000b28 <__aeabi_dcmpgt>
 80054c0:	2800      	cmp	r0, #0
 80054c2:	f43f af79 	beq.w	80053b8 <_strtod_l+0x9e8>
 80054c6:	e4ac      	b.n	8004e22 <_strtod_l+0x452>
 80054c8:	94a03595 	.word	0x94a03595
 80054cc:	3fdfffff 	.word	0x3fdfffff
 80054d0:	35afe535 	.word	0x35afe535
 80054d4:	3fe00000 	.word	0x3fe00000
 80054d8:	000fffff 	.word	0x000fffff
 80054dc:	7ff00000 	.word	0x7ff00000
 80054e0:	7fefffff 	.word	0x7fefffff
 80054e4:	39500000 	.word	0x39500000
 80054e8:	3ff00000 	.word	0x3ff00000
 80054ec:	7fe00000 	.word	0x7fe00000
 80054f0:	7c9fffff 	.word	0x7c9fffff
 80054f4:	3fe00000 	.word	0x3fe00000
 80054f8:	bff00000 	.word	0xbff00000
 80054fc:	9b04      	ldr	r3, [sp, #16]
 80054fe:	b333      	cbz	r3, 800554e <_strtod_l+0xb7e>
 8005500:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005502:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005506:	d822      	bhi.n	800554e <_strtod_l+0xb7e>
 8005508:	a327      	add	r3, pc, #156	; (adr r3, 80055a8 <_strtod_l+0xbd8>)
 800550a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550e:	4630      	mov	r0, r6
 8005510:	4639      	mov	r1, r7
 8005512:	f7fb faf5 	bl	8000b00 <__aeabi_dcmple>
 8005516:	b1a0      	cbz	r0, 8005542 <_strtod_l+0xb72>
 8005518:	4639      	mov	r1, r7
 800551a:	4630      	mov	r0, r6
 800551c:	f7fb fb4c 	bl	8000bb8 <__aeabi_d2uiz>
 8005520:	2800      	cmp	r0, #0
 8005522:	bf08      	it	eq
 8005524:	2001      	moveq	r0, #1
 8005526:	f7fa fff5 	bl	8000514 <__aeabi_ui2d>
 800552a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800552c:	4606      	mov	r6, r0
 800552e:	460f      	mov	r7, r1
 8005530:	bb03      	cbnz	r3, 8005574 <_strtod_l+0xba4>
 8005532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005536:	9012      	str	r0, [sp, #72]	; 0x48
 8005538:	9313      	str	r3, [sp, #76]	; 0x4c
 800553a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800553e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005544:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005546:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800554a:	1a9b      	subs	r3, r3, r2
 800554c:	930b      	str	r3, [sp, #44]	; 0x2c
 800554e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005552:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005556:	f001 fe3d 	bl	80071d4 <__ulp>
 800555a:	4650      	mov	r0, sl
 800555c:	ec53 2b10 	vmov	r2, r3, d0
 8005560:	4659      	mov	r1, fp
 8005562:	f7fb f851 	bl	8000608 <__aeabi_dmul>
 8005566:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800556a:	f7fa fe97 	bl	800029c <__adddf3>
 800556e:	4682      	mov	sl, r0
 8005570:	468b      	mov	fp, r1
 8005572:	e772      	b.n	800545a <_strtod_l+0xa8a>
 8005574:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005578:	e7df      	b.n	800553a <_strtod_l+0xb6a>
 800557a:	a30d      	add	r3, pc, #52	; (adr r3, 80055b0 <_strtod_l+0xbe0>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f7fb fab4 	bl	8000aec <__aeabi_dcmplt>
 8005584:	e79c      	b.n	80054c0 <_strtod_l+0xaf0>
 8005586:	2300      	movs	r3, #0
 8005588:	930d      	str	r3, [sp, #52]	; 0x34
 800558a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800558c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800558e:	6013      	str	r3, [r2, #0]
 8005590:	f7ff ba61 	b.w	8004a56 <_strtod_l+0x86>
 8005594:	2b65      	cmp	r3, #101	; 0x65
 8005596:	f04f 0200 	mov.w	r2, #0
 800559a:	f43f ab4e 	beq.w	8004c3a <_strtod_l+0x26a>
 800559e:	2101      	movs	r1, #1
 80055a0:	4614      	mov	r4, r2
 80055a2:	9104      	str	r1, [sp, #16]
 80055a4:	f7ff bacb 	b.w	8004b3e <_strtod_l+0x16e>
 80055a8:	ffc00000 	.word	0xffc00000
 80055ac:	41dfffff 	.word	0x41dfffff
 80055b0:	94a03595 	.word	0x94a03595
 80055b4:	3fcfffff 	.word	0x3fcfffff

080055b8 <_strtod_r>:
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <_strtod_r+0x18>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	b410      	push	{r4}
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	4c04      	ldr	r4, [pc, #16]	; (80055d4 <_strtod_r+0x1c>)
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	bf08      	it	eq
 80055c6:	4623      	moveq	r3, r4
 80055c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055cc:	f7ff ba00 	b.w	80049d0 <_strtod_l>
 80055d0:	2000000c 	.word	0x2000000c
 80055d4:	20000070 	.word	0x20000070

080055d8 <strtod>:
 80055d8:	4b07      	ldr	r3, [pc, #28]	; (80055f8 <strtod+0x20>)
 80055da:	4a08      	ldr	r2, [pc, #32]	; (80055fc <strtod+0x24>)
 80055dc:	b410      	push	{r4}
 80055de:	681c      	ldr	r4, [r3, #0]
 80055e0:	6a23      	ldr	r3, [r4, #32]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bf08      	it	eq
 80055e6:	4613      	moveq	r3, r2
 80055e8:	460a      	mov	r2, r1
 80055ea:	4601      	mov	r1, r0
 80055ec:	4620      	mov	r0, r4
 80055ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80055f2:	f7ff b9ed 	b.w	80049d0 <_strtod_l>
 80055f6:	bf00      	nop
 80055f8:	2000000c 	.word	0x2000000c
 80055fc:	20000070 	.word	0x20000070

08005600 <__strtok_r>:
 8005600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005602:	b918      	cbnz	r0, 800560c <__strtok_r+0xc>
 8005604:	6810      	ldr	r0, [r2, #0]
 8005606:	b908      	cbnz	r0, 800560c <__strtok_r+0xc>
 8005608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800560a:	4620      	mov	r0, r4
 800560c:	4604      	mov	r4, r0
 800560e:	460f      	mov	r7, r1
 8005610:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005614:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005618:	b91e      	cbnz	r6, 8005622 <__strtok_r+0x22>
 800561a:	b96d      	cbnz	r5, 8005638 <__strtok_r+0x38>
 800561c:	6015      	str	r5, [r2, #0]
 800561e:	4628      	mov	r0, r5
 8005620:	e7f2      	b.n	8005608 <__strtok_r+0x8>
 8005622:	42b5      	cmp	r5, r6
 8005624:	d1f6      	bne.n	8005614 <__strtok_r+0x14>
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ef      	bne.n	800560a <__strtok_r+0xa>
 800562a:	6014      	str	r4, [r2, #0]
 800562c:	7003      	strb	r3, [r0, #0]
 800562e:	e7eb      	b.n	8005608 <__strtok_r+0x8>
 8005630:	462b      	mov	r3, r5
 8005632:	e00d      	b.n	8005650 <__strtok_r+0x50>
 8005634:	b926      	cbnz	r6, 8005640 <__strtok_r+0x40>
 8005636:	461c      	mov	r4, r3
 8005638:	4623      	mov	r3, r4
 800563a:	460f      	mov	r7, r1
 800563c:	f813 5b01 	ldrb.w	r5, [r3], #1
 8005640:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005644:	42b5      	cmp	r5, r6
 8005646:	d1f5      	bne.n	8005634 <__strtok_r+0x34>
 8005648:	2d00      	cmp	r5, #0
 800564a:	d0f1      	beq.n	8005630 <__strtok_r+0x30>
 800564c:	2100      	movs	r1, #0
 800564e:	7021      	strb	r1, [r4, #0]
 8005650:	6013      	str	r3, [r2, #0]
 8005652:	e7d9      	b.n	8005608 <__strtok_r+0x8>

08005654 <strtok_r>:
 8005654:	2301      	movs	r3, #1
 8005656:	f7ff bfd3 	b.w	8005600 <__strtok_r>

0800565a <_strtol_l.isra.0>:
 800565a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800565e:	4680      	mov	r8, r0
 8005660:	4689      	mov	r9, r1
 8005662:	4692      	mov	sl, r2
 8005664:	461e      	mov	r6, r3
 8005666:	460f      	mov	r7, r1
 8005668:	463d      	mov	r5, r7
 800566a:	9808      	ldr	r0, [sp, #32]
 800566c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005670:	f001 fab6 	bl	8006be0 <__locale_ctype_ptr_l>
 8005674:	4420      	add	r0, r4
 8005676:	7843      	ldrb	r3, [r0, #1]
 8005678:	f013 0308 	ands.w	r3, r3, #8
 800567c:	d132      	bne.n	80056e4 <_strtol_l.isra.0+0x8a>
 800567e:	2c2d      	cmp	r4, #45	; 0x2d
 8005680:	d132      	bne.n	80056e8 <_strtol_l.isra.0+0x8e>
 8005682:	787c      	ldrb	r4, [r7, #1]
 8005684:	1cbd      	adds	r5, r7, #2
 8005686:	2201      	movs	r2, #1
 8005688:	2e00      	cmp	r6, #0
 800568a:	d05d      	beq.n	8005748 <_strtol_l.isra.0+0xee>
 800568c:	2e10      	cmp	r6, #16
 800568e:	d109      	bne.n	80056a4 <_strtol_l.isra.0+0x4a>
 8005690:	2c30      	cmp	r4, #48	; 0x30
 8005692:	d107      	bne.n	80056a4 <_strtol_l.isra.0+0x4a>
 8005694:	782b      	ldrb	r3, [r5, #0]
 8005696:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800569a:	2b58      	cmp	r3, #88	; 0x58
 800569c:	d14f      	bne.n	800573e <_strtol_l.isra.0+0xe4>
 800569e:	786c      	ldrb	r4, [r5, #1]
 80056a0:	2610      	movs	r6, #16
 80056a2:	3502      	adds	r5, #2
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	bf14      	ite	ne
 80056a8:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80056ac:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80056b0:	2700      	movs	r7, #0
 80056b2:	fbb1 fcf6 	udiv	ip, r1, r6
 80056b6:	4638      	mov	r0, r7
 80056b8:	fb06 1e1c 	mls	lr, r6, ip, r1
 80056bc:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80056c0:	2b09      	cmp	r3, #9
 80056c2:	d817      	bhi.n	80056f4 <_strtol_l.isra.0+0x9a>
 80056c4:	461c      	mov	r4, r3
 80056c6:	42a6      	cmp	r6, r4
 80056c8:	dd23      	ble.n	8005712 <_strtol_l.isra.0+0xb8>
 80056ca:	1c7b      	adds	r3, r7, #1
 80056cc:	d007      	beq.n	80056de <_strtol_l.isra.0+0x84>
 80056ce:	4584      	cmp	ip, r0
 80056d0:	d31c      	bcc.n	800570c <_strtol_l.isra.0+0xb2>
 80056d2:	d101      	bne.n	80056d8 <_strtol_l.isra.0+0x7e>
 80056d4:	45a6      	cmp	lr, r4
 80056d6:	db19      	blt.n	800570c <_strtol_l.isra.0+0xb2>
 80056d8:	fb00 4006 	mla	r0, r0, r6, r4
 80056dc:	2701      	movs	r7, #1
 80056de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056e2:	e7eb      	b.n	80056bc <_strtol_l.isra.0+0x62>
 80056e4:	462f      	mov	r7, r5
 80056e6:	e7bf      	b.n	8005668 <_strtol_l.isra.0+0xe>
 80056e8:	2c2b      	cmp	r4, #43	; 0x2b
 80056ea:	bf04      	itt	eq
 80056ec:	1cbd      	addeq	r5, r7, #2
 80056ee:	787c      	ldrbeq	r4, [r7, #1]
 80056f0:	461a      	mov	r2, r3
 80056f2:	e7c9      	b.n	8005688 <_strtol_l.isra.0+0x2e>
 80056f4:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80056f8:	2b19      	cmp	r3, #25
 80056fa:	d801      	bhi.n	8005700 <_strtol_l.isra.0+0xa6>
 80056fc:	3c37      	subs	r4, #55	; 0x37
 80056fe:	e7e2      	b.n	80056c6 <_strtol_l.isra.0+0x6c>
 8005700:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005704:	2b19      	cmp	r3, #25
 8005706:	d804      	bhi.n	8005712 <_strtol_l.isra.0+0xb8>
 8005708:	3c57      	subs	r4, #87	; 0x57
 800570a:	e7dc      	b.n	80056c6 <_strtol_l.isra.0+0x6c>
 800570c:	f04f 37ff 	mov.w	r7, #4294967295
 8005710:	e7e5      	b.n	80056de <_strtol_l.isra.0+0x84>
 8005712:	1c7b      	adds	r3, r7, #1
 8005714:	d108      	bne.n	8005728 <_strtol_l.isra.0+0xce>
 8005716:	2322      	movs	r3, #34	; 0x22
 8005718:	f8c8 3000 	str.w	r3, [r8]
 800571c:	4608      	mov	r0, r1
 800571e:	f1ba 0f00 	cmp.w	sl, #0
 8005722:	d107      	bne.n	8005734 <_strtol_l.isra.0+0xda>
 8005724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005728:	b102      	cbz	r2, 800572c <_strtol_l.isra.0+0xd2>
 800572a:	4240      	negs	r0, r0
 800572c:	f1ba 0f00 	cmp.w	sl, #0
 8005730:	d0f8      	beq.n	8005724 <_strtol_l.isra.0+0xca>
 8005732:	b10f      	cbz	r7, 8005738 <_strtol_l.isra.0+0xde>
 8005734:	f105 39ff 	add.w	r9, r5, #4294967295
 8005738:	f8ca 9000 	str.w	r9, [sl]
 800573c:	e7f2      	b.n	8005724 <_strtol_l.isra.0+0xca>
 800573e:	2430      	movs	r4, #48	; 0x30
 8005740:	2e00      	cmp	r6, #0
 8005742:	d1af      	bne.n	80056a4 <_strtol_l.isra.0+0x4a>
 8005744:	2608      	movs	r6, #8
 8005746:	e7ad      	b.n	80056a4 <_strtol_l.isra.0+0x4a>
 8005748:	2c30      	cmp	r4, #48	; 0x30
 800574a:	d0a3      	beq.n	8005694 <_strtol_l.isra.0+0x3a>
 800574c:	260a      	movs	r6, #10
 800574e:	e7a9      	b.n	80056a4 <_strtol_l.isra.0+0x4a>

08005750 <_strtol_r>:
 8005750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005752:	4c06      	ldr	r4, [pc, #24]	; (800576c <_strtol_r+0x1c>)
 8005754:	4d06      	ldr	r5, [pc, #24]	; (8005770 <_strtol_r+0x20>)
 8005756:	6824      	ldr	r4, [r4, #0]
 8005758:	6a24      	ldr	r4, [r4, #32]
 800575a:	2c00      	cmp	r4, #0
 800575c:	bf08      	it	eq
 800575e:	462c      	moveq	r4, r5
 8005760:	9400      	str	r4, [sp, #0]
 8005762:	f7ff ff7a 	bl	800565a <_strtol_l.isra.0>
 8005766:	b003      	add	sp, #12
 8005768:	bd30      	pop	{r4, r5, pc}
 800576a:	bf00      	nop
 800576c:	2000000c 	.word	0x2000000c
 8005770:	20000070 	.word	0x20000070

08005774 <quorem>:
 8005774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005778:	6903      	ldr	r3, [r0, #16]
 800577a:	690c      	ldr	r4, [r1, #16]
 800577c:	42a3      	cmp	r3, r4
 800577e:	4680      	mov	r8, r0
 8005780:	f2c0 8082 	blt.w	8005888 <quorem+0x114>
 8005784:	3c01      	subs	r4, #1
 8005786:	f101 0714 	add.w	r7, r1, #20
 800578a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800578e:	f100 0614 	add.w	r6, r0, #20
 8005792:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005796:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800579a:	eb06 030c 	add.w	r3, r6, ip
 800579e:	3501      	adds	r5, #1
 80057a0:	eb07 090c 	add.w	r9, r7, ip
 80057a4:	9301      	str	r3, [sp, #4]
 80057a6:	fbb0 f5f5 	udiv	r5, r0, r5
 80057aa:	b395      	cbz	r5, 8005812 <quorem+0x9e>
 80057ac:	f04f 0a00 	mov.w	sl, #0
 80057b0:	4638      	mov	r0, r7
 80057b2:	46b6      	mov	lr, r6
 80057b4:	46d3      	mov	fp, sl
 80057b6:	f850 2b04 	ldr.w	r2, [r0], #4
 80057ba:	b293      	uxth	r3, r2
 80057bc:	fb05 a303 	mla	r3, r5, r3, sl
 80057c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	ebab 0303 	sub.w	r3, fp, r3
 80057ca:	0c12      	lsrs	r2, r2, #16
 80057cc:	f8de b000 	ldr.w	fp, [lr]
 80057d0:	fb05 a202 	mla	r2, r5, r2, sl
 80057d4:	fa13 f38b 	uxtah	r3, r3, fp
 80057d8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80057dc:	fa1f fb82 	uxth.w	fp, r2
 80057e0:	f8de 2000 	ldr.w	r2, [lr]
 80057e4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80057e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057f2:	4581      	cmp	r9, r0
 80057f4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80057f8:	f84e 3b04 	str.w	r3, [lr], #4
 80057fc:	d2db      	bcs.n	80057b6 <quorem+0x42>
 80057fe:	f856 300c 	ldr.w	r3, [r6, ip]
 8005802:	b933      	cbnz	r3, 8005812 <quorem+0x9e>
 8005804:	9b01      	ldr	r3, [sp, #4]
 8005806:	3b04      	subs	r3, #4
 8005808:	429e      	cmp	r6, r3
 800580a:	461a      	mov	r2, r3
 800580c:	d330      	bcc.n	8005870 <quorem+0xfc>
 800580e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005812:	4640      	mov	r0, r8
 8005814:	f001 fc66 	bl	80070e4 <__mcmp>
 8005818:	2800      	cmp	r0, #0
 800581a:	db25      	blt.n	8005868 <quorem+0xf4>
 800581c:	3501      	adds	r5, #1
 800581e:	4630      	mov	r0, r6
 8005820:	f04f 0c00 	mov.w	ip, #0
 8005824:	f857 2b04 	ldr.w	r2, [r7], #4
 8005828:	f8d0 e000 	ldr.w	lr, [r0]
 800582c:	b293      	uxth	r3, r2
 800582e:	ebac 0303 	sub.w	r3, ip, r3
 8005832:	0c12      	lsrs	r2, r2, #16
 8005834:	fa13 f38e 	uxtah	r3, r3, lr
 8005838:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800583c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005840:	b29b      	uxth	r3, r3
 8005842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005846:	45b9      	cmp	r9, r7
 8005848:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800584c:	f840 3b04 	str.w	r3, [r0], #4
 8005850:	d2e8      	bcs.n	8005824 <quorem+0xb0>
 8005852:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005856:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800585a:	b92a      	cbnz	r2, 8005868 <quorem+0xf4>
 800585c:	3b04      	subs	r3, #4
 800585e:	429e      	cmp	r6, r3
 8005860:	461a      	mov	r2, r3
 8005862:	d30b      	bcc.n	800587c <quorem+0x108>
 8005864:	f8c8 4010 	str.w	r4, [r8, #16]
 8005868:	4628      	mov	r0, r5
 800586a:	b003      	add	sp, #12
 800586c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	3b04      	subs	r3, #4
 8005874:	2a00      	cmp	r2, #0
 8005876:	d1ca      	bne.n	800580e <quorem+0x9a>
 8005878:	3c01      	subs	r4, #1
 800587a:	e7c5      	b.n	8005808 <quorem+0x94>
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	3b04      	subs	r3, #4
 8005880:	2a00      	cmp	r2, #0
 8005882:	d1ef      	bne.n	8005864 <quorem+0xf0>
 8005884:	3c01      	subs	r4, #1
 8005886:	e7ea      	b.n	800585e <quorem+0xea>
 8005888:	2000      	movs	r0, #0
 800588a:	e7ee      	b.n	800586a <quorem+0xf6>
 800588c:	0000      	movs	r0, r0
	...

08005890 <_dtoa_r>:
 8005890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005894:	ec57 6b10 	vmov	r6, r7, d0
 8005898:	b097      	sub	sp, #92	; 0x5c
 800589a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800589c:	9106      	str	r1, [sp, #24]
 800589e:	4604      	mov	r4, r0
 80058a0:	920b      	str	r2, [sp, #44]	; 0x2c
 80058a2:	9312      	str	r3, [sp, #72]	; 0x48
 80058a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058a8:	e9cd 6700 	strd	r6, r7, [sp]
 80058ac:	b93d      	cbnz	r5, 80058be <_dtoa_r+0x2e>
 80058ae:	2010      	movs	r0, #16
 80058b0:	f001 f9aa 	bl	8006c08 <malloc>
 80058b4:	6260      	str	r0, [r4, #36]	; 0x24
 80058b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80058ba:	6005      	str	r5, [r0, #0]
 80058bc:	60c5      	str	r5, [r0, #12]
 80058be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	b151      	cbz	r1, 80058da <_dtoa_r+0x4a>
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	604a      	str	r2, [r1, #4]
 80058c8:	2301      	movs	r3, #1
 80058ca:	4093      	lsls	r3, r2
 80058cc:	608b      	str	r3, [r1, #8]
 80058ce:	4620      	mov	r0, r4
 80058d0:	f001 f9e8 	bl	8006ca4 <_Bfree>
 80058d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058d6:	2200      	movs	r2, #0
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	1e3b      	subs	r3, r7, #0
 80058dc:	bfbb      	ittet	lt
 80058de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80058e2:	9301      	strlt	r3, [sp, #4]
 80058e4:	2300      	movge	r3, #0
 80058e6:	2201      	movlt	r2, #1
 80058e8:	bfac      	ite	ge
 80058ea:	f8c8 3000 	strge.w	r3, [r8]
 80058ee:	f8c8 2000 	strlt.w	r2, [r8]
 80058f2:	4baf      	ldr	r3, [pc, #700]	; (8005bb0 <_dtoa_r+0x320>)
 80058f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80058f8:	ea33 0308 	bics.w	r3, r3, r8
 80058fc:	d114      	bne.n	8005928 <_dtoa_r+0x98>
 80058fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005900:	f242 730f 	movw	r3, #9999	; 0x270f
 8005904:	6013      	str	r3, [r2, #0]
 8005906:	9b00      	ldr	r3, [sp, #0]
 8005908:	b923      	cbnz	r3, 8005914 <_dtoa_r+0x84>
 800590a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800590e:	2800      	cmp	r0, #0
 8005910:	f000 8542 	beq.w	8006398 <_dtoa_r+0xb08>
 8005914:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005916:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005bc4 <_dtoa_r+0x334>
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8544 	beq.w	80063a8 <_dtoa_r+0xb18>
 8005920:	f10b 0303 	add.w	r3, fp, #3
 8005924:	f000 bd3e 	b.w	80063a4 <_dtoa_r+0xb14>
 8005928:	e9dd 6700 	ldrd	r6, r7, [sp]
 800592c:	2200      	movs	r2, #0
 800592e:	2300      	movs	r3, #0
 8005930:	4630      	mov	r0, r6
 8005932:	4639      	mov	r1, r7
 8005934:	f7fb f8d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005938:	4681      	mov	r9, r0
 800593a:	b168      	cbz	r0, 8005958 <_dtoa_r+0xc8>
 800593c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800593e:	2301      	movs	r3, #1
 8005940:	6013      	str	r3, [r2, #0]
 8005942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8524 	beq.w	8006392 <_dtoa_r+0xb02>
 800594a:	4b9a      	ldr	r3, [pc, #616]	; (8005bb4 <_dtoa_r+0x324>)
 800594c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800594e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	f000 bd28 	b.w	80063a8 <_dtoa_r+0xb18>
 8005958:	aa14      	add	r2, sp, #80	; 0x50
 800595a:	a915      	add	r1, sp, #84	; 0x54
 800595c:	ec47 6b10 	vmov	d0, r6, r7
 8005960:	4620      	mov	r0, r4
 8005962:	f001 fcad 	bl	80072c0 <__d2b>
 8005966:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800596a:	9004      	str	r0, [sp, #16]
 800596c:	2d00      	cmp	r5, #0
 800596e:	d07c      	beq.n	8005a6a <_dtoa_r+0x1da>
 8005970:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005974:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005978:	46b2      	mov	sl, r6
 800597a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800597e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005982:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005986:	2200      	movs	r2, #0
 8005988:	4b8b      	ldr	r3, [pc, #556]	; (8005bb8 <_dtoa_r+0x328>)
 800598a:	4650      	mov	r0, sl
 800598c:	4659      	mov	r1, fp
 800598e:	f7fa fc83 	bl	8000298 <__aeabi_dsub>
 8005992:	a381      	add	r3, pc, #516	; (adr r3, 8005b98 <_dtoa_r+0x308>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005998:	f7fa fe36 	bl	8000608 <__aeabi_dmul>
 800599c:	a380      	add	r3, pc, #512	; (adr r3, 8005ba0 <_dtoa_r+0x310>)
 800599e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059a2:	f7fa fc7b 	bl	800029c <__adddf3>
 80059a6:	4606      	mov	r6, r0
 80059a8:	4628      	mov	r0, r5
 80059aa:	460f      	mov	r7, r1
 80059ac:	f7fa fdc2 	bl	8000534 <__aeabi_i2d>
 80059b0:	a37d      	add	r3, pc, #500	; (adr r3, 8005ba8 <_dtoa_r+0x318>)
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f7fa fe27 	bl	8000608 <__aeabi_dmul>
 80059ba:	4602      	mov	r2, r0
 80059bc:	460b      	mov	r3, r1
 80059be:	4630      	mov	r0, r6
 80059c0:	4639      	mov	r1, r7
 80059c2:	f7fa fc6b 	bl	800029c <__adddf3>
 80059c6:	4606      	mov	r6, r0
 80059c8:	460f      	mov	r7, r1
 80059ca:	f7fb f8cd 	bl	8000b68 <__aeabi_d2iz>
 80059ce:	2200      	movs	r2, #0
 80059d0:	4682      	mov	sl, r0
 80059d2:	2300      	movs	r3, #0
 80059d4:	4630      	mov	r0, r6
 80059d6:	4639      	mov	r1, r7
 80059d8:	f7fb f888 	bl	8000aec <__aeabi_dcmplt>
 80059dc:	b148      	cbz	r0, 80059f2 <_dtoa_r+0x162>
 80059de:	4650      	mov	r0, sl
 80059e0:	f7fa fda8 	bl	8000534 <__aeabi_i2d>
 80059e4:	4632      	mov	r2, r6
 80059e6:	463b      	mov	r3, r7
 80059e8:	f7fb f876 	bl	8000ad8 <__aeabi_dcmpeq>
 80059ec:	b908      	cbnz	r0, 80059f2 <_dtoa_r+0x162>
 80059ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059f2:	f1ba 0f16 	cmp.w	sl, #22
 80059f6:	d859      	bhi.n	8005aac <_dtoa_r+0x21c>
 80059f8:	4970      	ldr	r1, [pc, #448]	; (8005bbc <_dtoa_r+0x32c>)
 80059fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80059fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a06:	f7fb f88f 	bl	8000b28 <__aeabi_dcmpgt>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	d050      	beq.n	8005ab0 <_dtoa_r+0x220>
 8005a0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a12:	2300      	movs	r3, #0
 8005a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005a18:	1b5d      	subs	r5, r3, r5
 8005a1a:	f1b5 0801 	subs.w	r8, r5, #1
 8005a1e:	bf49      	itett	mi
 8005a20:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a24:	2300      	movpl	r3, #0
 8005a26:	9305      	strmi	r3, [sp, #20]
 8005a28:	f04f 0800 	movmi.w	r8, #0
 8005a2c:	bf58      	it	pl
 8005a2e:	9305      	strpl	r3, [sp, #20]
 8005a30:	f1ba 0f00 	cmp.w	sl, #0
 8005a34:	db3e      	blt.n	8005ab4 <_dtoa_r+0x224>
 8005a36:	2300      	movs	r3, #0
 8005a38:	44d0      	add	r8, sl
 8005a3a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005a3e:	9307      	str	r3, [sp, #28]
 8005a40:	9b06      	ldr	r3, [sp, #24]
 8005a42:	2b09      	cmp	r3, #9
 8005a44:	f200 8090 	bhi.w	8005b68 <_dtoa_r+0x2d8>
 8005a48:	2b05      	cmp	r3, #5
 8005a4a:	bfc4      	itt	gt
 8005a4c:	3b04      	subgt	r3, #4
 8005a4e:	9306      	strgt	r3, [sp, #24]
 8005a50:	9b06      	ldr	r3, [sp, #24]
 8005a52:	f1a3 0302 	sub.w	r3, r3, #2
 8005a56:	bfcc      	ite	gt
 8005a58:	2500      	movgt	r5, #0
 8005a5a:	2501      	movle	r5, #1
 8005a5c:	2b03      	cmp	r3, #3
 8005a5e:	f200 808f 	bhi.w	8005b80 <_dtoa_r+0x2f0>
 8005a62:	e8df f003 	tbb	[pc, r3]
 8005a66:	7f7d      	.short	0x7f7d
 8005a68:	7131      	.short	0x7131
 8005a6a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8005a6e:	441d      	add	r5, r3
 8005a70:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8005a74:	2820      	cmp	r0, #32
 8005a76:	dd13      	ble.n	8005aa0 <_dtoa_r+0x210>
 8005a78:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8005a7c:	9b00      	ldr	r3, [sp, #0]
 8005a7e:	fa08 f800 	lsl.w	r8, r8, r0
 8005a82:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005a86:	fa23 f000 	lsr.w	r0, r3, r0
 8005a8a:	ea48 0000 	orr.w	r0, r8, r0
 8005a8e:	f7fa fd41 	bl	8000514 <__aeabi_ui2d>
 8005a92:	2301      	movs	r3, #1
 8005a94:	4682      	mov	sl, r0
 8005a96:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005a9a:	3d01      	subs	r5, #1
 8005a9c:	9313      	str	r3, [sp, #76]	; 0x4c
 8005a9e:	e772      	b.n	8005986 <_dtoa_r+0xf6>
 8005aa0:	9b00      	ldr	r3, [sp, #0]
 8005aa2:	f1c0 0020 	rsb	r0, r0, #32
 8005aa6:	fa03 f000 	lsl.w	r0, r3, r0
 8005aaa:	e7f0      	b.n	8005a8e <_dtoa_r+0x1fe>
 8005aac:	2301      	movs	r3, #1
 8005aae:	e7b1      	b.n	8005a14 <_dtoa_r+0x184>
 8005ab0:	900f      	str	r0, [sp, #60]	; 0x3c
 8005ab2:	e7b0      	b.n	8005a16 <_dtoa_r+0x186>
 8005ab4:	9b05      	ldr	r3, [sp, #20]
 8005ab6:	eba3 030a 	sub.w	r3, r3, sl
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	f1ca 0300 	rsb	r3, sl, #0
 8005ac0:	9307      	str	r3, [sp, #28]
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	930e      	str	r3, [sp, #56]	; 0x38
 8005ac6:	e7bb      	b.n	8005a40 <_dtoa_r+0x1b0>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	930a      	str	r3, [sp, #40]	; 0x28
 8005acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	dd59      	ble.n	8005b86 <_dtoa_r+0x2f6>
 8005ad2:	9302      	str	r3, [sp, #8]
 8005ad4:	4699      	mov	r9, r3
 8005ad6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ad8:	2200      	movs	r2, #0
 8005ada:	6072      	str	r2, [r6, #4]
 8005adc:	2204      	movs	r2, #4
 8005ade:	f102 0014 	add.w	r0, r2, #20
 8005ae2:	4298      	cmp	r0, r3
 8005ae4:	6871      	ldr	r1, [r6, #4]
 8005ae6:	d953      	bls.n	8005b90 <_dtoa_r+0x300>
 8005ae8:	4620      	mov	r0, r4
 8005aea:	f001 f8a7 	bl	8006c3c <_Balloc>
 8005aee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005af0:	6030      	str	r0, [r6, #0]
 8005af2:	f1b9 0f0e 	cmp.w	r9, #14
 8005af6:	f8d3 b000 	ldr.w	fp, [r3]
 8005afa:	f200 80e6 	bhi.w	8005cca <_dtoa_r+0x43a>
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	f000 80e3 	beq.w	8005cca <_dtoa_r+0x43a>
 8005b04:	ed9d 7b00 	vldr	d7, [sp]
 8005b08:	f1ba 0f00 	cmp.w	sl, #0
 8005b0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005b10:	dd74      	ble.n	8005bfc <_dtoa_r+0x36c>
 8005b12:	4a2a      	ldr	r2, [pc, #168]	; (8005bbc <_dtoa_r+0x32c>)
 8005b14:	f00a 030f 	and.w	r3, sl, #15
 8005b18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b1c:	ed93 7b00 	vldr	d7, [r3]
 8005b20:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005b24:	06f0      	lsls	r0, r6, #27
 8005b26:	ed8d 7b08 	vstr	d7, [sp, #32]
 8005b2a:	d565      	bpl.n	8005bf8 <_dtoa_r+0x368>
 8005b2c:	4b24      	ldr	r3, [pc, #144]	; (8005bc0 <_dtoa_r+0x330>)
 8005b2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b36:	f7fa fe91 	bl	800085c <__aeabi_ddiv>
 8005b3a:	e9cd 0100 	strd	r0, r1, [sp]
 8005b3e:	f006 060f 	and.w	r6, r6, #15
 8005b42:	2503      	movs	r5, #3
 8005b44:	4f1e      	ldr	r7, [pc, #120]	; (8005bc0 <_dtoa_r+0x330>)
 8005b46:	e04c      	b.n	8005be2 <_dtoa_r+0x352>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8005b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b4e:	4453      	add	r3, sl
 8005b50:	f103 0901 	add.w	r9, r3, #1
 8005b54:	9302      	str	r3, [sp, #8]
 8005b56:	464b      	mov	r3, r9
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	bfb8      	it	lt
 8005b5c:	2301      	movlt	r3, #1
 8005b5e:	e7ba      	b.n	8005ad6 <_dtoa_r+0x246>
 8005b60:	2300      	movs	r3, #0
 8005b62:	e7b2      	b.n	8005aca <_dtoa_r+0x23a>
 8005b64:	2300      	movs	r3, #0
 8005b66:	e7f0      	b.n	8005b4a <_dtoa_r+0x2ba>
 8005b68:	2501      	movs	r5, #1
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9306      	str	r3, [sp, #24]
 8005b6e:	950a      	str	r5, [sp, #40]	; 0x28
 8005b70:	f04f 33ff 	mov.w	r3, #4294967295
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	4699      	mov	r9, r3
 8005b78:	2200      	movs	r2, #0
 8005b7a:	2312      	movs	r3, #18
 8005b7c:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b7e:	e7aa      	b.n	8005ad6 <_dtoa_r+0x246>
 8005b80:	2301      	movs	r3, #1
 8005b82:	930a      	str	r3, [sp, #40]	; 0x28
 8005b84:	e7f4      	b.n	8005b70 <_dtoa_r+0x2e0>
 8005b86:	2301      	movs	r3, #1
 8005b88:	9302      	str	r3, [sp, #8]
 8005b8a:	4699      	mov	r9, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	e7f5      	b.n	8005b7c <_dtoa_r+0x2ec>
 8005b90:	3101      	adds	r1, #1
 8005b92:	6071      	str	r1, [r6, #4]
 8005b94:	0052      	lsls	r2, r2, #1
 8005b96:	e7a2      	b.n	8005ade <_dtoa_r+0x24e>
 8005b98:	636f4361 	.word	0x636f4361
 8005b9c:	3fd287a7 	.word	0x3fd287a7
 8005ba0:	8b60c8b3 	.word	0x8b60c8b3
 8005ba4:	3fc68a28 	.word	0x3fc68a28
 8005ba8:	509f79fb 	.word	0x509f79fb
 8005bac:	3fd34413 	.word	0x3fd34413
 8005bb0:	7ff00000 	.word	0x7ff00000
 8005bb4:	08008161 	.word	0x08008161
 8005bb8:	3ff80000 	.word	0x3ff80000
 8005bbc:	08008288 	.word	0x08008288
 8005bc0:	08008260 	.word	0x08008260
 8005bc4:	080081e9 	.word	0x080081e9
 8005bc8:	07f1      	lsls	r1, r6, #31
 8005bca:	d508      	bpl.n	8005bde <_dtoa_r+0x34e>
 8005bcc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bd4:	f7fa fd18 	bl	8000608 <__aeabi_dmul>
 8005bd8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005bdc:	3501      	adds	r5, #1
 8005bde:	1076      	asrs	r6, r6, #1
 8005be0:	3708      	adds	r7, #8
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	d1f0      	bne.n	8005bc8 <_dtoa_r+0x338>
 8005be6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005bea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bee:	f7fa fe35 	bl	800085c <__aeabi_ddiv>
 8005bf2:	e9cd 0100 	strd	r0, r1, [sp]
 8005bf6:	e01a      	b.n	8005c2e <_dtoa_r+0x39e>
 8005bf8:	2502      	movs	r5, #2
 8005bfa:	e7a3      	b.n	8005b44 <_dtoa_r+0x2b4>
 8005bfc:	f000 80a0 	beq.w	8005d40 <_dtoa_r+0x4b0>
 8005c00:	f1ca 0600 	rsb	r6, sl, #0
 8005c04:	4b9f      	ldr	r3, [pc, #636]	; (8005e84 <_dtoa_r+0x5f4>)
 8005c06:	4fa0      	ldr	r7, [pc, #640]	; (8005e88 <_dtoa_r+0x5f8>)
 8005c08:	f006 020f 	and.w	r2, r6, #15
 8005c0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c18:	f7fa fcf6 	bl	8000608 <__aeabi_dmul>
 8005c1c:	e9cd 0100 	strd	r0, r1, [sp]
 8005c20:	1136      	asrs	r6, r6, #4
 8005c22:	2300      	movs	r3, #0
 8005c24:	2502      	movs	r5, #2
 8005c26:	2e00      	cmp	r6, #0
 8005c28:	d17f      	bne.n	8005d2a <_dtoa_r+0x49a>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e1      	bne.n	8005bf2 <_dtoa_r+0x362>
 8005c2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f000 8087 	beq.w	8005d44 <_dtoa_r+0x4b4>
 8005c36:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	4b93      	ldr	r3, [pc, #588]	; (8005e8c <_dtoa_r+0x5fc>)
 8005c3e:	4630      	mov	r0, r6
 8005c40:	4639      	mov	r1, r7
 8005c42:	f7fa ff53 	bl	8000aec <__aeabi_dcmplt>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d07c      	beq.n	8005d44 <_dtoa_r+0x4b4>
 8005c4a:	f1b9 0f00 	cmp.w	r9, #0
 8005c4e:	d079      	beq.n	8005d44 <_dtoa_r+0x4b4>
 8005c50:	9b02      	ldr	r3, [sp, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dd35      	ble.n	8005cc2 <_dtoa_r+0x432>
 8005c56:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005c5a:	9308      	str	r3, [sp, #32]
 8005c5c:	4639      	mov	r1, r7
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4b8b      	ldr	r3, [pc, #556]	; (8005e90 <_dtoa_r+0x600>)
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7fa fcd0 	bl	8000608 <__aeabi_dmul>
 8005c68:	e9cd 0100 	strd	r0, r1, [sp]
 8005c6c:	9f02      	ldr	r7, [sp, #8]
 8005c6e:	3501      	adds	r5, #1
 8005c70:	4628      	mov	r0, r5
 8005c72:	f7fa fc5f 	bl	8000534 <__aeabi_i2d>
 8005c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c7a:	f7fa fcc5 	bl	8000608 <__aeabi_dmul>
 8005c7e:	2200      	movs	r2, #0
 8005c80:	4b84      	ldr	r3, [pc, #528]	; (8005e94 <_dtoa_r+0x604>)
 8005c82:	f7fa fb0b 	bl	800029c <__adddf3>
 8005c86:	4605      	mov	r5, r0
 8005c88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005c8c:	2f00      	cmp	r7, #0
 8005c8e:	d15d      	bne.n	8005d4c <_dtoa_r+0x4bc>
 8005c90:	2200      	movs	r2, #0
 8005c92:	4b81      	ldr	r3, [pc, #516]	; (8005e98 <_dtoa_r+0x608>)
 8005c94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c98:	f7fa fafe 	bl	8000298 <__aeabi_dsub>
 8005c9c:	462a      	mov	r2, r5
 8005c9e:	4633      	mov	r3, r6
 8005ca0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ca4:	f7fa ff40 	bl	8000b28 <__aeabi_dcmpgt>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	f040 8288 	bne.w	80061be <_dtoa_r+0x92e>
 8005cae:	462a      	mov	r2, r5
 8005cb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cb8:	f7fa ff18 	bl	8000aec <__aeabi_dcmplt>
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	f040 827c 	bne.w	80061ba <_dtoa_r+0x92a>
 8005cc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005cc6:	e9cd 2300 	strd	r2, r3, [sp]
 8005cca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f2c0 8150 	blt.w	8005f72 <_dtoa_r+0x6e2>
 8005cd2:	f1ba 0f0e 	cmp.w	sl, #14
 8005cd6:	f300 814c 	bgt.w	8005f72 <_dtoa_r+0x6e2>
 8005cda:	4b6a      	ldr	r3, [pc, #424]	; (8005e84 <_dtoa_r+0x5f4>)
 8005cdc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ce0:	ed93 7b00 	vldr	d7, [r3]
 8005ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005cec:	f280 80d8 	bge.w	8005ea0 <_dtoa_r+0x610>
 8005cf0:	f1b9 0f00 	cmp.w	r9, #0
 8005cf4:	f300 80d4 	bgt.w	8005ea0 <_dtoa_r+0x610>
 8005cf8:	f040 825e 	bne.w	80061b8 <_dtoa_r+0x928>
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	4b66      	ldr	r3, [pc, #408]	; (8005e98 <_dtoa_r+0x608>)
 8005d00:	ec51 0b17 	vmov	r0, r1, d7
 8005d04:	f7fa fc80 	bl	8000608 <__aeabi_dmul>
 8005d08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d0c:	f7fa ff02 	bl	8000b14 <__aeabi_dcmpge>
 8005d10:	464f      	mov	r7, r9
 8005d12:	464e      	mov	r6, r9
 8005d14:	2800      	cmp	r0, #0
 8005d16:	f040 8234 	bne.w	8006182 <_dtoa_r+0x8f2>
 8005d1a:	2331      	movs	r3, #49	; 0x31
 8005d1c:	f10b 0501 	add.w	r5, fp, #1
 8005d20:	f88b 3000 	strb.w	r3, [fp]
 8005d24:	f10a 0a01 	add.w	sl, sl, #1
 8005d28:	e22f      	b.n	800618a <_dtoa_r+0x8fa>
 8005d2a:	07f2      	lsls	r2, r6, #31
 8005d2c:	d505      	bpl.n	8005d3a <_dtoa_r+0x4aa>
 8005d2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d32:	f7fa fc69 	bl	8000608 <__aeabi_dmul>
 8005d36:	3501      	adds	r5, #1
 8005d38:	2301      	movs	r3, #1
 8005d3a:	1076      	asrs	r6, r6, #1
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	e772      	b.n	8005c26 <_dtoa_r+0x396>
 8005d40:	2502      	movs	r5, #2
 8005d42:	e774      	b.n	8005c2e <_dtoa_r+0x39e>
 8005d44:	f8cd a020 	str.w	sl, [sp, #32]
 8005d48:	464f      	mov	r7, r9
 8005d4a:	e791      	b.n	8005c70 <_dtoa_r+0x3e0>
 8005d4c:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <_dtoa_r+0x5f4>)
 8005d4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005d52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8005d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d047      	beq.n	8005dec <_dtoa_r+0x55c>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	2000      	movs	r0, #0
 8005d62:	494e      	ldr	r1, [pc, #312]	; (8005e9c <_dtoa_r+0x60c>)
 8005d64:	f7fa fd7a 	bl	800085c <__aeabi_ddiv>
 8005d68:	462a      	mov	r2, r5
 8005d6a:	4633      	mov	r3, r6
 8005d6c:	f7fa fa94 	bl	8000298 <__aeabi_dsub>
 8005d70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005d74:	465d      	mov	r5, fp
 8005d76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d7a:	f7fa fef5 	bl	8000b68 <__aeabi_d2iz>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	f7fa fbd8 	bl	8000534 <__aeabi_i2d>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d8c:	f7fa fa84 	bl	8000298 <__aeabi_dsub>
 8005d90:	3630      	adds	r6, #48	; 0x30
 8005d92:	f805 6b01 	strb.w	r6, [r5], #1
 8005d96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8005d9e:	f7fa fea5 	bl	8000aec <__aeabi_dcmplt>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d163      	bne.n	8005e6e <_dtoa_r+0x5de>
 8005da6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005daa:	2000      	movs	r0, #0
 8005dac:	4937      	ldr	r1, [pc, #220]	; (8005e8c <_dtoa_r+0x5fc>)
 8005dae:	f7fa fa73 	bl	8000298 <__aeabi_dsub>
 8005db2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005db6:	f7fa fe99 	bl	8000aec <__aeabi_dcmplt>
 8005dba:	2800      	cmp	r0, #0
 8005dbc:	f040 80b7 	bne.w	8005f2e <_dtoa_r+0x69e>
 8005dc0:	eba5 030b 	sub.w	r3, r5, fp
 8005dc4:	429f      	cmp	r7, r3
 8005dc6:	f77f af7c 	ble.w	8005cc2 <_dtoa_r+0x432>
 8005dca:	2200      	movs	r2, #0
 8005dcc:	4b30      	ldr	r3, [pc, #192]	; (8005e90 <_dtoa_r+0x600>)
 8005dce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005dd2:	f7fa fc19 	bl	8000608 <__aeabi_dmul>
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005ddc:	4b2c      	ldr	r3, [pc, #176]	; (8005e90 <_dtoa_r+0x600>)
 8005dde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005de2:	f7fa fc11 	bl	8000608 <__aeabi_dmul>
 8005de6:	e9cd 0100 	strd	r0, r1, [sp]
 8005dea:	e7c4      	b.n	8005d76 <_dtoa_r+0x4e6>
 8005dec:	462a      	mov	r2, r5
 8005dee:	4633      	mov	r3, r6
 8005df0:	f7fa fc0a 	bl	8000608 <__aeabi_dmul>
 8005df4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005df8:	eb0b 0507 	add.w	r5, fp, r7
 8005dfc:	465e      	mov	r6, fp
 8005dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e02:	f7fa feb1 	bl	8000b68 <__aeabi_d2iz>
 8005e06:	4607      	mov	r7, r0
 8005e08:	f7fa fb94 	bl	8000534 <__aeabi_i2d>
 8005e0c:	3730      	adds	r7, #48	; 0x30
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e16:	f7fa fa3f 	bl	8000298 <__aeabi_dsub>
 8005e1a:	f806 7b01 	strb.w	r7, [r6], #1
 8005e1e:	42ae      	cmp	r6, r5
 8005e20:	e9cd 0100 	strd	r0, r1, [sp]
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	d126      	bne.n	8005e78 <_dtoa_r+0x5e8>
 8005e2a:	4b1c      	ldr	r3, [pc, #112]	; (8005e9c <_dtoa_r+0x60c>)
 8005e2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e30:	f7fa fa34 	bl	800029c <__adddf3>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e3c:	f7fa fe74 	bl	8000b28 <__aeabi_dcmpgt>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d174      	bne.n	8005f2e <_dtoa_r+0x69e>
 8005e44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e48:	2000      	movs	r0, #0
 8005e4a:	4914      	ldr	r1, [pc, #80]	; (8005e9c <_dtoa_r+0x60c>)
 8005e4c:	f7fa fa24 	bl	8000298 <__aeabi_dsub>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e58:	f7fa fe48 	bl	8000aec <__aeabi_dcmplt>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	f43f af30 	beq.w	8005cc2 <_dtoa_r+0x432>
 8005e62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e66:	2b30      	cmp	r3, #48	; 0x30
 8005e68:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e6c:	d002      	beq.n	8005e74 <_dtoa_r+0x5e4>
 8005e6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005e72:	e04a      	b.n	8005f0a <_dtoa_r+0x67a>
 8005e74:	4615      	mov	r5, r2
 8005e76:	e7f4      	b.n	8005e62 <_dtoa_r+0x5d2>
 8005e78:	4b05      	ldr	r3, [pc, #20]	; (8005e90 <_dtoa_r+0x600>)
 8005e7a:	f7fa fbc5 	bl	8000608 <__aeabi_dmul>
 8005e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8005e82:	e7bc      	b.n	8005dfe <_dtoa_r+0x56e>
 8005e84:	08008288 	.word	0x08008288
 8005e88:	08008260 	.word	0x08008260
 8005e8c:	3ff00000 	.word	0x3ff00000
 8005e90:	40240000 	.word	0x40240000
 8005e94:	401c0000 	.word	0x401c0000
 8005e98:	40140000 	.word	0x40140000
 8005e9c:	3fe00000 	.word	0x3fe00000
 8005ea0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005ea4:	465d      	mov	r5, fp
 8005ea6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eaa:	4630      	mov	r0, r6
 8005eac:	4639      	mov	r1, r7
 8005eae:	f7fa fcd5 	bl	800085c <__aeabi_ddiv>
 8005eb2:	f7fa fe59 	bl	8000b68 <__aeabi_d2iz>
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	f7fa fb3c 	bl	8000534 <__aeabi_i2d>
 8005ebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ec0:	f7fa fba2 	bl	8000608 <__aeabi_dmul>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4630      	mov	r0, r6
 8005eca:	4639      	mov	r1, r7
 8005ecc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005ed0:	f7fa f9e2 	bl	8000298 <__aeabi_dsub>
 8005ed4:	f805 6b01 	strb.w	r6, [r5], #1
 8005ed8:	eba5 060b 	sub.w	r6, r5, fp
 8005edc:	45b1      	cmp	r9, r6
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	d139      	bne.n	8005f58 <_dtoa_r+0x6c8>
 8005ee4:	f7fa f9da 	bl	800029c <__adddf3>
 8005ee8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eec:	4606      	mov	r6, r0
 8005eee:	460f      	mov	r7, r1
 8005ef0:	f7fa fe1a 	bl	8000b28 <__aeabi_dcmpgt>
 8005ef4:	b9c8      	cbnz	r0, 8005f2a <_dtoa_r+0x69a>
 8005ef6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005efa:	4630      	mov	r0, r6
 8005efc:	4639      	mov	r1, r7
 8005efe:	f7fa fdeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f02:	b110      	cbz	r0, 8005f0a <_dtoa_r+0x67a>
 8005f04:	f018 0f01 	tst.w	r8, #1
 8005f08:	d10f      	bne.n	8005f2a <_dtoa_r+0x69a>
 8005f0a:	9904      	ldr	r1, [sp, #16]
 8005f0c:	4620      	mov	r0, r4
 8005f0e:	f000 fec9 	bl	8006ca4 <_Bfree>
 8005f12:	2300      	movs	r3, #0
 8005f14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f16:	702b      	strb	r3, [r5, #0]
 8005f18:	f10a 0301 	add.w	r3, sl, #1
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 8241 	beq.w	80063a8 <_dtoa_r+0xb18>
 8005f26:	601d      	str	r5, [r3, #0]
 8005f28:	e23e      	b.n	80063a8 <_dtoa_r+0xb18>
 8005f2a:	f8cd a020 	str.w	sl, [sp, #32]
 8005f2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005f32:	2a39      	cmp	r2, #57	; 0x39
 8005f34:	f105 33ff 	add.w	r3, r5, #4294967295
 8005f38:	d108      	bne.n	8005f4c <_dtoa_r+0x6bc>
 8005f3a:	459b      	cmp	fp, r3
 8005f3c:	d10a      	bne.n	8005f54 <_dtoa_r+0x6c4>
 8005f3e:	9b08      	ldr	r3, [sp, #32]
 8005f40:	3301      	adds	r3, #1
 8005f42:	9308      	str	r3, [sp, #32]
 8005f44:	2330      	movs	r3, #48	; 0x30
 8005f46:	f88b 3000 	strb.w	r3, [fp]
 8005f4a:	465b      	mov	r3, fp
 8005f4c:	781a      	ldrb	r2, [r3, #0]
 8005f4e:	3201      	adds	r2, #1
 8005f50:	701a      	strb	r2, [r3, #0]
 8005f52:	e78c      	b.n	8005e6e <_dtoa_r+0x5de>
 8005f54:	461d      	mov	r5, r3
 8005f56:	e7ea      	b.n	8005f2e <_dtoa_r+0x69e>
 8005f58:	2200      	movs	r2, #0
 8005f5a:	4b9b      	ldr	r3, [pc, #620]	; (80061c8 <_dtoa_r+0x938>)
 8005f5c:	f7fa fb54 	bl	8000608 <__aeabi_dmul>
 8005f60:	2200      	movs	r2, #0
 8005f62:	2300      	movs	r3, #0
 8005f64:	4606      	mov	r6, r0
 8005f66:	460f      	mov	r7, r1
 8005f68:	f7fa fdb6 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	d09a      	beq.n	8005ea6 <_dtoa_r+0x616>
 8005f70:	e7cb      	b.n	8005f0a <_dtoa_r+0x67a>
 8005f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f74:	2a00      	cmp	r2, #0
 8005f76:	f000 808b 	beq.w	8006090 <_dtoa_r+0x800>
 8005f7a:	9a06      	ldr	r2, [sp, #24]
 8005f7c:	2a01      	cmp	r2, #1
 8005f7e:	dc6e      	bgt.n	800605e <_dtoa_r+0x7ce>
 8005f80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005f82:	2a00      	cmp	r2, #0
 8005f84:	d067      	beq.n	8006056 <_dtoa_r+0x7c6>
 8005f86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f8a:	9f07      	ldr	r7, [sp, #28]
 8005f8c:	9d05      	ldr	r5, [sp, #20]
 8005f8e:	9a05      	ldr	r2, [sp, #20]
 8005f90:	2101      	movs	r1, #1
 8005f92:	441a      	add	r2, r3
 8005f94:	4620      	mov	r0, r4
 8005f96:	9205      	str	r2, [sp, #20]
 8005f98:	4498      	add	r8, r3
 8005f9a:	f000 ff61 	bl	8006e60 <__i2b>
 8005f9e:	4606      	mov	r6, r0
 8005fa0:	2d00      	cmp	r5, #0
 8005fa2:	dd0c      	ble.n	8005fbe <_dtoa_r+0x72e>
 8005fa4:	f1b8 0f00 	cmp.w	r8, #0
 8005fa8:	dd09      	ble.n	8005fbe <_dtoa_r+0x72e>
 8005faa:	4545      	cmp	r5, r8
 8005fac:	9a05      	ldr	r2, [sp, #20]
 8005fae:	462b      	mov	r3, r5
 8005fb0:	bfa8      	it	ge
 8005fb2:	4643      	movge	r3, r8
 8005fb4:	1ad2      	subs	r2, r2, r3
 8005fb6:	9205      	str	r2, [sp, #20]
 8005fb8:	1aed      	subs	r5, r5, r3
 8005fba:	eba8 0803 	sub.w	r8, r8, r3
 8005fbe:	9b07      	ldr	r3, [sp, #28]
 8005fc0:	b1eb      	cbz	r3, 8005ffe <_dtoa_r+0x76e>
 8005fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d067      	beq.n	8006098 <_dtoa_r+0x808>
 8005fc8:	b18f      	cbz	r7, 8005fee <_dtoa_r+0x75e>
 8005fca:	4631      	mov	r1, r6
 8005fcc:	463a      	mov	r2, r7
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 ffe6 	bl	8006fa0 <__pow5mult>
 8005fd4:	9a04      	ldr	r2, [sp, #16]
 8005fd6:	4601      	mov	r1, r0
 8005fd8:	4606      	mov	r6, r0
 8005fda:	4620      	mov	r0, r4
 8005fdc:	f000 ff49 	bl	8006e72 <__multiply>
 8005fe0:	9904      	ldr	r1, [sp, #16]
 8005fe2:	9008      	str	r0, [sp, #32]
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f000 fe5d 	bl	8006ca4 <_Bfree>
 8005fea:	9b08      	ldr	r3, [sp, #32]
 8005fec:	9304      	str	r3, [sp, #16]
 8005fee:	9b07      	ldr	r3, [sp, #28]
 8005ff0:	1bda      	subs	r2, r3, r7
 8005ff2:	d004      	beq.n	8005ffe <_dtoa_r+0x76e>
 8005ff4:	9904      	ldr	r1, [sp, #16]
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f000 ffd2 	bl	8006fa0 <__pow5mult>
 8005ffc:	9004      	str	r0, [sp, #16]
 8005ffe:	2101      	movs	r1, #1
 8006000:	4620      	mov	r0, r4
 8006002:	f000 ff2d 	bl	8006e60 <__i2b>
 8006006:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006008:	4607      	mov	r7, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 81d0 	beq.w	80063b0 <_dtoa_r+0xb20>
 8006010:	461a      	mov	r2, r3
 8006012:	4601      	mov	r1, r0
 8006014:	4620      	mov	r0, r4
 8006016:	f000 ffc3 	bl	8006fa0 <__pow5mult>
 800601a:	9b06      	ldr	r3, [sp, #24]
 800601c:	2b01      	cmp	r3, #1
 800601e:	4607      	mov	r7, r0
 8006020:	dc40      	bgt.n	80060a4 <_dtoa_r+0x814>
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d139      	bne.n	800609c <_dtoa_r+0x80c>
 8006028:	9b01      	ldr	r3, [sp, #4]
 800602a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800602e:	2b00      	cmp	r3, #0
 8006030:	d136      	bne.n	80060a0 <_dtoa_r+0x810>
 8006032:	9b01      	ldr	r3, [sp, #4]
 8006034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006038:	0d1b      	lsrs	r3, r3, #20
 800603a:	051b      	lsls	r3, r3, #20
 800603c:	b12b      	cbz	r3, 800604a <_dtoa_r+0x7ba>
 800603e:	9b05      	ldr	r3, [sp, #20]
 8006040:	3301      	adds	r3, #1
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	f108 0801 	add.w	r8, r8, #1
 8006048:	2301      	movs	r3, #1
 800604a:	9307      	str	r3, [sp, #28]
 800604c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800604e:	2b00      	cmp	r3, #0
 8006050:	d12a      	bne.n	80060a8 <_dtoa_r+0x818>
 8006052:	2001      	movs	r0, #1
 8006054:	e030      	b.n	80060b8 <_dtoa_r+0x828>
 8006056:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006058:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800605c:	e795      	b.n	8005f8a <_dtoa_r+0x6fa>
 800605e:	9b07      	ldr	r3, [sp, #28]
 8006060:	f109 37ff 	add.w	r7, r9, #4294967295
 8006064:	42bb      	cmp	r3, r7
 8006066:	bfbf      	itttt	lt
 8006068:	9b07      	ldrlt	r3, [sp, #28]
 800606a:	9707      	strlt	r7, [sp, #28]
 800606c:	1afa      	sublt	r2, r7, r3
 800606e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006070:	bfbb      	ittet	lt
 8006072:	189b      	addlt	r3, r3, r2
 8006074:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006076:	1bdf      	subge	r7, r3, r7
 8006078:	2700      	movlt	r7, #0
 800607a:	f1b9 0f00 	cmp.w	r9, #0
 800607e:	bfb5      	itete	lt
 8006080:	9b05      	ldrlt	r3, [sp, #20]
 8006082:	9d05      	ldrge	r5, [sp, #20]
 8006084:	eba3 0509 	sublt.w	r5, r3, r9
 8006088:	464b      	movge	r3, r9
 800608a:	bfb8      	it	lt
 800608c:	2300      	movlt	r3, #0
 800608e:	e77e      	b.n	8005f8e <_dtoa_r+0x6fe>
 8006090:	9f07      	ldr	r7, [sp, #28]
 8006092:	9d05      	ldr	r5, [sp, #20]
 8006094:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006096:	e783      	b.n	8005fa0 <_dtoa_r+0x710>
 8006098:	9a07      	ldr	r2, [sp, #28]
 800609a:	e7ab      	b.n	8005ff4 <_dtoa_r+0x764>
 800609c:	2300      	movs	r3, #0
 800609e:	e7d4      	b.n	800604a <_dtoa_r+0x7ba>
 80060a0:	9b00      	ldr	r3, [sp, #0]
 80060a2:	e7d2      	b.n	800604a <_dtoa_r+0x7ba>
 80060a4:	2300      	movs	r3, #0
 80060a6:	9307      	str	r3, [sp, #28]
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80060ae:	6918      	ldr	r0, [r3, #16]
 80060b0:	f000 fe88 	bl	8006dc4 <__hi0bits>
 80060b4:	f1c0 0020 	rsb	r0, r0, #32
 80060b8:	4440      	add	r0, r8
 80060ba:	f010 001f 	ands.w	r0, r0, #31
 80060be:	d047      	beq.n	8006150 <_dtoa_r+0x8c0>
 80060c0:	f1c0 0320 	rsb	r3, r0, #32
 80060c4:	2b04      	cmp	r3, #4
 80060c6:	dd3b      	ble.n	8006140 <_dtoa_r+0x8b0>
 80060c8:	9b05      	ldr	r3, [sp, #20]
 80060ca:	f1c0 001c 	rsb	r0, r0, #28
 80060ce:	4403      	add	r3, r0
 80060d0:	9305      	str	r3, [sp, #20]
 80060d2:	4405      	add	r5, r0
 80060d4:	4480      	add	r8, r0
 80060d6:	9b05      	ldr	r3, [sp, #20]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	dd05      	ble.n	80060e8 <_dtoa_r+0x858>
 80060dc:	461a      	mov	r2, r3
 80060de:	9904      	ldr	r1, [sp, #16]
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 ffab 	bl	800703c <__lshift>
 80060e6:	9004      	str	r0, [sp, #16]
 80060e8:	f1b8 0f00 	cmp.w	r8, #0
 80060ec:	dd05      	ble.n	80060fa <_dtoa_r+0x86a>
 80060ee:	4639      	mov	r1, r7
 80060f0:	4642      	mov	r2, r8
 80060f2:	4620      	mov	r0, r4
 80060f4:	f000 ffa2 	bl	800703c <__lshift>
 80060f8:	4607      	mov	r7, r0
 80060fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80060fc:	b353      	cbz	r3, 8006154 <_dtoa_r+0x8c4>
 80060fe:	4639      	mov	r1, r7
 8006100:	9804      	ldr	r0, [sp, #16]
 8006102:	f000 ffef 	bl	80070e4 <__mcmp>
 8006106:	2800      	cmp	r0, #0
 8006108:	da24      	bge.n	8006154 <_dtoa_r+0x8c4>
 800610a:	2300      	movs	r3, #0
 800610c:	220a      	movs	r2, #10
 800610e:	9904      	ldr	r1, [sp, #16]
 8006110:	4620      	mov	r0, r4
 8006112:	f000 fdde 	bl	8006cd2 <__multadd>
 8006116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006118:	9004      	str	r0, [sp, #16]
 800611a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800611e:	2b00      	cmp	r3, #0
 8006120:	f000 814d 	beq.w	80063be <_dtoa_r+0xb2e>
 8006124:	2300      	movs	r3, #0
 8006126:	4631      	mov	r1, r6
 8006128:	220a      	movs	r2, #10
 800612a:	4620      	mov	r0, r4
 800612c:	f000 fdd1 	bl	8006cd2 <__multadd>
 8006130:	9b02      	ldr	r3, [sp, #8]
 8006132:	2b00      	cmp	r3, #0
 8006134:	4606      	mov	r6, r0
 8006136:	dc4f      	bgt.n	80061d8 <_dtoa_r+0x948>
 8006138:	9b06      	ldr	r3, [sp, #24]
 800613a:	2b02      	cmp	r3, #2
 800613c:	dd4c      	ble.n	80061d8 <_dtoa_r+0x948>
 800613e:	e011      	b.n	8006164 <_dtoa_r+0x8d4>
 8006140:	d0c9      	beq.n	80060d6 <_dtoa_r+0x846>
 8006142:	9a05      	ldr	r2, [sp, #20]
 8006144:	331c      	adds	r3, #28
 8006146:	441a      	add	r2, r3
 8006148:	9205      	str	r2, [sp, #20]
 800614a:	441d      	add	r5, r3
 800614c:	4498      	add	r8, r3
 800614e:	e7c2      	b.n	80060d6 <_dtoa_r+0x846>
 8006150:	4603      	mov	r3, r0
 8006152:	e7f6      	b.n	8006142 <_dtoa_r+0x8b2>
 8006154:	f1b9 0f00 	cmp.w	r9, #0
 8006158:	dc38      	bgt.n	80061cc <_dtoa_r+0x93c>
 800615a:	9b06      	ldr	r3, [sp, #24]
 800615c:	2b02      	cmp	r3, #2
 800615e:	dd35      	ble.n	80061cc <_dtoa_r+0x93c>
 8006160:	f8cd 9008 	str.w	r9, [sp, #8]
 8006164:	9b02      	ldr	r3, [sp, #8]
 8006166:	b963      	cbnz	r3, 8006182 <_dtoa_r+0x8f2>
 8006168:	4639      	mov	r1, r7
 800616a:	2205      	movs	r2, #5
 800616c:	4620      	mov	r0, r4
 800616e:	f000 fdb0 	bl	8006cd2 <__multadd>
 8006172:	4601      	mov	r1, r0
 8006174:	4607      	mov	r7, r0
 8006176:	9804      	ldr	r0, [sp, #16]
 8006178:	f000 ffb4 	bl	80070e4 <__mcmp>
 800617c:	2800      	cmp	r0, #0
 800617e:	f73f adcc 	bgt.w	8005d1a <_dtoa_r+0x48a>
 8006182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006184:	465d      	mov	r5, fp
 8006186:	ea6f 0a03 	mvn.w	sl, r3
 800618a:	f04f 0900 	mov.w	r9, #0
 800618e:	4639      	mov	r1, r7
 8006190:	4620      	mov	r0, r4
 8006192:	f000 fd87 	bl	8006ca4 <_Bfree>
 8006196:	2e00      	cmp	r6, #0
 8006198:	f43f aeb7 	beq.w	8005f0a <_dtoa_r+0x67a>
 800619c:	f1b9 0f00 	cmp.w	r9, #0
 80061a0:	d005      	beq.n	80061ae <_dtoa_r+0x91e>
 80061a2:	45b1      	cmp	r9, r6
 80061a4:	d003      	beq.n	80061ae <_dtoa_r+0x91e>
 80061a6:	4649      	mov	r1, r9
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fd7b 	bl	8006ca4 <_Bfree>
 80061ae:	4631      	mov	r1, r6
 80061b0:	4620      	mov	r0, r4
 80061b2:	f000 fd77 	bl	8006ca4 <_Bfree>
 80061b6:	e6a8      	b.n	8005f0a <_dtoa_r+0x67a>
 80061b8:	2700      	movs	r7, #0
 80061ba:	463e      	mov	r6, r7
 80061bc:	e7e1      	b.n	8006182 <_dtoa_r+0x8f2>
 80061be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80061c2:	463e      	mov	r6, r7
 80061c4:	e5a9      	b.n	8005d1a <_dtoa_r+0x48a>
 80061c6:	bf00      	nop
 80061c8:	40240000 	.word	0x40240000
 80061cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061ce:	f8cd 9008 	str.w	r9, [sp, #8]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f000 80fa 	beq.w	80063cc <_dtoa_r+0xb3c>
 80061d8:	2d00      	cmp	r5, #0
 80061da:	dd05      	ble.n	80061e8 <_dtoa_r+0x958>
 80061dc:	4631      	mov	r1, r6
 80061de:	462a      	mov	r2, r5
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 ff2b 	bl	800703c <__lshift>
 80061e6:	4606      	mov	r6, r0
 80061e8:	9b07      	ldr	r3, [sp, #28]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d04c      	beq.n	8006288 <_dtoa_r+0x9f8>
 80061ee:	6871      	ldr	r1, [r6, #4]
 80061f0:	4620      	mov	r0, r4
 80061f2:	f000 fd23 	bl	8006c3c <_Balloc>
 80061f6:	6932      	ldr	r2, [r6, #16]
 80061f8:	3202      	adds	r2, #2
 80061fa:	4605      	mov	r5, r0
 80061fc:	0092      	lsls	r2, r2, #2
 80061fe:	f106 010c 	add.w	r1, r6, #12
 8006202:	300c      	adds	r0, #12
 8006204:	f7fd fd36 	bl	8003c74 <memcpy>
 8006208:	2201      	movs	r2, #1
 800620a:	4629      	mov	r1, r5
 800620c:	4620      	mov	r0, r4
 800620e:	f000 ff15 	bl	800703c <__lshift>
 8006212:	9b00      	ldr	r3, [sp, #0]
 8006214:	f8cd b014 	str.w	fp, [sp, #20]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	46b1      	mov	r9, r6
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	4606      	mov	r6, r0
 8006222:	4639      	mov	r1, r7
 8006224:	9804      	ldr	r0, [sp, #16]
 8006226:	f7ff faa5 	bl	8005774 <quorem>
 800622a:	4649      	mov	r1, r9
 800622c:	4605      	mov	r5, r0
 800622e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006232:	9804      	ldr	r0, [sp, #16]
 8006234:	f000 ff56 	bl	80070e4 <__mcmp>
 8006238:	4632      	mov	r2, r6
 800623a:	9000      	str	r0, [sp, #0]
 800623c:	4639      	mov	r1, r7
 800623e:	4620      	mov	r0, r4
 8006240:	f000 ff6a 	bl	8007118 <__mdiff>
 8006244:	68c3      	ldr	r3, [r0, #12]
 8006246:	4602      	mov	r2, r0
 8006248:	bb03      	cbnz	r3, 800628c <_dtoa_r+0x9fc>
 800624a:	4601      	mov	r1, r0
 800624c:	9008      	str	r0, [sp, #32]
 800624e:	9804      	ldr	r0, [sp, #16]
 8006250:	f000 ff48 	bl	80070e4 <__mcmp>
 8006254:	9a08      	ldr	r2, [sp, #32]
 8006256:	4603      	mov	r3, r0
 8006258:	4611      	mov	r1, r2
 800625a:	4620      	mov	r0, r4
 800625c:	9308      	str	r3, [sp, #32]
 800625e:	f000 fd21 	bl	8006ca4 <_Bfree>
 8006262:	9b08      	ldr	r3, [sp, #32]
 8006264:	b9a3      	cbnz	r3, 8006290 <_dtoa_r+0xa00>
 8006266:	9a06      	ldr	r2, [sp, #24]
 8006268:	b992      	cbnz	r2, 8006290 <_dtoa_r+0xa00>
 800626a:	9a07      	ldr	r2, [sp, #28]
 800626c:	b982      	cbnz	r2, 8006290 <_dtoa_r+0xa00>
 800626e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006272:	d029      	beq.n	80062c8 <_dtoa_r+0xa38>
 8006274:	9b00      	ldr	r3, [sp, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	dd01      	ble.n	800627e <_dtoa_r+0x9ee>
 800627a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800627e:	9b05      	ldr	r3, [sp, #20]
 8006280:	1c5d      	adds	r5, r3, #1
 8006282:	f883 8000 	strb.w	r8, [r3]
 8006286:	e782      	b.n	800618e <_dtoa_r+0x8fe>
 8006288:	4630      	mov	r0, r6
 800628a:	e7c2      	b.n	8006212 <_dtoa_r+0x982>
 800628c:	2301      	movs	r3, #1
 800628e:	e7e3      	b.n	8006258 <_dtoa_r+0x9c8>
 8006290:	9a00      	ldr	r2, [sp, #0]
 8006292:	2a00      	cmp	r2, #0
 8006294:	db04      	blt.n	80062a0 <_dtoa_r+0xa10>
 8006296:	d125      	bne.n	80062e4 <_dtoa_r+0xa54>
 8006298:	9a06      	ldr	r2, [sp, #24]
 800629a:	bb1a      	cbnz	r2, 80062e4 <_dtoa_r+0xa54>
 800629c:	9a07      	ldr	r2, [sp, #28]
 800629e:	bb0a      	cbnz	r2, 80062e4 <_dtoa_r+0xa54>
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	ddec      	ble.n	800627e <_dtoa_r+0x9ee>
 80062a4:	2201      	movs	r2, #1
 80062a6:	9904      	ldr	r1, [sp, #16]
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fec7 	bl	800703c <__lshift>
 80062ae:	4639      	mov	r1, r7
 80062b0:	9004      	str	r0, [sp, #16]
 80062b2:	f000 ff17 	bl	80070e4 <__mcmp>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	dc03      	bgt.n	80062c2 <_dtoa_r+0xa32>
 80062ba:	d1e0      	bne.n	800627e <_dtoa_r+0x9ee>
 80062bc:	f018 0f01 	tst.w	r8, #1
 80062c0:	d0dd      	beq.n	800627e <_dtoa_r+0x9ee>
 80062c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062c6:	d1d8      	bne.n	800627a <_dtoa_r+0x9ea>
 80062c8:	9b05      	ldr	r3, [sp, #20]
 80062ca:	9a05      	ldr	r2, [sp, #20]
 80062cc:	1c5d      	adds	r5, r3, #1
 80062ce:	2339      	movs	r3, #57	; 0x39
 80062d0:	7013      	strb	r3, [r2, #0]
 80062d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80062d6:	2b39      	cmp	r3, #57	; 0x39
 80062d8:	f105 32ff 	add.w	r2, r5, #4294967295
 80062dc:	d04f      	beq.n	800637e <_dtoa_r+0xaee>
 80062de:	3301      	adds	r3, #1
 80062e0:	7013      	strb	r3, [r2, #0]
 80062e2:	e754      	b.n	800618e <_dtoa_r+0x8fe>
 80062e4:	9a05      	ldr	r2, [sp, #20]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f102 0501 	add.w	r5, r2, #1
 80062ec:	dd06      	ble.n	80062fc <_dtoa_r+0xa6c>
 80062ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80062f2:	d0e9      	beq.n	80062c8 <_dtoa_r+0xa38>
 80062f4:	f108 0801 	add.w	r8, r8, #1
 80062f8:	9b05      	ldr	r3, [sp, #20]
 80062fa:	e7c2      	b.n	8006282 <_dtoa_r+0x9f2>
 80062fc:	9a02      	ldr	r2, [sp, #8]
 80062fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006302:	eba5 030b 	sub.w	r3, r5, fp
 8006306:	4293      	cmp	r3, r2
 8006308:	d021      	beq.n	800634e <_dtoa_r+0xabe>
 800630a:	2300      	movs	r3, #0
 800630c:	220a      	movs	r2, #10
 800630e:	9904      	ldr	r1, [sp, #16]
 8006310:	4620      	mov	r0, r4
 8006312:	f000 fcde 	bl	8006cd2 <__multadd>
 8006316:	45b1      	cmp	r9, r6
 8006318:	9004      	str	r0, [sp, #16]
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	f04f 020a 	mov.w	r2, #10
 8006322:	4649      	mov	r1, r9
 8006324:	4620      	mov	r0, r4
 8006326:	d105      	bne.n	8006334 <_dtoa_r+0xaa4>
 8006328:	f000 fcd3 	bl	8006cd2 <__multadd>
 800632c:	4681      	mov	r9, r0
 800632e:	4606      	mov	r6, r0
 8006330:	9505      	str	r5, [sp, #20]
 8006332:	e776      	b.n	8006222 <_dtoa_r+0x992>
 8006334:	f000 fccd 	bl	8006cd2 <__multadd>
 8006338:	4631      	mov	r1, r6
 800633a:	4681      	mov	r9, r0
 800633c:	2300      	movs	r3, #0
 800633e:	220a      	movs	r2, #10
 8006340:	4620      	mov	r0, r4
 8006342:	f000 fcc6 	bl	8006cd2 <__multadd>
 8006346:	4606      	mov	r6, r0
 8006348:	e7f2      	b.n	8006330 <_dtoa_r+0xaa0>
 800634a:	f04f 0900 	mov.w	r9, #0
 800634e:	2201      	movs	r2, #1
 8006350:	9904      	ldr	r1, [sp, #16]
 8006352:	4620      	mov	r0, r4
 8006354:	f000 fe72 	bl	800703c <__lshift>
 8006358:	4639      	mov	r1, r7
 800635a:	9004      	str	r0, [sp, #16]
 800635c:	f000 fec2 	bl	80070e4 <__mcmp>
 8006360:	2800      	cmp	r0, #0
 8006362:	dcb6      	bgt.n	80062d2 <_dtoa_r+0xa42>
 8006364:	d102      	bne.n	800636c <_dtoa_r+0xadc>
 8006366:	f018 0f01 	tst.w	r8, #1
 800636a:	d1b2      	bne.n	80062d2 <_dtoa_r+0xa42>
 800636c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006370:	2b30      	cmp	r3, #48	; 0x30
 8006372:	f105 32ff 	add.w	r2, r5, #4294967295
 8006376:	f47f af0a 	bne.w	800618e <_dtoa_r+0x8fe>
 800637a:	4615      	mov	r5, r2
 800637c:	e7f6      	b.n	800636c <_dtoa_r+0xadc>
 800637e:	4593      	cmp	fp, r2
 8006380:	d105      	bne.n	800638e <_dtoa_r+0xafe>
 8006382:	2331      	movs	r3, #49	; 0x31
 8006384:	f10a 0a01 	add.w	sl, sl, #1
 8006388:	f88b 3000 	strb.w	r3, [fp]
 800638c:	e6ff      	b.n	800618e <_dtoa_r+0x8fe>
 800638e:	4615      	mov	r5, r2
 8006390:	e79f      	b.n	80062d2 <_dtoa_r+0xa42>
 8006392:	f8df b064 	ldr.w	fp, [pc, #100]	; 80063f8 <_dtoa_r+0xb68>
 8006396:	e007      	b.n	80063a8 <_dtoa_r+0xb18>
 8006398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800639a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80063fc <_dtoa_r+0xb6c>
 800639e:	b11b      	cbz	r3, 80063a8 <_dtoa_r+0xb18>
 80063a0:	f10b 0308 	add.w	r3, fp, #8
 80063a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063a6:	6013      	str	r3, [r2, #0]
 80063a8:	4658      	mov	r0, fp
 80063aa:	b017      	add	sp, #92	; 0x5c
 80063ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b0:	9b06      	ldr	r3, [sp, #24]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	f77f ae35 	ble.w	8006022 <_dtoa_r+0x792>
 80063b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80063ba:	9307      	str	r3, [sp, #28]
 80063bc:	e649      	b.n	8006052 <_dtoa_r+0x7c2>
 80063be:	9b02      	ldr	r3, [sp, #8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	dc03      	bgt.n	80063cc <_dtoa_r+0xb3c>
 80063c4:	9b06      	ldr	r3, [sp, #24]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	f73f aecc 	bgt.w	8006164 <_dtoa_r+0x8d4>
 80063cc:	465d      	mov	r5, fp
 80063ce:	4639      	mov	r1, r7
 80063d0:	9804      	ldr	r0, [sp, #16]
 80063d2:	f7ff f9cf 	bl	8005774 <quorem>
 80063d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80063da:	f805 8b01 	strb.w	r8, [r5], #1
 80063de:	9a02      	ldr	r2, [sp, #8]
 80063e0:	eba5 030b 	sub.w	r3, r5, fp
 80063e4:	429a      	cmp	r2, r3
 80063e6:	ddb0      	ble.n	800634a <_dtoa_r+0xaba>
 80063e8:	2300      	movs	r3, #0
 80063ea:	220a      	movs	r2, #10
 80063ec:	9904      	ldr	r1, [sp, #16]
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 fc6f 	bl	8006cd2 <__multadd>
 80063f4:	9004      	str	r0, [sp, #16]
 80063f6:	e7ea      	b.n	80063ce <_dtoa_r+0xb3e>
 80063f8:	08008160 	.word	0x08008160
 80063fc:	080081e0 	.word	0x080081e0

08006400 <std>:
 8006400:	2300      	movs	r3, #0
 8006402:	b510      	push	{r4, lr}
 8006404:	4604      	mov	r4, r0
 8006406:	e9c0 3300 	strd	r3, r3, [r0]
 800640a:	6083      	str	r3, [r0, #8]
 800640c:	8181      	strh	r1, [r0, #12]
 800640e:	6643      	str	r3, [r0, #100]	; 0x64
 8006410:	81c2      	strh	r2, [r0, #14]
 8006412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006416:	6183      	str	r3, [r0, #24]
 8006418:	4619      	mov	r1, r3
 800641a:	2208      	movs	r2, #8
 800641c:	305c      	adds	r0, #92	; 0x5c
 800641e:	f7fd fc34 	bl	8003c8a <memset>
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <std+0x38>)
 8006424:	6263      	str	r3, [r4, #36]	; 0x24
 8006426:	4b05      	ldr	r3, [pc, #20]	; (800643c <std+0x3c>)
 8006428:	62a3      	str	r3, [r4, #40]	; 0x28
 800642a:	4b05      	ldr	r3, [pc, #20]	; (8006440 <std+0x40>)
 800642c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <std+0x44>)
 8006430:	6224      	str	r4, [r4, #32]
 8006432:	6323      	str	r3, [r4, #48]	; 0x30
 8006434:	bd10      	pop	{r4, pc}
 8006436:	bf00      	nop
 8006438:	08007aed 	.word	0x08007aed
 800643c:	08007b0f 	.word	0x08007b0f
 8006440:	08007b47 	.word	0x08007b47
 8006444:	08007b6b 	.word	0x08007b6b

08006448 <_cleanup_r>:
 8006448:	4901      	ldr	r1, [pc, #4]	; (8006450 <_cleanup_r+0x8>)
 800644a:	f000 b885 	b.w	8006558 <_fwalk_reent>
 800644e:	bf00      	nop
 8006450:	08007e85 	.word	0x08007e85

08006454 <__sfmoreglue>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	1e4a      	subs	r2, r1, #1
 8006458:	2568      	movs	r5, #104	; 0x68
 800645a:	4355      	muls	r5, r2
 800645c:	460e      	mov	r6, r1
 800645e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006462:	f001 f847 	bl	80074f4 <_malloc_r>
 8006466:	4604      	mov	r4, r0
 8006468:	b140      	cbz	r0, 800647c <__sfmoreglue+0x28>
 800646a:	2100      	movs	r1, #0
 800646c:	e9c0 1600 	strd	r1, r6, [r0]
 8006470:	300c      	adds	r0, #12
 8006472:	60a0      	str	r0, [r4, #8]
 8006474:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006478:	f7fd fc07 	bl	8003c8a <memset>
 800647c:	4620      	mov	r0, r4
 800647e:	bd70      	pop	{r4, r5, r6, pc}

08006480 <__sinit>:
 8006480:	6983      	ldr	r3, [r0, #24]
 8006482:	b510      	push	{r4, lr}
 8006484:	4604      	mov	r4, r0
 8006486:	bb33      	cbnz	r3, 80064d6 <__sinit+0x56>
 8006488:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800648c:	6503      	str	r3, [r0, #80]	; 0x50
 800648e:	4b12      	ldr	r3, [pc, #72]	; (80064d8 <__sinit+0x58>)
 8006490:	4a12      	ldr	r2, [pc, #72]	; (80064dc <__sinit+0x5c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6282      	str	r2, [r0, #40]	; 0x28
 8006496:	4298      	cmp	r0, r3
 8006498:	bf04      	itt	eq
 800649a:	2301      	moveq	r3, #1
 800649c:	6183      	streq	r3, [r0, #24]
 800649e:	f000 f81f 	bl	80064e0 <__sfp>
 80064a2:	6060      	str	r0, [r4, #4]
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 f81b 	bl	80064e0 <__sfp>
 80064aa:	60a0      	str	r0, [r4, #8]
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 f817 	bl	80064e0 <__sfp>
 80064b2:	2200      	movs	r2, #0
 80064b4:	60e0      	str	r0, [r4, #12]
 80064b6:	2104      	movs	r1, #4
 80064b8:	6860      	ldr	r0, [r4, #4]
 80064ba:	f7ff ffa1 	bl	8006400 <std>
 80064be:	2201      	movs	r2, #1
 80064c0:	2109      	movs	r1, #9
 80064c2:	68a0      	ldr	r0, [r4, #8]
 80064c4:	f7ff ff9c 	bl	8006400 <std>
 80064c8:	2202      	movs	r2, #2
 80064ca:	2112      	movs	r1, #18
 80064cc:	68e0      	ldr	r0, [r4, #12]
 80064ce:	f7ff ff97 	bl	8006400 <std>
 80064d2:	2301      	movs	r3, #1
 80064d4:	61a3      	str	r3, [r4, #24]
 80064d6:	bd10      	pop	{r4, pc}
 80064d8:	0800814c 	.word	0x0800814c
 80064dc:	08006449 	.word	0x08006449

080064e0 <__sfp>:
 80064e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e2:	4b1b      	ldr	r3, [pc, #108]	; (8006550 <__sfp+0x70>)
 80064e4:	681e      	ldr	r6, [r3, #0]
 80064e6:	69b3      	ldr	r3, [r6, #24]
 80064e8:	4607      	mov	r7, r0
 80064ea:	b913      	cbnz	r3, 80064f2 <__sfp+0x12>
 80064ec:	4630      	mov	r0, r6
 80064ee:	f7ff ffc7 	bl	8006480 <__sinit>
 80064f2:	3648      	adds	r6, #72	; 0x48
 80064f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	d503      	bpl.n	8006504 <__sfp+0x24>
 80064fc:	6833      	ldr	r3, [r6, #0]
 80064fe:	b133      	cbz	r3, 800650e <__sfp+0x2e>
 8006500:	6836      	ldr	r6, [r6, #0]
 8006502:	e7f7      	b.n	80064f4 <__sfp+0x14>
 8006504:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006508:	b16d      	cbz	r5, 8006526 <__sfp+0x46>
 800650a:	3468      	adds	r4, #104	; 0x68
 800650c:	e7f4      	b.n	80064f8 <__sfp+0x18>
 800650e:	2104      	movs	r1, #4
 8006510:	4638      	mov	r0, r7
 8006512:	f7ff ff9f 	bl	8006454 <__sfmoreglue>
 8006516:	6030      	str	r0, [r6, #0]
 8006518:	2800      	cmp	r0, #0
 800651a:	d1f1      	bne.n	8006500 <__sfp+0x20>
 800651c:	230c      	movs	r3, #12
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	4604      	mov	r4, r0
 8006522:	4620      	mov	r0, r4
 8006524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006526:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <__sfp+0x74>)
 8006528:	6665      	str	r5, [r4, #100]	; 0x64
 800652a:	e9c4 5500 	strd	r5, r5, [r4]
 800652e:	60a5      	str	r5, [r4, #8]
 8006530:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006534:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006538:	2208      	movs	r2, #8
 800653a:	4629      	mov	r1, r5
 800653c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006540:	f7fd fba3 	bl	8003c8a <memset>
 8006544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800654c:	e7e9      	b.n	8006522 <__sfp+0x42>
 800654e:	bf00      	nop
 8006550:	0800814c 	.word	0x0800814c
 8006554:	ffff0001 	.word	0xffff0001

08006558 <_fwalk_reent>:
 8006558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800655c:	4680      	mov	r8, r0
 800655e:	4689      	mov	r9, r1
 8006560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006564:	2600      	movs	r6, #0
 8006566:	b914      	cbnz	r4, 800656e <_fwalk_reent+0x16>
 8006568:	4630      	mov	r0, r6
 800656a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800656e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006572:	3f01      	subs	r7, #1
 8006574:	d501      	bpl.n	800657a <_fwalk_reent+0x22>
 8006576:	6824      	ldr	r4, [r4, #0]
 8006578:	e7f5      	b.n	8006566 <_fwalk_reent+0xe>
 800657a:	89ab      	ldrh	r3, [r5, #12]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d907      	bls.n	8006590 <_fwalk_reent+0x38>
 8006580:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006584:	3301      	adds	r3, #1
 8006586:	d003      	beq.n	8006590 <_fwalk_reent+0x38>
 8006588:	4629      	mov	r1, r5
 800658a:	4640      	mov	r0, r8
 800658c:	47c8      	blx	r9
 800658e:	4306      	orrs	r6, r0
 8006590:	3568      	adds	r5, #104	; 0x68
 8006592:	e7ee      	b.n	8006572 <_fwalk_reent+0x1a>

08006594 <rshift>:
 8006594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006596:	6906      	ldr	r6, [r0, #16]
 8006598:	114b      	asrs	r3, r1, #5
 800659a:	429e      	cmp	r6, r3
 800659c:	f100 0414 	add.w	r4, r0, #20
 80065a0:	dd30      	ble.n	8006604 <rshift+0x70>
 80065a2:	f011 011f 	ands.w	r1, r1, #31
 80065a6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80065aa:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80065ae:	d108      	bne.n	80065c2 <rshift+0x2e>
 80065b0:	4621      	mov	r1, r4
 80065b2:	42b2      	cmp	r2, r6
 80065b4:	460b      	mov	r3, r1
 80065b6:	d211      	bcs.n	80065dc <rshift+0x48>
 80065b8:	f852 3b04 	ldr.w	r3, [r2], #4
 80065bc:	f841 3b04 	str.w	r3, [r1], #4
 80065c0:	e7f7      	b.n	80065b2 <rshift+0x1e>
 80065c2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80065c6:	f1c1 0c20 	rsb	ip, r1, #32
 80065ca:	40cd      	lsrs	r5, r1
 80065cc:	3204      	adds	r2, #4
 80065ce:	4623      	mov	r3, r4
 80065d0:	42b2      	cmp	r2, r6
 80065d2:	4617      	mov	r7, r2
 80065d4:	d30c      	bcc.n	80065f0 <rshift+0x5c>
 80065d6:	601d      	str	r5, [r3, #0]
 80065d8:	b105      	cbz	r5, 80065dc <rshift+0x48>
 80065da:	3304      	adds	r3, #4
 80065dc:	1b1a      	subs	r2, r3, r4
 80065de:	42a3      	cmp	r3, r4
 80065e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80065e4:	bf08      	it	eq
 80065e6:	2300      	moveq	r3, #0
 80065e8:	6102      	str	r2, [r0, #16]
 80065ea:	bf08      	it	eq
 80065ec:	6143      	streq	r3, [r0, #20]
 80065ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f0:	683f      	ldr	r7, [r7, #0]
 80065f2:	fa07 f70c 	lsl.w	r7, r7, ip
 80065f6:	433d      	orrs	r5, r7
 80065f8:	f843 5b04 	str.w	r5, [r3], #4
 80065fc:	f852 5b04 	ldr.w	r5, [r2], #4
 8006600:	40cd      	lsrs	r5, r1
 8006602:	e7e5      	b.n	80065d0 <rshift+0x3c>
 8006604:	4623      	mov	r3, r4
 8006606:	e7e9      	b.n	80065dc <rshift+0x48>

08006608 <__hexdig_fun>:
 8006608:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800660c:	2b09      	cmp	r3, #9
 800660e:	d802      	bhi.n	8006616 <__hexdig_fun+0xe>
 8006610:	3820      	subs	r0, #32
 8006612:	b2c0      	uxtb	r0, r0
 8006614:	4770      	bx	lr
 8006616:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800661a:	2b05      	cmp	r3, #5
 800661c:	d801      	bhi.n	8006622 <__hexdig_fun+0x1a>
 800661e:	3847      	subs	r0, #71	; 0x47
 8006620:	e7f7      	b.n	8006612 <__hexdig_fun+0xa>
 8006622:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006626:	2b05      	cmp	r3, #5
 8006628:	d801      	bhi.n	800662e <__hexdig_fun+0x26>
 800662a:	3827      	subs	r0, #39	; 0x27
 800662c:	e7f1      	b.n	8006612 <__hexdig_fun+0xa>
 800662e:	2000      	movs	r0, #0
 8006630:	4770      	bx	lr

08006632 <__gethex>:
 8006632:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006636:	b08b      	sub	sp, #44	; 0x2c
 8006638:	468a      	mov	sl, r1
 800663a:	9002      	str	r0, [sp, #8]
 800663c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800663e:	9306      	str	r3, [sp, #24]
 8006640:	4690      	mov	r8, r2
 8006642:	f000 fad0 	bl	8006be6 <__localeconv_l>
 8006646:	6803      	ldr	r3, [r0, #0]
 8006648:	9303      	str	r3, [sp, #12]
 800664a:	4618      	mov	r0, r3
 800664c:	f7f9 fdc8 	bl	80001e0 <strlen>
 8006650:	9b03      	ldr	r3, [sp, #12]
 8006652:	9001      	str	r0, [sp, #4]
 8006654:	4403      	add	r3, r0
 8006656:	f04f 0b00 	mov.w	fp, #0
 800665a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800665e:	9307      	str	r3, [sp, #28]
 8006660:	f8da 3000 	ldr.w	r3, [sl]
 8006664:	3302      	adds	r3, #2
 8006666:	461f      	mov	r7, r3
 8006668:	f813 0b01 	ldrb.w	r0, [r3], #1
 800666c:	2830      	cmp	r0, #48	; 0x30
 800666e:	d06c      	beq.n	800674a <__gethex+0x118>
 8006670:	f7ff ffca 	bl	8006608 <__hexdig_fun>
 8006674:	4604      	mov	r4, r0
 8006676:	2800      	cmp	r0, #0
 8006678:	d16a      	bne.n	8006750 <__gethex+0x11e>
 800667a:	9a01      	ldr	r2, [sp, #4]
 800667c:	9903      	ldr	r1, [sp, #12]
 800667e:	4638      	mov	r0, r7
 8006680:	f001 fa77 	bl	8007b72 <strncmp>
 8006684:	2800      	cmp	r0, #0
 8006686:	d166      	bne.n	8006756 <__gethex+0x124>
 8006688:	9b01      	ldr	r3, [sp, #4]
 800668a:	5cf8      	ldrb	r0, [r7, r3]
 800668c:	18fe      	adds	r6, r7, r3
 800668e:	f7ff ffbb 	bl	8006608 <__hexdig_fun>
 8006692:	2800      	cmp	r0, #0
 8006694:	d062      	beq.n	800675c <__gethex+0x12a>
 8006696:	4633      	mov	r3, r6
 8006698:	7818      	ldrb	r0, [r3, #0]
 800669a:	2830      	cmp	r0, #48	; 0x30
 800669c:	461f      	mov	r7, r3
 800669e:	f103 0301 	add.w	r3, r3, #1
 80066a2:	d0f9      	beq.n	8006698 <__gethex+0x66>
 80066a4:	f7ff ffb0 	bl	8006608 <__hexdig_fun>
 80066a8:	fab0 f580 	clz	r5, r0
 80066ac:	096d      	lsrs	r5, r5, #5
 80066ae:	4634      	mov	r4, r6
 80066b0:	f04f 0b01 	mov.w	fp, #1
 80066b4:	463a      	mov	r2, r7
 80066b6:	4616      	mov	r6, r2
 80066b8:	3201      	adds	r2, #1
 80066ba:	7830      	ldrb	r0, [r6, #0]
 80066bc:	f7ff ffa4 	bl	8006608 <__hexdig_fun>
 80066c0:	2800      	cmp	r0, #0
 80066c2:	d1f8      	bne.n	80066b6 <__gethex+0x84>
 80066c4:	9a01      	ldr	r2, [sp, #4]
 80066c6:	9903      	ldr	r1, [sp, #12]
 80066c8:	4630      	mov	r0, r6
 80066ca:	f001 fa52 	bl	8007b72 <strncmp>
 80066ce:	b950      	cbnz	r0, 80066e6 <__gethex+0xb4>
 80066d0:	b954      	cbnz	r4, 80066e8 <__gethex+0xb6>
 80066d2:	9b01      	ldr	r3, [sp, #4]
 80066d4:	18f4      	adds	r4, r6, r3
 80066d6:	4622      	mov	r2, r4
 80066d8:	4616      	mov	r6, r2
 80066da:	3201      	adds	r2, #1
 80066dc:	7830      	ldrb	r0, [r6, #0]
 80066de:	f7ff ff93 	bl	8006608 <__hexdig_fun>
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d1f8      	bne.n	80066d8 <__gethex+0xa6>
 80066e6:	b10c      	cbz	r4, 80066ec <__gethex+0xba>
 80066e8:	1ba4      	subs	r4, r4, r6
 80066ea:	00a4      	lsls	r4, r4, #2
 80066ec:	7833      	ldrb	r3, [r6, #0]
 80066ee:	2b50      	cmp	r3, #80	; 0x50
 80066f0:	d001      	beq.n	80066f6 <__gethex+0xc4>
 80066f2:	2b70      	cmp	r3, #112	; 0x70
 80066f4:	d140      	bne.n	8006778 <__gethex+0x146>
 80066f6:	7873      	ldrb	r3, [r6, #1]
 80066f8:	2b2b      	cmp	r3, #43	; 0x2b
 80066fa:	d031      	beq.n	8006760 <__gethex+0x12e>
 80066fc:	2b2d      	cmp	r3, #45	; 0x2d
 80066fe:	d033      	beq.n	8006768 <__gethex+0x136>
 8006700:	1c71      	adds	r1, r6, #1
 8006702:	f04f 0900 	mov.w	r9, #0
 8006706:	7808      	ldrb	r0, [r1, #0]
 8006708:	f7ff ff7e 	bl	8006608 <__hexdig_fun>
 800670c:	1e43      	subs	r3, r0, #1
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b18      	cmp	r3, #24
 8006712:	d831      	bhi.n	8006778 <__gethex+0x146>
 8006714:	f1a0 0210 	sub.w	r2, r0, #16
 8006718:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800671c:	f7ff ff74 	bl	8006608 <__hexdig_fun>
 8006720:	1e43      	subs	r3, r0, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b18      	cmp	r3, #24
 8006726:	d922      	bls.n	800676e <__gethex+0x13c>
 8006728:	f1b9 0f00 	cmp.w	r9, #0
 800672c:	d000      	beq.n	8006730 <__gethex+0xfe>
 800672e:	4252      	negs	r2, r2
 8006730:	4414      	add	r4, r2
 8006732:	f8ca 1000 	str.w	r1, [sl]
 8006736:	b30d      	cbz	r5, 800677c <__gethex+0x14a>
 8006738:	f1bb 0f00 	cmp.w	fp, #0
 800673c:	bf0c      	ite	eq
 800673e:	2706      	moveq	r7, #6
 8006740:	2700      	movne	r7, #0
 8006742:	4638      	mov	r0, r7
 8006744:	b00b      	add	sp, #44	; 0x2c
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	f10b 0b01 	add.w	fp, fp, #1
 800674e:	e78a      	b.n	8006666 <__gethex+0x34>
 8006750:	2500      	movs	r5, #0
 8006752:	462c      	mov	r4, r5
 8006754:	e7ae      	b.n	80066b4 <__gethex+0x82>
 8006756:	463e      	mov	r6, r7
 8006758:	2501      	movs	r5, #1
 800675a:	e7c7      	b.n	80066ec <__gethex+0xba>
 800675c:	4604      	mov	r4, r0
 800675e:	e7fb      	b.n	8006758 <__gethex+0x126>
 8006760:	f04f 0900 	mov.w	r9, #0
 8006764:	1cb1      	adds	r1, r6, #2
 8006766:	e7ce      	b.n	8006706 <__gethex+0xd4>
 8006768:	f04f 0901 	mov.w	r9, #1
 800676c:	e7fa      	b.n	8006764 <__gethex+0x132>
 800676e:	230a      	movs	r3, #10
 8006770:	fb03 0202 	mla	r2, r3, r2, r0
 8006774:	3a10      	subs	r2, #16
 8006776:	e7cf      	b.n	8006718 <__gethex+0xe6>
 8006778:	4631      	mov	r1, r6
 800677a:	e7da      	b.n	8006732 <__gethex+0x100>
 800677c:	1bf3      	subs	r3, r6, r7
 800677e:	3b01      	subs	r3, #1
 8006780:	4629      	mov	r1, r5
 8006782:	2b07      	cmp	r3, #7
 8006784:	dc49      	bgt.n	800681a <__gethex+0x1e8>
 8006786:	9802      	ldr	r0, [sp, #8]
 8006788:	f000 fa58 	bl	8006c3c <_Balloc>
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	f100 0914 	add.w	r9, r0, #20
 8006792:	f04f 0b00 	mov.w	fp, #0
 8006796:	f1c3 0301 	rsb	r3, r3, #1
 800679a:	4605      	mov	r5, r0
 800679c:	f8cd 9010 	str.w	r9, [sp, #16]
 80067a0:	46da      	mov	sl, fp
 80067a2:	9308      	str	r3, [sp, #32]
 80067a4:	42b7      	cmp	r7, r6
 80067a6:	d33b      	bcc.n	8006820 <__gethex+0x1ee>
 80067a8:	9804      	ldr	r0, [sp, #16]
 80067aa:	f840 ab04 	str.w	sl, [r0], #4
 80067ae:	eba0 0009 	sub.w	r0, r0, r9
 80067b2:	1080      	asrs	r0, r0, #2
 80067b4:	6128      	str	r0, [r5, #16]
 80067b6:	0147      	lsls	r7, r0, #5
 80067b8:	4650      	mov	r0, sl
 80067ba:	f000 fb03 	bl	8006dc4 <__hi0bits>
 80067be:	f8d8 6000 	ldr.w	r6, [r8]
 80067c2:	1a3f      	subs	r7, r7, r0
 80067c4:	42b7      	cmp	r7, r6
 80067c6:	dd64      	ble.n	8006892 <__gethex+0x260>
 80067c8:	1bbf      	subs	r7, r7, r6
 80067ca:	4639      	mov	r1, r7
 80067cc:	4628      	mov	r0, r5
 80067ce:	f000 fe13 	bl	80073f8 <__any_on>
 80067d2:	4682      	mov	sl, r0
 80067d4:	b178      	cbz	r0, 80067f6 <__gethex+0x1c4>
 80067d6:	1e7b      	subs	r3, r7, #1
 80067d8:	1159      	asrs	r1, r3, #5
 80067da:	f003 021f 	and.w	r2, r3, #31
 80067de:	f04f 0a01 	mov.w	sl, #1
 80067e2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80067e6:	fa0a f202 	lsl.w	r2, sl, r2
 80067ea:	420a      	tst	r2, r1
 80067ec:	d003      	beq.n	80067f6 <__gethex+0x1c4>
 80067ee:	4553      	cmp	r3, sl
 80067f0:	dc46      	bgt.n	8006880 <__gethex+0x24e>
 80067f2:	f04f 0a02 	mov.w	sl, #2
 80067f6:	4639      	mov	r1, r7
 80067f8:	4628      	mov	r0, r5
 80067fa:	f7ff fecb 	bl	8006594 <rshift>
 80067fe:	443c      	add	r4, r7
 8006800:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006804:	42a3      	cmp	r3, r4
 8006806:	da52      	bge.n	80068ae <__gethex+0x27c>
 8006808:	4629      	mov	r1, r5
 800680a:	9802      	ldr	r0, [sp, #8]
 800680c:	f000 fa4a 	bl	8006ca4 <_Bfree>
 8006810:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006812:	2300      	movs	r3, #0
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	27a3      	movs	r7, #163	; 0xa3
 8006818:	e793      	b.n	8006742 <__gethex+0x110>
 800681a:	3101      	adds	r1, #1
 800681c:	105b      	asrs	r3, r3, #1
 800681e:	e7b0      	b.n	8006782 <__gethex+0x150>
 8006820:	1e73      	subs	r3, r6, #1
 8006822:	9305      	str	r3, [sp, #20]
 8006824:	9a07      	ldr	r2, [sp, #28]
 8006826:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800682a:	4293      	cmp	r3, r2
 800682c:	d018      	beq.n	8006860 <__gethex+0x22e>
 800682e:	f1bb 0f20 	cmp.w	fp, #32
 8006832:	d107      	bne.n	8006844 <__gethex+0x212>
 8006834:	9b04      	ldr	r3, [sp, #16]
 8006836:	f8c3 a000 	str.w	sl, [r3]
 800683a:	3304      	adds	r3, #4
 800683c:	f04f 0a00 	mov.w	sl, #0
 8006840:	9304      	str	r3, [sp, #16]
 8006842:	46d3      	mov	fp, sl
 8006844:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006848:	f7ff fede 	bl	8006608 <__hexdig_fun>
 800684c:	f000 000f 	and.w	r0, r0, #15
 8006850:	fa00 f00b 	lsl.w	r0, r0, fp
 8006854:	ea4a 0a00 	orr.w	sl, sl, r0
 8006858:	f10b 0b04 	add.w	fp, fp, #4
 800685c:	9b05      	ldr	r3, [sp, #20]
 800685e:	e00d      	b.n	800687c <__gethex+0x24a>
 8006860:	9b05      	ldr	r3, [sp, #20]
 8006862:	9a08      	ldr	r2, [sp, #32]
 8006864:	4413      	add	r3, r2
 8006866:	42bb      	cmp	r3, r7
 8006868:	d3e1      	bcc.n	800682e <__gethex+0x1fc>
 800686a:	4618      	mov	r0, r3
 800686c:	9a01      	ldr	r2, [sp, #4]
 800686e:	9903      	ldr	r1, [sp, #12]
 8006870:	9309      	str	r3, [sp, #36]	; 0x24
 8006872:	f001 f97e 	bl	8007b72 <strncmp>
 8006876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006878:	2800      	cmp	r0, #0
 800687a:	d1d8      	bne.n	800682e <__gethex+0x1fc>
 800687c:	461e      	mov	r6, r3
 800687e:	e791      	b.n	80067a4 <__gethex+0x172>
 8006880:	1eb9      	subs	r1, r7, #2
 8006882:	4628      	mov	r0, r5
 8006884:	f000 fdb8 	bl	80073f8 <__any_on>
 8006888:	2800      	cmp	r0, #0
 800688a:	d0b2      	beq.n	80067f2 <__gethex+0x1c0>
 800688c:	f04f 0a03 	mov.w	sl, #3
 8006890:	e7b1      	b.n	80067f6 <__gethex+0x1c4>
 8006892:	da09      	bge.n	80068a8 <__gethex+0x276>
 8006894:	1bf7      	subs	r7, r6, r7
 8006896:	4629      	mov	r1, r5
 8006898:	463a      	mov	r2, r7
 800689a:	9802      	ldr	r0, [sp, #8]
 800689c:	f000 fbce 	bl	800703c <__lshift>
 80068a0:	1be4      	subs	r4, r4, r7
 80068a2:	4605      	mov	r5, r0
 80068a4:	f100 0914 	add.w	r9, r0, #20
 80068a8:	f04f 0a00 	mov.w	sl, #0
 80068ac:	e7a8      	b.n	8006800 <__gethex+0x1ce>
 80068ae:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80068b2:	42a0      	cmp	r0, r4
 80068b4:	dd6a      	ble.n	800698c <__gethex+0x35a>
 80068b6:	1b04      	subs	r4, r0, r4
 80068b8:	42a6      	cmp	r6, r4
 80068ba:	dc2e      	bgt.n	800691a <__gethex+0x2e8>
 80068bc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d022      	beq.n	800690a <__gethex+0x2d8>
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d024      	beq.n	8006912 <__gethex+0x2e0>
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d115      	bne.n	80068f8 <__gethex+0x2c6>
 80068cc:	42a6      	cmp	r6, r4
 80068ce:	d113      	bne.n	80068f8 <__gethex+0x2c6>
 80068d0:	2e01      	cmp	r6, #1
 80068d2:	dc0b      	bgt.n	80068ec <__gethex+0x2ba>
 80068d4:	9a06      	ldr	r2, [sp, #24]
 80068d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80068da:	6013      	str	r3, [r2, #0]
 80068dc:	2301      	movs	r3, #1
 80068de:	612b      	str	r3, [r5, #16]
 80068e0:	f8c9 3000 	str.w	r3, [r9]
 80068e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068e6:	2762      	movs	r7, #98	; 0x62
 80068e8:	601d      	str	r5, [r3, #0]
 80068ea:	e72a      	b.n	8006742 <__gethex+0x110>
 80068ec:	1e71      	subs	r1, r6, #1
 80068ee:	4628      	mov	r0, r5
 80068f0:	f000 fd82 	bl	80073f8 <__any_on>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d1ed      	bne.n	80068d4 <__gethex+0x2a2>
 80068f8:	4629      	mov	r1, r5
 80068fa:	9802      	ldr	r0, [sp, #8]
 80068fc:	f000 f9d2 	bl	8006ca4 <_Bfree>
 8006900:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006902:	2300      	movs	r3, #0
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	2750      	movs	r7, #80	; 0x50
 8006908:	e71b      	b.n	8006742 <__gethex+0x110>
 800690a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800690c:	2b00      	cmp	r3, #0
 800690e:	d0e1      	beq.n	80068d4 <__gethex+0x2a2>
 8006910:	e7f2      	b.n	80068f8 <__gethex+0x2c6>
 8006912:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1dd      	bne.n	80068d4 <__gethex+0x2a2>
 8006918:	e7ee      	b.n	80068f8 <__gethex+0x2c6>
 800691a:	1e67      	subs	r7, r4, #1
 800691c:	f1ba 0f00 	cmp.w	sl, #0
 8006920:	d131      	bne.n	8006986 <__gethex+0x354>
 8006922:	b127      	cbz	r7, 800692e <__gethex+0x2fc>
 8006924:	4639      	mov	r1, r7
 8006926:	4628      	mov	r0, r5
 8006928:	f000 fd66 	bl	80073f8 <__any_on>
 800692c:	4682      	mov	sl, r0
 800692e:	117a      	asrs	r2, r7, #5
 8006930:	2301      	movs	r3, #1
 8006932:	f007 071f 	and.w	r7, r7, #31
 8006936:	fa03 f707 	lsl.w	r7, r3, r7
 800693a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800693e:	4621      	mov	r1, r4
 8006940:	421f      	tst	r7, r3
 8006942:	4628      	mov	r0, r5
 8006944:	bf18      	it	ne
 8006946:	f04a 0a02 	orrne.w	sl, sl, #2
 800694a:	1b36      	subs	r6, r6, r4
 800694c:	f7ff fe22 	bl	8006594 <rshift>
 8006950:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006954:	2702      	movs	r7, #2
 8006956:	f1ba 0f00 	cmp.w	sl, #0
 800695a:	d048      	beq.n	80069ee <__gethex+0x3bc>
 800695c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006960:	2b02      	cmp	r3, #2
 8006962:	d015      	beq.n	8006990 <__gethex+0x35e>
 8006964:	2b03      	cmp	r3, #3
 8006966:	d017      	beq.n	8006998 <__gethex+0x366>
 8006968:	2b01      	cmp	r3, #1
 800696a:	d109      	bne.n	8006980 <__gethex+0x34e>
 800696c:	f01a 0f02 	tst.w	sl, #2
 8006970:	d006      	beq.n	8006980 <__gethex+0x34e>
 8006972:	f8d9 3000 	ldr.w	r3, [r9]
 8006976:	ea4a 0a03 	orr.w	sl, sl, r3
 800697a:	f01a 0f01 	tst.w	sl, #1
 800697e:	d10e      	bne.n	800699e <__gethex+0x36c>
 8006980:	f047 0710 	orr.w	r7, r7, #16
 8006984:	e033      	b.n	80069ee <__gethex+0x3bc>
 8006986:	f04f 0a01 	mov.w	sl, #1
 800698a:	e7d0      	b.n	800692e <__gethex+0x2fc>
 800698c:	2701      	movs	r7, #1
 800698e:	e7e2      	b.n	8006956 <__gethex+0x324>
 8006990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006992:	f1c3 0301 	rsb	r3, r3, #1
 8006996:	9315      	str	r3, [sp, #84]	; 0x54
 8006998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <__gethex+0x34e>
 800699e:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80069a2:	f105 0314 	add.w	r3, r5, #20
 80069a6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80069aa:	eb03 010a 	add.w	r1, r3, sl
 80069ae:	f04f 0c00 	mov.w	ip, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069b8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80069bc:	d01c      	beq.n	80069f8 <__gethex+0x3c6>
 80069be:	3201      	adds	r2, #1
 80069c0:	6002      	str	r2, [r0, #0]
 80069c2:	2f02      	cmp	r7, #2
 80069c4:	f105 0314 	add.w	r3, r5, #20
 80069c8:	d138      	bne.n	8006a3c <__gethex+0x40a>
 80069ca:	f8d8 2000 	ldr.w	r2, [r8]
 80069ce:	3a01      	subs	r2, #1
 80069d0:	42b2      	cmp	r2, r6
 80069d2:	d10a      	bne.n	80069ea <__gethex+0x3b8>
 80069d4:	1171      	asrs	r1, r6, #5
 80069d6:	2201      	movs	r2, #1
 80069d8:	f006 061f 	and.w	r6, r6, #31
 80069dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80069e0:	fa02 f606 	lsl.w	r6, r2, r6
 80069e4:	421e      	tst	r6, r3
 80069e6:	bf18      	it	ne
 80069e8:	4617      	movne	r7, r2
 80069ea:	f047 0720 	orr.w	r7, r7, #32
 80069ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80069f0:	601d      	str	r5, [r3, #0]
 80069f2:	9b06      	ldr	r3, [sp, #24]
 80069f4:	601c      	str	r4, [r3, #0]
 80069f6:	e6a4      	b.n	8006742 <__gethex+0x110>
 80069f8:	4299      	cmp	r1, r3
 80069fa:	f843 cc04 	str.w	ip, [r3, #-4]
 80069fe:	d8d8      	bhi.n	80069b2 <__gethex+0x380>
 8006a00:	68ab      	ldr	r3, [r5, #8]
 8006a02:	4599      	cmp	r9, r3
 8006a04:	db12      	blt.n	8006a2c <__gethex+0x3fa>
 8006a06:	6869      	ldr	r1, [r5, #4]
 8006a08:	9802      	ldr	r0, [sp, #8]
 8006a0a:	3101      	adds	r1, #1
 8006a0c:	f000 f916 	bl	8006c3c <_Balloc>
 8006a10:	692a      	ldr	r2, [r5, #16]
 8006a12:	3202      	adds	r2, #2
 8006a14:	f105 010c 	add.w	r1, r5, #12
 8006a18:	4683      	mov	fp, r0
 8006a1a:	0092      	lsls	r2, r2, #2
 8006a1c:	300c      	adds	r0, #12
 8006a1e:	f7fd f929 	bl	8003c74 <memcpy>
 8006a22:	4629      	mov	r1, r5
 8006a24:	9802      	ldr	r0, [sp, #8]
 8006a26:	f000 f93d 	bl	8006ca4 <_Bfree>
 8006a2a:	465d      	mov	r5, fp
 8006a2c:	692b      	ldr	r3, [r5, #16]
 8006a2e:	1c5a      	adds	r2, r3, #1
 8006a30:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006a34:	612a      	str	r2, [r5, #16]
 8006a36:	2201      	movs	r2, #1
 8006a38:	615a      	str	r2, [r3, #20]
 8006a3a:	e7c2      	b.n	80069c2 <__gethex+0x390>
 8006a3c:	692a      	ldr	r2, [r5, #16]
 8006a3e:	454a      	cmp	r2, r9
 8006a40:	dd0b      	ble.n	8006a5a <__gethex+0x428>
 8006a42:	2101      	movs	r1, #1
 8006a44:	4628      	mov	r0, r5
 8006a46:	f7ff fda5 	bl	8006594 <rshift>
 8006a4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a4e:	3401      	adds	r4, #1
 8006a50:	42a3      	cmp	r3, r4
 8006a52:	f6ff aed9 	blt.w	8006808 <__gethex+0x1d6>
 8006a56:	2701      	movs	r7, #1
 8006a58:	e7c7      	b.n	80069ea <__gethex+0x3b8>
 8006a5a:	f016 061f 	ands.w	r6, r6, #31
 8006a5e:	d0fa      	beq.n	8006a56 <__gethex+0x424>
 8006a60:	449a      	add	sl, r3
 8006a62:	f1c6 0620 	rsb	r6, r6, #32
 8006a66:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006a6a:	f000 f9ab 	bl	8006dc4 <__hi0bits>
 8006a6e:	42b0      	cmp	r0, r6
 8006a70:	dbe7      	blt.n	8006a42 <__gethex+0x410>
 8006a72:	e7f0      	b.n	8006a56 <__gethex+0x424>

08006a74 <L_shift>:
 8006a74:	f1c2 0208 	rsb	r2, r2, #8
 8006a78:	0092      	lsls	r2, r2, #2
 8006a7a:	b570      	push	{r4, r5, r6, lr}
 8006a7c:	f1c2 0620 	rsb	r6, r2, #32
 8006a80:	6843      	ldr	r3, [r0, #4]
 8006a82:	6804      	ldr	r4, [r0, #0]
 8006a84:	fa03 f506 	lsl.w	r5, r3, r6
 8006a88:	432c      	orrs	r4, r5
 8006a8a:	40d3      	lsrs	r3, r2
 8006a8c:	6004      	str	r4, [r0, #0]
 8006a8e:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a92:	4288      	cmp	r0, r1
 8006a94:	d3f4      	bcc.n	8006a80 <L_shift+0xc>
 8006a96:	bd70      	pop	{r4, r5, r6, pc}

08006a98 <__match>:
 8006a98:	b530      	push	{r4, r5, lr}
 8006a9a:	6803      	ldr	r3, [r0, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006aa2:	b914      	cbnz	r4, 8006aaa <__match+0x12>
 8006aa4:	6003      	str	r3, [r0, #0]
 8006aa6:	2001      	movs	r0, #1
 8006aa8:	bd30      	pop	{r4, r5, pc}
 8006aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006aae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006ab2:	2d19      	cmp	r5, #25
 8006ab4:	bf98      	it	ls
 8006ab6:	3220      	addls	r2, #32
 8006ab8:	42a2      	cmp	r2, r4
 8006aba:	d0f0      	beq.n	8006a9e <__match+0x6>
 8006abc:	2000      	movs	r0, #0
 8006abe:	e7f3      	b.n	8006aa8 <__match+0x10>

08006ac0 <__hexnan>:
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	680b      	ldr	r3, [r1, #0]
 8006ac6:	6801      	ldr	r1, [r0, #0]
 8006ac8:	115f      	asrs	r7, r3, #5
 8006aca:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006ace:	f013 031f 	ands.w	r3, r3, #31
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	bf18      	it	ne
 8006ad6:	3704      	addne	r7, #4
 8006ad8:	2500      	movs	r5, #0
 8006ada:	1f3e      	subs	r6, r7, #4
 8006adc:	4682      	mov	sl, r0
 8006ade:	4690      	mov	r8, r2
 8006ae0:	9301      	str	r3, [sp, #4]
 8006ae2:	f847 5c04 	str.w	r5, [r7, #-4]
 8006ae6:	46b1      	mov	r9, r6
 8006ae8:	4634      	mov	r4, r6
 8006aea:	9502      	str	r5, [sp, #8]
 8006aec:	46ab      	mov	fp, r5
 8006aee:	784a      	ldrb	r2, [r1, #1]
 8006af0:	1c4b      	adds	r3, r1, #1
 8006af2:	9303      	str	r3, [sp, #12]
 8006af4:	b342      	cbz	r2, 8006b48 <__hexnan+0x88>
 8006af6:	4610      	mov	r0, r2
 8006af8:	9105      	str	r1, [sp, #20]
 8006afa:	9204      	str	r2, [sp, #16]
 8006afc:	f7ff fd84 	bl	8006608 <__hexdig_fun>
 8006b00:	2800      	cmp	r0, #0
 8006b02:	d143      	bne.n	8006b8c <__hexnan+0xcc>
 8006b04:	9a04      	ldr	r2, [sp, #16]
 8006b06:	9905      	ldr	r1, [sp, #20]
 8006b08:	2a20      	cmp	r2, #32
 8006b0a:	d818      	bhi.n	8006b3e <__hexnan+0x7e>
 8006b0c:	9b02      	ldr	r3, [sp, #8]
 8006b0e:	459b      	cmp	fp, r3
 8006b10:	dd13      	ble.n	8006b3a <__hexnan+0x7a>
 8006b12:	454c      	cmp	r4, r9
 8006b14:	d206      	bcs.n	8006b24 <__hexnan+0x64>
 8006b16:	2d07      	cmp	r5, #7
 8006b18:	dc04      	bgt.n	8006b24 <__hexnan+0x64>
 8006b1a:	462a      	mov	r2, r5
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f7ff ffa8 	bl	8006a74 <L_shift>
 8006b24:	4544      	cmp	r4, r8
 8006b26:	d944      	bls.n	8006bb2 <__hexnan+0xf2>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f1a4 0904 	sub.w	r9, r4, #4
 8006b2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b32:	f8cd b008 	str.w	fp, [sp, #8]
 8006b36:	464c      	mov	r4, r9
 8006b38:	461d      	mov	r5, r3
 8006b3a:	9903      	ldr	r1, [sp, #12]
 8006b3c:	e7d7      	b.n	8006aee <__hexnan+0x2e>
 8006b3e:	2a29      	cmp	r2, #41	; 0x29
 8006b40:	d14a      	bne.n	8006bd8 <__hexnan+0x118>
 8006b42:	3102      	adds	r1, #2
 8006b44:	f8ca 1000 	str.w	r1, [sl]
 8006b48:	f1bb 0f00 	cmp.w	fp, #0
 8006b4c:	d044      	beq.n	8006bd8 <__hexnan+0x118>
 8006b4e:	454c      	cmp	r4, r9
 8006b50:	d206      	bcs.n	8006b60 <__hexnan+0xa0>
 8006b52:	2d07      	cmp	r5, #7
 8006b54:	dc04      	bgt.n	8006b60 <__hexnan+0xa0>
 8006b56:	462a      	mov	r2, r5
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	f7ff ff8a 	bl	8006a74 <L_shift>
 8006b60:	4544      	cmp	r4, r8
 8006b62:	d928      	bls.n	8006bb6 <__hexnan+0xf6>
 8006b64:	4643      	mov	r3, r8
 8006b66:	f854 2b04 	ldr.w	r2, [r4], #4
 8006b6a:	f843 2b04 	str.w	r2, [r3], #4
 8006b6e:	42a6      	cmp	r6, r4
 8006b70:	d2f9      	bcs.n	8006b66 <__hexnan+0xa6>
 8006b72:	2200      	movs	r2, #0
 8006b74:	f843 2b04 	str.w	r2, [r3], #4
 8006b78:	429e      	cmp	r6, r3
 8006b7a:	d2fb      	bcs.n	8006b74 <__hexnan+0xb4>
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	b91b      	cbnz	r3, 8006b88 <__hexnan+0xc8>
 8006b80:	4546      	cmp	r6, r8
 8006b82:	d127      	bne.n	8006bd4 <__hexnan+0x114>
 8006b84:	2301      	movs	r3, #1
 8006b86:	6033      	str	r3, [r6, #0]
 8006b88:	2005      	movs	r0, #5
 8006b8a:	e026      	b.n	8006bda <__hexnan+0x11a>
 8006b8c:	3501      	adds	r5, #1
 8006b8e:	2d08      	cmp	r5, #8
 8006b90:	f10b 0b01 	add.w	fp, fp, #1
 8006b94:	dd06      	ble.n	8006ba4 <__hexnan+0xe4>
 8006b96:	4544      	cmp	r4, r8
 8006b98:	d9cf      	bls.n	8006b3a <__hexnan+0x7a>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ba0:	2501      	movs	r5, #1
 8006ba2:	3c04      	subs	r4, #4
 8006ba4:	6822      	ldr	r2, [r4, #0]
 8006ba6:	f000 000f 	and.w	r0, r0, #15
 8006baa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006bae:	6020      	str	r0, [r4, #0]
 8006bb0:	e7c3      	b.n	8006b3a <__hexnan+0x7a>
 8006bb2:	2508      	movs	r5, #8
 8006bb4:	e7c1      	b.n	8006b3a <__hexnan+0x7a>
 8006bb6:	9b01      	ldr	r3, [sp, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0df      	beq.n	8006b7c <__hexnan+0xbc>
 8006bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc0:	f1c3 0320 	rsb	r3, r3, #32
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006bcc:	401a      	ands	r2, r3
 8006bce:	f847 2c04 	str.w	r2, [r7, #-4]
 8006bd2:	e7d3      	b.n	8006b7c <__hexnan+0xbc>
 8006bd4:	3e04      	subs	r6, #4
 8006bd6:	e7d1      	b.n	8006b7c <__hexnan+0xbc>
 8006bd8:	2004      	movs	r0, #4
 8006bda:	b007      	add	sp, #28
 8006bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006be0 <__locale_ctype_ptr_l>:
 8006be0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8006be4:	4770      	bx	lr

08006be6 <__localeconv_l>:
 8006be6:	30f0      	adds	r0, #240	; 0xf0
 8006be8:	4770      	bx	lr
	...

08006bec <_localeconv_r>:
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <_localeconv_r+0x14>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6a18      	ldr	r0, [r3, #32]
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <_localeconv_r+0x18>)
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	bf08      	it	eq
 8006bf8:	4618      	moveq	r0, r3
 8006bfa:	30f0      	adds	r0, #240	; 0xf0
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	2000000c 	.word	0x2000000c
 8006c04:	20000070 	.word	0x20000070

08006c08 <malloc>:
 8006c08:	4b02      	ldr	r3, [pc, #8]	; (8006c14 <malloc+0xc>)
 8006c0a:	4601      	mov	r1, r0
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	f000 bc71 	b.w	80074f4 <_malloc_r>
 8006c12:	bf00      	nop
 8006c14:	2000000c 	.word	0x2000000c

08006c18 <__ascii_mbtowc>:
 8006c18:	b082      	sub	sp, #8
 8006c1a:	b901      	cbnz	r1, 8006c1e <__ascii_mbtowc+0x6>
 8006c1c:	a901      	add	r1, sp, #4
 8006c1e:	b142      	cbz	r2, 8006c32 <__ascii_mbtowc+0x1a>
 8006c20:	b14b      	cbz	r3, 8006c36 <__ascii_mbtowc+0x1e>
 8006c22:	7813      	ldrb	r3, [r2, #0]
 8006c24:	600b      	str	r3, [r1, #0]
 8006c26:	7812      	ldrb	r2, [r2, #0]
 8006c28:	1c10      	adds	r0, r2, #0
 8006c2a:	bf18      	it	ne
 8006c2c:	2001      	movne	r0, #1
 8006c2e:	b002      	add	sp, #8
 8006c30:	4770      	bx	lr
 8006c32:	4610      	mov	r0, r2
 8006c34:	e7fb      	b.n	8006c2e <__ascii_mbtowc+0x16>
 8006c36:	f06f 0001 	mvn.w	r0, #1
 8006c3a:	e7f8      	b.n	8006c2e <__ascii_mbtowc+0x16>

08006c3c <_Balloc>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c40:	4604      	mov	r4, r0
 8006c42:	460e      	mov	r6, r1
 8006c44:	b93d      	cbnz	r5, 8006c56 <_Balloc+0x1a>
 8006c46:	2010      	movs	r0, #16
 8006c48:	f7ff ffde 	bl	8006c08 <malloc>
 8006c4c:	6260      	str	r0, [r4, #36]	; 0x24
 8006c4e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c52:	6005      	str	r5, [r0, #0]
 8006c54:	60c5      	str	r5, [r0, #12]
 8006c56:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c58:	68eb      	ldr	r3, [r5, #12]
 8006c5a:	b183      	cbz	r3, 8006c7e <_Balloc+0x42>
 8006c5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c64:	b9b8      	cbnz	r0, 8006c96 <_Balloc+0x5a>
 8006c66:	2101      	movs	r1, #1
 8006c68:	fa01 f506 	lsl.w	r5, r1, r6
 8006c6c:	1d6a      	adds	r2, r5, #5
 8006c6e:	0092      	lsls	r2, r2, #2
 8006c70:	4620      	mov	r0, r4
 8006c72:	f000 fbe2 	bl	800743a <_calloc_r>
 8006c76:	b160      	cbz	r0, 8006c92 <_Balloc+0x56>
 8006c78:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006c7c:	e00e      	b.n	8006c9c <_Balloc+0x60>
 8006c7e:	2221      	movs	r2, #33	; 0x21
 8006c80:	2104      	movs	r1, #4
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fbd9 	bl	800743a <_calloc_r>
 8006c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c8a:	60e8      	str	r0, [r5, #12]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1e4      	bne.n	8006c5c <_Balloc+0x20>
 8006c92:	2000      	movs	r0, #0
 8006c94:	bd70      	pop	{r4, r5, r6, pc}
 8006c96:	6802      	ldr	r2, [r0, #0]
 8006c98:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ca2:	e7f7      	b.n	8006c94 <_Balloc+0x58>

08006ca4 <_Bfree>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006ca8:	4606      	mov	r6, r0
 8006caa:	460d      	mov	r5, r1
 8006cac:	b93c      	cbnz	r4, 8006cbe <_Bfree+0x1a>
 8006cae:	2010      	movs	r0, #16
 8006cb0:	f7ff ffaa 	bl	8006c08 <malloc>
 8006cb4:	6270      	str	r0, [r6, #36]	; 0x24
 8006cb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cba:	6004      	str	r4, [r0, #0]
 8006cbc:	60c4      	str	r4, [r0, #12]
 8006cbe:	b13d      	cbz	r5, 8006cd0 <_Bfree+0x2c>
 8006cc0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006cc2:	686a      	ldr	r2, [r5, #4]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cca:	6029      	str	r1, [r5, #0]
 8006ccc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}

08006cd2 <__multadd>:
 8006cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd6:	690d      	ldr	r5, [r1, #16]
 8006cd8:	461f      	mov	r7, r3
 8006cda:	4606      	mov	r6, r0
 8006cdc:	460c      	mov	r4, r1
 8006cde:	f101 0c14 	add.w	ip, r1, #20
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f8dc 0000 	ldr.w	r0, [ip]
 8006ce8:	b281      	uxth	r1, r0
 8006cea:	fb02 7101 	mla	r1, r2, r1, r7
 8006cee:	0c0f      	lsrs	r7, r1, #16
 8006cf0:	0c00      	lsrs	r0, r0, #16
 8006cf2:	fb02 7000 	mla	r0, r2, r0, r7
 8006cf6:	b289      	uxth	r1, r1
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006cfe:	429d      	cmp	r5, r3
 8006d00:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d04:	f84c 1b04 	str.w	r1, [ip], #4
 8006d08:	dcec      	bgt.n	8006ce4 <__multadd+0x12>
 8006d0a:	b1d7      	cbz	r7, 8006d42 <__multadd+0x70>
 8006d0c:	68a3      	ldr	r3, [r4, #8]
 8006d0e:	42ab      	cmp	r3, r5
 8006d10:	dc12      	bgt.n	8006d38 <__multadd+0x66>
 8006d12:	6861      	ldr	r1, [r4, #4]
 8006d14:	4630      	mov	r0, r6
 8006d16:	3101      	adds	r1, #1
 8006d18:	f7ff ff90 	bl	8006c3c <_Balloc>
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	3202      	adds	r2, #2
 8006d20:	f104 010c 	add.w	r1, r4, #12
 8006d24:	4680      	mov	r8, r0
 8006d26:	0092      	lsls	r2, r2, #2
 8006d28:	300c      	adds	r0, #12
 8006d2a:	f7fc ffa3 	bl	8003c74 <memcpy>
 8006d2e:	4621      	mov	r1, r4
 8006d30:	4630      	mov	r0, r6
 8006d32:	f7ff ffb7 	bl	8006ca4 <_Bfree>
 8006d36:	4644      	mov	r4, r8
 8006d38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	615f      	str	r7, [r3, #20]
 8006d40:	6125      	str	r5, [r4, #16]
 8006d42:	4620      	mov	r0, r4
 8006d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d48 <__s2b>:
 8006d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	4615      	mov	r5, r2
 8006d50:	461f      	mov	r7, r3
 8006d52:	2209      	movs	r2, #9
 8006d54:	3308      	adds	r3, #8
 8006d56:	4606      	mov	r6, r0
 8006d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	2201      	movs	r2, #1
 8006d60:	429a      	cmp	r2, r3
 8006d62:	db20      	blt.n	8006da6 <__s2b+0x5e>
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff ff69 	bl	8006c3c <_Balloc>
 8006d6a:	9b08      	ldr	r3, [sp, #32]
 8006d6c:	6143      	str	r3, [r0, #20]
 8006d6e:	2d09      	cmp	r5, #9
 8006d70:	f04f 0301 	mov.w	r3, #1
 8006d74:	6103      	str	r3, [r0, #16]
 8006d76:	dd19      	ble.n	8006dac <__s2b+0x64>
 8006d78:	f104 0809 	add.w	r8, r4, #9
 8006d7c:	46c1      	mov	r9, r8
 8006d7e:	442c      	add	r4, r5
 8006d80:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006d84:	4601      	mov	r1, r0
 8006d86:	3b30      	subs	r3, #48	; 0x30
 8006d88:	220a      	movs	r2, #10
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f7ff ffa1 	bl	8006cd2 <__multadd>
 8006d90:	45a1      	cmp	r9, r4
 8006d92:	d1f5      	bne.n	8006d80 <__s2b+0x38>
 8006d94:	eb08 0405 	add.w	r4, r8, r5
 8006d98:	3c08      	subs	r4, #8
 8006d9a:	1b2d      	subs	r5, r5, r4
 8006d9c:	1963      	adds	r3, r4, r5
 8006d9e:	42bb      	cmp	r3, r7
 8006da0:	db07      	blt.n	8006db2 <__s2b+0x6a>
 8006da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da6:	0052      	lsls	r2, r2, #1
 8006da8:	3101      	adds	r1, #1
 8006daa:	e7d9      	b.n	8006d60 <__s2b+0x18>
 8006dac:	340a      	adds	r4, #10
 8006dae:	2509      	movs	r5, #9
 8006db0:	e7f3      	b.n	8006d9a <__s2b+0x52>
 8006db2:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006db6:	4601      	mov	r1, r0
 8006db8:	3b30      	subs	r3, #48	; 0x30
 8006dba:	220a      	movs	r2, #10
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f7ff ff88 	bl	8006cd2 <__multadd>
 8006dc2:	e7eb      	b.n	8006d9c <__s2b+0x54>

08006dc4 <__hi0bits>:
 8006dc4:	0c02      	lsrs	r2, r0, #16
 8006dc6:	0412      	lsls	r2, r2, #16
 8006dc8:	4603      	mov	r3, r0
 8006dca:	b9b2      	cbnz	r2, 8006dfa <__hi0bits+0x36>
 8006dcc:	0403      	lsls	r3, r0, #16
 8006dce:	2010      	movs	r0, #16
 8006dd0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006dd4:	bf04      	itt	eq
 8006dd6:	021b      	lsleq	r3, r3, #8
 8006dd8:	3008      	addeq	r0, #8
 8006dda:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006dde:	bf04      	itt	eq
 8006de0:	011b      	lsleq	r3, r3, #4
 8006de2:	3004      	addeq	r0, #4
 8006de4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006de8:	bf04      	itt	eq
 8006dea:	009b      	lsleq	r3, r3, #2
 8006dec:	3002      	addeq	r0, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	db06      	blt.n	8006e00 <__hi0bits+0x3c>
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	d503      	bpl.n	8006dfe <__hi0bits+0x3a>
 8006df6:	3001      	adds	r0, #1
 8006df8:	4770      	bx	lr
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e7e8      	b.n	8006dd0 <__hi0bits+0xc>
 8006dfe:	2020      	movs	r0, #32
 8006e00:	4770      	bx	lr

08006e02 <__lo0bits>:
 8006e02:	6803      	ldr	r3, [r0, #0]
 8006e04:	f013 0207 	ands.w	r2, r3, #7
 8006e08:	4601      	mov	r1, r0
 8006e0a:	d00b      	beq.n	8006e24 <__lo0bits+0x22>
 8006e0c:	07da      	lsls	r2, r3, #31
 8006e0e:	d423      	bmi.n	8006e58 <__lo0bits+0x56>
 8006e10:	0798      	lsls	r0, r3, #30
 8006e12:	bf49      	itett	mi
 8006e14:	085b      	lsrmi	r3, r3, #1
 8006e16:	089b      	lsrpl	r3, r3, #2
 8006e18:	2001      	movmi	r0, #1
 8006e1a:	600b      	strmi	r3, [r1, #0]
 8006e1c:	bf5c      	itt	pl
 8006e1e:	600b      	strpl	r3, [r1, #0]
 8006e20:	2002      	movpl	r0, #2
 8006e22:	4770      	bx	lr
 8006e24:	b298      	uxth	r0, r3
 8006e26:	b9a8      	cbnz	r0, 8006e54 <__lo0bits+0x52>
 8006e28:	0c1b      	lsrs	r3, r3, #16
 8006e2a:	2010      	movs	r0, #16
 8006e2c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006e30:	bf04      	itt	eq
 8006e32:	0a1b      	lsreq	r3, r3, #8
 8006e34:	3008      	addeq	r0, #8
 8006e36:	071a      	lsls	r2, r3, #28
 8006e38:	bf04      	itt	eq
 8006e3a:	091b      	lsreq	r3, r3, #4
 8006e3c:	3004      	addeq	r0, #4
 8006e3e:	079a      	lsls	r2, r3, #30
 8006e40:	bf04      	itt	eq
 8006e42:	089b      	lsreq	r3, r3, #2
 8006e44:	3002      	addeq	r0, #2
 8006e46:	07da      	lsls	r2, r3, #31
 8006e48:	d402      	bmi.n	8006e50 <__lo0bits+0x4e>
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	d006      	beq.n	8006e5c <__lo0bits+0x5a>
 8006e4e:	3001      	adds	r0, #1
 8006e50:	600b      	str	r3, [r1, #0]
 8006e52:	4770      	bx	lr
 8006e54:	4610      	mov	r0, r2
 8006e56:	e7e9      	b.n	8006e2c <__lo0bits+0x2a>
 8006e58:	2000      	movs	r0, #0
 8006e5a:	4770      	bx	lr
 8006e5c:	2020      	movs	r0, #32
 8006e5e:	4770      	bx	lr

08006e60 <__i2b>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	460c      	mov	r4, r1
 8006e64:	2101      	movs	r1, #1
 8006e66:	f7ff fee9 	bl	8006c3c <_Balloc>
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	6144      	str	r4, [r0, #20]
 8006e6e:	6102      	str	r2, [r0, #16]
 8006e70:	bd10      	pop	{r4, pc}

08006e72 <__multiply>:
 8006e72:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e76:	4614      	mov	r4, r2
 8006e78:	690a      	ldr	r2, [r1, #16]
 8006e7a:	6923      	ldr	r3, [r4, #16]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	bfb8      	it	lt
 8006e80:	460b      	movlt	r3, r1
 8006e82:	4688      	mov	r8, r1
 8006e84:	bfbc      	itt	lt
 8006e86:	46a0      	movlt	r8, r4
 8006e88:	461c      	movlt	r4, r3
 8006e8a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e8e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e96:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e9a:	eb07 0609 	add.w	r6, r7, r9
 8006e9e:	42b3      	cmp	r3, r6
 8006ea0:	bfb8      	it	lt
 8006ea2:	3101      	addlt	r1, #1
 8006ea4:	f7ff feca 	bl	8006c3c <_Balloc>
 8006ea8:	f100 0514 	add.w	r5, r0, #20
 8006eac:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006eb0:	462b      	mov	r3, r5
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	4573      	cmp	r3, lr
 8006eb6:	d316      	bcc.n	8006ee6 <__multiply+0x74>
 8006eb8:	f104 0214 	add.w	r2, r4, #20
 8006ebc:	f108 0114 	add.w	r1, r8, #20
 8006ec0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006ec4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006ec8:	9300      	str	r3, [sp, #0]
 8006eca:	9b00      	ldr	r3, [sp, #0]
 8006ecc:	9201      	str	r2, [sp, #4]
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d80c      	bhi.n	8006eec <__multiply+0x7a>
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	dd03      	ble.n	8006ede <__multiply+0x6c>
 8006ed6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d05d      	beq.n	8006f9a <__multiply+0x128>
 8006ede:	6106      	str	r6, [r0, #16]
 8006ee0:	b003      	add	sp, #12
 8006ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee6:	f843 2b04 	str.w	r2, [r3], #4
 8006eea:	e7e3      	b.n	8006eb4 <__multiply+0x42>
 8006eec:	f8b2 b000 	ldrh.w	fp, [r2]
 8006ef0:	f1bb 0f00 	cmp.w	fp, #0
 8006ef4:	d023      	beq.n	8006f3e <__multiply+0xcc>
 8006ef6:	4689      	mov	r9, r1
 8006ef8:	46ac      	mov	ip, r5
 8006efa:	f04f 0800 	mov.w	r8, #0
 8006efe:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f02:	f8dc a000 	ldr.w	sl, [ip]
 8006f06:	b2a3      	uxth	r3, r4
 8006f08:	fa1f fa8a 	uxth.w	sl, sl
 8006f0c:	fb0b a303 	mla	r3, fp, r3, sl
 8006f10:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f14:	f8dc 4000 	ldr.w	r4, [ip]
 8006f18:	4443      	add	r3, r8
 8006f1a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f1e:	fb0b 840a 	mla	r4, fp, sl, r8
 8006f22:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006f26:	46e2      	mov	sl, ip
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f2e:	454f      	cmp	r7, r9
 8006f30:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006f34:	f84a 3b04 	str.w	r3, [sl], #4
 8006f38:	d82b      	bhi.n	8006f92 <__multiply+0x120>
 8006f3a:	f8cc 8004 	str.w	r8, [ip, #4]
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006f44:	3204      	adds	r2, #4
 8006f46:	f1ba 0f00 	cmp.w	sl, #0
 8006f4a:	d020      	beq.n	8006f8e <__multiply+0x11c>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	4689      	mov	r9, r1
 8006f50:	46a8      	mov	r8, r5
 8006f52:	f04f 0b00 	mov.w	fp, #0
 8006f56:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f5a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f5e:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f62:	445c      	add	r4, fp
 8006f64:	46c4      	mov	ip, r8
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f6c:	f84c 3b04 	str.w	r3, [ip], #4
 8006f70:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f74:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f78:	0c1b      	lsrs	r3, r3, #16
 8006f7a:	fb0a b303 	mla	r3, sl, r3, fp
 8006f7e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f82:	454f      	cmp	r7, r9
 8006f84:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f88:	d805      	bhi.n	8006f96 <__multiply+0x124>
 8006f8a:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f8e:	3504      	adds	r5, #4
 8006f90:	e79b      	b.n	8006eca <__multiply+0x58>
 8006f92:	46d4      	mov	ip, sl
 8006f94:	e7b3      	b.n	8006efe <__multiply+0x8c>
 8006f96:	46e0      	mov	r8, ip
 8006f98:	e7dd      	b.n	8006f56 <__multiply+0xe4>
 8006f9a:	3e01      	subs	r6, #1
 8006f9c:	e799      	b.n	8006ed2 <__multiply+0x60>
	...

08006fa0 <__pow5mult>:
 8006fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa4:	4615      	mov	r5, r2
 8006fa6:	f012 0203 	ands.w	r2, r2, #3
 8006faa:	4606      	mov	r6, r0
 8006fac:	460f      	mov	r7, r1
 8006fae:	d007      	beq.n	8006fc0 <__pow5mult+0x20>
 8006fb0:	3a01      	subs	r2, #1
 8006fb2:	4c21      	ldr	r4, [pc, #132]	; (8007038 <__pow5mult+0x98>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fba:	f7ff fe8a 	bl	8006cd2 <__multadd>
 8006fbe:	4607      	mov	r7, r0
 8006fc0:	10ad      	asrs	r5, r5, #2
 8006fc2:	d035      	beq.n	8007030 <__pow5mult+0x90>
 8006fc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006fc6:	b93c      	cbnz	r4, 8006fd8 <__pow5mult+0x38>
 8006fc8:	2010      	movs	r0, #16
 8006fca:	f7ff fe1d 	bl	8006c08 <malloc>
 8006fce:	6270      	str	r0, [r6, #36]	; 0x24
 8006fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fd4:	6004      	str	r4, [r0, #0]
 8006fd6:	60c4      	str	r4, [r0, #12]
 8006fd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fe0:	b94c      	cbnz	r4, 8006ff6 <__pow5mult+0x56>
 8006fe2:	f240 2171 	movw	r1, #625	; 0x271
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	f7ff ff3a 	bl	8006e60 <__i2b>
 8006fec:	2300      	movs	r3, #0
 8006fee:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ff2:	4604      	mov	r4, r0
 8006ff4:	6003      	str	r3, [r0, #0]
 8006ff6:	f04f 0800 	mov.w	r8, #0
 8006ffa:	07eb      	lsls	r3, r5, #31
 8006ffc:	d50a      	bpl.n	8007014 <__pow5mult+0x74>
 8006ffe:	4639      	mov	r1, r7
 8007000:	4622      	mov	r2, r4
 8007002:	4630      	mov	r0, r6
 8007004:	f7ff ff35 	bl	8006e72 <__multiply>
 8007008:	4639      	mov	r1, r7
 800700a:	4681      	mov	r9, r0
 800700c:	4630      	mov	r0, r6
 800700e:	f7ff fe49 	bl	8006ca4 <_Bfree>
 8007012:	464f      	mov	r7, r9
 8007014:	106d      	asrs	r5, r5, #1
 8007016:	d00b      	beq.n	8007030 <__pow5mult+0x90>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	b938      	cbnz	r0, 800702c <__pow5mult+0x8c>
 800701c:	4622      	mov	r2, r4
 800701e:	4621      	mov	r1, r4
 8007020:	4630      	mov	r0, r6
 8007022:	f7ff ff26 	bl	8006e72 <__multiply>
 8007026:	6020      	str	r0, [r4, #0]
 8007028:	f8c0 8000 	str.w	r8, [r0]
 800702c:	4604      	mov	r4, r0
 800702e:	e7e4      	b.n	8006ffa <__pow5mult+0x5a>
 8007030:	4638      	mov	r0, r7
 8007032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007036:	bf00      	nop
 8007038:	08008350 	.word	0x08008350

0800703c <__lshift>:
 800703c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007040:	460c      	mov	r4, r1
 8007042:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	6849      	ldr	r1, [r1, #4]
 800704a:	eb0a 0903 	add.w	r9, sl, r3
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	4607      	mov	r7, r0
 8007052:	4616      	mov	r6, r2
 8007054:	f109 0501 	add.w	r5, r9, #1
 8007058:	42ab      	cmp	r3, r5
 800705a:	db32      	blt.n	80070c2 <__lshift+0x86>
 800705c:	4638      	mov	r0, r7
 800705e:	f7ff fded 	bl	8006c3c <_Balloc>
 8007062:	2300      	movs	r3, #0
 8007064:	4680      	mov	r8, r0
 8007066:	f100 0114 	add.w	r1, r0, #20
 800706a:	461a      	mov	r2, r3
 800706c:	4553      	cmp	r3, sl
 800706e:	db2b      	blt.n	80070c8 <__lshift+0x8c>
 8007070:	6920      	ldr	r0, [r4, #16]
 8007072:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007076:	f104 0314 	add.w	r3, r4, #20
 800707a:	f016 021f 	ands.w	r2, r6, #31
 800707e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007082:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007086:	d025      	beq.n	80070d4 <__lshift+0x98>
 8007088:	f1c2 0e20 	rsb	lr, r2, #32
 800708c:	2000      	movs	r0, #0
 800708e:	681e      	ldr	r6, [r3, #0]
 8007090:	468a      	mov	sl, r1
 8007092:	4096      	lsls	r6, r2
 8007094:	4330      	orrs	r0, r6
 8007096:	f84a 0b04 	str.w	r0, [sl], #4
 800709a:	f853 0b04 	ldr.w	r0, [r3], #4
 800709e:	459c      	cmp	ip, r3
 80070a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80070a4:	d814      	bhi.n	80070d0 <__lshift+0x94>
 80070a6:	6048      	str	r0, [r1, #4]
 80070a8:	b108      	cbz	r0, 80070ae <__lshift+0x72>
 80070aa:	f109 0502 	add.w	r5, r9, #2
 80070ae:	3d01      	subs	r5, #1
 80070b0:	4638      	mov	r0, r7
 80070b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80070b6:	4621      	mov	r1, r4
 80070b8:	f7ff fdf4 	bl	8006ca4 <_Bfree>
 80070bc:	4640      	mov	r0, r8
 80070be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c2:	3101      	adds	r1, #1
 80070c4:	005b      	lsls	r3, r3, #1
 80070c6:	e7c7      	b.n	8007058 <__lshift+0x1c>
 80070c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80070cc:	3301      	adds	r3, #1
 80070ce:	e7cd      	b.n	800706c <__lshift+0x30>
 80070d0:	4651      	mov	r1, sl
 80070d2:	e7dc      	b.n	800708e <__lshift+0x52>
 80070d4:	3904      	subs	r1, #4
 80070d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070da:	f841 2f04 	str.w	r2, [r1, #4]!
 80070de:	459c      	cmp	ip, r3
 80070e0:	d8f9      	bhi.n	80070d6 <__lshift+0x9a>
 80070e2:	e7e4      	b.n	80070ae <__lshift+0x72>

080070e4 <__mcmp>:
 80070e4:	6903      	ldr	r3, [r0, #16]
 80070e6:	690a      	ldr	r2, [r1, #16]
 80070e8:	1a9b      	subs	r3, r3, r2
 80070ea:	b530      	push	{r4, r5, lr}
 80070ec:	d10c      	bne.n	8007108 <__mcmp+0x24>
 80070ee:	0092      	lsls	r2, r2, #2
 80070f0:	3014      	adds	r0, #20
 80070f2:	3114      	adds	r1, #20
 80070f4:	1884      	adds	r4, r0, r2
 80070f6:	4411      	add	r1, r2
 80070f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007100:	4295      	cmp	r5, r2
 8007102:	d003      	beq.n	800710c <__mcmp+0x28>
 8007104:	d305      	bcc.n	8007112 <__mcmp+0x2e>
 8007106:	2301      	movs	r3, #1
 8007108:	4618      	mov	r0, r3
 800710a:	bd30      	pop	{r4, r5, pc}
 800710c:	42a0      	cmp	r0, r4
 800710e:	d3f3      	bcc.n	80070f8 <__mcmp+0x14>
 8007110:	e7fa      	b.n	8007108 <__mcmp+0x24>
 8007112:	f04f 33ff 	mov.w	r3, #4294967295
 8007116:	e7f7      	b.n	8007108 <__mcmp+0x24>

08007118 <__mdiff>:
 8007118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711c:	460d      	mov	r5, r1
 800711e:	4607      	mov	r7, r0
 8007120:	4611      	mov	r1, r2
 8007122:	4628      	mov	r0, r5
 8007124:	4614      	mov	r4, r2
 8007126:	f7ff ffdd 	bl	80070e4 <__mcmp>
 800712a:	1e06      	subs	r6, r0, #0
 800712c:	d108      	bne.n	8007140 <__mdiff+0x28>
 800712e:	4631      	mov	r1, r6
 8007130:	4638      	mov	r0, r7
 8007132:	f7ff fd83 	bl	8006c3c <_Balloc>
 8007136:	2301      	movs	r3, #1
 8007138:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800713c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007140:	bfa4      	itt	ge
 8007142:	4623      	movge	r3, r4
 8007144:	462c      	movge	r4, r5
 8007146:	4638      	mov	r0, r7
 8007148:	6861      	ldr	r1, [r4, #4]
 800714a:	bfa6      	itte	ge
 800714c:	461d      	movge	r5, r3
 800714e:	2600      	movge	r6, #0
 8007150:	2601      	movlt	r6, #1
 8007152:	f7ff fd73 	bl	8006c3c <_Balloc>
 8007156:	692b      	ldr	r3, [r5, #16]
 8007158:	60c6      	str	r6, [r0, #12]
 800715a:	6926      	ldr	r6, [r4, #16]
 800715c:	f105 0914 	add.w	r9, r5, #20
 8007160:	f104 0214 	add.w	r2, r4, #20
 8007164:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007168:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800716c:	f100 0514 	add.w	r5, r0, #20
 8007170:	f04f 0e00 	mov.w	lr, #0
 8007174:	f852 ab04 	ldr.w	sl, [r2], #4
 8007178:	f859 4b04 	ldr.w	r4, [r9], #4
 800717c:	fa1e f18a 	uxtah	r1, lr, sl
 8007180:	b2a3      	uxth	r3, r4
 8007182:	1ac9      	subs	r1, r1, r3
 8007184:	0c23      	lsrs	r3, r4, #16
 8007186:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800718a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800718e:	b289      	uxth	r1, r1
 8007190:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007194:	45c8      	cmp	r8, r9
 8007196:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800719a:	4694      	mov	ip, r2
 800719c:	f845 3b04 	str.w	r3, [r5], #4
 80071a0:	d8e8      	bhi.n	8007174 <__mdiff+0x5c>
 80071a2:	45bc      	cmp	ip, r7
 80071a4:	d304      	bcc.n	80071b0 <__mdiff+0x98>
 80071a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80071aa:	b183      	cbz	r3, 80071ce <__mdiff+0xb6>
 80071ac:	6106      	str	r6, [r0, #16]
 80071ae:	e7c5      	b.n	800713c <__mdiff+0x24>
 80071b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80071b4:	fa1e f381 	uxtah	r3, lr, r1
 80071b8:	141a      	asrs	r2, r3, #16
 80071ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80071be:	b29b      	uxth	r3, r3
 80071c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80071c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80071c8:	f845 3b04 	str.w	r3, [r5], #4
 80071cc:	e7e9      	b.n	80071a2 <__mdiff+0x8a>
 80071ce:	3e01      	subs	r6, #1
 80071d0:	e7e9      	b.n	80071a6 <__mdiff+0x8e>
	...

080071d4 <__ulp>:
 80071d4:	4b12      	ldr	r3, [pc, #72]	; (8007220 <__ulp+0x4c>)
 80071d6:	ee10 2a90 	vmov	r2, s1
 80071da:	401a      	ands	r2, r3
 80071dc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	dd04      	ble.n	80071ee <__ulp+0x1a>
 80071e4:	2000      	movs	r0, #0
 80071e6:	4619      	mov	r1, r3
 80071e8:	ec41 0b10 	vmov	d0, r0, r1
 80071ec:	4770      	bx	lr
 80071ee:	425b      	negs	r3, r3
 80071f0:	151b      	asrs	r3, r3, #20
 80071f2:	2b13      	cmp	r3, #19
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f04f 0100 	mov.w	r1, #0
 80071fc:	dc04      	bgt.n	8007208 <__ulp+0x34>
 80071fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007202:	fa42 f103 	asr.w	r1, r2, r3
 8007206:	e7ef      	b.n	80071e8 <__ulp+0x14>
 8007208:	3b14      	subs	r3, #20
 800720a:	2b1e      	cmp	r3, #30
 800720c:	f04f 0201 	mov.w	r2, #1
 8007210:	bfda      	itte	le
 8007212:	f1c3 031f 	rsble	r3, r3, #31
 8007216:	fa02 f303 	lslle.w	r3, r2, r3
 800721a:	4613      	movgt	r3, r2
 800721c:	4618      	mov	r0, r3
 800721e:	e7e3      	b.n	80071e8 <__ulp+0x14>
 8007220:	7ff00000 	.word	0x7ff00000

08007224 <__b2d>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	6905      	ldr	r5, [r0, #16]
 8007228:	f100 0714 	add.w	r7, r0, #20
 800722c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007230:	1f2e      	subs	r6, r5, #4
 8007232:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff fdc4 	bl	8006dc4 <__hi0bits>
 800723c:	f1c0 0320 	rsb	r3, r0, #32
 8007240:	280a      	cmp	r0, #10
 8007242:	600b      	str	r3, [r1, #0]
 8007244:	f8df c074 	ldr.w	ip, [pc, #116]	; 80072bc <__b2d+0x98>
 8007248:	dc14      	bgt.n	8007274 <__b2d+0x50>
 800724a:	f1c0 0e0b 	rsb	lr, r0, #11
 800724e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007252:	42b7      	cmp	r7, r6
 8007254:	ea41 030c 	orr.w	r3, r1, ip
 8007258:	bf34      	ite	cc
 800725a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800725e:	2100      	movcs	r1, #0
 8007260:	3015      	adds	r0, #21
 8007262:	fa04 f000 	lsl.w	r0, r4, r0
 8007266:	fa21 f10e 	lsr.w	r1, r1, lr
 800726a:	ea40 0201 	orr.w	r2, r0, r1
 800726e:	ec43 2b10 	vmov	d0, r2, r3
 8007272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007274:	42b7      	cmp	r7, r6
 8007276:	bf3a      	itte	cc
 8007278:	f1a5 0608 	subcc.w	r6, r5, #8
 800727c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007280:	2100      	movcs	r1, #0
 8007282:	380b      	subs	r0, #11
 8007284:	d015      	beq.n	80072b2 <__b2d+0x8e>
 8007286:	4084      	lsls	r4, r0
 8007288:	f1c0 0520 	rsb	r5, r0, #32
 800728c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8007290:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8007294:	42be      	cmp	r6, r7
 8007296:	fa21 fc05 	lsr.w	ip, r1, r5
 800729a:	ea44 030c 	orr.w	r3, r4, ip
 800729e:	bf8c      	ite	hi
 80072a0:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80072a4:	2400      	movls	r4, #0
 80072a6:	fa01 f000 	lsl.w	r0, r1, r0
 80072aa:	40ec      	lsrs	r4, r5
 80072ac:	ea40 0204 	orr.w	r2, r0, r4
 80072b0:	e7dd      	b.n	800726e <__b2d+0x4a>
 80072b2:	ea44 030c 	orr.w	r3, r4, ip
 80072b6:	460a      	mov	r2, r1
 80072b8:	e7d9      	b.n	800726e <__b2d+0x4a>
 80072ba:	bf00      	nop
 80072bc:	3ff00000 	.word	0x3ff00000

080072c0 <__d2b>:
 80072c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	460e      	mov	r6, r1
 80072c6:	2101      	movs	r1, #1
 80072c8:	ec59 8b10 	vmov	r8, r9, d0
 80072cc:	4615      	mov	r5, r2
 80072ce:	f7ff fcb5 	bl	8006c3c <_Balloc>
 80072d2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80072d6:	4607      	mov	r7, r0
 80072d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072dc:	bb34      	cbnz	r4, 800732c <__d2b+0x6c>
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	f1b8 0300 	subs.w	r3, r8, #0
 80072e4:	d027      	beq.n	8007336 <__d2b+0x76>
 80072e6:	a802      	add	r0, sp, #8
 80072e8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80072ec:	f7ff fd89 	bl	8006e02 <__lo0bits>
 80072f0:	9900      	ldr	r1, [sp, #0]
 80072f2:	b1f0      	cbz	r0, 8007332 <__d2b+0x72>
 80072f4:	9a01      	ldr	r2, [sp, #4]
 80072f6:	f1c0 0320 	rsb	r3, r0, #32
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	430b      	orrs	r3, r1
 8007300:	40c2      	lsrs	r2, r0
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	9201      	str	r2, [sp, #4]
 8007306:	9b01      	ldr	r3, [sp, #4]
 8007308:	61bb      	str	r3, [r7, #24]
 800730a:	2b00      	cmp	r3, #0
 800730c:	bf14      	ite	ne
 800730e:	2102      	movne	r1, #2
 8007310:	2101      	moveq	r1, #1
 8007312:	6139      	str	r1, [r7, #16]
 8007314:	b1c4      	cbz	r4, 8007348 <__d2b+0x88>
 8007316:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800731a:	4404      	add	r4, r0
 800731c:	6034      	str	r4, [r6, #0]
 800731e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007322:	6028      	str	r0, [r5, #0]
 8007324:	4638      	mov	r0, r7
 8007326:	b003      	add	sp, #12
 8007328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800732c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007330:	e7d5      	b.n	80072de <__d2b+0x1e>
 8007332:	6179      	str	r1, [r7, #20]
 8007334:	e7e7      	b.n	8007306 <__d2b+0x46>
 8007336:	a801      	add	r0, sp, #4
 8007338:	f7ff fd63 	bl	8006e02 <__lo0bits>
 800733c:	9b01      	ldr	r3, [sp, #4]
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	2101      	movs	r1, #1
 8007342:	6139      	str	r1, [r7, #16]
 8007344:	3020      	adds	r0, #32
 8007346:	e7e5      	b.n	8007314 <__d2b+0x54>
 8007348:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800734c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007350:	6030      	str	r0, [r6, #0]
 8007352:	6918      	ldr	r0, [r3, #16]
 8007354:	f7ff fd36 	bl	8006dc4 <__hi0bits>
 8007358:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800735c:	e7e1      	b.n	8007322 <__d2b+0x62>

0800735e <__ratio>:
 800735e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007362:	4688      	mov	r8, r1
 8007364:	4669      	mov	r1, sp
 8007366:	4681      	mov	r9, r0
 8007368:	f7ff ff5c 	bl	8007224 <__b2d>
 800736c:	a901      	add	r1, sp, #4
 800736e:	4640      	mov	r0, r8
 8007370:	ec57 6b10 	vmov	r6, r7, d0
 8007374:	f7ff ff56 	bl	8007224 <__b2d>
 8007378:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800737c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007380:	eba3 0c02 	sub.w	ip, r3, r2
 8007384:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007388:	1a9b      	subs	r3, r3, r2
 800738a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800738e:	ec5b ab10 	vmov	sl, fp, d0
 8007392:	2b00      	cmp	r3, #0
 8007394:	bfce      	itee	gt
 8007396:	463a      	movgt	r2, r7
 8007398:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800739c:	465a      	movle	r2, fp
 800739e:	4659      	mov	r1, fp
 80073a0:	463d      	mov	r5, r7
 80073a2:	bfd4      	ite	le
 80073a4:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80073a8:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80073ac:	4630      	mov	r0, r6
 80073ae:	ee10 2a10 	vmov	r2, s0
 80073b2:	460b      	mov	r3, r1
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f9 fa51 	bl	800085c <__aeabi_ddiv>
 80073ba:	ec41 0b10 	vmov	d0, r0, r1
 80073be:	b003      	add	sp, #12
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073c4 <__copybits>:
 80073c4:	3901      	subs	r1, #1
 80073c6:	b510      	push	{r4, lr}
 80073c8:	1149      	asrs	r1, r1, #5
 80073ca:	6914      	ldr	r4, [r2, #16]
 80073cc:	3101      	adds	r1, #1
 80073ce:	f102 0314 	add.w	r3, r2, #20
 80073d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073da:	42a3      	cmp	r3, r4
 80073dc:	4602      	mov	r2, r0
 80073de:	d303      	bcc.n	80073e8 <__copybits+0x24>
 80073e0:	2300      	movs	r3, #0
 80073e2:	428a      	cmp	r2, r1
 80073e4:	d305      	bcc.n	80073f2 <__copybits+0x2e>
 80073e6:	bd10      	pop	{r4, pc}
 80073e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ec:	f840 2b04 	str.w	r2, [r0], #4
 80073f0:	e7f3      	b.n	80073da <__copybits+0x16>
 80073f2:	f842 3b04 	str.w	r3, [r2], #4
 80073f6:	e7f4      	b.n	80073e2 <__copybits+0x1e>

080073f8 <__any_on>:
 80073f8:	f100 0214 	add.w	r2, r0, #20
 80073fc:	6900      	ldr	r0, [r0, #16]
 80073fe:	114b      	asrs	r3, r1, #5
 8007400:	4298      	cmp	r0, r3
 8007402:	b510      	push	{r4, lr}
 8007404:	db11      	blt.n	800742a <__any_on+0x32>
 8007406:	dd0a      	ble.n	800741e <__any_on+0x26>
 8007408:	f011 011f 	ands.w	r1, r1, #31
 800740c:	d007      	beq.n	800741e <__any_on+0x26>
 800740e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007412:	fa24 f001 	lsr.w	r0, r4, r1
 8007416:	fa00 f101 	lsl.w	r1, r0, r1
 800741a:	428c      	cmp	r4, r1
 800741c:	d10b      	bne.n	8007436 <__any_on+0x3e>
 800741e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007422:	4293      	cmp	r3, r2
 8007424:	d803      	bhi.n	800742e <__any_on+0x36>
 8007426:	2000      	movs	r0, #0
 8007428:	bd10      	pop	{r4, pc}
 800742a:	4603      	mov	r3, r0
 800742c:	e7f7      	b.n	800741e <__any_on+0x26>
 800742e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007432:	2900      	cmp	r1, #0
 8007434:	d0f5      	beq.n	8007422 <__any_on+0x2a>
 8007436:	2001      	movs	r0, #1
 8007438:	e7f6      	b.n	8007428 <__any_on+0x30>

0800743a <_calloc_r>:
 800743a:	b538      	push	{r3, r4, r5, lr}
 800743c:	fb02 f401 	mul.w	r4, r2, r1
 8007440:	4621      	mov	r1, r4
 8007442:	f000 f857 	bl	80074f4 <_malloc_r>
 8007446:	4605      	mov	r5, r0
 8007448:	b118      	cbz	r0, 8007452 <_calloc_r+0x18>
 800744a:	4622      	mov	r2, r4
 800744c:	2100      	movs	r1, #0
 800744e:	f7fc fc1c 	bl	8003c8a <memset>
 8007452:	4628      	mov	r0, r5
 8007454:	bd38      	pop	{r3, r4, r5, pc}
	...

08007458 <_free_r>:
 8007458:	b538      	push	{r3, r4, r5, lr}
 800745a:	4605      	mov	r5, r0
 800745c:	2900      	cmp	r1, #0
 800745e:	d045      	beq.n	80074ec <_free_r+0x94>
 8007460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007464:	1f0c      	subs	r4, r1, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	bfb8      	it	lt
 800746a:	18e4      	addlt	r4, r4, r3
 800746c:	f000 fdc3 	bl	8007ff6 <__malloc_lock>
 8007470:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <_free_r+0x98>)
 8007472:	6813      	ldr	r3, [r2, #0]
 8007474:	4610      	mov	r0, r2
 8007476:	b933      	cbnz	r3, 8007486 <_free_r+0x2e>
 8007478:	6063      	str	r3, [r4, #4]
 800747a:	6014      	str	r4, [r2, #0]
 800747c:	4628      	mov	r0, r5
 800747e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007482:	f000 bdb9 	b.w	8007ff8 <__malloc_unlock>
 8007486:	42a3      	cmp	r3, r4
 8007488:	d90c      	bls.n	80074a4 <_free_r+0x4c>
 800748a:	6821      	ldr	r1, [r4, #0]
 800748c:	1862      	adds	r2, r4, r1
 800748e:	4293      	cmp	r3, r2
 8007490:	bf04      	itt	eq
 8007492:	681a      	ldreq	r2, [r3, #0]
 8007494:	685b      	ldreq	r3, [r3, #4]
 8007496:	6063      	str	r3, [r4, #4]
 8007498:	bf04      	itt	eq
 800749a:	1852      	addeq	r2, r2, r1
 800749c:	6022      	streq	r2, [r4, #0]
 800749e:	6004      	str	r4, [r0, #0]
 80074a0:	e7ec      	b.n	800747c <_free_r+0x24>
 80074a2:	4613      	mov	r3, r2
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	b10a      	cbz	r2, 80074ac <_free_r+0x54>
 80074a8:	42a2      	cmp	r2, r4
 80074aa:	d9fa      	bls.n	80074a2 <_free_r+0x4a>
 80074ac:	6819      	ldr	r1, [r3, #0]
 80074ae:	1858      	adds	r0, r3, r1
 80074b0:	42a0      	cmp	r0, r4
 80074b2:	d10b      	bne.n	80074cc <_free_r+0x74>
 80074b4:	6820      	ldr	r0, [r4, #0]
 80074b6:	4401      	add	r1, r0
 80074b8:	1858      	adds	r0, r3, r1
 80074ba:	4282      	cmp	r2, r0
 80074bc:	6019      	str	r1, [r3, #0]
 80074be:	d1dd      	bne.n	800747c <_free_r+0x24>
 80074c0:	6810      	ldr	r0, [r2, #0]
 80074c2:	6852      	ldr	r2, [r2, #4]
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	4401      	add	r1, r0
 80074c8:	6019      	str	r1, [r3, #0]
 80074ca:	e7d7      	b.n	800747c <_free_r+0x24>
 80074cc:	d902      	bls.n	80074d4 <_free_r+0x7c>
 80074ce:	230c      	movs	r3, #12
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	e7d3      	b.n	800747c <_free_r+0x24>
 80074d4:	6820      	ldr	r0, [r4, #0]
 80074d6:	1821      	adds	r1, r4, r0
 80074d8:	428a      	cmp	r2, r1
 80074da:	bf04      	itt	eq
 80074dc:	6811      	ldreq	r1, [r2, #0]
 80074de:	6852      	ldreq	r2, [r2, #4]
 80074e0:	6062      	str	r2, [r4, #4]
 80074e2:	bf04      	itt	eq
 80074e4:	1809      	addeq	r1, r1, r0
 80074e6:	6021      	streq	r1, [r4, #0]
 80074e8:	605c      	str	r4, [r3, #4]
 80074ea:	e7c7      	b.n	800747c <_free_r+0x24>
 80074ec:	bd38      	pop	{r3, r4, r5, pc}
 80074ee:	bf00      	nop
 80074f0:	20000244 	.word	0x20000244

080074f4 <_malloc_r>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	1ccd      	adds	r5, r1, #3
 80074f8:	f025 0503 	bic.w	r5, r5, #3
 80074fc:	3508      	adds	r5, #8
 80074fe:	2d0c      	cmp	r5, #12
 8007500:	bf38      	it	cc
 8007502:	250c      	movcc	r5, #12
 8007504:	2d00      	cmp	r5, #0
 8007506:	4606      	mov	r6, r0
 8007508:	db01      	blt.n	800750e <_malloc_r+0x1a>
 800750a:	42a9      	cmp	r1, r5
 800750c:	d903      	bls.n	8007516 <_malloc_r+0x22>
 800750e:	230c      	movs	r3, #12
 8007510:	6033      	str	r3, [r6, #0]
 8007512:	2000      	movs	r0, #0
 8007514:	bd70      	pop	{r4, r5, r6, pc}
 8007516:	f000 fd6e 	bl	8007ff6 <__malloc_lock>
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <_malloc_r+0xac>)
 800751c:	6814      	ldr	r4, [r2, #0]
 800751e:	4621      	mov	r1, r4
 8007520:	b991      	cbnz	r1, 8007548 <_malloc_r+0x54>
 8007522:	4c20      	ldr	r4, [pc, #128]	; (80075a4 <_malloc_r+0xb0>)
 8007524:	6823      	ldr	r3, [r4, #0]
 8007526:	b91b      	cbnz	r3, 8007530 <_malloc_r+0x3c>
 8007528:	4630      	mov	r0, r6
 800752a:	f000 facf 	bl	8007acc <_sbrk_r>
 800752e:	6020      	str	r0, [r4, #0]
 8007530:	4629      	mov	r1, r5
 8007532:	4630      	mov	r0, r6
 8007534:	f000 faca 	bl	8007acc <_sbrk_r>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d124      	bne.n	8007586 <_malloc_r+0x92>
 800753c:	230c      	movs	r3, #12
 800753e:	6033      	str	r3, [r6, #0]
 8007540:	4630      	mov	r0, r6
 8007542:	f000 fd59 	bl	8007ff8 <__malloc_unlock>
 8007546:	e7e4      	b.n	8007512 <_malloc_r+0x1e>
 8007548:	680b      	ldr	r3, [r1, #0]
 800754a:	1b5b      	subs	r3, r3, r5
 800754c:	d418      	bmi.n	8007580 <_malloc_r+0x8c>
 800754e:	2b0b      	cmp	r3, #11
 8007550:	d90f      	bls.n	8007572 <_malloc_r+0x7e>
 8007552:	600b      	str	r3, [r1, #0]
 8007554:	50cd      	str	r5, [r1, r3]
 8007556:	18cc      	adds	r4, r1, r3
 8007558:	4630      	mov	r0, r6
 800755a:	f000 fd4d 	bl	8007ff8 <__malloc_unlock>
 800755e:	f104 000b 	add.w	r0, r4, #11
 8007562:	1d23      	adds	r3, r4, #4
 8007564:	f020 0007 	bic.w	r0, r0, #7
 8007568:	1ac3      	subs	r3, r0, r3
 800756a:	d0d3      	beq.n	8007514 <_malloc_r+0x20>
 800756c:	425a      	negs	r2, r3
 800756e:	50e2      	str	r2, [r4, r3]
 8007570:	e7d0      	b.n	8007514 <_malloc_r+0x20>
 8007572:	428c      	cmp	r4, r1
 8007574:	684b      	ldr	r3, [r1, #4]
 8007576:	bf16      	itet	ne
 8007578:	6063      	strne	r3, [r4, #4]
 800757a:	6013      	streq	r3, [r2, #0]
 800757c:	460c      	movne	r4, r1
 800757e:	e7eb      	b.n	8007558 <_malloc_r+0x64>
 8007580:	460c      	mov	r4, r1
 8007582:	6849      	ldr	r1, [r1, #4]
 8007584:	e7cc      	b.n	8007520 <_malloc_r+0x2c>
 8007586:	1cc4      	adds	r4, r0, #3
 8007588:	f024 0403 	bic.w	r4, r4, #3
 800758c:	42a0      	cmp	r0, r4
 800758e:	d005      	beq.n	800759c <_malloc_r+0xa8>
 8007590:	1a21      	subs	r1, r4, r0
 8007592:	4630      	mov	r0, r6
 8007594:	f000 fa9a 	bl	8007acc <_sbrk_r>
 8007598:	3001      	adds	r0, #1
 800759a:	d0cf      	beq.n	800753c <_malloc_r+0x48>
 800759c:	6025      	str	r5, [r4, #0]
 800759e:	e7db      	b.n	8007558 <_malloc_r+0x64>
 80075a0:	20000244 	.word	0x20000244
 80075a4:	20000248 	.word	0x20000248

080075a8 <__ssputs_r>:
 80075a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075ac:	688e      	ldr	r6, [r1, #8]
 80075ae:	429e      	cmp	r6, r3
 80075b0:	4682      	mov	sl, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	4690      	mov	r8, r2
 80075b6:	4699      	mov	r9, r3
 80075b8:	d837      	bhi.n	800762a <__ssputs_r+0x82>
 80075ba:	898a      	ldrh	r2, [r1, #12]
 80075bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80075c0:	d031      	beq.n	8007626 <__ssputs_r+0x7e>
 80075c2:	6825      	ldr	r5, [r4, #0]
 80075c4:	6909      	ldr	r1, [r1, #16]
 80075c6:	1a6f      	subs	r7, r5, r1
 80075c8:	6965      	ldr	r5, [r4, #20]
 80075ca:	2302      	movs	r3, #2
 80075cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80075d4:	f109 0301 	add.w	r3, r9, #1
 80075d8:	443b      	add	r3, r7
 80075da:	429d      	cmp	r5, r3
 80075dc:	bf38      	it	cc
 80075de:	461d      	movcc	r5, r3
 80075e0:	0553      	lsls	r3, r2, #21
 80075e2:	d530      	bpl.n	8007646 <__ssputs_r+0x9e>
 80075e4:	4629      	mov	r1, r5
 80075e6:	f7ff ff85 	bl	80074f4 <_malloc_r>
 80075ea:	4606      	mov	r6, r0
 80075ec:	b950      	cbnz	r0, 8007604 <__ssputs_r+0x5c>
 80075ee:	230c      	movs	r3, #12
 80075f0:	f8ca 3000 	str.w	r3, [sl]
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007604:	463a      	mov	r2, r7
 8007606:	6921      	ldr	r1, [r4, #16]
 8007608:	f7fc fb34 	bl	8003c74 <memcpy>
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007616:	81a3      	strh	r3, [r4, #12]
 8007618:	6126      	str	r6, [r4, #16]
 800761a:	6165      	str	r5, [r4, #20]
 800761c:	443e      	add	r6, r7
 800761e:	1bed      	subs	r5, r5, r7
 8007620:	6026      	str	r6, [r4, #0]
 8007622:	60a5      	str	r5, [r4, #8]
 8007624:	464e      	mov	r6, r9
 8007626:	454e      	cmp	r6, r9
 8007628:	d900      	bls.n	800762c <__ssputs_r+0x84>
 800762a:	464e      	mov	r6, r9
 800762c:	4632      	mov	r2, r6
 800762e:	4641      	mov	r1, r8
 8007630:	6820      	ldr	r0, [r4, #0]
 8007632:	f000 fcc7 	bl	8007fc4 <memmove>
 8007636:	68a3      	ldr	r3, [r4, #8]
 8007638:	1b9b      	subs	r3, r3, r6
 800763a:	60a3      	str	r3, [r4, #8]
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	441e      	add	r6, r3
 8007640:	6026      	str	r6, [r4, #0]
 8007642:	2000      	movs	r0, #0
 8007644:	e7dc      	b.n	8007600 <__ssputs_r+0x58>
 8007646:	462a      	mov	r2, r5
 8007648:	f000 fcd7 	bl	8007ffa <_realloc_r>
 800764c:	4606      	mov	r6, r0
 800764e:	2800      	cmp	r0, #0
 8007650:	d1e2      	bne.n	8007618 <__ssputs_r+0x70>
 8007652:	6921      	ldr	r1, [r4, #16]
 8007654:	4650      	mov	r0, sl
 8007656:	f7ff feff 	bl	8007458 <_free_r>
 800765a:	e7c8      	b.n	80075ee <__ssputs_r+0x46>

0800765c <_svfiprintf_r>:
 800765c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007660:	461d      	mov	r5, r3
 8007662:	898b      	ldrh	r3, [r1, #12]
 8007664:	061f      	lsls	r7, r3, #24
 8007666:	b09d      	sub	sp, #116	; 0x74
 8007668:	4680      	mov	r8, r0
 800766a:	460c      	mov	r4, r1
 800766c:	4616      	mov	r6, r2
 800766e:	d50f      	bpl.n	8007690 <_svfiprintf_r+0x34>
 8007670:	690b      	ldr	r3, [r1, #16]
 8007672:	b96b      	cbnz	r3, 8007690 <_svfiprintf_r+0x34>
 8007674:	2140      	movs	r1, #64	; 0x40
 8007676:	f7ff ff3d 	bl	80074f4 <_malloc_r>
 800767a:	6020      	str	r0, [r4, #0]
 800767c:	6120      	str	r0, [r4, #16]
 800767e:	b928      	cbnz	r0, 800768c <_svfiprintf_r+0x30>
 8007680:	230c      	movs	r3, #12
 8007682:	f8c8 3000 	str.w	r3, [r8]
 8007686:	f04f 30ff 	mov.w	r0, #4294967295
 800768a:	e0c8      	b.n	800781e <_svfiprintf_r+0x1c2>
 800768c:	2340      	movs	r3, #64	; 0x40
 800768e:	6163      	str	r3, [r4, #20]
 8007690:	2300      	movs	r3, #0
 8007692:	9309      	str	r3, [sp, #36]	; 0x24
 8007694:	2320      	movs	r3, #32
 8007696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800769a:	2330      	movs	r3, #48	; 0x30
 800769c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80076a0:	9503      	str	r5, [sp, #12]
 80076a2:	f04f 0b01 	mov.w	fp, #1
 80076a6:	4637      	mov	r7, r6
 80076a8:	463d      	mov	r5, r7
 80076aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80076ae:	b10b      	cbz	r3, 80076b4 <_svfiprintf_r+0x58>
 80076b0:	2b25      	cmp	r3, #37	; 0x25
 80076b2:	d13e      	bne.n	8007732 <_svfiprintf_r+0xd6>
 80076b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80076b8:	d00b      	beq.n	80076d2 <_svfiprintf_r+0x76>
 80076ba:	4653      	mov	r3, sl
 80076bc:	4632      	mov	r2, r6
 80076be:	4621      	mov	r1, r4
 80076c0:	4640      	mov	r0, r8
 80076c2:	f7ff ff71 	bl	80075a8 <__ssputs_r>
 80076c6:	3001      	adds	r0, #1
 80076c8:	f000 80a4 	beq.w	8007814 <_svfiprintf_r+0x1b8>
 80076cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076ce:	4453      	add	r3, sl
 80076d0:	9309      	str	r3, [sp, #36]	; 0x24
 80076d2:	783b      	ldrb	r3, [r7, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 809d 	beq.w	8007814 <_svfiprintf_r+0x1b8>
 80076da:	2300      	movs	r3, #0
 80076dc:	f04f 32ff 	mov.w	r2, #4294967295
 80076e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076ec:	931a      	str	r3, [sp, #104]	; 0x68
 80076ee:	462f      	mov	r7, r5
 80076f0:	2205      	movs	r2, #5
 80076f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80076f6:	4850      	ldr	r0, [pc, #320]	; (8007838 <_svfiprintf_r+0x1dc>)
 80076f8:	f7f8 fd7a 	bl	80001f0 <memchr>
 80076fc:	9b04      	ldr	r3, [sp, #16]
 80076fe:	b9d0      	cbnz	r0, 8007736 <_svfiprintf_r+0xda>
 8007700:	06d9      	lsls	r1, r3, #27
 8007702:	bf44      	itt	mi
 8007704:	2220      	movmi	r2, #32
 8007706:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800770a:	071a      	lsls	r2, r3, #28
 800770c:	bf44      	itt	mi
 800770e:	222b      	movmi	r2, #43	; 0x2b
 8007710:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007714:	782a      	ldrb	r2, [r5, #0]
 8007716:	2a2a      	cmp	r2, #42	; 0x2a
 8007718:	d015      	beq.n	8007746 <_svfiprintf_r+0xea>
 800771a:	9a07      	ldr	r2, [sp, #28]
 800771c:	462f      	mov	r7, r5
 800771e:	2000      	movs	r0, #0
 8007720:	250a      	movs	r5, #10
 8007722:	4639      	mov	r1, r7
 8007724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007728:	3b30      	subs	r3, #48	; 0x30
 800772a:	2b09      	cmp	r3, #9
 800772c:	d94d      	bls.n	80077ca <_svfiprintf_r+0x16e>
 800772e:	b1b8      	cbz	r0, 8007760 <_svfiprintf_r+0x104>
 8007730:	e00f      	b.n	8007752 <_svfiprintf_r+0xf6>
 8007732:	462f      	mov	r7, r5
 8007734:	e7b8      	b.n	80076a8 <_svfiprintf_r+0x4c>
 8007736:	4a40      	ldr	r2, [pc, #256]	; (8007838 <_svfiprintf_r+0x1dc>)
 8007738:	1a80      	subs	r0, r0, r2
 800773a:	fa0b f000 	lsl.w	r0, fp, r0
 800773e:	4318      	orrs	r0, r3
 8007740:	9004      	str	r0, [sp, #16]
 8007742:	463d      	mov	r5, r7
 8007744:	e7d3      	b.n	80076ee <_svfiprintf_r+0x92>
 8007746:	9a03      	ldr	r2, [sp, #12]
 8007748:	1d11      	adds	r1, r2, #4
 800774a:	6812      	ldr	r2, [r2, #0]
 800774c:	9103      	str	r1, [sp, #12]
 800774e:	2a00      	cmp	r2, #0
 8007750:	db01      	blt.n	8007756 <_svfiprintf_r+0xfa>
 8007752:	9207      	str	r2, [sp, #28]
 8007754:	e004      	b.n	8007760 <_svfiprintf_r+0x104>
 8007756:	4252      	negs	r2, r2
 8007758:	f043 0302 	orr.w	r3, r3, #2
 800775c:	9207      	str	r2, [sp, #28]
 800775e:	9304      	str	r3, [sp, #16]
 8007760:	783b      	ldrb	r3, [r7, #0]
 8007762:	2b2e      	cmp	r3, #46	; 0x2e
 8007764:	d10c      	bne.n	8007780 <_svfiprintf_r+0x124>
 8007766:	787b      	ldrb	r3, [r7, #1]
 8007768:	2b2a      	cmp	r3, #42	; 0x2a
 800776a:	d133      	bne.n	80077d4 <_svfiprintf_r+0x178>
 800776c:	9b03      	ldr	r3, [sp, #12]
 800776e:	1d1a      	adds	r2, r3, #4
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	9203      	str	r2, [sp, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	bfb8      	it	lt
 8007778:	f04f 33ff 	movlt.w	r3, #4294967295
 800777c:	3702      	adds	r7, #2
 800777e:	9305      	str	r3, [sp, #20]
 8007780:	4d2e      	ldr	r5, [pc, #184]	; (800783c <_svfiprintf_r+0x1e0>)
 8007782:	7839      	ldrb	r1, [r7, #0]
 8007784:	2203      	movs	r2, #3
 8007786:	4628      	mov	r0, r5
 8007788:	f7f8 fd32 	bl	80001f0 <memchr>
 800778c:	b138      	cbz	r0, 800779e <_svfiprintf_r+0x142>
 800778e:	2340      	movs	r3, #64	; 0x40
 8007790:	1b40      	subs	r0, r0, r5
 8007792:	fa03 f000 	lsl.w	r0, r3, r0
 8007796:	9b04      	ldr	r3, [sp, #16]
 8007798:	4303      	orrs	r3, r0
 800779a:	3701      	adds	r7, #1
 800779c:	9304      	str	r3, [sp, #16]
 800779e:	7839      	ldrb	r1, [r7, #0]
 80077a0:	4827      	ldr	r0, [pc, #156]	; (8007840 <_svfiprintf_r+0x1e4>)
 80077a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80077a6:	2206      	movs	r2, #6
 80077a8:	1c7e      	adds	r6, r7, #1
 80077aa:	f7f8 fd21 	bl	80001f0 <memchr>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d038      	beq.n	8007824 <_svfiprintf_r+0x1c8>
 80077b2:	4b24      	ldr	r3, [pc, #144]	; (8007844 <_svfiprintf_r+0x1e8>)
 80077b4:	bb13      	cbnz	r3, 80077fc <_svfiprintf_r+0x1a0>
 80077b6:	9b03      	ldr	r3, [sp, #12]
 80077b8:	3307      	adds	r3, #7
 80077ba:	f023 0307 	bic.w	r3, r3, #7
 80077be:	3308      	adds	r3, #8
 80077c0:	9303      	str	r3, [sp, #12]
 80077c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c4:	444b      	add	r3, r9
 80077c6:	9309      	str	r3, [sp, #36]	; 0x24
 80077c8:	e76d      	b.n	80076a6 <_svfiprintf_r+0x4a>
 80077ca:	fb05 3202 	mla	r2, r5, r2, r3
 80077ce:	2001      	movs	r0, #1
 80077d0:	460f      	mov	r7, r1
 80077d2:	e7a6      	b.n	8007722 <_svfiprintf_r+0xc6>
 80077d4:	2300      	movs	r3, #0
 80077d6:	3701      	adds	r7, #1
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	4619      	mov	r1, r3
 80077dc:	250a      	movs	r5, #10
 80077de:	4638      	mov	r0, r7
 80077e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077e4:	3a30      	subs	r2, #48	; 0x30
 80077e6:	2a09      	cmp	r2, #9
 80077e8:	d903      	bls.n	80077f2 <_svfiprintf_r+0x196>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d0c8      	beq.n	8007780 <_svfiprintf_r+0x124>
 80077ee:	9105      	str	r1, [sp, #20]
 80077f0:	e7c6      	b.n	8007780 <_svfiprintf_r+0x124>
 80077f2:	fb05 2101 	mla	r1, r5, r1, r2
 80077f6:	2301      	movs	r3, #1
 80077f8:	4607      	mov	r7, r0
 80077fa:	e7f0      	b.n	80077de <_svfiprintf_r+0x182>
 80077fc:	ab03      	add	r3, sp, #12
 80077fe:	9300      	str	r3, [sp, #0]
 8007800:	4622      	mov	r2, r4
 8007802:	4b11      	ldr	r3, [pc, #68]	; (8007848 <_svfiprintf_r+0x1ec>)
 8007804:	a904      	add	r1, sp, #16
 8007806:	4640      	mov	r0, r8
 8007808:	f7fc fadc 	bl	8003dc4 <_printf_float>
 800780c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007810:	4681      	mov	r9, r0
 8007812:	d1d6      	bne.n	80077c2 <_svfiprintf_r+0x166>
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	065b      	lsls	r3, r3, #25
 8007818:	f53f af35 	bmi.w	8007686 <_svfiprintf_r+0x2a>
 800781c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800781e:	b01d      	add	sp, #116	; 0x74
 8007820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007824:	ab03      	add	r3, sp, #12
 8007826:	9300      	str	r3, [sp, #0]
 8007828:	4622      	mov	r2, r4
 800782a:	4b07      	ldr	r3, [pc, #28]	; (8007848 <_svfiprintf_r+0x1ec>)
 800782c:	a904      	add	r1, sp, #16
 800782e:	4640      	mov	r0, r8
 8007830:	f7fc fd7e 	bl	8004330 <_printf_i>
 8007834:	e7ea      	b.n	800780c <_svfiprintf_r+0x1b0>
 8007836:	bf00      	nop
 8007838:	0800835c 	.word	0x0800835c
 800783c:	08008362 	.word	0x08008362
 8007840:	08008366 	.word	0x08008366
 8007844:	08003dc5 	.word	0x08003dc5
 8007848:	080075a9 	.word	0x080075a9

0800784c <__sfputc_r>:
 800784c:	6893      	ldr	r3, [r2, #8]
 800784e:	3b01      	subs	r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	b410      	push	{r4}
 8007854:	6093      	str	r3, [r2, #8]
 8007856:	da08      	bge.n	800786a <__sfputc_r+0x1e>
 8007858:	6994      	ldr	r4, [r2, #24]
 800785a:	42a3      	cmp	r3, r4
 800785c:	db01      	blt.n	8007862 <__sfputc_r+0x16>
 800785e:	290a      	cmp	r1, #10
 8007860:	d103      	bne.n	800786a <__sfputc_r+0x1e>
 8007862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007866:	f000 b997 	b.w	8007b98 <__swbuf_r>
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	1c58      	adds	r0, r3, #1
 800786e:	6010      	str	r0, [r2, #0]
 8007870:	7019      	strb	r1, [r3, #0]
 8007872:	4608      	mov	r0, r1
 8007874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007878:	4770      	bx	lr

0800787a <__sfputs_r>:
 800787a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787c:	4606      	mov	r6, r0
 800787e:	460f      	mov	r7, r1
 8007880:	4614      	mov	r4, r2
 8007882:	18d5      	adds	r5, r2, r3
 8007884:	42ac      	cmp	r4, r5
 8007886:	d101      	bne.n	800788c <__sfputs_r+0x12>
 8007888:	2000      	movs	r0, #0
 800788a:	e007      	b.n	800789c <__sfputs_r+0x22>
 800788c:	463a      	mov	r2, r7
 800788e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007892:	4630      	mov	r0, r6
 8007894:	f7ff ffda 	bl	800784c <__sfputc_r>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d1f3      	bne.n	8007884 <__sfputs_r+0xa>
 800789c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078a0 <_vfiprintf_r>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	460c      	mov	r4, r1
 80078a6:	b09d      	sub	sp, #116	; 0x74
 80078a8:	4617      	mov	r7, r2
 80078aa:	461d      	mov	r5, r3
 80078ac:	4606      	mov	r6, r0
 80078ae:	b118      	cbz	r0, 80078b8 <_vfiprintf_r+0x18>
 80078b0:	6983      	ldr	r3, [r0, #24]
 80078b2:	b90b      	cbnz	r3, 80078b8 <_vfiprintf_r+0x18>
 80078b4:	f7fe fde4 	bl	8006480 <__sinit>
 80078b8:	4b7c      	ldr	r3, [pc, #496]	; (8007aac <_vfiprintf_r+0x20c>)
 80078ba:	429c      	cmp	r4, r3
 80078bc:	d158      	bne.n	8007970 <_vfiprintf_r+0xd0>
 80078be:	6874      	ldr	r4, [r6, #4]
 80078c0:	89a3      	ldrh	r3, [r4, #12]
 80078c2:	0718      	lsls	r0, r3, #28
 80078c4:	d55e      	bpl.n	8007984 <_vfiprintf_r+0xe4>
 80078c6:	6923      	ldr	r3, [r4, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d05b      	beq.n	8007984 <_vfiprintf_r+0xe4>
 80078cc:	2300      	movs	r3, #0
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	2320      	movs	r3, #32
 80078d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078d6:	2330      	movs	r3, #48	; 0x30
 80078d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078dc:	9503      	str	r5, [sp, #12]
 80078de:	f04f 0b01 	mov.w	fp, #1
 80078e2:	46b8      	mov	r8, r7
 80078e4:	4645      	mov	r5, r8
 80078e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078ea:	b10b      	cbz	r3, 80078f0 <_vfiprintf_r+0x50>
 80078ec:	2b25      	cmp	r3, #37	; 0x25
 80078ee:	d154      	bne.n	800799a <_vfiprintf_r+0xfa>
 80078f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80078f4:	d00b      	beq.n	800790e <_vfiprintf_r+0x6e>
 80078f6:	4653      	mov	r3, sl
 80078f8:	463a      	mov	r2, r7
 80078fa:	4621      	mov	r1, r4
 80078fc:	4630      	mov	r0, r6
 80078fe:	f7ff ffbc 	bl	800787a <__sfputs_r>
 8007902:	3001      	adds	r0, #1
 8007904:	f000 80c2 	beq.w	8007a8c <_vfiprintf_r+0x1ec>
 8007908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790a:	4453      	add	r3, sl
 800790c:	9309      	str	r3, [sp, #36]	; 0x24
 800790e:	f898 3000 	ldrb.w	r3, [r8]
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 80ba 	beq.w	8007a8c <_vfiprintf_r+0x1ec>
 8007918:	2300      	movs	r3, #0
 800791a:	f04f 32ff 	mov.w	r2, #4294967295
 800791e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007922:	9304      	str	r3, [sp, #16]
 8007924:	9307      	str	r3, [sp, #28]
 8007926:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800792a:	931a      	str	r3, [sp, #104]	; 0x68
 800792c:	46a8      	mov	r8, r5
 800792e:	2205      	movs	r2, #5
 8007930:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007934:	485e      	ldr	r0, [pc, #376]	; (8007ab0 <_vfiprintf_r+0x210>)
 8007936:	f7f8 fc5b 	bl	80001f0 <memchr>
 800793a:	9b04      	ldr	r3, [sp, #16]
 800793c:	bb78      	cbnz	r0, 800799e <_vfiprintf_r+0xfe>
 800793e:	06d9      	lsls	r1, r3, #27
 8007940:	bf44      	itt	mi
 8007942:	2220      	movmi	r2, #32
 8007944:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007948:	071a      	lsls	r2, r3, #28
 800794a:	bf44      	itt	mi
 800794c:	222b      	movmi	r2, #43	; 0x2b
 800794e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007952:	782a      	ldrb	r2, [r5, #0]
 8007954:	2a2a      	cmp	r2, #42	; 0x2a
 8007956:	d02a      	beq.n	80079ae <_vfiprintf_r+0x10e>
 8007958:	9a07      	ldr	r2, [sp, #28]
 800795a:	46a8      	mov	r8, r5
 800795c:	2000      	movs	r0, #0
 800795e:	250a      	movs	r5, #10
 8007960:	4641      	mov	r1, r8
 8007962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007966:	3b30      	subs	r3, #48	; 0x30
 8007968:	2b09      	cmp	r3, #9
 800796a:	d969      	bls.n	8007a40 <_vfiprintf_r+0x1a0>
 800796c:	b360      	cbz	r0, 80079c8 <_vfiprintf_r+0x128>
 800796e:	e024      	b.n	80079ba <_vfiprintf_r+0x11a>
 8007970:	4b50      	ldr	r3, [pc, #320]	; (8007ab4 <_vfiprintf_r+0x214>)
 8007972:	429c      	cmp	r4, r3
 8007974:	d101      	bne.n	800797a <_vfiprintf_r+0xda>
 8007976:	68b4      	ldr	r4, [r6, #8]
 8007978:	e7a2      	b.n	80078c0 <_vfiprintf_r+0x20>
 800797a:	4b4f      	ldr	r3, [pc, #316]	; (8007ab8 <_vfiprintf_r+0x218>)
 800797c:	429c      	cmp	r4, r3
 800797e:	bf08      	it	eq
 8007980:	68f4      	ldreq	r4, [r6, #12]
 8007982:	e79d      	b.n	80078c0 <_vfiprintf_r+0x20>
 8007984:	4621      	mov	r1, r4
 8007986:	4630      	mov	r0, r6
 8007988:	f000 f978 	bl	8007c7c <__swsetup_r>
 800798c:	2800      	cmp	r0, #0
 800798e:	d09d      	beq.n	80078cc <_vfiprintf_r+0x2c>
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
 8007994:	b01d      	add	sp, #116	; 0x74
 8007996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800799a:	46a8      	mov	r8, r5
 800799c:	e7a2      	b.n	80078e4 <_vfiprintf_r+0x44>
 800799e:	4a44      	ldr	r2, [pc, #272]	; (8007ab0 <_vfiprintf_r+0x210>)
 80079a0:	1a80      	subs	r0, r0, r2
 80079a2:	fa0b f000 	lsl.w	r0, fp, r0
 80079a6:	4318      	orrs	r0, r3
 80079a8:	9004      	str	r0, [sp, #16]
 80079aa:	4645      	mov	r5, r8
 80079ac:	e7be      	b.n	800792c <_vfiprintf_r+0x8c>
 80079ae:	9a03      	ldr	r2, [sp, #12]
 80079b0:	1d11      	adds	r1, r2, #4
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	9103      	str	r1, [sp, #12]
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	db01      	blt.n	80079be <_vfiprintf_r+0x11e>
 80079ba:	9207      	str	r2, [sp, #28]
 80079bc:	e004      	b.n	80079c8 <_vfiprintf_r+0x128>
 80079be:	4252      	negs	r2, r2
 80079c0:	f043 0302 	orr.w	r3, r3, #2
 80079c4:	9207      	str	r2, [sp, #28]
 80079c6:	9304      	str	r3, [sp, #16]
 80079c8:	f898 3000 	ldrb.w	r3, [r8]
 80079cc:	2b2e      	cmp	r3, #46	; 0x2e
 80079ce:	d10e      	bne.n	80079ee <_vfiprintf_r+0x14e>
 80079d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80079d4:	2b2a      	cmp	r3, #42	; 0x2a
 80079d6:	d138      	bne.n	8007a4a <_vfiprintf_r+0x1aa>
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	1d1a      	adds	r2, r3, #4
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	9203      	str	r2, [sp, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	bfb8      	it	lt
 80079e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80079e8:	f108 0802 	add.w	r8, r8, #2
 80079ec:	9305      	str	r3, [sp, #20]
 80079ee:	4d33      	ldr	r5, [pc, #204]	; (8007abc <_vfiprintf_r+0x21c>)
 80079f0:	f898 1000 	ldrb.w	r1, [r8]
 80079f4:	2203      	movs	r2, #3
 80079f6:	4628      	mov	r0, r5
 80079f8:	f7f8 fbfa 	bl	80001f0 <memchr>
 80079fc:	b140      	cbz	r0, 8007a10 <_vfiprintf_r+0x170>
 80079fe:	2340      	movs	r3, #64	; 0x40
 8007a00:	1b40      	subs	r0, r0, r5
 8007a02:	fa03 f000 	lsl.w	r0, r3, r0
 8007a06:	9b04      	ldr	r3, [sp, #16]
 8007a08:	4303      	orrs	r3, r0
 8007a0a:	f108 0801 	add.w	r8, r8, #1
 8007a0e:	9304      	str	r3, [sp, #16]
 8007a10:	f898 1000 	ldrb.w	r1, [r8]
 8007a14:	482a      	ldr	r0, [pc, #168]	; (8007ac0 <_vfiprintf_r+0x220>)
 8007a16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a1a:	2206      	movs	r2, #6
 8007a1c:	f108 0701 	add.w	r7, r8, #1
 8007a20:	f7f8 fbe6 	bl	80001f0 <memchr>
 8007a24:	2800      	cmp	r0, #0
 8007a26:	d037      	beq.n	8007a98 <_vfiprintf_r+0x1f8>
 8007a28:	4b26      	ldr	r3, [pc, #152]	; (8007ac4 <_vfiprintf_r+0x224>)
 8007a2a:	bb1b      	cbnz	r3, 8007a74 <_vfiprintf_r+0x1d4>
 8007a2c:	9b03      	ldr	r3, [sp, #12]
 8007a2e:	3307      	adds	r3, #7
 8007a30:	f023 0307 	bic.w	r3, r3, #7
 8007a34:	3308      	adds	r3, #8
 8007a36:	9303      	str	r3, [sp, #12]
 8007a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a3a:	444b      	add	r3, r9
 8007a3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007a3e:	e750      	b.n	80078e2 <_vfiprintf_r+0x42>
 8007a40:	fb05 3202 	mla	r2, r5, r2, r3
 8007a44:	2001      	movs	r0, #1
 8007a46:	4688      	mov	r8, r1
 8007a48:	e78a      	b.n	8007960 <_vfiprintf_r+0xc0>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f108 0801 	add.w	r8, r8, #1
 8007a50:	9305      	str	r3, [sp, #20]
 8007a52:	4619      	mov	r1, r3
 8007a54:	250a      	movs	r5, #10
 8007a56:	4640      	mov	r0, r8
 8007a58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a5c:	3a30      	subs	r2, #48	; 0x30
 8007a5e:	2a09      	cmp	r2, #9
 8007a60:	d903      	bls.n	8007a6a <_vfiprintf_r+0x1ca>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0c3      	beq.n	80079ee <_vfiprintf_r+0x14e>
 8007a66:	9105      	str	r1, [sp, #20]
 8007a68:	e7c1      	b.n	80079ee <_vfiprintf_r+0x14e>
 8007a6a:	fb05 2101 	mla	r1, r5, r1, r2
 8007a6e:	2301      	movs	r3, #1
 8007a70:	4680      	mov	r8, r0
 8007a72:	e7f0      	b.n	8007a56 <_vfiprintf_r+0x1b6>
 8007a74:	ab03      	add	r3, sp, #12
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	4622      	mov	r2, r4
 8007a7a:	4b13      	ldr	r3, [pc, #76]	; (8007ac8 <_vfiprintf_r+0x228>)
 8007a7c:	a904      	add	r1, sp, #16
 8007a7e:	4630      	mov	r0, r6
 8007a80:	f7fc f9a0 	bl	8003dc4 <_printf_float>
 8007a84:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007a88:	4681      	mov	r9, r0
 8007a8a:	d1d5      	bne.n	8007a38 <_vfiprintf_r+0x198>
 8007a8c:	89a3      	ldrh	r3, [r4, #12]
 8007a8e:	065b      	lsls	r3, r3, #25
 8007a90:	f53f af7e 	bmi.w	8007990 <_vfiprintf_r+0xf0>
 8007a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a96:	e77d      	b.n	8007994 <_vfiprintf_r+0xf4>
 8007a98:	ab03      	add	r3, sp, #12
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	4622      	mov	r2, r4
 8007a9e:	4b0a      	ldr	r3, [pc, #40]	; (8007ac8 <_vfiprintf_r+0x228>)
 8007aa0:	a904      	add	r1, sp, #16
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f7fc fc44 	bl	8004330 <_printf_i>
 8007aa8:	e7ec      	b.n	8007a84 <_vfiprintf_r+0x1e4>
 8007aaa:	bf00      	nop
 8007aac:	08008210 	.word	0x08008210
 8007ab0:	0800835c 	.word	0x0800835c
 8007ab4:	08008230 	.word	0x08008230
 8007ab8:	080081f0 	.word	0x080081f0
 8007abc:	08008362 	.word	0x08008362
 8007ac0:	08008366 	.word	0x08008366
 8007ac4:	08003dc5 	.word	0x08003dc5
 8007ac8:	0800787b 	.word	0x0800787b

08007acc <_sbrk_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4c06      	ldr	r4, [pc, #24]	; (8007ae8 <_sbrk_r+0x1c>)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4605      	mov	r5, r0
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	f7fa f902 	bl	8001ce0 <_sbrk>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_sbrk_r+0x1a>
 8007ae0:	6823      	ldr	r3, [r4, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_sbrk_r+0x1a>
 8007ae4:	602b      	str	r3, [r5, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	20001670 	.word	0x20001670

08007aec <__sread>:
 8007aec:	b510      	push	{r4, lr}
 8007aee:	460c      	mov	r4, r1
 8007af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007af4:	f000 faa8 	bl	8008048 <_read_r>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	bfab      	itete	ge
 8007afc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007afe:	89a3      	ldrhlt	r3, [r4, #12]
 8007b00:	181b      	addge	r3, r3, r0
 8007b02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b06:	bfac      	ite	ge
 8007b08:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b0a:	81a3      	strhlt	r3, [r4, #12]
 8007b0c:	bd10      	pop	{r4, pc}

08007b0e <__swrite>:
 8007b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b12:	461f      	mov	r7, r3
 8007b14:	898b      	ldrh	r3, [r1, #12]
 8007b16:	05db      	lsls	r3, r3, #23
 8007b18:	4605      	mov	r5, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	4616      	mov	r6, r2
 8007b1e:	d505      	bpl.n	8007b2c <__swrite+0x1e>
 8007b20:	2302      	movs	r3, #2
 8007b22:	2200      	movs	r2, #0
 8007b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b28:	f000 f9d6 	bl	8007ed8 <_lseek_r>
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b36:	81a3      	strh	r3, [r4, #12]
 8007b38:	4632      	mov	r2, r6
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b42:	f000 b889 	b.w	8007c58 <_write_r>

08007b46 <__sseek>:
 8007b46:	b510      	push	{r4, lr}
 8007b48:	460c      	mov	r4, r1
 8007b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4e:	f000 f9c3 	bl	8007ed8 <_lseek_r>
 8007b52:	1c43      	adds	r3, r0, #1
 8007b54:	89a3      	ldrh	r3, [r4, #12]
 8007b56:	bf15      	itete	ne
 8007b58:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b62:	81a3      	strheq	r3, [r4, #12]
 8007b64:	bf18      	it	ne
 8007b66:	81a3      	strhne	r3, [r4, #12]
 8007b68:	bd10      	pop	{r4, pc}

08007b6a <__sclose>:
 8007b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6e:	f000 b8f3 	b.w	8007d58 <_close_r>

08007b72 <strncmp>:
 8007b72:	b510      	push	{r4, lr}
 8007b74:	b16a      	cbz	r2, 8007b92 <strncmp+0x20>
 8007b76:	3901      	subs	r1, #1
 8007b78:	1884      	adds	r4, r0, r2
 8007b7a:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007b7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d103      	bne.n	8007b8e <strncmp+0x1c>
 8007b86:	42a0      	cmp	r0, r4
 8007b88:	d001      	beq.n	8007b8e <strncmp+0x1c>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f5      	bne.n	8007b7a <strncmp+0x8>
 8007b8e:	1a98      	subs	r0, r3, r2
 8007b90:	bd10      	pop	{r4, pc}
 8007b92:	4610      	mov	r0, r2
 8007b94:	e7fc      	b.n	8007b90 <strncmp+0x1e>
	...

08007b98 <__swbuf_r>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	460e      	mov	r6, r1
 8007b9c:	4614      	mov	r4, r2
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	b118      	cbz	r0, 8007baa <__swbuf_r+0x12>
 8007ba2:	6983      	ldr	r3, [r0, #24]
 8007ba4:	b90b      	cbnz	r3, 8007baa <__swbuf_r+0x12>
 8007ba6:	f7fe fc6b 	bl	8006480 <__sinit>
 8007baa:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <__swbuf_r+0x98>)
 8007bac:	429c      	cmp	r4, r3
 8007bae:	d12a      	bne.n	8007c06 <__swbuf_r+0x6e>
 8007bb0:	686c      	ldr	r4, [r5, #4]
 8007bb2:	69a3      	ldr	r3, [r4, #24]
 8007bb4:	60a3      	str	r3, [r4, #8]
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	071a      	lsls	r2, r3, #28
 8007bba:	d52e      	bpl.n	8007c1a <__swbuf_r+0x82>
 8007bbc:	6923      	ldr	r3, [r4, #16]
 8007bbe:	b363      	cbz	r3, 8007c1a <__swbuf_r+0x82>
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	6820      	ldr	r0, [r4, #0]
 8007bc4:	1ac0      	subs	r0, r0, r3
 8007bc6:	6963      	ldr	r3, [r4, #20]
 8007bc8:	b2f6      	uxtb	r6, r6
 8007bca:	4283      	cmp	r3, r0
 8007bcc:	4637      	mov	r7, r6
 8007bce:	dc04      	bgt.n	8007bda <__swbuf_r+0x42>
 8007bd0:	4621      	mov	r1, r4
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	f000 f956 	bl	8007e84 <_fflush_r>
 8007bd8:	bb28      	cbnz	r0, 8007c26 <__swbuf_r+0x8e>
 8007bda:	68a3      	ldr	r3, [r4, #8]
 8007bdc:	3b01      	subs	r3, #1
 8007bde:	60a3      	str	r3, [r4, #8]
 8007be0:	6823      	ldr	r3, [r4, #0]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	6022      	str	r2, [r4, #0]
 8007be6:	701e      	strb	r6, [r3, #0]
 8007be8:	6963      	ldr	r3, [r4, #20]
 8007bea:	3001      	adds	r0, #1
 8007bec:	4283      	cmp	r3, r0
 8007bee:	d004      	beq.n	8007bfa <__swbuf_r+0x62>
 8007bf0:	89a3      	ldrh	r3, [r4, #12]
 8007bf2:	07db      	lsls	r3, r3, #31
 8007bf4:	d519      	bpl.n	8007c2a <__swbuf_r+0x92>
 8007bf6:	2e0a      	cmp	r6, #10
 8007bf8:	d117      	bne.n	8007c2a <__swbuf_r+0x92>
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	f000 f941 	bl	8007e84 <_fflush_r>
 8007c02:	b190      	cbz	r0, 8007c2a <__swbuf_r+0x92>
 8007c04:	e00f      	b.n	8007c26 <__swbuf_r+0x8e>
 8007c06:	4b0b      	ldr	r3, [pc, #44]	; (8007c34 <__swbuf_r+0x9c>)
 8007c08:	429c      	cmp	r4, r3
 8007c0a:	d101      	bne.n	8007c10 <__swbuf_r+0x78>
 8007c0c:	68ac      	ldr	r4, [r5, #8]
 8007c0e:	e7d0      	b.n	8007bb2 <__swbuf_r+0x1a>
 8007c10:	4b09      	ldr	r3, [pc, #36]	; (8007c38 <__swbuf_r+0xa0>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	bf08      	it	eq
 8007c16:	68ec      	ldreq	r4, [r5, #12]
 8007c18:	e7cb      	b.n	8007bb2 <__swbuf_r+0x1a>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	f000 f82d 	bl	8007c7c <__swsetup_r>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	d0cc      	beq.n	8007bc0 <__swbuf_r+0x28>
 8007c26:	f04f 37ff 	mov.w	r7, #4294967295
 8007c2a:	4638      	mov	r0, r7
 8007c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	08008210 	.word	0x08008210
 8007c34:	08008230 	.word	0x08008230
 8007c38:	080081f0 	.word	0x080081f0

08007c3c <__ascii_wctomb>:
 8007c3c:	b149      	cbz	r1, 8007c52 <__ascii_wctomb+0x16>
 8007c3e:	2aff      	cmp	r2, #255	; 0xff
 8007c40:	bf85      	ittet	hi
 8007c42:	238a      	movhi	r3, #138	; 0x8a
 8007c44:	6003      	strhi	r3, [r0, #0]
 8007c46:	700a      	strbls	r2, [r1, #0]
 8007c48:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c4c:	bf98      	it	ls
 8007c4e:	2001      	movls	r0, #1
 8007c50:	4770      	bx	lr
 8007c52:	4608      	mov	r0, r1
 8007c54:	4770      	bx	lr
	...

08007c58 <_write_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4c07      	ldr	r4, [pc, #28]	; (8007c78 <_write_r+0x20>)
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	4608      	mov	r0, r1
 8007c60:	4611      	mov	r1, r2
 8007c62:	2200      	movs	r2, #0
 8007c64:	6022      	str	r2, [r4, #0]
 8007c66:	461a      	mov	r2, r3
 8007c68:	f7f9 ffe9 	bl	8001c3e <_write>
 8007c6c:	1c43      	adds	r3, r0, #1
 8007c6e:	d102      	bne.n	8007c76 <_write_r+0x1e>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	b103      	cbz	r3, 8007c76 <_write_r+0x1e>
 8007c74:	602b      	str	r3, [r5, #0]
 8007c76:	bd38      	pop	{r3, r4, r5, pc}
 8007c78:	20001670 	.word	0x20001670

08007c7c <__swsetup_r>:
 8007c7c:	4b32      	ldr	r3, [pc, #200]	; (8007d48 <__swsetup_r+0xcc>)
 8007c7e:	b570      	push	{r4, r5, r6, lr}
 8007c80:	681d      	ldr	r5, [r3, #0]
 8007c82:	4606      	mov	r6, r0
 8007c84:	460c      	mov	r4, r1
 8007c86:	b125      	cbz	r5, 8007c92 <__swsetup_r+0x16>
 8007c88:	69ab      	ldr	r3, [r5, #24]
 8007c8a:	b913      	cbnz	r3, 8007c92 <__swsetup_r+0x16>
 8007c8c:	4628      	mov	r0, r5
 8007c8e:	f7fe fbf7 	bl	8006480 <__sinit>
 8007c92:	4b2e      	ldr	r3, [pc, #184]	; (8007d4c <__swsetup_r+0xd0>)
 8007c94:	429c      	cmp	r4, r3
 8007c96:	d10f      	bne.n	8007cb8 <__swsetup_r+0x3c>
 8007c98:	686c      	ldr	r4, [r5, #4]
 8007c9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c9e:	b29a      	uxth	r2, r3
 8007ca0:	0715      	lsls	r5, r2, #28
 8007ca2:	d42c      	bmi.n	8007cfe <__swsetup_r+0x82>
 8007ca4:	06d0      	lsls	r0, r2, #27
 8007ca6:	d411      	bmi.n	8007ccc <__swsetup_r+0x50>
 8007ca8:	2209      	movs	r2, #9
 8007caa:	6032      	str	r2, [r6, #0]
 8007cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cb0:	81a3      	strh	r3, [r4, #12]
 8007cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb6:	e03e      	b.n	8007d36 <__swsetup_r+0xba>
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <__swsetup_r+0xd4>)
 8007cba:	429c      	cmp	r4, r3
 8007cbc:	d101      	bne.n	8007cc2 <__swsetup_r+0x46>
 8007cbe:	68ac      	ldr	r4, [r5, #8]
 8007cc0:	e7eb      	b.n	8007c9a <__swsetup_r+0x1e>
 8007cc2:	4b24      	ldr	r3, [pc, #144]	; (8007d54 <__swsetup_r+0xd8>)
 8007cc4:	429c      	cmp	r4, r3
 8007cc6:	bf08      	it	eq
 8007cc8:	68ec      	ldreq	r4, [r5, #12]
 8007cca:	e7e6      	b.n	8007c9a <__swsetup_r+0x1e>
 8007ccc:	0751      	lsls	r1, r2, #29
 8007cce:	d512      	bpl.n	8007cf6 <__swsetup_r+0x7a>
 8007cd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cd2:	b141      	cbz	r1, 8007ce6 <__swsetup_r+0x6a>
 8007cd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007cd8:	4299      	cmp	r1, r3
 8007cda:	d002      	beq.n	8007ce2 <__swsetup_r+0x66>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff fbbb 	bl	8007458 <_free_r>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ce6:	89a3      	ldrh	r3, [r4, #12]
 8007ce8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007cec:	81a3      	strh	r3, [r4, #12]
 8007cee:	2300      	movs	r3, #0
 8007cf0:	6063      	str	r3, [r4, #4]
 8007cf2:	6923      	ldr	r3, [r4, #16]
 8007cf4:	6023      	str	r3, [r4, #0]
 8007cf6:	89a3      	ldrh	r3, [r4, #12]
 8007cf8:	f043 0308 	orr.w	r3, r3, #8
 8007cfc:	81a3      	strh	r3, [r4, #12]
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	b94b      	cbnz	r3, 8007d16 <__swsetup_r+0x9a>
 8007d02:	89a3      	ldrh	r3, [r4, #12]
 8007d04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d0c:	d003      	beq.n	8007d16 <__swsetup_r+0x9a>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4630      	mov	r0, r6
 8007d12:	f000 f917 	bl	8007f44 <__smakebuf_r>
 8007d16:	89a2      	ldrh	r2, [r4, #12]
 8007d18:	f012 0301 	ands.w	r3, r2, #1
 8007d1c:	d00c      	beq.n	8007d38 <__swsetup_r+0xbc>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	60a3      	str	r3, [r4, #8]
 8007d22:	6963      	ldr	r3, [r4, #20]
 8007d24:	425b      	negs	r3, r3
 8007d26:	61a3      	str	r3, [r4, #24]
 8007d28:	6923      	ldr	r3, [r4, #16]
 8007d2a:	b953      	cbnz	r3, 8007d42 <__swsetup_r+0xc6>
 8007d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007d34:	d1ba      	bne.n	8007cac <__swsetup_r+0x30>
 8007d36:	bd70      	pop	{r4, r5, r6, pc}
 8007d38:	0792      	lsls	r2, r2, #30
 8007d3a:	bf58      	it	pl
 8007d3c:	6963      	ldrpl	r3, [r4, #20]
 8007d3e:	60a3      	str	r3, [r4, #8]
 8007d40:	e7f2      	b.n	8007d28 <__swsetup_r+0xac>
 8007d42:	2000      	movs	r0, #0
 8007d44:	e7f7      	b.n	8007d36 <__swsetup_r+0xba>
 8007d46:	bf00      	nop
 8007d48:	2000000c 	.word	0x2000000c
 8007d4c:	08008210 	.word	0x08008210
 8007d50:	08008230 	.word	0x08008230
 8007d54:	080081f0 	.word	0x080081f0

08007d58 <_close_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4c06      	ldr	r4, [pc, #24]	; (8007d74 <_close_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4605      	mov	r5, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	6023      	str	r3, [r4, #0]
 8007d64:	f7f9 ff87 	bl	8001c76 <_close>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_close_r+0x1a>
 8007d6c:	6823      	ldr	r3, [r4, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_close_r+0x1a>
 8007d70:	602b      	str	r3, [r5, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20001670 	.word	0x20001670

08007d78 <__sflush_r>:
 8007d78:	898a      	ldrh	r2, [r1, #12]
 8007d7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d7e:	4605      	mov	r5, r0
 8007d80:	0710      	lsls	r0, r2, #28
 8007d82:	460c      	mov	r4, r1
 8007d84:	d458      	bmi.n	8007e38 <__sflush_r+0xc0>
 8007d86:	684b      	ldr	r3, [r1, #4]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	dc05      	bgt.n	8007d98 <__sflush_r+0x20>
 8007d8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dc02      	bgt.n	8007d98 <__sflush_r+0x20>
 8007d92:	2000      	movs	r0, #0
 8007d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007d9a:	2e00      	cmp	r6, #0
 8007d9c:	d0f9      	beq.n	8007d92 <__sflush_r+0x1a>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007da4:	682f      	ldr	r7, [r5, #0]
 8007da6:	6a21      	ldr	r1, [r4, #32]
 8007da8:	602b      	str	r3, [r5, #0]
 8007daa:	d032      	beq.n	8007e12 <__sflush_r+0x9a>
 8007dac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dae:	89a3      	ldrh	r3, [r4, #12]
 8007db0:	075a      	lsls	r2, r3, #29
 8007db2:	d505      	bpl.n	8007dc0 <__sflush_r+0x48>
 8007db4:	6863      	ldr	r3, [r4, #4]
 8007db6:	1ac0      	subs	r0, r0, r3
 8007db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007dba:	b10b      	cbz	r3, 8007dc0 <__sflush_r+0x48>
 8007dbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007dbe:	1ac0      	subs	r0, r0, r3
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dc6:	6a21      	ldr	r1, [r4, #32]
 8007dc8:	4628      	mov	r0, r5
 8007dca:	47b0      	blx	r6
 8007dcc:	1c43      	adds	r3, r0, #1
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	d106      	bne.n	8007de0 <__sflush_r+0x68>
 8007dd2:	6829      	ldr	r1, [r5, #0]
 8007dd4:	291d      	cmp	r1, #29
 8007dd6:	d848      	bhi.n	8007e6a <__sflush_r+0xf2>
 8007dd8:	4a29      	ldr	r2, [pc, #164]	; (8007e80 <__sflush_r+0x108>)
 8007dda:	40ca      	lsrs	r2, r1
 8007ddc:	07d6      	lsls	r6, r2, #31
 8007dde:	d544      	bpl.n	8007e6a <__sflush_r+0xf2>
 8007de0:	2200      	movs	r2, #0
 8007de2:	6062      	str	r2, [r4, #4]
 8007de4:	04d9      	lsls	r1, r3, #19
 8007de6:	6922      	ldr	r2, [r4, #16]
 8007de8:	6022      	str	r2, [r4, #0]
 8007dea:	d504      	bpl.n	8007df6 <__sflush_r+0x7e>
 8007dec:	1c42      	adds	r2, r0, #1
 8007dee:	d101      	bne.n	8007df4 <__sflush_r+0x7c>
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	b903      	cbnz	r3, 8007df6 <__sflush_r+0x7e>
 8007df4:	6560      	str	r0, [r4, #84]	; 0x54
 8007df6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007df8:	602f      	str	r7, [r5, #0]
 8007dfa:	2900      	cmp	r1, #0
 8007dfc:	d0c9      	beq.n	8007d92 <__sflush_r+0x1a>
 8007dfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e02:	4299      	cmp	r1, r3
 8007e04:	d002      	beq.n	8007e0c <__sflush_r+0x94>
 8007e06:	4628      	mov	r0, r5
 8007e08:	f7ff fb26 	bl	8007458 <_free_r>
 8007e0c:	2000      	movs	r0, #0
 8007e0e:	6360      	str	r0, [r4, #52]	; 0x34
 8007e10:	e7c0      	b.n	8007d94 <__sflush_r+0x1c>
 8007e12:	2301      	movs	r3, #1
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b0      	blx	r6
 8007e18:	1c41      	adds	r1, r0, #1
 8007e1a:	d1c8      	bne.n	8007dae <__sflush_r+0x36>
 8007e1c:	682b      	ldr	r3, [r5, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d0c5      	beq.n	8007dae <__sflush_r+0x36>
 8007e22:	2b1d      	cmp	r3, #29
 8007e24:	d001      	beq.n	8007e2a <__sflush_r+0xb2>
 8007e26:	2b16      	cmp	r3, #22
 8007e28:	d101      	bne.n	8007e2e <__sflush_r+0xb6>
 8007e2a:	602f      	str	r7, [r5, #0]
 8007e2c:	e7b1      	b.n	8007d92 <__sflush_r+0x1a>
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e34:	81a3      	strh	r3, [r4, #12]
 8007e36:	e7ad      	b.n	8007d94 <__sflush_r+0x1c>
 8007e38:	690f      	ldr	r7, [r1, #16]
 8007e3a:	2f00      	cmp	r7, #0
 8007e3c:	d0a9      	beq.n	8007d92 <__sflush_r+0x1a>
 8007e3e:	0793      	lsls	r3, r2, #30
 8007e40:	680e      	ldr	r6, [r1, #0]
 8007e42:	bf08      	it	eq
 8007e44:	694b      	ldreq	r3, [r1, #20]
 8007e46:	600f      	str	r7, [r1, #0]
 8007e48:	bf18      	it	ne
 8007e4a:	2300      	movne	r3, #0
 8007e4c:	eba6 0807 	sub.w	r8, r6, r7
 8007e50:	608b      	str	r3, [r1, #8]
 8007e52:	f1b8 0f00 	cmp.w	r8, #0
 8007e56:	dd9c      	ble.n	8007d92 <__sflush_r+0x1a>
 8007e58:	4643      	mov	r3, r8
 8007e5a:	463a      	mov	r2, r7
 8007e5c:	6a21      	ldr	r1, [r4, #32]
 8007e5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007e60:	4628      	mov	r0, r5
 8007e62:	47b0      	blx	r6
 8007e64:	2800      	cmp	r0, #0
 8007e66:	dc06      	bgt.n	8007e76 <__sflush_r+0xfe>
 8007e68:	89a3      	ldrh	r3, [r4, #12]
 8007e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e6e:	81a3      	strh	r3, [r4, #12]
 8007e70:	f04f 30ff 	mov.w	r0, #4294967295
 8007e74:	e78e      	b.n	8007d94 <__sflush_r+0x1c>
 8007e76:	4407      	add	r7, r0
 8007e78:	eba8 0800 	sub.w	r8, r8, r0
 8007e7c:	e7e9      	b.n	8007e52 <__sflush_r+0xda>
 8007e7e:	bf00      	nop
 8007e80:	20400001 	.word	0x20400001

08007e84 <_fflush_r>:
 8007e84:	b538      	push	{r3, r4, r5, lr}
 8007e86:	690b      	ldr	r3, [r1, #16]
 8007e88:	4605      	mov	r5, r0
 8007e8a:	460c      	mov	r4, r1
 8007e8c:	b1db      	cbz	r3, 8007ec6 <_fflush_r+0x42>
 8007e8e:	b118      	cbz	r0, 8007e98 <_fflush_r+0x14>
 8007e90:	6983      	ldr	r3, [r0, #24]
 8007e92:	b90b      	cbnz	r3, 8007e98 <_fflush_r+0x14>
 8007e94:	f7fe faf4 	bl	8006480 <__sinit>
 8007e98:	4b0c      	ldr	r3, [pc, #48]	; (8007ecc <_fflush_r+0x48>)
 8007e9a:	429c      	cmp	r4, r3
 8007e9c:	d109      	bne.n	8007eb2 <_fflush_r+0x2e>
 8007e9e:	686c      	ldr	r4, [r5, #4]
 8007ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ea4:	b17b      	cbz	r3, 8007ec6 <_fflush_r+0x42>
 8007ea6:	4621      	mov	r1, r4
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007eae:	f7ff bf63 	b.w	8007d78 <__sflush_r>
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <_fflush_r+0x4c>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	d101      	bne.n	8007ebc <_fflush_r+0x38>
 8007eb8:	68ac      	ldr	r4, [r5, #8]
 8007eba:	e7f1      	b.n	8007ea0 <_fflush_r+0x1c>
 8007ebc:	4b05      	ldr	r3, [pc, #20]	; (8007ed4 <_fflush_r+0x50>)
 8007ebe:	429c      	cmp	r4, r3
 8007ec0:	bf08      	it	eq
 8007ec2:	68ec      	ldreq	r4, [r5, #12]
 8007ec4:	e7ec      	b.n	8007ea0 <_fflush_r+0x1c>
 8007ec6:	2000      	movs	r0, #0
 8007ec8:	bd38      	pop	{r3, r4, r5, pc}
 8007eca:	bf00      	nop
 8007ecc:	08008210 	.word	0x08008210
 8007ed0:	08008230 	.word	0x08008230
 8007ed4:	080081f0 	.word	0x080081f0

08007ed8 <_lseek_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4c07      	ldr	r4, [pc, #28]	; (8007ef8 <_lseek_r+0x20>)
 8007edc:	4605      	mov	r5, r0
 8007ede:	4608      	mov	r0, r1
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	6022      	str	r2, [r4, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f7f9 feec 	bl	8001cc4 <_lseek>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d102      	bne.n	8007ef6 <_lseek_r+0x1e>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	b103      	cbz	r3, 8007ef6 <_lseek_r+0x1e>
 8007ef4:	602b      	str	r3, [r5, #0]
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	20001670 	.word	0x20001670

08007efc <__swhatbuf_r>:
 8007efc:	b570      	push	{r4, r5, r6, lr}
 8007efe:	460e      	mov	r6, r1
 8007f00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f04:	2900      	cmp	r1, #0
 8007f06:	b096      	sub	sp, #88	; 0x58
 8007f08:	4614      	mov	r4, r2
 8007f0a:	461d      	mov	r5, r3
 8007f0c:	da07      	bge.n	8007f1e <__swhatbuf_r+0x22>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	602b      	str	r3, [r5, #0]
 8007f12:	89b3      	ldrh	r3, [r6, #12]
 8007f14:	061a      	lsls	r2, r3, #24
 8007f16:	d410      	bmi.n	8007f3a <__swhatbuf_r+0x3e>
 8007f18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007f1c:	e00e      	b.n	8007f3c <__swhatbuf_r+0x40>
 8007f1e:	466a      	mov	r2, sp
 8007f20:	f000 f8a4 	bl	800806c <_fstat_r>
 8007f24:	2800      	cmp	r0, #0
 8007f26:	dbf2      	blt.n	8007f0e <__swhatbuf_r+0x12>
 8007f28:	9a01      	ldr	r2, [sp, #4]
 8007f2a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007f2e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007f32:	425a      	negs	r2, r3
 8007f34:	415a      	adcs	r2, r3
 8007f36:	602a      	str	r2, [r5, #0]
 8007f38:	e7ee      	b.n	8007f18 <__swhatbuf_r+0x1c>
 8007f3a:	2340      	movs	r3, #64	; 0x40
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	6023      	str	r3, [r4, #0]
 8007f40:	b016      	add	sp, #88	; 0x58
 8007f42:	bd70      	pop	{r4, r5, r6, pc}

08007f44 <__smakebuf_r>:
 8007f44:	898b      	ldrh	r3, [r1, #12]
 8007f46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007f48:	079d      	lsls	r5, r3, #30
 8007f4a:	4606      	mov	r6, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	d507      	bpl.n	8007f60 <__smakebuf_r+0x1c>
 8007f50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007f54:	6023      	str	r3, [r4, #0]
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	2301      	movs	r3, #1
 8007f5a:	6163      	str	r3, [r4, #20]
 8007f5c:	b002      	add	sp, #8
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	ab01      	add	r3, sp, #4
 8007f62:	466a      	mov	r2, sp
 8007f64:	f7ff ffca 	bl	8007efc <__swhatbuf_r>
 8007f68:	9900      	ldr	r1, [sp, #0]
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff fac1 	bl	80074f4 <_malloc_r>
 8007f72:	b948      	cbnz	r0, 8007f88 <__smakebuf_r+0x44>
 8007f74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f78:	059a      	lsls	r2, r3, #22
 8007f7a:	d4ef      	bmi.n	8007f5c <__smakebuf_r+0x18>
 8007f7c:	f023 0303 	bic.w	r3, r3, #3
 8007f80:	f043 0302 	orr.w	r3, r3, #2
 8007f84:	81a3      	strh	r3, [r4, #12]
 8007f86:	e7e3      	b.n	8007f50 <__smakebuf_r+0xc>
 8007f88:	4b0d      	ldr	r3, [pc, #52]	; (8007fc0 <__smakebuf_r+0x7c>)
 8007f8a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f8c:	89a3      	ldrh	r3, [r4, #12]
 8007f8e:	6020      	str	r0, [r4, #0]
 8007f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f94:	81a3      	strh	r3, [r4, #12]
 8007f96:	9b00      	ldr	r3, [sp, #0]
 8007f98:	6163      	str	r3, [r4, #20]
 8007f9a:	9b01      	ldr	r3, [sp, #4]
 8007f9c:	6120      	str	r0, [r4, #16]
 8007f9e:	b15b      	cbz	r3, 8007fb8 <__smakebuf_r+0x74>
 8007fa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fa4:	4630      	mov	r0, r6
 8007fa6:	f000 f873 	bl	8008090 <_isatty_r>
 8007faa:	b128      	cbz	r0, 8007fb8 <__smakebuf_r+0x74>
 8007fac:	89a3      	ldrh	r3, [r4, #12]
 8007fae:	f023 0303 	bic.w	r3, r3, #3
 8007fb2:	f043 0301 	orr.w	r3, r3, #1
 8007fb6:	81a3      	strh	r3, [r4, #12]
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	431d      	orrs	r5, r3
 8007fbc:	81a5      	strh	r5, [r4, #12]
 8007fbe:	e7cd      	b.n	8007f5c <__smakebuf_r+0x18>
 8007fc0:	08006449 	.word	0x08006449

08007fc4 <memmove>:
 8007fc4:	4288      	cmp	r0, r1
 8007fc6:	b510      	push	{r4, lr}
 8007fc8:	eb01 0302 	add.w	r3, r1, r2
 8007fcc:	d807      	bhi.n	8007fde <memmove+0x1a>
 8007fce:	1e42      	subs	r2, r0, #1
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	d00a      	beq.n	8007fea <memmove+0x26>
 8007fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fd8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007fdc:	e7f8      	b.n	8007fd0 <memmove+0xc>
 8007fde:	4283      	cmp	r3, r0
 8007fe0:	d9f5      	bls.n	8007fce <memmove+0xa>
 8007fe2:	1881      	adds	r1, r0, r2
 8007fe4:	1ad2      	subs	r2, r2, r3
 8007fe6:	42d3      	cmn	r3, r2
 8007fe8:	d100      	bne.n	8007fec <memmove+0x28>
 8007fea:	bd10      	pop	{r4, pc}
 8007fec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007ff0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007ff4:	e7f7      	b.n	8007fe6 <memmove+0x22>

08007ff6 <__malloc_lock>:
 8007ff6:	4770      	bx	lr

08007ff8 <__malloc_unlock>:
 8007ff8:	4770      	bx	lr

08007ffa <_realloc_r>:
 8007ffa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	4614      	mov	r4, r2
 8008000:	460e      	mov	r6, r1
 8008002:	b921      	cbnz	r1, 800800e <_realloc_r+0x14>
 8008004:	4611      	mov	r1, r2
 8008006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800800a:	f7ff ba73 	b.w	80074f4 <_malloc_r>
 800800e:	b922      	cbnz	r2, 800801a <_realloc_r+0x20>
 8008010:	f7ff fa22 	bl	8007458 <_free_r>
 8008014:	4625      	mov	r5, r4
 8008016:	4628      	mov	r0, r5
 8008018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800801a:	f000 f849 	bl	80080b0 <_malloc_usable_size_r>
 800801e:	42a0      	cmp	r0, r4
 8008020:	d20f      	bcs.n	8008042 <_realloc_r+0x48>
 8008022:	4621      	mov	r1, r4
 8008024:	4638      	mov	r0, r7
 8008026:	f7ff fa65 	bl	80074f4 <_malloc_r>
 800802a:	4605      	mov	r5, r0
 800802c:	2800      	cmp	r0, #0
 800802e:	d0f2      	beq.n	8008016 <_realloc_r+0x1c>
 8008030:	4631      	mov	r1, r6
 8008032:	4622      	mov	r2, r4
 8008034:	f7fb fe1e 	bl	8003c74 <memcpy>
 8008038:	4631      	mov	r1, r6
 800803a:	4638      	mov	r0, r7
 800803c:	f7ff fa0c 	bl	8007458 <_free_r>
 8008040:	e7e9      	b.n	8008016 <_realloc_r+0x1c>
 8008042:	4635      	mov	r5, r6
 8008044:	e7e7      	b.n	8008016 <_realloc_r+0x1c>
	...

08008048 <_read_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4c07      	ldr	r4, [pc, #28]	; (8008068 <_read_r+0x20>)
 800804c:	4605      	mov	r5, r0
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	2200      	movs	r2, #0
 8008054:	6022      	str	r2, [r4, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	f7f9 fdd4 	bl	8001c04 <_read>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_read_r+0x1e>
 8008060:	6823      	ldr	r3, [r4, #0]
 8008062:	b103      	cbz	r3, 8008066 <_read_r+0x1e>
 8008064:	602b      	str	r3, [r5, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	20001670 	.word	0x20001670

0800806c <_fstat_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4c07      	ldr	r4, [pc, #28]	; (800808c <_fstat_r+0x20>)
 8008070:	2300      	movs	r3, #0
 8008072:	4605      	mov	r5, r0
 8008074:	4608      	mov	r0, r1
 8008076:	4611      	mov	r1, r2
 8008078:	6023      	str	r3, [r4, #0]
 800807a:	f7f9 fe08 	bl	8001c8e <_fstat>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	d102      	bne.n	8008088 <_fstat_r+0x1c>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	b103      	cbz	r3, 8008088 <_fstat_r+0x1c>
 8008086:	602b      	str	r3, [r5, #0]
 8008088:	bd38      	pop	{r3, r4, r5, pc}
 800808a:	bf00      	nop
 800808c:	20001670 	.word	0x20001670

08008090 <_isatty_r>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	4c06      	ldr	r4, [pc, #24]	; (80080ac <_isatty_r+0x1c>)
 8008094:	2300      	movs	r3, #0
 8008096:	4605      	mov	r5, r0
 8008098:	4608      	mov	r0, r1
 800809a:	6023      	str	r3, [r4, #0]
 800809c:	f7f9 fe07 	bl	8001cae <_isatty>
 80080a0:	1c43      	adds	r3, r0, #1
 80080a2:	d102      	bne.n	80080aa <_isatty_r+0x1a>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	b103      	cbz	r3, 80080aa <_isatty_r+0x1a>
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	bd38      	pop	{r3, r4, r5, pc}
 80080ac:	20001670 	.word	0x20001670

080080b0 <_malloc_usable_size_r>:
 80080b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080b4:	1f18      	subs	r0, r3, #4
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	bfbc      	itt	lt
 80080ba:	580b      	ldrlt	r3, [r1, r0]
 80080bc:	18c0      	addlt	r0, r0, r3
 80080be:	4770      	bx	lr

080080c0 <_init>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	bf00      	nop
 80080c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c6:	bc08      	pop	{r3}
 80080c8:	469e      	mov	lr, r3
 80080ca:	4770      	bx	lr

080080cc <_fini>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	bf00      	nop
 80080d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d2:	bc08      	pop	{r3}
 80080d4:	469e      	mov	lr, r3
 80080d6:	4770      	bx	lr
