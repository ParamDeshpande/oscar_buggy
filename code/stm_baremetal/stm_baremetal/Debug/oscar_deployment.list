
oscar_deployment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ac4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08007c68  08007c68  00017c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008000  08008000  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008008  08008008  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008008  08008008  00018008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800800c  0800800c  0001800c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001424  200001dc  080081ec  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001600  080081ec  00021600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009393  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a0c  00000000  00000000  0002959f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000768  00000000  00000000  0002afb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002b718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016b48  00000000  00000000  0002bda8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070fa  00000000  00000000  000428f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086eaa  00000000  00000000  000499ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0894  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fc0  00000000  00000000  000d0910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007c4c 	.word	0x08007c4c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007c4c 	.word	0x08007c4c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <parseData>:
/* USER CODE END EV */

/**
  * @brief This function handles Hard fault interrupt.
  */
void parseData(byte * parseMsg){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  byte* frameToken = strtok_r(parseMsg,(byte *)startMarker,&saveptr1);
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <parseData+0x80>)
 8000fa2:	491e      	ldr	r1, [pc, #120]	; (800101c <parseData+0x84>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f004 f911 	bl	80051cc <strtok_r>
 8000faa:	6178      	str	r0, [r7, #20]
  frameToken = strtok_r(NULL,(byte *)endMarker,&saveptr1); // Now it points to the first frame.
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <parseData+0x80>)
 8000fae:	491c      	ldr	r1, [pc, #112]	; (8001020 <parseData+0x88>)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f004 f90b 	bl	80051cc <strtok_r>
 8000fb6:	6178      	str	r0, [r7, #20]

  int frameIndex = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  byte* frameTokenCopy = frameToken;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	60fb      	str	r3, [r7, #12]
  parseCoeffs(frameTokenCopy,frameIndex);
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f82e 	bl	8001024 <parseCoeffs>
  while (frameToken != NULL){
 8000fc8:	e01b      	b.n	8001002 <parseData+0x6a>
    /* code */

	  ++frameIndex;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
    frameToken = strtok_r(NULL, (byte *)startMarker,&saveptr1);
 8000fd0:	4a11      	ldr	r2, [pc, #68]	; (8001018 <parseData+0x80>)
 8000fd2:	4912      	ldr	r1, [pc, #72]	; (800101c <parseData+0x84>)
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f004 f8f9 	bl	80051cc <strtok_r>
 8000fda:	6178      	str	r0, [r7, #20]

    if(frameToken == NULL){
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d013      	beq.n	800100a <parseData+0x72>

        break;
    }

    frameToken = strtok_r(NULL, (byte *)endMarker,&saveptr1);
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <parseData+0x80>)
 8000fe4:	490e      	ldr	r1, [pc, #56]	; (8001020 <parseData+0x88>)
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f004 f8f0 	bl	80051cc <strtok_r>
 8000fec:	6178      	str	r0, [r7, #20]

        if(frameToken == NULL){
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00c      	beq.n	800100e <parseData+0x76>

        break;
    }
    
    if(frameToken!=NULL){
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <parseData+0x6a>

        parseCoeffs(frameToken,frameIndex);
 8000ffa:	6939      	ldr	r1, [r7, #16]
 8000ffc:	6978      	ldr	r0, [r7, #20]
 8000ffe:	f000 f811 	bl	8001024 <parseCoeffs>
  while (frameToken != NULL){
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1e0      	bne.n	8000fca <parseData+0x32>
    }
    

  }
    
}
 8001008:	e002      	b.n	8001010 <parseData+0x78>
        break;
 800100a:	bf00      	nop
 800100c:	e000      	b.n	8001010 <parseData+0x78>
        break;
 800100e:	bf00      	nop
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001f8 	.word	0x200001f8
 800101c:	08007ca4 	.word	0x08007ca4
 8001020:	08007ca8 	.word	0x08007ca8

08001024 <parseCoeffs>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void parseCoeffs(byte * frameMsg, int index){
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  byte * coeffsToken = strtok_r(frameMsg,(byte*) delimiter, &saveptr2);
 800102e:	4ab0      	ldr	r2, [pc, #704]	; (80012f0 <parseCoeffs+0x2cc>)
 8001030:	49b0      	ldr	r1, [pc, #704]	; (80012f4 <parseCoeffs+0x2d0>)
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f004 f8ca 	bl	80051cc <strtok_r>
 8001038:	60f8      	str	r0, [r7, #12]

  area.curves[index].d = atof(coeffsToken);
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f002 fbb6 	bl	80037ac <atof>
 8001040:	ec54 3b10 	vmov	r3, r4, d0
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f7ff fdd6 	bl	8000bf8 <__aeabi_d2f>
 800104c:	4601      	mov	r1, r0
 800104e:	4aaa      	ldr	r2, [pc, #680]	; (80012f8 <parseCoeffs+0x2d4>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001058:	4aa5      	ldr	r2, [pc, #660]	; (80012f0 <parseCoeffs+0x2cc>)
 800105a:	49a6      	ldr	r1, [pc, #664]	; (80012f4 <parseCoeffs+0x2d0>)
 800105c:	2000      	movs	r0, #0
 800105e:	f004 f8b5 	bl	80051cc <strtok_r>
 8001062:	60f8      	str	r0, [r7, #12]
  area.curves[index].c = atof(coeffsToken);
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f002 fba1 	bl	80037ac <atof>
 800106a:	ec54 3b10 	vmov	r3, r4, d0
 800106e:	4618      	mov	r0, r3
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fdc1 	bl	8000bf8 <__aeabi_d2f>
 8001076:	4601      	mov	r1, r0
 8001078:	4a9f      	ldr	r2, [pc, #636]	; (80012f8 <parseCoeffs+0x2d4>)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4413      	add	r3, r2
 8001080:	3304      	adds	r3, #4
 8001082:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001084:	4a9a      	ldr	r2, [pc, #616]	; (80012f0 <parseCoeffs+0x2cc>)
 8001086:	499b      	ldr	r1, [pc, #620]	; (80012f4 <parseCoeffs+0x2d0>)
 8001088:	2000      	movs	r0, #0
 800108a:	f004 f89f 	bl	80051cc <strtok_r>
 800108e:	60f8      	str	r0, [r7, #12]
  area.curves[index].b = atof(coeffsToken);
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f002 fb8b 	bl	80037ac <atof>
 8001096:	ec54 3b10 	vmov	r3, r4, d0
 800109a:	4618      	mov	r0, r3
 800109c:	4621      	mov	r1, r4
 800109e:	f7ff fdab 	bl	8000bf8 <__aeabi_d2f>
 80010a2:	4601      	mov	r1, r0
 80010a4:	4a94      	ldr	r2, [pc, #592]	; (80012f8 <parseCoeffs+0x2d4>)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	3308      	adds	r3, #8
 80010ae:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80010b0:	4a8f      	ldr	r2, [pc, #572]	; (80012f0 <parseCoeffs+0x2cc>)
 80010b2:	4990      	ldr	r1, [pc, #576]	; (80012f4 <parseCoeffs+0x2d0>)
 80010b4:	2000      	movs	r0, #0
 80010b6:	f004 f889 	bl	80051cc <strtok_r>
 80010ba:	60f8      	str	r0, [r7, #12]
  area.curves[index].a = atof(coeffsToken);
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f002 fb75 	bl	80037ac <atof>
 80010c2:	ec54 3b10 	vmov	r3, r4, d0
 80010c6:	4618      	mov	r0, r3
 80010c8:	4621      	mov	r1, r4
 80010ca:	f7ff fd95 	bl	8000bf8 <__aeabi_d2f>
 80010ce:	4601      	mov	r1, r0
 80010d0:	4a89      	ldr	r2, [pc, #548]	; (80012f8 <parseCoeffs+0x2d4>)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	4413      	add	r3, r2
 80010d8:	330c      	adds	r3, #12
 80010da:	6019      	str	r1, [r3, #0]
  
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80010dc:	4a84      	ldr	r2, [pc, #528]	; (80012f0 <parseCoeffs+0x2cc>)
 80010de:	4985      	ldr	r1, [pc, #532]	; (80012f4 <parseCoeffs+0x2d0>)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f004 f873 	bl	80051cc <strtok_r>
 80010e6:	60f8      	str	r0, [r7, #12]
  roll.curves[index].d = atof(coeffsToken);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f002 fb5f 	bl	80037ac <atof>
 80010ee:	ec54 3b10 	vmov	r3, r4, d0
 80010f2:	4618      	mov	r0, r3
 80010f4:	4621      	mov	r1, r4
 80010f6:	f7ff fd7f 	bl	8000bf8 <__aeabi_d2f>
 80010fa:	4601      	mov	r1, r0
 80010fc:	4a7f      	ldr	r2, [pc, #508]	; (80012fc <parseCoeffs+0x2d8>)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001106:	4a7a      	ldr	r2, [pc, #488]	; (80012f0 <parseCoeffs+0x2cc>)
 8001108:	497a      	ldr	r1, [pc, #488]	; (80012f4 <parseCoeffs+0x2d0>)
 800110a:	2000      	movs	r0, #0
 800110c:	f004 f85e 	bl	80051cc <strtok_r>
 8001110:	60f8      	str	r0, [r7, #12]
  roll.curves[index].c = atof(coeffsToken);
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f002 fb4a 	bl	80037ac <atof>
 8001118:	ec54 3b10 	vmov	r3, r4, d0
 800111c:	4618      	mov	r0, r3
 800111e:	4621      	mov	r1, r4
 8001120:	f7ff fd6a 	bl	8000bf8 <__aeabi_d2f>
 8001124:	4601      	mov	r1, r0
 8001126:	4a75      	ldr	r2, [pc, #468]	; (80012fc <parseCoeffs+0x2d8>)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	4413      	add	r3, r2
 800112e:	3304      	adds	r3, #4
 8001130:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001132:	4a6f      	ldr	r2, [pc, #444]	; (80012f0 <parseCoeffs+0x2cc>)
 8001134:	496f      	ldr	r1, [pc, #444]	; (80012f4 <parseCoeffs+0x2d0>)
 8001136:	2000      	movs	r0, #0
 8001138:	f004 f848 	bl	80051cc <strtok_r>
 800113c:	60f8      	str	r0, [r7, #12]
  roll.curves[index].b = atof(coeffsToken);
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f002 fb34 	bl	80037ac <atof>
 8001144:	ec54 3b10 	vmov	r3, r4, d0
 8001148:	4618      	mov	r0, r3
 800114a:	4621      	mov	r1, r4
 800114c:	f7ff fd54 	bl	8000bf8 <__aeabi_d2f>
 8001150:	4601      	mov	r1, r0
 8001152:	4a6a      	ldr	r2, [pc, #424]	; (80012fc <parseCoeffs+0x2d8>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	3308      	adds	r3, #8
 800115c:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800115e:	4a64      	ldr	r2, [pc, #400]	; (80012f0 <parseCoeffs+0x2cc>)
 8001160:	4964      	ldr	r1, [pc, #400]	; (80012f4 <parseCoeffs+0x2d0>)
 8001162:	2000      	movs	r0, #0
 8001164:	f004 f832 	bl	80051cc <strtok_r>
 8001168:	60f8      	str	r0, [r7, #12]
  roll.curves[index].a = atof(coeffsToken);
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f002 fb1e 	bl	80037ac <atof>
 8001170:	ec54 3b10 	vmov	r3, r4, d0
 8001174:	4618      	mov	r0, r3
 8001176:	4621      	mov	r1, r4
 8001178:	f7ff fd3e 	bl	8000bf8 <__aeabi_d2f>
 800117c:	4601      	mov	r1, r0
 800117e:	4a5f      	ldr	r2, [pc, #380]	; (80012fc <parseCoeffs+0x2d8>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	330c      	adds	r3, #12
 8001188:	6019      	str	r1, [r3, #0]

  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800118a:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <parseCoeffs+0x2cc>)
 800118c:	4959      	ldr	r1, [pc, #356]	; (80012f4 <parseCoeffs+0x2d0>)
 800118e:	2000      	movs	r0, #0
 8001190:	f004 f81c 	bl	80051cc <strtok_r>
 8001194:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].d = atof(coeffsToken);
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f002 fb08 	bl	80037ac <atof>
 800119c:	ec54 3b10 	vmov	r3, r4, d0
 80011a0:	4618      	mov	r0, r3
 80011a2:	4621      	mov	r1, r4
 80011a4:	f7ff fd28 	bl	8000bf8 <__aeabi_d2f>
 80011a8:	4601      	mov	r1, r0
 80011aa:	4a55      	ldr	r2, [pc, #340]	; (8001300 <parseCoeffs+0x2dc>)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <parseCoeffs+0x2cc>)
 80011b6:	494f      	ldr	r1, [pc, #316]	; (80012f4 <parseCoeffs+0x2d0>)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f004 f807 	bl	80051cc <strtok_r>
 80011be:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].c = atof(coeffsToken);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f002 faf3 	bl	80037ac <atof>
 80011c6:	ec54 3b10 	vmov	r3, r4, d0
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	f7ff fd13 	bl	8000bf8 <__aeabi_d2f>
 80011d2:	4601      	mov	r1, r0
 80011d4:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <parseCoeffs+0x2dc>)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80011e0:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <parseCoeffs+0x2cc>)
 80011e2:	4944      	ldr	r1, [pc, #272]	; (80012f4 <parseCoeffs+0x2d0>)
 80011e4:	2000      	movs	r0, #0
 80011e6:	f003 fff1 	bl	80051cc <strtok_r>
 80011ea:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].b = atof(coeffsToken);
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f002 fadd 	bl	80037ac <atof>
 80011f2:	ec54 3b10 	vmov	r3, r4, d0
 80011f6:	4618      	mov	r0, r3
 80011f8:	4621      	mov	r1, r4
 80011fa:	f7ff fcfd 	bl	8000bf8 <__aeabi_d2f>
 80011fe:	4601      	mov	r1, r0
 8001200:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <parseCoeffs+0x2dc>)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	3308      	adds	r3, #8
 800120a:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800120c:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <parseCoeffs+0x2cc>)
 800120e:	4939      	ldr	r1, [pc, #228]	; (80012f4 <parseCoeffs+0x2d0>)
 8001210:	2000      	movs	r0, #0
 8001212:	f003 ffdb 	bl	80051cc <strtok_r>
 8001216:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].a = atof(coeffsToken);
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f002 fac7 	bl	80037ac <atof>
 800121e:	ec54 3b10 	vmov	r3, r4, d0
 8001222:	4618      	mov	r0, r3
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff fce7 	bl	8000bf8 <__aeabi_d2f>
 800122a:	4601      	mov	r1, r0
 800122c:	4a34      	ldr	r2, [pc, #208]	; (8001300 <parseCoeffs+0x2dc>)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	330c      	adds	r3, #12
 8001236:	6019      	str	r1, [r3, #0]

  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001238:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <parseCoeffs+0x2cc>)
 800123a:	492e      	ldr	r1, [pc, #184]	; (80012f4 <parseCoeffs+0x2d0>)
 800123c:	2000      	movs	r0, #0
 800123e:	f003 ffc5 	bl	80051cc <strtok_r>
 8001242:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].d = atof(coeffsToken);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f002 fab1 	bl	80037ac <atof>
 800124a:	ec54 3b10 	vmov	r3, r4, d0
 800124e:	4618      	mov	r0, r3
 8001250:	4621      	mov	r1, r4
 8001252:	f7ff fcd1 	bl	8000bf8 <__aeabi_d2f>
 8001256:	4601      	mov	r1, r0
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <parseCoeffs+0x2e0>)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4413      	add	r3, r2
 8001260:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <parseCoeffs+0x2cc>)
 8001264:	4923      	ldr	r1, [pc, #140]	; (80012f4 <parseCoeffs+0x2d0>)
 8001266:	2000      	movs	r0, #0
 8001268:	f003 ffb0 	bl	80051cc <strtok_r>
 800126c:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].c = atof(coeffsToken);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f002 fa9c 	bl	80037ac <atof>
 8001274:	ec54 3b10 	vmov	r3, r4, d0
 8001278:	4618      	mov	r0, r3
 800127a:	4621      	mov	r1, r4
 800127c:	f7ff fcbc 	bl	8000bf8 <__aeabi_d2f>
 8001280:	4601      	mov	r1, r0
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <parseCoeffs+0x2e0>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <parseCoeffs+0x2cc>)
 8001290:	4918      	ldr	r1, [pc, #96]	; (80012f4 <parseCoeffs+0x2d0>)
 8001292:	2000      	movs	r0, #0
 8001294:	f003 ff9a 	bl	80051cc <strtok_r>
 8001298:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].b = atof(coeffsToken);
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f002 fa86 	bl	80037ac <atof>
 80012a0:	ec54 3b10 	vmov	r3, r4, d0
 80012a4:	4618      	mov	r0, r3
 80012a6:	4621      	mov	r1, r4
 80012a8:	f7ff fca6 	bl	8000bf8 <__aeabi_d2f>
 80012ac:	4601      	mov	r1, r0
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <parseCoeffs+0x2e0>)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	3308      	adds	r3, #8
 80012b8:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <parseCoeffs+0x2cc>)
 80012bc:	490d      	ldr	r1, [pc, #52]	; (80012f4 <parseCoeffs+0x2d0>)
 80012be:	2000      	movs	r0, #0
 80012c0:	f003 ff84 	bl	80051cc <strtok_r>
 80012c4:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].a = atof(coeffsToken);
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f002 fa70 	bl	80037ac <atof>
 80012cc:	ec54 3b10 	vmov	r3, r4, d0
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	f7ff fc90 	bl	8000bf8 <__aeabi_d2f>
 80012d8:	4601      	mov	r1, r0
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <parseCoeffs+0x2e0>)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	330c      	adds	r3, #12
 80012e4:	6019      	str	r1, [r3, #0]

}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001fc 	.word	0x200001fc
 80012f4:	08007cac 	.word	0x08007cac
 80012f8:	200004e8 	.word	0x200004e8
 80012fc:	200003f8 	.word	0x200003f8
 8001300:	20000308 	.word	0x20000308
 8001304:	20000218 	.word	0x20000218

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130e:	f000 fb27 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001312:	f000 f86d 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001316:	f000 f8f3 	bl	8001500 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800131a:	f000 f8c7 	bl	80014ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t debugMsg[] = "hi\n";
 800131e:	4b29      	ldr	r3, [pc, #164]	; (80013c4 <main+0xbc>)
 8001320:	607b      	str	r3, [r7, #4]

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // flag receive
 8001322:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <main+0xc0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68da      	ldr	r2, [r3, #12]
 8001328:	4b27      	ldr	r3, [pc, #156]	; (80013c8 <main+0xc0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f042 0220 	orr.w	r2, r2, #32
 8001330:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC); // flat Tx_IT
 8001332:	4b25      	ldr	r3, [pc, #148]	; (80013c8 <main+0xc0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <main+0xc0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001340:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_UART_Transmit_IT(&huart2, (uint8_t*)setupInitMsg, sizeof(setupInitMsg));
 8001342:	2213      	movs	r2, #19
 8001344:	4921      	ldr	r1, [pc, #132]	; (80013cc <main+0xc4>)
 8001346:	4820      	ldr	r0, [pc, #128]	; (80013c8 <main+0xc0>)
 8001348:	f001 fb90 	bl	8002a6c <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   HAL_UART_Receive_IT(&huart2, &bufferRx[0], 5);
 800134c:	2205      	movs	r2, #5
 800134e:	4920      	ldr	r1, [pc, #128]	; (80013d0 <main+0xc8>)
 8001350:	481d      	ldr	r0, [pc, #116]	; (80013c8 <main+0xc0>)
 8001352:	f001 fbd0 	bl	8002af6 <HAL_UART_Receive_IT>
	    // Magic pixie dust
	   if (UartReady != SET) {
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <main+0xcc>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b2db      	uxtb	r3, r3
 800135c:	2b01      	cmp	r3, #1
 800135e:	d00f      	beq.n	8001380 <main+0x78>
      /* do shit all... The Part When UART interrupt is not triggered  */
      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001360:	2201      	movs	r2, #1
 8001362:	2120      	movs	r1, #32
 8001364:	481c      	ldr	r0, [pc, #112]	; (80013d8 <main+0xd0>)
 8001366:	f000 fe45 	bl	8001ff4 <HAL_GPIO_WritePin>
      if(newData == TRUE){
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <main+0xd4>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <main+0x70>
        //parseData(commBuff);
        //regensplines
        //interpolate splines 
        // fire to gimbal 
        newData = FALSE;
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <main+0xd4>)
 8001374:	2200      	movs	r2, #0
 8001376:	701a      	strb	r2, [r3, #0]
      }
      
      
      // Find sleep functionality later and replace this here ...
      HAL_Delay(100); // MS
 8001378:	2064      	movs	r0, #100	; 0x64
 800137a:	f000 fb63 	bl	8001a44 <HAL_Delay>
      continue;
 800137e:	e020      	b.n	80013c2 <main+0xba>
	    }
	   else {
       // The part when UART was triggered. 
	        UartReady = RESET;
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <main+0xcc>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
	        printf("command buffer is %s", commBuff);
 8001386:	4916      	ldr	r1, [pc, #88]	; (80013e0 <main+0xd8>)
 8001388:	4816      	ldr	r0, [pc, #88]	; (80013e4 <main+0xdc>)
 800138a:	f003 f883 	bl	8004494 <iprintf>
	        memset(commBuff,32,21);
 800138e:	2215      	movs	r2, #21
 8001390:	2120      	movs	r1, #32
 8001392:	4813      	ldr	r0, [pc, #76]	; (80013e0 <main+0xd8>)
 8001394:	f002 fa38 	bl	8003808 <memset>
	        parseData((byte* )commBuff);
 8001398:	4811      	ldr	r0, [pc, #68]	; (80013e0 <main+0xd8>)
 800139a:	f7ff fdfd 	bl	8000f98 <parseData>
	        printf("area.curves[0].d = 99 should be :%f", area.curves[0].d);
 800139e:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <main+0xe0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f8d8 	bl	8000558 <__aeabi_f2d>
 80013a8:	4603      	mov	r3, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	461a      	mov	r2, r3
 80013ae:	4623      	mov	r3, r4
 80013b0:	480e      	ldr	r0, [pc, #56]	; (80013ec <main+0xe4>)
 80013b2:	f003 f86f 	bl	8004494 <iprintf>
	        memset(commBuff,0,sizeof(commBuff));
 80013b6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80013ba:	2100      	movs	r1, #0
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <main+0xd8>)
 80013be:	f002 fa23 	bl	8003808 <memset>
	   HAL_UART_Receive_IT(&huart2, &bufferRx[0], 5);
 80013c2:	e7c3      	b.n	800134c <main+0x44>
 80013c4:	000a6968 	.word	0x000a6968
 80013c8:	200015b8 	.word	0x200015b8
 80013cc:	08007cb0 	.word	0x08007cb0
 80013d0:	200011d0 	.word	0x200011d0
 80013d4:	20000201 	.word	0x20000201
 80013d8:	40020000 	.word	0x40020000
 80013dc:	20000200 	.word	0x20000200
 80013e0:	200005d8 	.word	0x200005d8
 80013e4:	08007c68 	.word	0x08007c68
 80013e8:	200004e8 	.word	0x200004e8
 80013ec:	08007c80 	.word	0x08007c80

080013f0 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	; 0x50
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	2230      	movs	r2, #48	; 0x30
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f002 fa02 	bl	8003808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <SystemClock_Config+0xb4>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <SystemClock_Config+0xb4>)
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001422:	6413      	str	r3, [r2, #64]	; 0x40
 8001424:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <SystemClock_Config+0xb4>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	4b1c      	ldr	r3, [pc, #112]	; (80014a8 <SystemClock_Config+0xb8>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a1b      	ldr	r2, [pc, #108]	; (80014a8 <SystemClock_Config+0xb8>)
 800143a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b19      	ldr	r3, [pc, #100]	; (80014a8 <SystemClock_Config+0xb8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001450:	2301      	movs	r3, #1
 8001452:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001454:	2310      	movs	r3, #16
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001458:	2300      	movs	r3, #0
 800145a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	f107 0320 	add.w	r3, r7, #32
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fde1 	bl	8002028 <HAL_RCC_OscConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800146c:	f000 f87a 	bl	8001564 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001470:	230f      	movs	r3, #15
 8001472:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	2100      	movs	r1, #0
 800148a:	4618      	mov	r0, r3
 800148c:	f001 f83c 	bl	8002508 <HAL_RCC_ClockConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001496:	f000 f865 	bl	8001564 <Error_Handler>
  }
}
 800149a:	bf00      	nop
 800149c:	3750      	adds	r7, #80	; 0x50
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000

080014ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_USART2_UART_Init+0x50>)
 80014b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014c4:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d0:	4b09      	ldr	r3, [pc, #36]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d2:	220c      	movs	r2, #12
 80014d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014dc:	4b06      	ldr	r3, [pc, #24]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <MX_USART2_UART_Init+0x4c>)
 80014e4:	f001 f9dc 	bl	80028a0 <HAL_UART_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ee:	f000 f839 	bl	8001564 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200015b8 	.word	0x200015b8
 80014fc:	40004400 	.word	0x40004400

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	4b10      	ldr	r3, [pc, #64]	; (800155c <MX_GPIO_Init+0x5c>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	4a0f      	ldr	r2, [pc, #60]	; (800155c <MX_GPIO_Init+0x5c>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6313      	str	r3, [r2, #48]	; 0x30
 8001524:	4b0d      	ldr	r3, [pc, #52]	; (800155c <MX_GPIO_Init+0x5c>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	603b      	str	r3, [r7, #0]
 800152e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001530:	2200      	movs	r2, #0
 8001532:	2120      	movs	r1, #32
 8001534:	480a      	ldr	r0, [pc, #40]	; (8001560 <MX_GPIO_Init+0x60>)
 8001536:	f000 fd5d 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800153a:	2320      	movs	r3, #32
 800153c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4804      	ldr	r0, [pc, #16]	; (8001560 <MX_GPIO_Init+0x60>)
 8001550:	f000 fbce 	bl	8001cf0 <HAL_GPIO_Init>

}
 8001554:	bf00      	nop
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000

08001564 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_MspInit+0x4c>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_MspInit+0x4c>)
 8001584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_MspInit+0x4c>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	603b      	str	r3, [r7, #0]
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_MspInit+0x4c>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <HAL_UART_MspInit+0x94>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d133      	bne.n	800164e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_UART_MspInit+0x98>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ee:	4a1b      	ldr	r2, [pc, #108]	; (800165c <HAL_UART_MspInit+0x98>)
 80015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f4:	6413      	str	r3, [r2, #64]	; 0x40
 80015f6:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_UART_MspInit+0x98>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b15      	ldr	r3, [pc, #84]	; (800165c <HAL_UART_MspInit+0x98>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a14      	ldr	r2, [pc, #80]	; (800165c <HAL_UART_MspInit+0x98>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_UART_MspInit+0x98>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800161e:	230c      	movs	r3, #12
 8001620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800162e:	2307      	movs	r3, #7
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4619      	mov	r1, r3
 8001638:	4809      	ldr	r0, [pc, #36]	; (8001660 <HAL_UART_MspInit+0x9c>)
 800163a:	f000 fb59 	bl	8001cf0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	2026      	movs	r0, #38	; 0x26
 8001644:	f000 fafb 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001648:	2026      	movs	r0, #38	; 0x26
 800164a:	f000 fb14 	bl	8001c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	; 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40004400 	.word	0x40004400
 800165c:	40023800 	.word	0x40023800
 8001660:	40020000 	.word	0x40020000

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001676:	e7fe      	b.n	8001676 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	e7fe      	b.n	800167c <MemManage_Handler+0x4>

0800167e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <BusFault_Handler+0x4>

08001684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <UsageFault_Handler+0x4>

0800168a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a6:	b480      	push	{r7}
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b8:	f000 f9a4 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}

080016c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <USART2_IRQHandler+0x6c>)
 80016c6:	f001 fa6b 	bl	8002ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)bufferRx, 1 );
 80016ca:	2201      	movs	r2, #1
 80016cc:	4918      	ldr	r1, [pc, #96]	; (8001730 <USART2_IRQHandler+0x70>)
 80016ce:	4817      	ldr	r0, [pc, #92]	; (800172c <USART2_IRQHandler+0x6c>)
 80016d0:	f001 fa11 	bl	8002af6 <HAL_UART_Receive_IT>
   // write the bytes to our Command buffer
   commBuff[commBuff_index] = bufferRx[0];
 80016d4:	4b17      	ldr	r3, [pc, #92]	; (8001734 <USART2_IRQHandler+0x74>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a15      	ldr	r2, [pc, #84]	; (8001730 <USART2_IRQHandler+0x70>)
 80016da:	7811      	ldrb	r1, [r2, #0]
 80016dc:	4a16      	ldr	r2, [pc, #88]	; (8001738 <USART2_IRQHandler+0x78>)
 80016de:	54d1      	strb	r1, [r2, r3]
   if (bufferRx[0] == '\r' || bufferRx[0] == '\n')
 80016e0:	4b13      	ldr	r3, [pc, #76]	; (8001730 <USART2_IRQHandler+0x70>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b0d      	cmp	r3, #13
 80016e6:	d003      	beq.n	80016f0 <USART2_IRQHandler+0x30>
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <USART2_IRQHandler+0x70>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b0a      	cmp	r3, #10
 80016ee:	d116      	bne.n	800171e <USART2_IRQHandler+0x5e>
   {
       UartReady = SET;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <USART2_IRQHandler+0x7c>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	701a      	strb	r2, [r3, #0]
       HAL_UART_Transmit(&huart2, (uint8_t*)commBuff, 500, 100);
 80016f6:	2364      	movs	r3, #100	; 0x64
 80016f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80016fc:	490e      	ldr	r1, [pc, #56]	; (8001738 <USART2_IRQHandler+0x78>)
 80016fe:	480b      	ldr	r0, [pc, #44]	; (800172c <USART2_IRQHandler+0x6c>)
 8001700:	f001 f91b 	bl	800293a <HAL_UART_Transmit>
       sent_index=commBuff_index;
 8001704:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <USART2_IRQHandler+0x74>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <USART2_IRQHandler+0x80>)
 800170a:	6013      	str	r3, [r2, #0]
       bufferRx[0] = '\0';
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <USART2_IRQHandler+0x70>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
       commBuff_index = 0;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <USART2_IRQHandler+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
       newData = TRUE;  
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <USART2_IRQHandler+0x84>)
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
   }
   // use normal transmit (not transmit_IT) so we don't
   // get duplicates in the buffer
   // TODO - stop using this dirty hack...
   //HAL_UART_Transmit(&huart2, bufferRx, 5,100);
   commBuff_index++;
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <USART2_IRQHandler+0x74>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	3301      	adds	r3, #1
 8001724:	4a03      	ldr	r2, [pc, #12]	; (8001734 <USART2_IRQHandler+0x74>)
 8001726:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200015b8 	.word	0x200015b8
 8001730:	200011d0 	.word	0x200011d0
 8001734:	20000208 	.word	0x20000208
 8001738:	200005d8 	.word	0x200005d8
 800173c:	20000201 	.word	0x20000201
 8001740:	20000204 	.word	0x20000204
 8001744:	20000200 	.word	0x20000200

08001748 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <ITM_SendChar+0x48>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <ITM_SendChar+0x48>)
 8001758:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800175c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800175e:	4b0d      	ldr	r3, [pc, #52]	; (8001794 <ITM_SendChar+0x4c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a0c      	ldr	r2, [pc, #48]	; (8001794 <ITM_SendChar+0x4c>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800176a:	bf00      	nop
 800176c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	2b00      	cmp	r3, #0
 8001778:	d0f8      	beq.n	800176c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800177a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	6013      	str	r3, [r2, #0]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000edfc 	.word	0xe000edfc
 8001794:	e0000e00 	.word	0xe0000e00

08001798 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	e00a      	b.n	80017c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017aa:	f3af 8000 	nop.w
 80017ae:	4601      	mov	r1, r0
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	60ba      	str	r2, [r7, #8]
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbf0      	blt.n	80017aa <_read+0x12>
	}

return len;
 80017c8:	687b      	ldr	r3, [r7, #4]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e009      	b.n	80017f8 <_write+0x26>
	{
		/*__io_putchar(*ptr++);*/
		ITM_SendChar(*ptr++);
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	60ba      	str	r2, [r7, #8]
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ffab 	bl	8001748 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf1      	blt.n	80017e4 <_write+0x12>
	}
	return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_close>:

int _close(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001832:	605a      	str	r2, [r3, #4]
	return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_isatty>:

int _isatty(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	return 1;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
	return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <_sbrk>:
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	4a14      	ldr	r2, [pc, #80]	; (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	; (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
 80018a4:	f001 ff86 	bl	80037b4 <__errno>
 80018a8:	4602      	mov	r2, r0
 80018aa:	230c      	movs	r3, #12
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	; (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20020000 	.word	0x20020000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	2000020c 	.word	0x2000020c
 80018dc:	20001600 	.word	0x20001600

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <SystemInit+0x28>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <SystemInit+0x28>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SystemInit+0x28>)
 80018f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018fa:	609a      	str	r2, [r3, #8]
#endif
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopFillZerobss+0x14>
 8001910:	2100      	movs	r1, #0
 8001912:	e003      	b.n	800191c <LoopCopyDataInit>

08001914 <CopyDataInit>:
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <LoopFillZerobss+0x18>)
 8001916:	585b      	ldr	r3, [r3, r1]
 8001918:	5043      	str	r3, [r0, r1]
 800191a:	3104      	adds	r1, #4

0800191c <LoopCopyDataInit>:
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <LoopFillZerobss+0x1c>)
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <LoopFillZerobss+0x20>)
 8001920:	1842      	adds	r2, r0, r1
 8001922:	429a      	cmp	r2, r3
 8001924:	d3f6      	bcc.n	8001914 <CopyDataInit>
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <LoopFillZerobss+0x24>)
 8001928:	e002      	b.n	8001930 <LoopFillZerobss>

0800192a <FillZerobss>:
 800192a:	2300      	movs	r3, #0
 800192c:	f842 3b04 	str.w	r3, [r2], #4

08001930 <LoopFillZerobss>:
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <LoopFillZerobss+0x28>)
 8001932:	429a      	cmp	r2, r3
 8001934:	d3f9      	bcc.n	800192a <FillZerobss>
 8001936:	f7ff ffd3 	bl	80018e0 <SystemInit>
 800193a:	f001 ff41 	bl	80037c0 <__libc_init_array>
 800193e:	f7ff fce3 	bl	8001308 <main>
 8001942:	4770      	bx	lr
 8001944:	20020000 	.word	0x20020000
 8001948:	08008010 	.word	0x08008010
 800194c:	20000000 	.word	0x20000000
 8001950:	200001dc 	.word	0x200001dc
 8001954:	200001dc 	.word	0x200001dc
 8001958:	20001600 	.word	0x20001600

0800195c <ADC_IRQHandler>:
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f94d 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fdee 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f965 	bl	8001c92 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f000 f92d 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	200015f8 	.word	0x200015f8

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200015f8 	.word	0x200015f8

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_Delay+0x40>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000008 	.word	0x20000008

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d004      	beq.n	8001cc8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2280      	movs	r2, #128	; 0x80
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e00c      	b.n	8001ce2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2205      	movs	r2, #5
 8001ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f022 0201 	bic.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e159      	b.n	8001fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8148 	bne.w	8001fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d00b      	beq.n	8001d4a <HAL_GPIO_Init+0x5a>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d3e:	2b11      	cmp	r3, #17
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b12      	cmp	r3, #18
 8001d48:	d130      	bne.n	8001dac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68da      	ldr	r2, [r3, #12]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d80:	2201      	movs	r2, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 0201 	and.w	r2, r3, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0xfc>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b12      	cmp	r3, #18
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a2 	beq.w	8001fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_GPIO_Init+0x2e4>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7e:	4a55      	ldr	r2, [pc, #340]	; (8001fd4 <HAL_GPIO_Init+0x2e4>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e84:	6453      	str	r3, [r2, #68]	; 0x44
 8001e86:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_GPIO_Init+0x2e4>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e92:	4a51      	ldr	r2, [pc, #324]	; (8001fd8 <HAL_GPIO_Init+0x2e8>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a48      	ldr	r2, [pc, #288]	; (8001fdc <HAL_GPIO_Init+0x2ec>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x202>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a47      	ldr	r2, [pc, #284]	; (8001fe0 <HAL_GPIO_Init+0x2f0>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x1fe>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a46      	ldr	r2, [pc, #280]	; (8001fe4 <HAL_GPIO_Init+0x2f4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x1fa>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a45      	ldr	r2, [pc, #276]	; (8001fe8 <HAL_GPIO_Init+0x2f8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x1f6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a44      	ldr	r2, [pc, #272]	; (8001fec <HAL_GPIO_Init+0x2fc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x1f2>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4934      	ldr	r1, [pc, #208]	; (8001fd8 <HAL_GPIO_Init+0x2e8>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f12:	4b37      	ldr	r3, [pc, #220]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f36:	4a2e      	ldr	r2, [pc, #184]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b17      	ldr	r3, [pc, #92]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a0e      	ldr	r2, [pc, #56]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f aea2 	bls.w	8001d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	3724      	adds	r7, #36	; 0x24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
 8002000:	4613      	mov	r3, r2
 8002002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002010:	e003      	b.n	800201a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	041a      	lsls	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b086      	sub	sp, #24
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d101      	bne.n	800203a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e25b      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d075      	beq.n	8002132 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002046:	4ba3      	ldr	r3, [pc, #652]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d00c      	beq.n	800206c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002052:	4ba0      	ldr	r3, [pc, #640]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800205a:	2b08      	cmp	r3, #8
 800205c:	d112      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800205e:	4b9d      	ldr	r3, [pc, #628]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002066:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206a:	d10b      	bne.n	8002084 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	4b99      	ldr	r3, [pc, #612]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d05b      	beq.n	8002130 <HAL_RCC_OscConfig+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d157      	bne.n	8002130 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e236      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800208c:	d106      	bne.n	800209c <HAL_RCC_OscConfig+0x74>
 800208e:	4b91      	ldr	r3, [pc, #580]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a90      	ldr	r2, [pc, #576]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e01d      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020a4:	d10c      	bne.n	80020c0 <HAL_RCC_OscConfig+0x98>
 80020a6:	4b8b      	ldr	r3, [pc, #556]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a8a      	ldr	r2, [pc, #552]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	4b88      	ldr	r3, [pc, #544]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a87      	ldr	r2, [pc, #540]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e00b      	b.n	80020d8 <HAL_RCC_OscConfig+0xb0>
 80020c0:	4b84      	ldr	r3, [pc, #528]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a83      	ldr	r2, [pc, #524]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020ca:	6013      	str	r3, [r2, #0]
 80020cc:	4b81      	ldr	r3, [pc, #516]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a80      	ldr	r2, [pc, #512]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d013      	beq.n	8002108 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7ff fca4 	bl	8001a2c <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020e8:	f7ff fca0 	bl	8001a2c <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b64      	cmp	r3, #100	; 0x64
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e1fb      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b76      	ldr	r3, [pc, #472]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0xc0>
 8002106:	e014      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002108:	f7ff fc90 	bl	8001a2c <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fc8c 	bl	8001a2c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e1e7      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002122:	4b6c      	ldr	r3, [pc, #432]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_OscConfig+0xe8>
 800212e:	e000      	b.n	8002132 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002130:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d063      	beq.n	8002206 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800213e:	4b65      	ldr	r3, [pc, #404]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 030c 	and.w	r3, r3, #12
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00b      	beq.n	8002162 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214a:	4b62      	ldr	r3, [pc, #392]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002152:	2b08      	cmp	r3, #8
 8002154:	d11c      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002156:	4b5f      	ldr	r3, [pc, #380]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d116      	bne.n	8002190 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002162:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e1bb      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217a:	4b56      	ldr	r3, [pc, #344]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4952      	ldr	r1, [pc, #328]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800218e:	e03a      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d020      	beq.n	80021da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002198:	4b4f      	ldr	r3, [pc, #316]	; (80022d8 <HAL_RCC_OscConfig+0x2b0>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7ff fc45 	bl	8001a2c <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021a6:	f7ff fc41 	bl	8001a2c <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e19c      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 0302 	and.w	r3, r3, #2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c4:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4940      	ldr	r1, [pc, #256]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	600b      	str	r3, [r1, #0]
 80021d8:	e015      	b.n	8002206 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021da:	4b3f      	ldr	r3, [pc, #252]	; (80022d8 <HAL_RCC_OscConfig+0x2b0>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff fc24 	bl	8001a2c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e8:	f7ff fc20 	bl	8001a2c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e17b      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fa:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d030      	beq.n	8002274 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d016      	beq.n	8002248 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b30      	ldr	r3, [pc, #192]	; (80022dc <HAL_RCC_OscConfig+0x2b4>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff fc04 	bl	8001a2c <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff fc00 	bl	8001a2c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e15b      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223a:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d0f0      	beq.n	8002228 <HAL_RCC_OscConfig+0x200>
 8002246:	e015      	b.n	8002274 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x2b4>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800224e:	f7ff fbed 	bl	8001a2c <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002256:	f7ff fbe9 	bl	8001a2c <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e144      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 800226a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80a0 	beq.w	80023c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10f      	bne.n	80022b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	6413      	str	r3, [r2, #64]	; 0x40
 80022a2:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <HAL_RCC_OscConfig+0x2ac>)
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_OscConfig+0x2b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d121      	bne.n	8002302 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_RCC_OscConfig+0x2b8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_RCC_OscConfig+0x2b8>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fbaf 	bl	8001a2c <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d0:	e011      	b.n	80022f6 <HAL_RCC_OscConfig+0x2ce>
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	42470000 	.word	0x42470000
 80022dc:	42470e80 	.word	0x42470e80
 80022e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e4:	f7ff fba2 	bl	8001a2c <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e0fd      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f6:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCC_OscConfig+0x4d4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d106      	bne.n	8002318 <HAL_RCC_OscConfig+0x2f0>
 800230a:	4b7d      	ldr	r3, [pc, #500]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 800230c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800230e:	4a7c      	ldr	r2, [pc, #496]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6713      	str	r3, [r2, #112]	; 0x70
 8002316:	e01c      	b.n	8002352 <HAL_RCC_OscConfig+0x32a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b05      	cmp	r3, #5
 800231e:	d10c      	bne.n	800233a <HAL_RCC_OscConfig+0x312>
 8002320:	4b77      	ldr	r3, [pc, #476]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002324:	4a76      	ldr	r2, [pc, #472]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002326:	f043 0304 	orr.w	r3, r3, #4
 800232a:	6713      	str	r3, [r2, #112]	; 0x70
 800232c:	4b74      	ldr	r3, [pc, #464]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	4a73      	ldr	r2, [pc, #460]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6713      	str	r3, [r2, #112]	; 0x70
 8002338:	e00b      	b.n	8002352 <HAL_RCC_OscConfig+0x32a>
 800233a:	4b71      	ldr	r3, [pc, #452]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 800233c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233e:	4a70      	ldr	r2, [pc, #448]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6713      	str	r3, [r2, #112]	; 0x70
 8002346:	4b6e      	ldr	r3, [pc, #440]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800234a:	4a6d      	ldr	r2, [pc, #436]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d015      	beq.n	8002386 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235a:	f7ff fb67 	bl	8001a2c <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	e00a      	b.n	8002378 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002362:	f7ff fb63 	bl	8001a2c <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0bc      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	4b61      	ldr	r3, [pc, #388]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 800237a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0ee      	beq.n	8002362 <HAL_RCC_OscConfig+0x33a>
 8002384:	e014      	b.n	80023b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002386:	f7ff fb51 	bl	8001a2c <HAL_GetTick>
 800238a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	e00a      	b.n	80023a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7ff fb4d 	bl	8001a2c <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	; 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e0a6      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a4:	4b56      	ldr	r3, [pc, #344]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 80023a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1ee      	bne.n	800238e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b0:	7dfb      	ldrb	r3, [r7, #23]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d105      	bne.n	80023c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b6:	4b52      	ldr	r3, [pc, #328]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	4a51      	ldr	r2, [pc, #324]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 8092 	beq.w	80024f0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d05c      	beq.n	8002492 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d141      	bne.n	8002464 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023e0:	4b48      	ldr	r3, [pc, #288]	; (8002504 <HAL_RCC_OscConfig+0x4dc>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fb21 	bl	8001a2c <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ee:	f7ff fb1d 	bl	8001a2c <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e078      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002400:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69da      	ldr	r2, [r3, #28]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	019b      	lsls	r3, r3, #6
 800241c:	431a      	orrs	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002422:	085b      	lsrs	r3, r3, #1
 8002424:	3b01      	subs	r3, #1
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	4933      	ldr	r1, [pc, #204]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002432:	4313      	orrs	r3, r2
 8002434:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002436:	4b33      	ldr	r3, [pc, #204]	; (8002504 <HAL_RCC_OscConfig+0x4dc>)
 8002438:	2201      	movs	r2, #1
 800243a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243c:	f7ff faf6 	bl	8001a2c <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff faf2 	bl	8001a2c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e04d      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002456:	4b2a      	ldr	r3, [pc, #168]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x41c>
 8002462:	e045      	b.n	80024f0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b27      	ldr	r3, [pc, #156]	; (8002504 <HAL_RCC_OscConfig+0x4dc>)
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7ff fadf 	bl	8001a2c <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002472:	f7ff fadb 	bl	8001a2c <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e036      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002484:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1f0      	bne.n	8002472 <HAL_RCC_OscConfig+0x44a>
 8002490:	e02e      	b.n	80024f0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e029      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <HAL_RCC_OscConfig+0x4d8>)
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d11c      	bne.n	80024ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024bc:	429a      	cmp	r2, r3
 80024be:	d115      	bne.n	80024ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024c0:	68fa      	ldr	r2, [r7, #12]
 80024c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024c6:	4013      	ands	r3, r2
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d10d      	bne.n	80024ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80024da:	429a      	cmp	r2, r3
 80024dc:	d106      	bne.n	80024ec <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40007000 	.word	0x40007000
 8002500:	40023800 	.word	0x40023800
 8002504:	42470060 	.word	0x42470060

08002508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e0cc      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b68      	ldr	r3, [pc, #416]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d90c      	bls.n	8002544 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b65      	ldr	r3, [pc, #404]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002532:	4b63      	ldr	r3, [pc, #396]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	429a      	cmp	r2, r3
 800253e:	d001      	beq.n	8002544 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0b8      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d020      	beq.n	8002592 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	2b00      	cmp	r3, #0
 800255a:	d005      	beq.n	8002568 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800255c:	4b59      	ldr	r3, [pc, #356]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	4a58      	ldr	r2, [pc, #352]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002562:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002566:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0308 	and.w	r3, r3, #8
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002574:	4b53      	ldr	r3, [pc, #332]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a52      	ldr	r2, [pc, #328]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800257e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002580:	4b50      	ldr	r3, [pc, #320]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	494d      	ldr	r1, [pc, #308]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	2b00      	cmp	r3, #0
 800259c:	d044      	beq.n	8002628 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d119      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e07f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025c2:	2b03      	cmp	r3, #3
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025c6:	4b3f      	ldr	r3, [pc, #252]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e06f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d6:	4b3b      	ldr	r3, [pc, #236]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e067      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025e6:	4b37      	ldr	r3, [pc, #220]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f023 0203 	bic.w	r2, r3, #3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4934      	ldr	r1, [pc, #208]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f8:	f7ff fa18 	bl	8001a2c <HAL_GetTick>
 80025fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fe:	e00a      	b.n	8002616 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002600:	f7ff fa14 	bl	8001a2c <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	f241 3288 	movw	r2, #5000	; 0x1388
 800260e:	4293      	cmp	r3, r2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e04f      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 020c 	and.w	r2, r3, #12
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	429a      	cmp	r2, r3
 8002626:	d1eb      	bne.n	8002600 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002628:	4b25      	ldr	r3, [pc, #148]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d20c      	bcs.n	8002650 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002636:	4b22      	ldr	r3, [pc, #136]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCC_ClockConfig+0x1b8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d001      	beq.n	8002650 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e032      	b.n	80026b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d008      	beq.n	800266e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4916      	ldr	r1, [pc, #88]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800267a:	4b12      	ldr	r3, [pc, #72]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	490e      	ldr	r1, [pc, #56]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 800268a:	4313      	orrs	r3, r2
 800268c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800268e:	f000 f821 	bl	80026d4 <HAL_RCC_GetSysClockFreq>
 8002692:	4601      	mov	r1, r0
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_RCC_ClockConfig+0x1bc>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 030f 	and.w	r3, r3, #15
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_ClockConfig+0x1c0>)
 80026a0:	5cd3      	ldrb	r3, [r2, r3]
 80026a2:	fa21 f303 	lsr.w	r3, r1, r3
 80026a6:	4a09      	ldr	r2, [pc, #36]	; (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff f978 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40023c00 	.word	0x40023c00
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08007cc4 	.word	0x08007cc4
 80026cc:	20000000 	.word	0x20000000
 80026d0:	20000004 	.word	0x20000004

080026d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
 80026de:	2300      	movs	r3, #0
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	2300      	movs	r3, #0
 80026e4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ea:	4b50      	ldr	r3, [pc, #320]	; (800282c <HAL_RCC_GetSysClockFreq+0x158>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b04      	cmp	r3, #4
 80026f4:	d007      	beq.n	8002706 <HAL_RCC_GetSysClockFreq+0x32>
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d008      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x38>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 808d 	bne.w	800281a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002700:	4b4b      	ldr	r3, [pc, #300]	; (8002830 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002702:	60bb      	str	r3, [r7, #8]
       break;
 8002704:	e08c      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002706:	4b4b      	ldr	r3, [pc, #300]	; (8002834 <HAL_RCC_GetSysClockFreq+0x160>)
 8002708:	60bb      	str	r3, [r7, #8]
      break;
 800270a:	e089      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800270c:	4b47      	ldr	r3, [pc, #284]	; (800282c <HAL_RCC_GetSysClockFreq+0x158>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002714:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002716:	4b45      	ldr	r3, [pc, #276]	; (800282c <HAL_RCC_GetSysClockFreq+0x158>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d023      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002722:	4b42      	ldr	r3, [pc, #264]	; (800282c <HAL_RCC_GetSysClockFreq+0x158>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	099b      	lsrs	r3, r3, #6
 8002728:	f04f 0400 	mov.w	r4, #0
 800272c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	ea03 0501 	and.w	r5, r3, r1
 8002738:	ea04 0602 	and.w	r6, r4, r2
 800273c:	4a3d      	ldr	r2, [pc, #244]	; (8002834 <HAL_RCC_GetSysClockFreq+0x160>)
 800273e:	fb02 f106 	mul.w	r1, r2, r6
 8002742:	2200      	movs	r2, #0
 8002744:	fb02 f205 	mul.w	r2, r2, r5
 8002748:	440a      	add	r2, r1
 800274a:	493a      	ldr	r1, [pc, #232]	; (8002834 <HAL_RCC_GetSysClockFreq+0x160>)
 800274c:	fba5 0101 	umull	r0, r1, r5, r1
 8002750:	1853      	adds	r3, r2, r1
 8002752:	4619      	mov	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f04f 0400 	mov.w	r4, #0
 800275a:	461a      	mov	r2, r3
 800275c:	4623      	mov	r3, r4
 800275e:	f7fe fa9b 	bl	8000c98 <__aeabi_uldivmod>
 8002762:	4603      	mov	r3, r0
 8002764:	460c      	mov	r4, r1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e049      	b.n	80027fe <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276a:	4b30      	ldr	r3, [pc, #192]	; (800282c <HAL_RCC_GetSysClockFreq+0x158>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	f04f 0400 	mov.w	r4, #0
 8002774:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	ea03 0501 	and.w	r5, r3, r1
 8002780:	ea04 0602 	and.w	r6, r4, r2
 8002784:	4629      	mov	r1, r5
 8002786:	4632      	mov	r2, r6
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	f04f 0400 	mov.w	r4, #0
 8002790:	0154      	lsls	r4, r2, #5
 8002792:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002796:	014b      	lsls	r3, r1, #5
 8002798:	4619      	mov	r1, r3
 800279a:	4622      	mov	r2, r4
 800279c:	1b49      	subs	r1, r1, r5
 800279e:	eb62 0206 	sbc.w	r2, r2, r6
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	0194      	lsls	r4, r2, #6
 80027ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027b0:	018b      	lsls	r3, r1, #6
 80027b2:	1a5b      	subs	r3, r3, r1
 80027b4:	eb64 0402 	sbc.w	r4, r4, r2
 80027b8:	f04f 0100 	mov.w	r1, #0
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	00e2      	lsls	r2, r4, #3
 80027c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027c6:	00d9      	lsls	r1, r3, #3
 80027c8:	460b      	mov	r3, r1
 80027ca:	4614      	mov	r4, r2
 80027cc:	195b      	adds	r3, r3, r5
 80027ce:	eb44 0406 	adc.w	r4, r4, r6
 80027d2:	f04f 0100 	mov.w	r1, #0
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	02a2      	lsls	r2, r4, #10
 80027dc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027e0:	0299      	lsls	r1, r3, #10
 80027e2:	460b      	mov	r3, r1
 80027e4:	4614      	mov	r4, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	4621      	mov	r1, r4
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f04f 0400 	mov.w	r4, #0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4623      	mov	r3, r4
 80027f4:	f7fe fa50 	bl	8000c98 <__aeabi_uldivmod>
 80027f8:	4603      	mov	r3, r0
 80027fa:	460c      	mov	r4, r1
 80027fc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_RCC_GetSysClockFreq+0x158>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	3301      	adds	r3, #1
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800280e:	68fa      	ldr	r2, [r7, #12]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	60bb      	str	r3, [r7, #8]
      break;
 8002818:	e002      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetSysClockFreq+0x15c>)
 800281c:	60bb      	str	r3, [r7, #8]
      break;
 800281e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002820:	68bb      	ldr	r3, [r7, #8]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	00f42400 	.word	0x00f42400
 8002834:	017d7840 	.word	0x017d7840

08002838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_RCC_GetHCLKFreq+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	20000000 	.word	0x20000000

08002850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002854:	f7ff fff0 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002858:	4601      	mov	r1, r0
 800285a:	4b05      	ldr	r3, [pc, #20]	; (8002870 <HAL_RCC_GetPCLK1Freq+0x20>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	0a9b      	lsrs	r3, r3, #10
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	4a03      	ldr	r2, [pc, #12]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002866:	5cd3      	ldrb	r3, [r2, r3]
 8002868:	fa21 f303 	lsr.w	r3, r1, r3
}
 800286c:	4618      	mov	r0, r3
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40023800 	.word	0x40023800
 8002874:	08007cd4 	.word	0x08007cd4

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800287c:	f7ff ffdc 	bl	8002838 <HAL_RCC_GetHCLKFreq>
 8002880:	4601      	mov	r1, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	0b5b      	lsrs	r3, r3, #13
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4a03      	ldr	r2, [pc, #12]	; (800289c <HAL_RCC_GetPCLK2Freq+0x24>)
 800288e:	5cd3      	ldrb	r3, [r2, r3]
 8002890:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40023800 	.word	0x40023800
 800289c:	08007cd4 	.word	0x08007cd4

080028a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e03f      	b.n	8002932 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d106      	bne.n	80028cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f7fe fe7c 	bl	80015c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2224      	movs	r2, #36	; 0x24
 80028d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 fbe5 	bl	80030b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691a      	ldr	r2, [r3, #16]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	695a      	ldr	r2, [r3, #20]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002908:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002918:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2220      	movs	r2, #32
 8002924:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b088      	sub	sp, #32
 800293e:	af02      	add	r7, sp, #8
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4613      	mov	r3, r2
 8002948:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b20      	cmp	r3, #32
 8002958:	f040 8083 	bne.w	8002a62 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_UART_Transmit+0x2e>
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e07b      	b.n	8002a64 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_UART_Transmit+0x40>
 8002976:	2302      	movs	r3, #2
 8002978:	e074      	b.n	8002a64 <HAL_UART_Transmit+0x12a>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2221      	movs	r2, #33	; 0x21
 800298c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002990:	f7ff f84c 	bl	8001a2c <HAL_GetTick>
 8002994:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	88fa      	ldrh	r2, [r7, #6]
 80029a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80029aa:	e042      	b.n	8002a32 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	3b01      	subs	r3, #1
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c2:	d122      	bne.n	8002a0a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2200      	movs	r2, #0
 80029cc:	2180      	movs	r1, #128	; 0x80
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 fa04 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e042      	b.n	8002a64 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	881b      	ldrh	r3, [r3, #0]
 80029e6:	461a      	mov	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d103      	bne.n	8002a02 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	3302      	adds	r3, #2
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	e017      	b.n	8002a32 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	3301      	adds	r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	e013      	b.n	8002a32 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	2200      	movs	r2, #0
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f9e1 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e01f      	b.n	8002a64 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	60ba      	str	r2, [r7, #8]
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1b7      	bne.n	80029ac <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2200      	movs	r2, #0
 8002a44:	2140      	movs	r1, #64	; 0x40
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f9c8 	bl	8002ddc <UART_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e006      	b.n	8002a64 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	e000      	b.n	8002a64 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002a62:	2302      	movs	r3, #2
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	d130      	bne.n	8002ae8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d002      	beq.n	8002a92 <HAL_UART_Transmit_IT+0x26>
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d101      	bne.n	8002a96 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e029      	b.n	8002aea <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_UART_Transmit_IT+0x38>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e022      	b.n	8002aea <HAL_UART_Transmit_IT+0x7e>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	88fa      	ldrh	r2, [r7, #6]
 8002ab6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	88fa      	ldrh	r2, [r7, #6]
 8002abc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2221      	movs	r2, #33	; 0x21
 8002ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ae2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	e000      	b.n	8002aea <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002ae8:	2302      	movs	r3, #2
  }
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002af6:	b480      	push	{r7}
 8002af8:	b085      	sub	sp, #20
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b20      	cmp	r3, #32
 8002b0e:	d140      	bne.n	8002b92 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_Receive_IT+0x26>
 8002b16:	88fb      	ldrh	r3, [r7, #6]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e039      	b.n	8002b94 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_UART_Receive_IT+0x38>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e032      	b.n	8002b94 <HAL_UART_Receive_IT+0x9e>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	88fa      	ldrh	r2, [r7, #6]
 8002b40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	88fa      	ldrh	r2, [r7, #6]
 8002b46:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2222      	movs	r2, #34	; 0x22
 8002b52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b6c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695a      	ldr	r2, [r3, #20]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0201 	orr.w	r2, r2, #1
 8002b7c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	68da      	ldr	r2, [r3, #12]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0220 	orr.w	r2, r2, #32
 8002b8c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	e000      	b.n	8002b94 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002b92:	2302      	movs	r3, #2
  }
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10d      	bne.n	8002bf2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x52>
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f9e0 	bl	8002fb0 <UART_Receive_IT>
      return;
 8002bf0:	e0d1      	b.n	8002d96 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f000 80b0 	beq.w	8002d5a <HAL_UART_IRQHandler+0x1ba>
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d105      	bne.n	8002c10 <HAL_UART_IRQHandler+0x70>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 80a5 	beq.w	8002d5a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <HAL_UART_IRQHandler+0x90>
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c28:	f043 0201 	orr.w	r2, r3, #1
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f003 0304 	and.w	r3, r3, #4
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00a      	beq.n	8002c50 <HAL_UART_IRQHandler+0xb0>
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	f043 0202 	orr.w	r2, r3, #2
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0302 	and.w	r3, r3, #2
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_UART_IRQHandler+0xd0>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	f043 0204 	orr.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00f      	beq.n	8002c9a <HAL_UART_IRQHandler+0xfa>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d104      	bne.n	8002c8e <HAL_UART_IRQHandler+0xee>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c92:	f043 0208 	orr.w	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d078      	beq.n	8002d94 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0320 	and.w	r3, r3, #32
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_UART_IRQHandler+0x11c>
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 f97a 	bl	8002fb0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	bf0c      	ite	eq
 8002cca:	2301      	moveq	r3, #1
 8002ccc:	2300      	movne	r3, #0
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_UART_IRQHandler+0x144>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d031      	beq.n	8002d48 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f8c3 	bl	8002e70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cf4:	2b40      	cmp	r3, #64	; 0x40
 8002cf6:	d123      	bne.n	8002d40 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d06:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d013      	beq.n	8002d38 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	4a21      	ldr	r2, [pc, #132]	; (8002d9c <HAL_UART_IRQHandler+0x1fc>)
 8002d16:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe ffc4 	bl	8001caa <HAL_DMA_Abort_IT>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d016      	beq.n	8002d56 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d32:	4610      	mov	r0, r2
 8002d34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	e00e      	b.n	8002d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f845 	bl	8002dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d3e:	e00a      	b.n	8002d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f841 	bl	8002dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d46:	e006      	b.n	8002d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f83d 	bl	8002dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002d54:	e01e      	b.n	8002d94 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d56:	bf00      	nop
    return;
 8002d58:	e01c      	b.n	8002d94 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1d6>
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d003      	beq.n	8002d76 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f000 f8b0 	bl	8002ed4 <UART_Transmit_IT>
    return;
 8002d74:	e00f      	b.n	8002d96 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_UART_IRQHandler+0x1f6>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f8f8 	bl	8002f80 <UART_EndTransmit_IT>
    return;
 8002d90:	bf00      	nop
 8002d92:	e000      	b.n	8002d96 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002d94:	bf00      	nop
  }
}
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	08002ead 	.word	0x08002ead

08002da0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dec:	e02c      	b.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d028      	beq.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8002dfc:	f7fe fe16 	bl	8001a2c <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d21d      	bcs.n	8002e48 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e1a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695a      	ldr	r2, [r3, #20]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e00f      	b.n	8002e68 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	4013      	ands	r3, r2
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	461a      	mov	r2, r3
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d0c3      	beq.n	8002dee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e86:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 0201 	bic.w	r2, r2, #1
 8002e96:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff ff7e 	bl	8002dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002ecc:	bf00      	nop
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b21      	cmp	r3, #33	; 0x21
 8002ee6:	d144      	bne.n	8002f72 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef0:	d11a      	bne.n	8002f28 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f06:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d105      	bne.n	8002f1c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	1c9a      	adds	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	621a      	str	r2, [r3, #32]
 8002f1a:	e00e      	b.n	8002f3a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	621a      	str	r2, [r3, #32]
 8002f26:	e008      	b.n	8002f3a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	1c59      	adds	r1, r3, #1
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6211      	str	r1, [r2, #32]
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	4619      	mov	r1, r3
 8002f48:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68da      	ldr	r2, [r3, #12]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f96:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff fefd 	bl	8002da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b22      	cmp	r3, #34	; 0x22
 8002fc2:	d171      	bne.n	80030a8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fcc:	d123      	bne.n	8003016 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10e      	bne.n	8002ffa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	1c9a      	adds	r2, r3, #2
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff8:	e029      	b.n	800304e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	b29b      	uxth	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
 8003014:	e01b      	b.n	800304e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6858      	ldr	r0, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	1c59      	adds	r1, r3, #1
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	6291      	str	r1, [r2, #40]	; 0x28
 800302e:	b2c2      	uxtb	r2, r0
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e00c      	b.n	800304e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	b2da      	uxtb	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	1c58      	adds	r0, r3, #1
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	6288      	str	r0, [r1, #40]	; 0x28
 8003046:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003052:	b29b      	uxth	r3, r3
 8003054:	3b01      	subs	r3, #1
 8003056:	b29b      	uxth	r3, r3
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4619      	mov	r1, r3
 800305c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800305e:	2b00      	cmp	r3, #0
 8003060:	d120      	bne.n	80030a4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0220 	bic.w	r2, r2, #32
 8003070:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003080:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff fe8a 	bl	8002db4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80030a0:	2300      	movs	r3, #0
 80030a2:	e002      	b.n	80030aa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	e000      	b.n	80030aa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80030a8:	2302      	movs	r3, #2
  }
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
	...

080030b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b8:	b085      	sub	sp, #20
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	691b      	ldr	r3, [r3, #16]
 80030c4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030f6:	f023 030c 	bic.w	r3, r3, #12
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	68f9      	ldr	r1, [r7, #12]
 8003100:	430b      	orrs	r3, r1
 8003102:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003122:	f040 818b 	bne.w	800343c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4ac1      	ldr	r2, [pc, #772]	; (8003430 <UART_SetConfig+0x37c>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d005      	beq.n	800313c <UART_SetConfig+0x88>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4abf      	ldr	r2, [pc, #764]	; (8003434 <UART_SetConfig+0x380>)
 8003136:	4293      	cmp	r3, r2
 8003138:	f040 80bd 	bne.w	80032b6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800313c:	f7ff fb9c 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003140:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	461d      	mov	r5, r3
 8003146:	f04f 0600 	mov.w	r6, #0
 800314a:	46a8      	mov	r8, r5
 800314c:	46b1      	mov	r9, r6
 800314e:	eb18 0308 	adds.w	r3, r8, r8
 8003152:	eb49 0409 	adc.w	r4, r9, r9
 8003156:	4698      	mov	r8, r3
 8003158:	46a1      	mov	r9, r4
 800315a:	eb18 0805 	adds.w	r8, r8, r5
 800315e:	eb49 0906 	adc.w	r9, r9, r6
 8003162:	f04f 0100 	mov.w	r1, #0
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800316e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003172:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003176:	4688      	mov	r8, r1
 8003178:	4691      	mov	r9, r2
 800317a:	eb18 0005 	adds.w	r0, r8, r5
 800317e:	eb49 0106 	adc.w	r1, r9, r6
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	461d      	mov	r5, r3
 8003188:	f04f 0600 	mov.w	r6, #0
 800318c:	196b      	adds	r3, r5, r5
 800318e:	eb46 0406 	adc.w	r4, r6, r6
 8003192:	461a      	mov	r2, r3
 8003194:	4623      	mov	r3, r4
 8003196:	f7fd fd7f 	bl	8000c98 <__aeabi_uldivmod>
 800319a:	4603      	mov	r3, r0
 800319c:	460c      	mov	r4, r1
 800319e:	461a      	mov	r2, r3
 80031a0:	4ba5      	ldr	r3, [pc, #660]	; (8003438 <UART_SetConfig+0x384>)
 80031a2:	fba3 2302 	umull	r2, r3, r3, r2
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	461d      	mov	r5, r3
 80031b0:	f04f 0600 	mov.w	r6, #0
 80031b4:	46a9      	mov	r9, r5
 80031b6:	46b2      	mov	sl, r6
 80031b8:	eb19 0309 	adds.w	r3, r9, r9
 80031bc:	eb4a 040a 	adc.w	r4, sl, sl
 80031c0:	4699      	mov	r9, r3
 80031c2:	46a2      	mov	sl, r4
 80031c4:	eb19 0905 	adds.w	r9, r9, r5
 80031c8:	eb4a 0a06 	adc.w	sl, sl, r6
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	f04f 0200 	mov.w	r2, #0
 80031d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031e0:	4689      	mov	r9, r1
 80031e2:	4692      	mov	sl, r2
 80031e4:	eb19 0005 	adds.w	r0, r9, r5
 80031e8:	eb4a 0106 	adc.w	r1, sl, r6
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	461d      	mov	r5, r3
 80031f2:	f04f 0600 	mov.w	r6, #0
 80031f6:	196b      	adds	r3, r5, r5
 80031f8:	eb46 0406 	adc.w	r4, r6, r6
 80031fc:	461a      	mov	r2, r3
 80031fe:	4623      	mov	r3, r4
 8003200:	f7fd fd4a 	bl	8000c98 <__aeabi_uldivmod>
 8003204:	4603      	mov	r3, r0
 8003206:	460c      	mov	r4, r1
 8003208:	461a      	mov	r2, r3
 800320a:	4b8b      	ldr	r3, [pc, #556]	; (8003438 <UART_SetConfig+0x384>)
 800320c:	fba3 1302 	umull	r1, r3, r3, r2
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	2164      	movs	r1, #100	; 0x64
 8003214:	fb01 f303 	mul.w	r3, r1, r3
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	00db      	lsls	r3, r3, #3
 800321c:	3332      	adds	r3, #50	; 0x32
 800321e:	4a86      	ldr	r2, [pc, #536]	; (8003438 <UART_SetConfig+0x384>)
 8003220:	fba2 2303 	umull	r2, r3, r2, r3
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800322c:	4498      	add	r8, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	461d      	mov	r5, r3
 8003232:	f04f 0600 	mov.w	r6, #0
 8003236:	46a9      	mov	r9, r5
 8003238:	46b2      	mov	sl, r6
 800323a:	eb19 0309 	adds.w	r3, r9, r9
 800323e:	eb4a 040a 	adc.w	r4, sl, sl
 8003242:	4699      	mov	r9, r3
 8003244:	46a2      	mov	sl, r4
 8003246:	eb19 0905 	adds.w	r9, r9, r5
 800324a:	eb4a 0a06 	adc.w	sl, sl, r6
 800324e:	f04f 0100 	mov.w	r1, #0
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800325a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800325e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003262:	4689      	mov	r9, r1
 8003264:	4692      	mov	sl, r2
 8003266:	eb19 0005 	adds.w	r0, r9, r5
 800326a:	eb4a 0106 	adc.w	r1, sl, r6
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	461d      	mov	r5, r3
 8003274:	f04f 0600 	mov.w	r6, #0
 8003278:	196b      	adds	r3, r5, r5
 800327a:	eb46 0406 	adc.w	r4, r6, r6
 800327e:	461a      	mov	r2, r3
 8003280:	4623      	mov	r3, r4
 8003282:	f7fd fd09 	bl	8000c98 <__aeabi_uldivmod>
 8003286:	4603      	mov	r3, r0
 8003288:	460c      	mov	r4, r1
 800328a:	461a      	mov	r2, r3
 800328c:	4b6a      	ldr	r3, [pc, #424]	; (8003438 <UART_SetConfig+0x384>)
 800328e:	fba3 1302 	umull	r1, r3, r3, r2
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	2164      	movs	r1, #100	; 0x64
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	3332      	adds	r3, #50	; 0x32
 80032a0:	4a65      	ldr	r2, [pc, #404]	; (8003438 <UART_SetConfig+0x384>)
 80032a2:	fba2 2303 	umull	r2, r3, r2, r3
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	f003 0207 	and.w	r2, r3, #7
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4442      	add	r2, r8
 80032b2:	609a      	str	r2, [r3, #8]
 80032b4:	e26f      	b.n	8003796 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032b6:	f7ff facb 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 80032ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	461d      	mov	r5, r3
 80032c0:	f04f 0600 	mov.w	r6, #0
 80032c4:	46a8      	mov	r8, r5
 80032c6:	46b1      	mov	r9, r6
 80032c8:	eb18 0308 	adds.w	r3, r8, r8
 80032cc:	eb49 0409 	adc.w	r4, r9, r9
 80032d0:	4698      	mov	r8, r3
 80032d2:	46a1      	mov	r9, r4
 80032d4:	eb18 0805 	adds.w	r8, r8, r5
 80032d8:	eb49 0906 	adc.w	r9, r9, r6
 80032dc:	f04f 0100 	mov.w	r1, #0
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032e8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032ec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032f0:	4688      	mov	r8, r1
 80032f2:	4691      	mov	r9, r2
 80032f4:	eb18 0005 	adds.w	r0, r8, r5
 80032f8:	eb49 0106 	adc.w	r1, r9, r6
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	461d      	mov	r5, r3
 8003302:	f04f 0600 	mov.w	r6, #0
 8003306:	196b      	adds	r3, r5, r5
 8003308:	eb46 0406 	adc.w	r4, r6, r6
 800330c:	461a      	mov	r2, r3
 800330e:	4623      	mov	r3, r4
 8003310:	f7fd fcc2 	bl	8000c98 <__aeabi_uldivmod>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	461a      	mov	r2, r3
 800331a:	4b47      	ldr	r3, [pc, #284]	; (8003438 <UART_SetConfig+0x384>)
 800331c:	fba3 2302 	umull	r2, r3, r3, r2
 8003320:	095b      	lsrs	r3, r3, #5
 8003322:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	461d      	mov	r5, r3
 800332a:	f04f 0600 	mov.w	r6, #0
 800332e:	46a9      	mov	r9, r5
 8003330:	46b2      	mov	sl, r6
 8003332:	eb19 0309 	adds.w	r3, r9, r9
 8003336:	eb4a 040a 	adc.w	r4, sl, sl
 800333a:	4699      	mov	r9, r3
 800333c:	46a2      	mov	sl, r4
 800333e:	eb19 0905 	adds.w	r9, r9, r5
 8003342:	eb4a 0a06 	adc.w	sl, sl, r6
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003352:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003356:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800335a:	4689      	mov	r9, r1
 800335c:	4692      	mov	sl, r2
 800335e:	eb19 0005 	adds.w	r0, r9, r5
 8003362:	eb4a 0106 	adc.w	r1, sl, r6
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	461d      	mov	r5, r3
 800336c:	f04f 0600 	mov.w	r6, #0
 8003370:	196b      	adds	r3, r5, r5
 8003372:	eb46 0406 	adc.w	r4, r6, r6
 8003376:	461a      	mov	r2, r3
 8003378:	4623      	mov	r3, r4
 800337a:	f7fd fc8d 	bl	8000c98 <__aeabi_uldivmod>
 800337e:	4603      	mov	r3, r0
 8003380:	460c      	mov	r4, r1
 8003382:	461a      	mov	r2, r3
 8003384:	4b2c      	ldr	r3, [pc, #176]	; (8003438 <UART_SetConfig+0x384>)
 8003386:	fba3 1302 	umull	r1, r3, r3, r2
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	2164      	movs	r1, #100	; 0x64
 800338e:	fb01 f303 	mul.w	r3, r1, r3
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	3332      	adds	r3, #50	; 0x32
 8003398:	4a27      	ldr	r2, [pc, #156]	; (8003438 <UART_SetConfig+0x384>)
 800339a:	fba2 2303 	umull	r2, r3, r2, r3
 800339e:	095b      	lsrs	r3, r3, #5
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033a6:	4498      	add	r8, r3
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	461d      	mov	r5, r3
 80033ac:	f04f 0600 	mov.w	r6, #0
 80033b0:	46a9      	mov	r9, r5
 80033b2:	46b2      	mov	sl, r6
 80033b4:	eb19 0309 	adds.w	r3, r9, r9
 80033b8:	eb4a 040a 	adc.w	r4, sl, sl
 80033bc:	4699      	mov	r9, r3
 80033be:	46a2      	mov	sl, r4
 80033c0:	eb19 0905 	adds.w	r9, r9, r5
 80033c4:	eb4a 0a06 	adc.w	sl, sl, r6
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033dc:	4689      	mov	r9, r1
 80033de:	4692      	mov	sl, r2
 80033e0:	eb19 0005 	adds.w	r0, r9, r5
 80033e4:	eb4a 0106 	adc.w	r1, sl, r6
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	461d      	mov	r5, r3
 80033ee:	f04f 0600 	mov.w	r6, #0
 80033f2:	196b      	adds	r3, r5, r5
 80033f4:	eb46 0406 	adc.w	r4, r6, r6
 80033f8:	461a      	mov	r2, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	f7fd fc4c 	bl	8000c98 <__aeabi_uldivmod>
 8003400:	4603      	mov	r3, r0
 8003402:	460c      	mov	r4, r1
 8003404:	461a      	mov	r2, r3
 8003406:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <UART_SetConfig+0x384>)
 8003408:	fba3 1302 	umull	r1, r3, r3, r2
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	2164      	movs	r1, #100	; 0x64
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	3332      	adds	r3, #50	; 0x32
 800341a:	4a07      	ldr	r2, [pc, #28]	; (8003438 <UART_SetConfig+0x384>)
 800341c:	fba2 2303 	umull	r2, r3, r2, r3
 8003420:	095b      	lsrs	r3, r3, #5
 8003422:	f003 0207 	and.w	r2, r3, #7
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4442      	add	r2, r8
 800342c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800342e:	e1b2      	b.n	8003796 <UART_SetConfig+0x6e2>
 8003430:	40011000 	.word	0x40011000
 8003434:	40011400 	.word	0x40011400
 8003438:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4ad7      	ldr	r2, [pc, #860]	; (80037a0 <UART_SetConfig+0x6ec>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d005      	beq.n	8003452 <UART_SetConfig+0x39e>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4ad6      	ldr	r2, [pc, #856]	; (80037a4 <UART_SetConfig+0x6f0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	f040 80d1 	bne.w	80035f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003452:	f7ff fa11 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003456:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	469a      	mov	sl, r3
 800345c:	f04f 0b00 	mov.w	fp, #0
 8003460:	46d0      	mov	r8, sl
 8003462:	46d9      	mov	r9, fp
 8003464:	eb18 0308 	adds.w	r3, r8, r8
 8003468:	eb49 0409 	adc.w	r4, r9, r9
 800346c:	4698      	mov	r8, r3
 800346e:	46a1      	mov	r9, r4
 8003470:	eb18 080a 	adds.w	r8, r8, sl
 8003474:	eb49 090b 	adc.w	r9, r9, fp
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	f04f 0200 	mov.w	r2, #0
 8003480:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003484:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003488:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800348c:	4688      	mov	r8, r1
 800348e:	4691      	mov	r9, r2
 8003490:	eb1a 0508 	adds.w	r5, sl, r8
 8003494:	eb4b 0609 	adc.w	r6, fp, r9
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4619      	mov	r1, r3
 800349e:	f04f 0200 	mov.w	r2, #0
 80034a2:	f04f 0300 	mov.w	r3, #0
 80034a6:	f04f 0400 	mov.w	r4, #0
 80034aa:	0094      	lsls	r4, r2, #2
 80034ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80034b0:	008b      	lsls	r3, r1, #2
 80034b2:	461a      	mov	r2, r3
 80034b4:	4623      	mov	r3, r4
 80034b6:	4628      	mov	r0, r5
 80034b8:	4631      	mov	r1, r6
 80034ba:	f7fd fbed 	bl	8000c98 <__aeabi_uldivmod>
 80034be:	4603      	mov	r3, r0
 80034c0:	460c      	mov	r4, r1
 80034c2:	461a      	mov	r2, r3
 80034c4:	4bb8      	ldr	r3, [pc, #736]	; (80037a8 <UART_SetConfig+0x6f4>)
 80034c6:	fba3 2302 	umull	r2, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	469b      	mov	fp, r3
 80034d4:	f04f 0c00 	mov.w	ip, #0
 80034d8:	46d9      	mov	r9, fp
 80034da:	46e2      	mov	sl, ip
 80034dc:	eb19 0309 	adds.w	r3, r9, r9
 80034e0:	eb4a 040a 	adc.w	r4, sl, sl
 80034e4:	4699      	mov	r9, r3
 80034e6:	46a2      	mov	sl, r4
 80034e8:	eb19 090b 	adds.w	r9, r9, fp
 80034ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034f0:	f04f 0100 	mov.w	r1, #0
 80034f4:	f04f 0200 	mov.w	r2, #0
 80034f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003500:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003504:	4689      	mov	r9, r1
 8003506:	4692      	mov	sl, r2
 8003508:	eb1b 0509 	adds.w	r5, fp, r9
 800350c:	eb4c 060a 	adc.w	r6, ip, sl
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	f04f 0400 	mov.w	r4, #0
 8003522:	0094      	lsls	r4, r2, #2
 8003524:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003528:	008b      	lsls	r3, r1, #2
 800352a:	461a      	mov	r2, r3
 800352c:	4623      	mov	r3, r4
 800352e:	4628      	mov	r0, r5
 8003530:	4631      	mov	r1, r6
 8003532:	f7fd fbb1 	bl	8000c98 <__aeabi_uldivmod>
 8003536:	4603      	mov	r3, r0
 8003538:	460c      	mov	r4, r1
 800353a:	461a      	mov	r2, r3
 800353c:	4b9a      	ldr	r3, [pc, #616]	; (80037a8 <UART_SetConfig+0x6f4>)
 800353e:	fba3 1302 	umull	r1, r3, r3, r2
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	2164      	movs	r1, #100	; 0x64
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	3332      	adds	r3, #50	; 0x32
 8003550:	4a95      	ldr	r2, [pc, #596]	; (80037a8 <UART_SetConfig+0x6f4>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	095b      	lsrs	r3, r3, #5
 8003558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800355c:	4498      	add	r8, r3
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	469b      	mov	fp, r3
 8003562:	f04f 0c00 	mov.w	ip, #0
 8003566:	46d9      	mov	r9, fp
 8003568:	46e2      	mov	sl, ip
 800356a:	eb19 0309 	adds.w	r3, r9, r9
 800356e:	eb4a 040a 	adc.w	r4, sl, sl
 8003572:	4699      	mov	r9, r3
 8003574:	46a2      	mov	sl, r4
 8003576:	eb19 090b 	adds.w	r9, r9, fp
 800357a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800358a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800358e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003592:	4689      	mov	r9, r1
 8003594:	4692      	mov	sl, r2
 8003596:	eb1b 0509 	adds.w	r5, fp, r9
 800359a:	eb4c 060a 	adc.w	r6, ip, sl
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4619      	mov	r1, r3
 80035a4:	f04f 0200 	mov.w	r2, #0
 80035a8:	f04f 0300 	mov.w	r3, #0
 80035ac:	f04f 0400 	mov.w	r4, #0
 80035b0:	0094      	lsls	r4, r2, #2
 80035b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035b6:	008b      	lsls	r3, r1, #2
 80035b8:	461a      	mov	r2, r3
 80035ba:	4623      	mov	r3, r4
 80035bc:	4628      	mov	r0, r5
 80035be:	4631      	mov	r1, r6
 80035c0:	f7fd fb6a 	bl	8000c98 <__aeabi_uldivmod>
 80035c4:	4603      	mov	r3, r0
 80035c6:	460c      	mov	r4, r1
 80035c8:	461a      	mov	r2, r3
 80035ca:	4b77      	ldr	r3, [pc, #476]	; (80037a8 <UART_SetConfig+0x6f4>)
 80035cc:	fba3 1302 	umull	r1, r3, r3, r2
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	2164      	movs	r1, #100	; 0x64
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	3332      	adds	r3, #50	; 0x32
 80035de:	4a72      	ldr	r2, [pc, #456]	; (80037a8 <UART_SetConfig+0x6f4>)
 80035e0:	fba2 2303 	umull	r2, r3, r2, r3
 80035e4:	095b      	lsrs	r3, r3, #5
 80035e6:	f003 020f 	and.w	r2, r3, #15
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4442      	add	r2, r8
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	e0d0      	b.n	8003796 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80035f4:	f7ff f92c 	bl	8002850 <HAL_RCC_GetPCLK1Freq>
 80035f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	469a      	mov	sl, r3
 80035fe:	f04f 0b00 	mov.w	fp, #0
 8003602:	46d0      	mov	r8, sl
 8003604:	46d9      	mov	r9, fp
 8003606:	eb18 0308 	adds.w	r3, r8, r8
 800360a:	eb49 0409 	adc.w	r4, r9, r9
 800360e:	4698      	mov	r8, r3
 8003610:	46a1      	mov	r9, r4
 8003612:	eb18 080a 	adds.w	r8, r8, sl
 8003616:	eb49 090b 	adc.w	r9, r9, fp
 800361a:	f04f 0100 	mov.w	r1, #0
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003626:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800362a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800362e:	4688      	mov	r8, r1
 8003630:	4691      	mov	r9, r2
 8003632:	eb1a 0508 	adds.w	r5, sl, r8
 8003636:	eb4b 0609 	adc.w	r6, fp, r9
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	4619      	mov	r1, r3
 8003640:	f04f 0200 	mov.w	r2, #0
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	f04f 0400 	mov.w	r4, #0
 800364c:	0094      	lsls	r4, r2, #2
 800364e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003652:	008b      	lsls	r3, r1, #2
 8003654:	461a      	mov	r2, r3
 8003656:	4623      	mov	r3, r4
 8003658:	4628      	mov	r0, r5
 800365a:	4631      	mov	r1, r6
 800365c:	f7fd fb1c 	bl	8000c98 <__aeabi_uldivmod>
 8003660:	4603      	mov	r3, r0
 8003662:	460c      	mov	r4, r1
 8003664:	461a      	mov	r2, r3
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <UART_SetConfig+0x6f4>)
 8003668:	fba3 2302 	umull	r2, r3, r3, r2
 800366c:	095b      	lsrs	r3, r3, #5
 800366e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	469b      	mov	fp, r3
 8003676:	f04f 0c00 	mov.w	ip, #0
 800367a:	46d9      	mov	r9, fp
 800367c:	46e2      	mov	sl, ip
 800367e:	eb19 0309 	adds.w	r3, r9, r9
 8003682:	eb4a 040a 	adc.w	r4, sl, sl
 8003686:	4699      	mov	r9, r3
 8003688:	46a2      	mov	sl, r4
 800368a:	eb19 090b 	adds.w	r9, r9, fp
 800368e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800369e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036a6:	4689      	mov	r9, r1
 80036a8:	4692      	mov	sl, r2
 80036aa:	eb1b 0509 	adds.w	r5, fp, r9
 80036ae:	eb4c 060a 	adc.w	r6, ip, sl
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	4619      	mov	r1, r3
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	f04f 0300 	mov.w	r3, #0
 80036c0:	f04f 0400 	mov.w	r4, #0
 80036c4:	0094      	lsls	r4, r2, #2
 80036c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036ca:	008b      	lsls	r3, r1, #2
 80036cc:	461a      	mov	r2, r3
 80036ce:	4623      	mov	r3, r4
 80036d0:	4628      	mov	r0, r5
 80036d2:	4631      	mov	r1, r6
 80036d4:	f7fd fae0 	bl	8000c98 <__aeabi_uldivmod>
 80036d8:	4603      	mov	r3, r0
 80036da:	460c      	mov	r4, r1
 80036dc:	461a      	mov	r2, r3
 80036de:	4b32      	ldr	r3, [pc, #200]	; (80037a8 <UART_SetConfig+0x6f4>)
 80036e0:	fba3 1302 	umull	r1, r3, r3, r2
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	2164      	movs	r1, #100	; 0x64
 80036e8:	fb01 f303 	mul.w	r3, r1, r3
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	3332      	adds	r3, #50	; 0x32
 80036f2:	4a2d      	ldr	r2, [pc, #180]	; (80037a8 <UART_SetConfig+0x6f4>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	095b      	lsrs	r3, r3, #5
 80036fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036fe:	4498      	add	r8, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	469b      	mov	fp, r3
 8003704:	f04f 0c00 	mov.w	ip, #0
 8003708:	46d9      	mov	r9, fp
 800370a:	46e2      	mov	sl, ip
 800370c:	eb19 0309 	adds.w	r3, r9, r9
 8003710:	eb4a 040a 	adc.w	r4, sl, sl
 8003714:	4699      	mov	r9, r3
 8003716:	46a2      	mov	sl, r4
 8003718:	eb19 090b 	adds.w	r9, r9, fp
 800371c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003720:	f04f 0100 	mov.w	r1, #0
 8003724:	f04f 0200 	mov.w	r2, #0
 8003728:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800372c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003730:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003734:	4689      	mov	r9, r1
 8003736:	4692      	mov	sl, r2
 8003738:	eb1b 0509 	adds.w	r5, fp, r9
 800373c:	eb4c 060a 	adc.w	r6, ip, sl
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4619      	mov	r1, r3
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	f04f 0300 	mov.w	r3, #0
 800374e:	f04f 0400 	mov.w	r4, #0
 8003752:	0094      	lsls	r4, r2, #2
 8003754:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003758:	008b      	lsls	r3, r1, #2
 800375a:	461a      	mov	r2, r3
 800375c:	4623      	mov	r3, r4
 800375e:	4628      	mov	r0, r5
 8003760:	4631      	mov	r1, r6
 8003762:	f7fd fa99 	bl	8000c98 <__aeabi_uldivmod>
 8003766:	4603      	mov	r3, r0
 8003768:	460c      	mov	r4, r1
 800376a:	461a      	mov	r2, r3
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <UART_SetConfig+0x6f4>)
 800376e:	fba3 1302 	umull	r1, r3, r3, r2
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2164      	movs	r1, #100	; 0x64
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	3332      	adds	r3, #50	; 0x32
 8003780:	4a09      	ldr	r2, [pc, #36]	; (80037a8 <UART_SetConfig+0x6f4>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	f003 020f 	and.w	r2, r3, #15
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4442      	add	r2, r8
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	e7ff      	b.n	8003796 <UART_SetConfig+0x6e2>
 8003796:	bf00      	nop
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037a0:	40011000 	.word	0x40011000
 80037a4:	40011400 	.word	0x40011400
 80037a8:	51eb851f 	.word	0x51eb851f

080037ac <atof>:
 80037ac:	2100      	movs	r1, #0
 80037ae:	f001 bccf 	b.w	8005150 <strtod>
	...

080037b4 <__errno>:
 80037b4:	4b01      	ldr	r3, [pc, #4]	; (80037bc <__errno+0x8>)
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2000000c 	.word	0x2000000c

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4e0d      	ldr	r6, [pc, #52]	; (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	; (80037fc <__libc_init_array+0x3c>)
 80037c6:	1ba4      	subs	r4, r4, r6
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2500      	movs	r5, #0
 80037cc:	42a5      	cmp	r5, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4e0b      	ldr	r6, [pc, #44]	; (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	; (8003804 <__libc_init_array+0x44>)
 80037d4:	f004 fa3a 	bl	8007c4c <_init>
 80037d8:	1ba4      	subs	r4, r4, r6
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2500      	movs	r5, #0
 80037de:	42a5      	cmp	r5, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037e8:	4798      	blx	r3
 80037ea:	3501      	adds	r5, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037f2:	4798      	blx	r3
 80037f4:	3501      	adds	r5, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	08008008 	.word	0x08008008
 80037fc:	08008008 	.word	0x08008008
 8003800:	08008008 	.word	0x08008008
 8003804:	0800800c 	.word	0x0800800c

08003808 <memset>:
 8003808:	4402      	add	r2, r0
 800380a:	4603      	mov	r3, r0
 800380c:	4293      	cmp	r3, r2
 800380e:	d100      	bne.n	8003812 <memset+0xa>
 8003810:	4770      	bx	lr
 8003812:	f803 1b01 	strb.w	r1, [r3], #1
 8003816:	e7f9      	b.n	800380c <memset+0x4>

08003818 <__cvt>:
 8003818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800381c:	ec55 4b10 	vmov	r4, r5, d0
 8003820:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8003822:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003826:	2d00      	cmp	r5, #0
 8003828:	460e      	mov	r6, r1
 800382a:	4691      	mov	r9, r2
 800382c:	4619      	mov	r1, r3
 800382e:	bfb8      	it	lt
 8003830:	4622      	movlt	r2, r4
 8003832:	462b      	mov	r3, r5
 8003834:	f027 0720 	bic.w	r7, r7, #32
 8003838:	bfbb      	ittet	lt
 800383a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800383e:	461d      	movlt	r5, r3
 8003840:	2300      	movge	r3, #0
 8003842:	232d      	movlt	r3, #45	; 0x2d
 8003844:	bfb8      	it	lt
 8003846:	4614      	movlt	r4, r2
 8003848:	2f46      	cmp	r7, #70	; 0x46
 800384a:	700b      	strb	r3, [r1, #0]
 800384c:	d004      	beq.n	8003858 <__cvt+0x40>
 800384e:	2f45      	cmp	r7, #69	; 0x45
 8003850:	d100      	bne.n	8003854 <__cvt+0x3c>
 8003852:	3601      	adds	r6, #1
 8003854:	2102      	movs	r1, #2
 8003856:	e000      	b.n	800385a <__cvt+0x42>
 8003858:	2103      	movs	r1, #3
 800385a:	ab03      	add	r3, sp, #12
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	ab02      	add	r3, sp, #8
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	4632      	mov	r2, r6
 8003864:	4653      	mov	r3, sl
 8003866:	ec45 4b10 	vmov	d0, r4, r5
 800386a:	f001 fdcd 	bl	8005408 <_dtoa_r>
 800386e:	2f47      	cmp	r7, #71	; 0x47
 8003870:	4680      	mov	r8, r0
 8003872:	d102      	bne.n	800387a <__cvt+0x62>
 8003874:	f019 0f01 	tst.w	r9, #1
 8003878:	d026      	beq.n	80038c8 <__cvt+0xb0>
 800387a:	2f46      	cmp	r7, #70	; 0x46
 800387c:	eb08 0906 	add.w	r9, r8, r6
 8003880:	d111      	bne.n	80038a6 <__cvt+0x8e>
 8003882:	f898 3000 	ldrb.w	r3, [r8]
 8003886:	2b30      	cmp	r3, #48	; 0x30
 8003888:	d10a      	bne.n	80038a0 <__cvt+0x88>
 800388a:	2200      	movs	r2, #0
 800388c:	2300      	movs	r3, #0
 800388e:	4620      	mov	r0, r4
 8003890:	4629      	mov	r1, r5
 8003892:	f7fd f921 	bl	8000ad8 <__aeabi_dcmpeq>
 8003896:	b918      	cbnz	r0, 80038a0 <__cvt+0x88>
 8003898:	f1c6 0601 	rsb	r6, r6, #1
 800389c:	f8ca 6000 	str.w	r6, [sl]
 80038a0:	f8da 3000 	ldr.w	r3, [sl]
 80038a4:	4499      	add	r9, r3
 80038a6:	2200      	movs	r2, #0
 80038a8:	2300      	movs	r3, #0
 80038aa:	4620      	mov	r0, r4
 80038ac:	4629      	mov	r1, r5
 80038ae:	f7fd f913 	bl	8000ad8 <__aeabi_dcmpeq>
 80038b2:	b938      	cbnz	r0, 80038c4 <__cvt+0xac>
 80038b4:	2230      	movs	r2, #48	; 0x30
 80038b6:	9b03      	ldr	r3, [sp, #12]
 80038b8:	454b      	cmp	r3, r9
 80038ba:	d205      	bcs.n	80038c8 <__cvt+0xb0>
 80038bc:	1c59      	adds	r1, r3, #1
 80038be:	9103      	str	r1, [sp, #12]
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	e7f8      	b.n	80038b6 <__cvt+0x9e>
 80038c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80038c8:	9b03      	ldr	r3, [sp, #12]
 80038ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038cc:	eba3 0308 	sub.w	r3, r3, r8
 80038d0:	4640      	mov	r0, r8
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	b004      	add	sp, #16
 80038d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080038da <__exponent>:
 80038da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038dc:	2900      	cmp	r1, #0
 80038de:	4604      	mov	r4, r0
 80038e0:	bfba      	itte	lt
 80038e2:	4249      	neglt	r1, r1
 80038e4:	232d      	movlt	r3, #45	; 0x2d
 80038e6:	232b      	movge	r3, #43	; 0x2b
 80038e8:	2909      	cmp	r1, #9
 80038ea:	f804 2b02 	strb.w	r2, [r4], #2
 80038ee:	7043      	strb	r3, [r0, #1]
 80038f0:	dd20      	ble.n	8003934 <__exponent+0x5a>
 80038f2:	f10d 0307 	add.w	r3, sp, #7
 80038f6:	461f      	mov	r7, r3
 80038f8:	260a      	movs	r6, #10
 80038fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80038fe:	fb06 1115 	mls	r1, r6, r5, r1
 8003902:	3130      	adds	r1, #48	; 0x30
 8003904:	2d09      	cmp	r5, #9
 8003906:	f803 1c01 	strb.w	r1, [r3, #-1]
 800390a:	f103 32ff 	add.w	r2, r3, #4294967295
 800390e:	4629      	mov	r1, r5
 8003910:	dc09      	bgt.n	8003926 <__exponent+0x4c>
 8003912:	3130      	adds	r1, #48	; 0x30
 8003914:	3b02      	subs	r3, #2
 8003916:	f802 1c01 	strb.w	r1, [r2, #-1]
 800391a:	42bb      	cmp	r3, r7
 800391c:	4622      	mov	r2, r4
 800391e:	d304      	bcc.n	800392a <__exponent+0x50>
 8003920:	1a10      	subs	r0, r2, r0
 8003922:	b003      	add	sp, #12
 8003924:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003926:	4613      	mov	r3, r2
 8003928:	e7e7      	b.n	80038fa <__exponent+0x20>
 800392a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800392e:	f804 2b01 	strb.w	r2, [r4], #1
 8003932:	e7f2      	b.n	800391a <__exponent+0x40>
 8003934:	2330      	movs	r3, #48	; 0x30
 8003936:	4419      	add	r1, r3
 8003938:	7083      	strb	r3, [r0, #2]
 800393a:	1d02      	adds	r2, r0, #4
 800393c:	70c1      	strb	r1, [r0, #3]
 800393e:	e7ef      	b.n	8003920 <__exponent+0x46>

08003940 <_printf_float>:
 8003940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003944:	b08d      	sub	sp, #52	; 0x34
 8003946:	460c      	mov	r4, r1
 8003948:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800394c:	4616      	mov	r6, r2
 800394e:	461f      	mov	r7, r3
 8003950:	4605      	mov	r5, r0
 8003952:	f002 ff07 	bl	8006764 <_localeconv_r>
 8003956:	6803      	ldr	r3, [r0, #0]
 8003958:	9304      	str	r3, [sp, #16]
 800395a:	4618      	mov	r0, r3
 800395c:	f7fc fc40 	bl	80001e0 <strlen>
 8003960:	2300      	movs	r3, #0
 8003962:	930a      	str	r3, [sp, #40]	; 0x28
 8003964:	f8d8 3000 	ldr.w	r3, [r8]
 8003968:	9005      	str	r0, [sp, #20]
 800396a:	3307      	adds	r3, #7
 800396c:	f023 0307 	bic.w	r3, r3, #7
 8003970:	f103 0208 	add.w	r2, r3, #8
 8003974:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003978:	f8d4 b000 	ldr.w	fp, [r4]
 800397c:	f8c8 2000 	str.w	r2, [r8]
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003988:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800398c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003990:	9307      	str	r3, [sp, #28]
 8003992:	f8cd 8018 	str.w	r8, [sp, #24]
 8003996:	f04f 32ff 	mov.w	r2, #4294967295
 800399a:	4ba7      	ldr	r3, [pc, #668]	; (8003c38 <_printf_float+0x2f8>)
 800399c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039a0:	f7fd f8cc 	bl	8000b3c <__aeabi_dcmpun>
 80039a4:	bb70      	cbnz	r0, 8003a04 <_printf_float+0xc4>
 80039a6:	f04f 32ff 	mov.w	r2, #4294967295
 80039aa:	4ba3      	ldr	r3, [pc, #652]	; (8003c38 <_printf_float+0x2f8>)
 80039ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039b0:	f7fd f8a6 	bl	8000b00 <__aeabi_dcmple>
 80039b4:	bb30      	cbnz	r0, 8003a04 <_printf_float+0xc4>
 80039b6:	2200      	movs	r2, #0
 80039b8:	2300      	movs	r3, #0
 80039ba:	4640      	mov	r0, r8
 80039bc:	4649      	mov	r1, r9
 80039be:	f7fd f895 	bl	8000aec <__aeabi_dcmplt>
 80039c2:	b110      	cbz	r0, 80039ca <_printf_float+0x8a>
 80039c4:	232d      	movs	r3, #45	; 0x2d
 80039c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ca:	4a9c      	ldr	r2, [pc, #624]	; (8003c3c <_printf_float+0x2fc>)
 80039cc:	4b9c      	ldr	r3, [pc, #624]	; (8003c40 <_printf_float+0x300>)
 80039ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80039d2:	bf8c      	ite	hi
 80039d4:	4690      	movhi	r8, r2
 80039d6:	4698      	movls	r8, r3
 80039d8:	2303      	movs	r3, #3
 80039da:	f02b 0204 	bic.w	r2, fp, #4
 80039de:	6123      	str	r3, [r4, #16]
 80039e0:	6022      	str	r2, [r4, #0]
 80039e2:	f04f 0900 	mov.w	r9, #0
 80039e6:	9700      	str	r7, [sp, #0]
 80039e8:	4633      	mov	r3, r6
 80039ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80039ec:	4621      	mov	r1, r4
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 f9e6 	bl	8003dc0 <_printf_common>
 80039f4:	3001      	adds	r0, #1
 80039f6:	f040 808d 	bne.w	8003b14 <_printf_float+0x1d4>
 80039fa:	f04f 30ff 	mov.w	r0, #4294967295
 80039fe:	b00d      	add	sp, #52	; 0x34
 8003a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a04:	4642      	mov	r2, r8
 8003a06:	464b      	mov	r3, r9
 8003a08:	4640      	mov	r0, r8
 8003a0a:	4649      	mov	r1, r9
 8003a0c:	f7fd f896 	bl	8000b3c <__aeabi_dcmpun>
 8003a10:	b110      	cbz	r0, 8003a18 <_printf_float+0xd8>
 8003a12:	4a8c      	ldr	r2, [pc, #560]	; (8003c44 <_printf_float+0x304>)
 8003a14:	4b8c      	ldr	r3, [pc, #560]	; (8003c48 <_printf_float+0x308>)
 8003a16:	e7da      	b.n	80039ce <_printf_float+0x8e>
 8003a18:	6861      	ldr	r1, [r4, #4]
 8003a1a:	1c4b      	adds	r3, r1, #1
 8003a1c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003a20:	a80a      	add	r0, sp, #40	; 0x28
 8003a22:	d13e      	bne.n	8003aa2 <_printf_float+0x162>
 8003a24:	2306      	movs	r3, #6
 8003a26:	6063      	str	r3, [r4, #4]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003a2e:	ab09      	add	r3, sp, #36	; 0x24
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	ec49 8b10 	vmov	d0, r8, r9
 8003a36:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003a3a:	6022      	str	r2, [r4, #0]
 8003a3c:	f8cd a004 	str.w	sl, [sp, #4]
 8003a40:	6861      	ldr	r1, [r4, #4]
 8003a42:	4628      	mov	r0, r5
 8003a44:	f7ff fee8 	bl	8003818 <__cvt>
 8003a48:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003a4c:	2b47      	cmp	r3, #71	; 0x47
 8003a4e:	4680      	mov	r8, r0
 8003a50:	d109      	bne.n	8003a66 <_printf_float+0x126>
 8003a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a54:	1cd8      	adds	r0, r3, #3
 8003a56:	db02      	blt.n	8003a5e <_printf_float+0x11e>
 8003a58:	6862      	ldr	r2, [r4, #4]
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	dd47      	ble.n	8003aee <_printf_float+0x1ae>
 8003a5e:	f1aa 0a02 	sub.w	sl, sl, #2
 8003a62:	fa5f fa8a 	uxtb.w	sl, sl
 8003a66:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a6c:	d824      	bhi.n	8003ab8 <_printf_float+0x178>
 8003a6e:	3901      	subs	r1, #1
 8003a70:	4652      	mov	r2, sl
 8003a72:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003a76:	9109      	str	r1, [sp, #36]	; 0x24
 8003a78:	f7ff ff2f 	bl	80038da <__exponent>
 8003a7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a7e:	1813      	adds	r3, r2, r0
 8003a80:	2a01      	cmp	r2, #1
 8003a82:	4681      	mov	r9, r0
 8003a84:	6123      	str	r3, [r4, #16]
 8003a86:	dc02      	bgt.n	8003a8e <_printf_float+0x14e>
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	07d1      	lsls	r1, r2, #31
 8003a8c:	d501      	bpl.n	8003a92 <_printf_float+0x152>
 8003a8e:	3301      	adds	r3, #1
 8003a90:	6123      	str	r3, [r4, #16]
 8003a92:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0a5      	beq.n	80039e6 <_printf_float+0xa6>
 8003a9a:	232d      	movs	r3, #45	; 0x2d
 8003a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003aa0:	e7a1      	b.n	80039e6 <_printf_float+0xa6>
 8003aa2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003aa6:	f000 8177 	beq.w	8003d98 <_printf_float+0x458>
 8003aaa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003aae:	d1bb      	bne.n	8003a28 <_printf_float+0xe8>
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d1b9      	bne.n	8003a28 <_printf_float+0xe8>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e7b6      	b.n	8003a26 <_printf_float+0xe6>
 8003ab8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003abc:	d119      	bne.n	8003af2 <_printf_float+0x1b2>
 8003abe:	2900      	cmp	r1, #0
 8003ac0:	6863      	ldr	r3, [r4, #4]
 8003ac2:	dd0c      	ble.n	8003ade <_printf_float+0x19e>
 8003ac4:	6121      	str	r1, [r4, #16]
 8003ac6:	b913      	cbnz	r3, 8003ace <_printf_float+0x18e>
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	07d2      	lsls	r2, r2, #31
 8003acc:	d502      	bpl.n	8003ad4 <_printf_float+0x194>
 8003ace:	3301      	adds	r3, #1
 8003ad0:	440b      	add	r3, r1
 8003ad2:	6123      	str	r3, [r4, #16]
 8003ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ad6:	65a3      	str	r3, [r4, #88]	; 0x58
 8003ad8:	f04f 0900 	mov.w	r9, #0
 8003adc:	e7d9      	b.n	8003a92 <_printf_float+0x152>
 8003ade:	b913      	cbnz	r3, 8003ae6 <_printf_float+0x1a6>
 8003ae0:	6822      	ldr	r2, [r4, #0]
 8003ae2:	07d0      	lsls	r0, r2, #31
 8003ae4:	d501      	bpl.n	8003aea <_printf_float+0x1aa>
 8003ae6:	3302      	adds	r3, #2
 8003ae8:	e7f3      	b.n	8003ad2 <_printf_float+0x192>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e7f1      	b.n	8003ad2 <_printf_float+0x192>
 8003aee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003af2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003af6:	4293      	cmp	r3, r2
 8003af8:	db05      	blt.n	8003b06 <_printf_float+0x1c6>
 8003afa:	6822      	ldr	r2, [r4, #0]
 8003afc:	6123      	str	r3, [r4, #16]
 8003afe:	07d1      	lsls	r1, r2, #31
 8003b00:	d5e8      	bpl.n	8003ad4 <_printf_float+0x194>
 8003b02:	3301      	adds	r3, #1
 8003b04:	e7e5      	b.n	8003ad2 <_printf_float+0x192>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	bfd4      	ite	le
 8003b0a:	f1c3 0302 	rsble	r3, r3, #2
 8003b0e:	2301      	movgt	r3, #1
 8003b10:	4413      	add	r3, r2
 8003b12:	e7de      	b.n	8003ad2 <_printf_float+0x192>
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	055a      	lsls	r2, r3, #21
 8003b18:	d407      	bmi.n	8003b2a <_printf_float+0x1ea>
 8003b1a:	6923      	ldr	r3, [r4, #16]
 8003b1c:	4642      	mov	r2, r8
 8003b1e:	4631      	mov	r1, r6
 8003b20:	4628      	mov	r0, r5
 8003b22:	47b8      	blx	r7
 8003b24:	3001      	adds	r0, #1
 8003b26:	d12b      	bne.n	8003b80 <_printf_float+0x240>
 8003b28:	e767      	b.n	80039fa <_printf_float+0xba>
 8003b2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003b2e:	f240 80dc 	bls.w	8003cea <_printf_float+0x3aa>
 8003b32:	2200      	movs	r2, #0
 8003b34:	2300      	movs	r3, #0
 8003b36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b3a:	f7fc ffcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d033      	beq.n	8003baa <_printf_float+0x26a>
 8003b42:	2301      	movs	r3, #1
 8003b44:	4a41      	ldr	r2, [pc, #260]	; (8003c4c <_printf_float+0x30c>)
 8003b46:	4631      	mov	r1, r6
 8003b48:	4628      	mov	r0, r5
 8003b4a:	47b8      	blx	r7
 8003b4c:	3001      	adds	r0, #1
 8003b4e:	f43f af54 	beq.w	80039fa <_printf_float+0xba>
 8003b52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b56:	429a      	cmp	r2, r3
 8003b58:	db02      	blt.n	8003b60 <_printf_float+0x220>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	07d8      	lsls	r0, r3, #31
 8003b5e:	d50f      	bpl.n	8003b80 <_printf_float+0x240>
 8003b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b64:	4631      	mov	r1, r6
 8003b66:	4628      	mov	r0, r5
 8003b68:	47b8      	blx	r7
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f43f af45 	beq.w	80039fa <_printf_float+0xba>
 8003b70:	f04f 0800 	mov.w	r8, #0
 8003b74:	f104 091a 	add.w	r9, r4, #26
 8003b78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	4543      	cmp	r3, r8
 8003b7e:	dc09      	bgt.n	8003b94 <_printf_float+0x254>
 8003b80:	6823      	ldr	r3, [r4, #0]
 8003b82:	079b      	lsls	r3, r3, #30
 8003b84:	f100 8103 	bmi.w	8003d8e <_printf_float+0x44e>
 8003b88:	68e0      	ldr	r0, [r4, #12]
 8003b8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b8c:	4298      	cmp	r0, r3
 8003b8e:	bfb8      	it	lt
 8003b90:	4618      	movlt	r0, r3
 8003b92:	e734      	b.n	80039fe <_printf_float+0xbe>
 8003b94:	2301      	movs	r3, #1
 8003b96:	464a      	mov	r2, r9
 8003b98:	4631      	mov	r1, r6
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	47b8      	blx	r7
 8003b9e:	3001      	adds	r0, #1
 8003ba0:	f43f af2b 	beq.w	80039fa <_printf_float+0xba>
 8003ba4:	f108 0801 	add.w	r8, r8, #1
 8003ba8:	e7e6      	b.n	8003b78 <_printf_float+0x238>
 8003baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	dc2b      	bgt.n	8003c08 <_printf_float+0x2c8>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <_printf_float+0x30c>)
 8003bb4:	4631      	mov	r1, r6
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	47b8      	blx	r7
 8003bba:	3001      	adds	r0, #1
 8003bbc:	f43f af1d 	beq.w	80039fa <_printf_float+0xba>
 8003bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bc2:	b923      	cbnz	r3, 8003bce <_printf_float+0x28e>
 8003bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bc6:	b913      	cbnz	r3, 8003bce <_printf_float+0x28e>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	07d9      	lsls	r1, r3, #31
 8003bcc:	d5d8      	bpl.n	8003b80 <_printf_float+0x240>
 8003bce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bd2:	4631      	mov	r1, r6
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	47b8      	blx	r7
 8003bd8:	3001      	adds	r0, #1
 8003bda:	f43f af0e 	beq.w	80039fa <_printf_float+0xba>
 8003bde:	f04f 0900 	mov.w	r9, #0
 8003be2:	f104 0a1a 	add.w	sl, r4, #26
 8003be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003be8:	425b      	negs	r3, r3
 8003bea:	454b      	cmp	r3, r9
 8003bec:	dc01      	bgt.n	8003bf2 <_printf_float+0x2b2>
 8003bee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bf0:	e794      	b.n	8003b1c <_printf_float+0x1dc>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	4652      	mov	r2, sl
 8003bf6:	4631      	mov	r1, r6
 8003bf8:	4628      	mov	r0, r5
 8003bfa:	47b8      	blx	r7
 8003bfc:	3001      	adds	r0, #1
 8003bfe:	f43f aefc 	beq.w	80039fa <_printf_float+0xba>
 8003c02:	f109 0901 	add.w	r9, r9, #1
 8003c06:	e7ee      	b.n	8003be6 <_printf_float+0x2a6>
 8003c08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003c0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	bfa8      	it	ge
 8003c10:	461a      	movge	r2, r3
 8003c12:	2a00      	cmp	r2, #0
 8003c14:	4691      	mov	r9, r2
 8003c16:	dd07      	ble.n	8003c28 <_printf_float+0x2e8>
 8003c18:	4613      	mov	r3, r2
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	4642      	mov	r2, r8
 8003c1e:	4628      	mov	r0, r5
 8003c20:	47b8      	blx	r7
 8003c22:	3001      	adds	r0, #1
 8003c24:	f43f aee9 	beq.w	80039fa <_printf_float+0xba>
 8003c28:	f104 031a 	add.w	r3, r4, #26
 8003c2c:	f04f 0b00 	mov.w	fp, #0
 8003c30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c34:	9306      	str	r3, [sp, #24]
 8003c36:	e015      	b.n	8003c64 <_printf_float+0x324>
 8003c38:	7fefffff 	.word	0x7fefffff
 8003c3c:	08007ce4 	.word	0x08007ce4
 8003c40:	08007ce0 	.word	0x08007ce0
 8003c44:	08007cec 	.word	0x08007cec
 8003c48:	08007ce8 	.word	0x08007ce8
 8003c4c:	08007cf0 	.word	0x08007cf0
 8003c50:	2301      	movs	r3, #1
 8003c52:	9a06      	ldr	r2, [sp, #24]
 8003c54:	4631      	mov	r1, r6
 8003c56:	4628      	mov	r0, r5
 8003c58:	47b8      	blx	r7
 8003c5a:	3001      	adds	r0, #1
 8003c5c:	f43f aecd 	beq.w	80039fa <_printf_float+0xba>
 8003c60:	f10b 0b01 	add.w	fp, fp, #1
 8003c64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003c68:	ebaa 0309 	sub.w	r3, sl, r9
 8003c6c:	455b      	cmp	r3, fp
 8003c6e:	dcef      	bgt.n	8003c50 <_printf_float+0x310>
 8003c70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003c74:	429a      	cmp	r2, r3
 8003c76:	44d0      	add	r8, sl
 8003c78:	db15      	blt.n	8003ca6 <_printf_float+0x366>
 8003c7a:	6823      	ldr	r3, [r4, #0]
 8003c7c:	07da      	lsls	r2, r3, #31
 8003c7e:	d412      	bmi.n	8003ca6 <_printf_float+0x366>
 8003c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003c84:	eba3 020a 	sub.w	r2, r3, sl
 8003c88:	eba3 0a01 	sub.w	sl, r3, r1
 8003c8c:	4592      	cmp	sl, r2
 8003c8e:	bfa8      	it	ge
 8003c90:	4692      	movge	sl, r2
 8003c92:	f1ba 0f00 	cmp.w	sl, #0
 8003c96:	dc0e      	bgt.n	8003cb6 <_printf_float+0x376>
 8003c98:	f04f 0800 	mov.w	r8, #0
 8003c9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ca0:	f104 091a 	add.w	r9, r4, #26
 8003ca4:	e019      	b.n	8003cda <_printf_float+0x39a>
 8003ca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003caa:	4631      	mov	r1, r6
 8003cac:	4628      	mov	r0, r5
 8003cae:	47b8      	blx	r7
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d1e5      	bne.n	8003c80 <_printf_float+0x340>
 8003cb4:	e6a1      	b.n	80039fa <_printf_float+0xba>
 8003cb6:	4653      	mov	r3, sl
 8003cb8:	4642      	mov	r2, r8
 8003cba:	4631      	mov	r1, r6
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	47b8      	blx	r7
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	d1e9      	bne.n	8003c98 <_printf_float+0x358>
 8003cc4:	e699      	b.n	80039fa <_printf_float+0xba>
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	464a      	mov	r2, r9
 8003cca:	4631      	mov	r1, r6
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b8      	blx	r7
 8003cd0:	3001      	adds	r0, #1
 8003cd2:	f43f ae92 	beq.w	80039fa <_printf_float+0xba>
 8003cd6:	f108 0801 	add.w	r8, r8, #1
 8003cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	eba3 030a 	sub.w	r3, r3, sl
 8003ce4:	4543      	cmp	r3, r8
 8003ce6:	dcee      	bgt.n	8003cc6 <_printf_float+0x386>
 8003ce8:	e74a      	b.n	8003b80 <_printf_float+0x240>
 8003cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cec:	2a01      	cmp	r2, #1
 8003cee:	dc01      	bgt.n	8003cf4 <_printf_float+0x3b4>
 8003cf0:	07db      	lsls	r3, r3, #31
 8003cf2:	d53a      	bpl.n	8003d6a <_printf_float+0x42a>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	4642      	mov	r2, r8
 8003cf8:	4631      	mov	r1, r6
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	47b8      	blx	r7
 8003cfe:	3001      	adds	r0, #1
 8003d00:	f43f ae7b 	beq.w	80039fa <_printf_float+0xba>
 8003d04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d08:	4631      	mov	r1, r6
 8003d0a:	4628      	mov	r0, r5
 8003d0c:	47b8      	blx	r7
 8003d0e:	3001      	adds	r0, #1
 8003d10:	f108 0801 	add.w	r8, r8, #1
 8003d14:	f43f ae71 	beq.w	80039fa <_printf_float+0xba>
 8003d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8003d20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003d24:	2300      	movs	r3, #0
 8003d26:	f7fc fed7 	bl	8000ad8 <__aeabi_dcmpeq>
 8003d2a:	b9c8      	cbnz	r0, 8003d60 <_printf_float+0x420>
 8003d2c:	4653      	mov	r3, sl
 8003d2e:	4642      	mov	r2, r8
 8003d30:	4631      	mov	r1, r6
 8003d32:	4628      	mov	r0, r5
 8003d34:	47b8      	blx	r7
 8003d36:	3001      	adds	r0, #1
 8003d38:	d10e      	bne.n	8003d58 <_printf_float+0x418>
 8003d3a:	e65e      	b.n	80039fa <_printf_float+0xba>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	4652      	mov	r2, sl
 8003d40:	4631      	mov	r1, r6
 8003d42:	4628      	mov	r0, r5
 8003d44:	47b8      	blx	r7
 8003d46:	3001      	adds	r0, #1
 8003d48:	f43f ae57 	beq.w	80039fa <_printf_float+0xba>
 8003d4c:	f108 0801 	add.w	r8, r8, #1
 8003d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d52:	3b01      	subs	r3, #1
 8003d54:	4543      	cmp	r3, r8
 8003d56:	dcf1      	bgt.n	8003d3c <_printf_float+0x3fc>
 8003d58:	464b      	mov	r3, r9
 8003d5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003d5e:	e6de      	b.n	8003b1e <_printf_float+0x1de>
 8003d60:	f04f 0800 	mov.w	r8, #0
 8003d64:	f104 0a1a 	add.w	sl, r4, #26
 8003d68:	e7f2      	b.n	8003d50 <_printf_float+0x410>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e7df      	b.n	8003d2e <_printf_float+0x3ee>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	464a      	mov	r2, r9
 8003d72:	4631      	mov	r1, r6
 8003d74:	4628      	mov	r0, r5
 8003d76:	47b8      	blx	r7
 8003d78:	3001      	adds	r0, #1
 8003d7a:	f43f ae3e 	beq.w	80039fa <_printf_float+0xba>
 8003d7e:	f108 0801 	add.w	r8, r8, #1
 8003d82:	68e3      	ldr	r3, [r4, #12]
 8003d84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	4543      	cmp	r3, r8
 8003d8a:	dcf0      	bgt.n	8003d6e <_printf_float+0x42e>
 8003d8c:	e6fc      	b.n	8003b88 <_printf_float+0x248>
 8003d8e:	f04f 0800 	mov.w	r8, #0
 8003d92:	f104 0919 	add.w	r9, r4, #25
 8003d96:	e7f4      	b.n	8003d82 <_printf_float+0x442>
 8003d98:	2900      	cmp	r1, #0
 8003d9a:	f43f ae8b 	beq.w	8003ab4 <_printf_float+0x174>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003da4:	ab09      	add	r3, sp, #36	; 0x24
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	ec49 8b10 	vmov	d0, r8, r9
 8003dac:	6022      	str	r2, [r4, #0]
 8003dae:	f8cd a004 	str.w	sl, [sp, #4]
 8003db2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003db6:	4628      	mov	r0, r5
 8003db8:	f7ff fd2e 	bl	8003818 <__cvt>
 8003dbc:	4680      	mov	r8, r0
 8003dbe:	e648      	b.n	8003a52 <_printf_float+0x112>

08003dc0 <_printf_common>:
 8003dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dc4:	4691      	mov	r9, r2
 8003dc6:	461f      	mov	r7, r3
 8003dc8:	688a      	ldr	r2, [r1, #8]
 8003dca:	690b      	ldr	r3, [r1, #16]
 8003dcc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	bfb8      	it	lt
 8003dd4:	4613      	movlt	r3, r2
 8003dd6:	f8c9 3000 	str.w	r3, [r9]
 8003dda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003dde:	4606      	mov	r6, r0
 8003de0:	460c      	mov	r4, r1
 8003de2:	b112      	cbz	r2, 8003dea <_printf_common+0x2a>
 8003de4:	3301      	adds	r3, #1
 8003de6:	f8c9 3000 	str.w	r3, [r9]
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	0699      	lsls	r1, r3, #26
 8003dee:	bf42      	ittt	mi
 8003df0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003df4:	3302      	addmi	r3, #2
 8003df6:	f8c9 3000 	strmi.w	r3, [r9]
 8003dfa:	6825      	ldr	r5, [r4, #0]
 8003dfc:	f015 0506 	ands.w	r5, r5, #6
 8003e00:	d107      	bne.n	8003e12 <_printf_common+0x52>
 8003e02:	f104 0a19 	add.w	sl, r4, #25
 8003e06:	68e3      	ldr	r3, [r4, #12]
 8003e08:	f8d9 2000 	ldr.w	r2, [r9]
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	42ab      	cmp	r3, r5
 8003e10:	dc28      	bgt.n	8003e64 <_printf_common+0xa4>
 8003e12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	3300      	adds	r3, #0
 8003e1a:	bf18      	it	ne
 8003e1c:	2301      	movne	r3, #1
 8003e1e:	0692      	lsls	r2, r2, #26
 8003e20:	d42d      	bmi.n	8003e7e <_printf_common+0xbe>
 8003e22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e26:	4639      	mov	r1, r7
 8003e28:	4630      	mov	r0, r6
 8003e2a:	47c0      	blx	r8
 8003e2c:	3001      	adds	r0, #1
 8003e2e:	d020      	beq.n	8003e72 <_printf_common+0xb2>
 8003e30:	6823      	ldr	r3, [r4, #0]
 8003e32:	68e5      	ldr	r5, [r4, #12]
 8003e34:	f8d9 2000 	ldr.w	r2, [r9]
 8003e38:	f003 0306 	and.w	r3, r3, #6
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	bf08      	it	eq
 8003e40:	1aad      	subeq	r5, r5, r2
 8003e42:	68a3      	ldr	r3, [r4, #8]
 8003e44:	6922      	ldr	r2, [r4, #16]
 8003e46:	bf0c      	ite	eq
 8003e48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e4c:	2500      	movne	r5, #0
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	bfc4      	itt	gt
 8003e52:	1a9b      	subgt	r3, r3, r2
 8003e54:	18ed      	addgt	r5, r5, r3
 8003e56:	f04f 0900 	mov.w	r9, #0
 8003e5a:	341a      	adds	r4, #26
 8003e5c:	454d      	cmp	r5, r9
 8003e5e:	d11a      	bne.n	8003e96 <_printf_common+0xd6>
 8003e60:	2000      	movs	r0, #0
 8003e62:	e008      	b.n	8003e76 <_printf_common+0xb6>
 8003e64:	2301      	movs	r3, #1
 8003e66:	4652      	mov	r2, sl
 8003e68:	4639      	mov	r1, r7
 8003e6a:	4630      	mov	r0, r6
 8003e6c:	47c0      	blx	r8
 8003e6e:	3001      	adds	r0, #1
 8003e70:	d103      	bne.n	8003e7a <_printf_common+0xba>
 8003e72:	f04f 30ff 	mov.w	r0, #4294967295
 8003e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7a:	3501      	adds	r5, #1
 8003e7c:	e7c3      	b.n	8003e06 <_printf_common+0x46>
 8003e7e:	18e1      	adds	r1, r4, r3
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	2030      	movs	r0, #48	; 0x30
 8003e84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003e88:	4422      	add	r2, r4
 8003e8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003e8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003e92:	3302      	adds	r3, #2
 8003e94:	e7c5      	b.n	8003e22 <_printf_common+0x62>
 8003e96:	2301      	movs	r3, #1
 8003e98:	4622      	mov	r2, r4
 8003e9a:	4639      	mov	r1, r7
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	47c0      	blx	r8
 8003ea0:	3001      	adds	r0, #1
 8003ea2:	d0e6      	beq.n	8003e72 <_printf_common+0xb2>
 8003ea4:	f109 0901 	add.w	r9, r9, #1
 8003ea8:	e7d8      	b.n	8003e5c <_printf_common+0x9c>
	...

08003eac <_printf_i>:
 8003eac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003eb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003eb4:	460c      	mov	r4, r1
 8003eb6:	7e09      	ldrb	r1, [r1, #24]
 8003eb8:	b085      	sub	sp, #20
 8003eba:	296e      	cmp	r1, #110	; 0x6e
 8003ebc:	4617      	mov	r7, r2
 8003ebe:	4606      	mov	r6, r0
 8003ec0:	4698      	mov	r8, r3
 8003ec2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ec4:	f000 80b3 	beq.w	800402e <_printf_i+0x182>
 8003ec8:	d822      	bhi.n	8003f10 <_printf_i+0x64>
 8003eca:	2963      	cmp	r1, #99	; 0x63
 8003ecc:	d036      	beq.n	8003f3c <_printf_i+0x90>
 8003ece:	d80a      	bhi.n	8003ee6 <_printf_i+0x3a>
 8003ed0:	2900      	cmp	r1, #0
 8003ed2:	f000 80b9 	beq.w	8004048 <_printf_i+0x19c>
 8003ed6:	2958      	cmp	r1, #88	; 0x58
 8003ed8:	f000 8083 	beq.w	8003fe2 <_printf_i+0x136>
 8003edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ee0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003ee4:	e032      	b.n	8003f4c <_printf_i+0xa0>
 8003ee6:	2964      	cmp	r1, #100	; 0x64
 8003ee8:	d001      	beq.n	8003eee <_printf_i+0x42>
 8003eea:	2969      	cmp	r1, #105	; 0x69
 8003eec:	d1f6      	bne.n	8003edc <_printf_i+0x30>
 8003eee:	6820      	ldr	r0, [r4, #0]
 8003ef0:	6813      	ldr	r3, [r2, #0]
 8003ef2:	0605      	lsls	r5, r0, #24
 8003ef4:	f103 0104 	add.w	r1, r3, #4
 8003ef8:	d52a      	bpl.n	8003f50 <_printf_i+0xa4>
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6011      	str	r1, [r2, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da03      	bge.n	8003f0a <_printf_i+0x5e>
 8003f02:	222d      	movs	r2, #45	; 0x2d
 8003f04:	425b      	negs	r3, r3
 8003f06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f0a:	486f      	ldr	r0, [pc, #444]	; (80040c8 <_printf_i+0x21c>)
 8003f0c:	220a      	movs	r2, #10
 8003f0e:	e039      	b.n	8003f84 <_printf_i+0xd8>
 8003f10:	2973      	cmp	r1, #115	; 0x73
 8003f12:	f000 809d 	beq.w	8004050 <_printf_i+0x1a4>
 8003f16:	d808      	bhi.n	8003f2a <_printf_i+0x7e>
 8003f18:	296f      	cmp	r1, #111	; 0x6f
 8003f1a:	d020      	beq.n	8003f5e <_printf_i+0xb2>
 8003f1c:	2970      	cmp	r1, #112	; 0x70
 8003f1e:	d1dd      	bne.n	8003edc <_printf_i+0x30>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	f043 0320 	orr.w	r3, r3, #32
 8003f26:	6023      	str	r3, [r4, #0]
 8003f28:	e003      	b.n	8003f32 <_printf_i+0x86>
 8003f2a:	2975      	cmp	r1, #117	; 0x75
 8003f2c:	d017      	beq.n	8003f5e <_printf_i+0xb2>
 8003f2e:	2978      	cmp	r1, #120	; 0x78
 8003f30:	d1d4      	bne.n	8003edc <_printf_i+0x30>
 8003f32:	2378      	movs	r3, #120	; 0x78
 8003f34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f38:	4864      	ldr	r0, [pc, #400]	; (80040cc <_printf_i+0x220>)
 8003f3a:	e055      	b.n	8003fe8 <_printf_i+0x13c>
 8003f3c:	6813      	ldr	r3, [r2, #0]
 8003f3e:	1d19      	adds	r1, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6011      	str	r1, [r2, #0]
 8003f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e08c      	b.n	800406a <_printf_i+0x1be>
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6011      	str	r1, [r2, #0]
 8003f54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003f58:	bf18      	it	ne
 8003f5a:	b21b      	sxthne	r3, r3
 8003f5c:	e7cf      	b.n	8003efe <_printf_i+0x52>
 8003f5e:	6813      	ldr	r3, [r2, #0]
 8003f60:	6825      	ldr	r5, [r4, #0]
 8003f62:	1d18      	adds	r0, r3, #4
 8003f64:	6010      	str	r0, [r2, #0]
 8003f66:	0628      	lsls	r0, r5, #24
 8003f68:	d501      	bpl.n	8003f6e <_printf_i+0xc2>
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	e002      	b.n	8003f74 <_printf_i+0xc8>
 8003f6e:	0668      	lsls	r0, r5, #25
 8003f70:	d5fb      	bpl.n	8003f6a <_printf_i+0xbe>
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	4854      	ldr	r0, [pc, #336]	; (80040c8 <_printf_i+0x21c>)
 8003f76:	296f      	cmp	r1, #111	; 0x6f
 8003f78:	bf14      	ite	ne
 8003f7a:	220a      	movne	r2, #10
 8003f7c:	2208      	moveq	r2, #8
 8003f7e:	2100      	movs	r1, #0
 8003f80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003f84:	6865      	ldr	r5, [r4, #4]
 8003f86:	60a5      	str	r5, [r4, #8]
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	f2c0 8095 	blt.w	80040b8 <_printf_i+0x20c>
 8003f8e:	6821      	ldr	r1, [r4, #0]
 8003f90:	f021 0104 	bic.w	r1, r1, #4
 8003f94:	6021      	str	r1, [r4, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d13d      	bne.n	8004016 <_printf_i+0x16a>
 8003f9a:	2d00      	cmp	r5, #0
 8003f9c:	f040 808e 	bne.w	80040bc <_printf_i+0x210>
 8003fa0:	4665      	mov	r5, ip
 8003fa2:	2a08      	cmp	r2, #8
 8003fa4:	d10b      	bne.n	8003fbe <_printf_i+0x112>
 8003fa6:	6823      	ldr	r3, [r4, #0]
 8003fa8:	07db      	lsls	r3, r3, #31
 8003faa:	d508      	bpl.n	8003fbe <_printf_i+0x112>
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	6862      	ldr	r2, [r4, #4]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	bfde      	ittt	le
 8003fb4:	2330      	movle	r3, #48	; 0x30
 8003fb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003fba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003fbe:	ebac 0305 	sub.w	r3, ip, r5
 8003fc2:	6123      	str	r3, [r4, #16]
 8003fc4:	f8cd 8000 	str.w	r8, [sp]
 8003fc8:	463b      	mov	r3, r7
 8003fca:	aa03      	add	r2, sp, #12
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4630      	mov	r0, r6
 8003fd0:	f7ff fef6 	bl	8003dc0 <_printf_common>
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	d14d      	bne.n	8004074 <_printf_i+0x1c8>
 8003fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fdc:	b005      	add	sp, #20
 8003fde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003fe2:	4839      	ldr	r0, [pc, #228]	; (80040c8 <_printf_i+0x21c>)
 8003fe4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003fe8:	6813      	ldr	r3, [r2, #0]
 8003fea:	6821      	ldr	r1, [r4, #0]
 8003fec:	1d1d      	adds	r5, r3, #4
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6015      	str	r5, [r2, #0]
 8003ff2:	060a      	lsls	r2, r1, #24
 8003ff4:	d50b      	bpl.n	800400e <_printf_i+0x162>
 8003ff6:	07ca      	lsls	r2, r1, #31
 8003ff8:	bf44      	itt	mi
 8003ffa:	f041 0120 	orrmi.w	r1, r1, #32
 8003ffe:	6021      	strmi	r1, [r4, #0]
 8004000:	b91b      	cbnz	r3, 800400a <_printf_i+0x15e>
 8004002:	6822      	ldr	r2, [r4, #0]
 8004004:	f022 0220 	bic.w	r2, r2, #32
 8004008:	6022      	str	r2, [r4, #0]
 800400a:	2210      	movs	r2, #16
 800400c:	e7b7      	b.n	8003f7e <_printf_i+0xd2>
 800400e:	064d      	lsls	r5, r1, #25
 8004010:	bf48      	it	mi
 8004012:	b29b      	uxthmi	r3, r3
 8004014:	e7ef      	b.n	8003ff6 <_printf_i+0x14a>
 8004016:	4665      	mov	r5, ip
 8004018:	fbb3 f1f2 	udiv	r1, r3, r2
 800401c:	fb02 3311 	mls	r3, r2, r1, r3
 8004020:	5cc3      	ldrb	r3, [r0, r3]
 8004022:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004026:	460b      	mov	r3, r1
 8004028:	2900      	cmp	r1, #0
 800402a:	d1f5      	bne.n	8004018 <_printf_i+0x16c>
 800402c:	e7b9      	b.n	8003fa2 <_printf_i+0xf6>
 800402e:	6813      	ldr	r3, [r2, #0]
 8004030:	6825      	ldr	r5, [r4, #0]
 8004032:	6961      	ldr	r1, [r4, #20]
 8004034:	1d18      	adds	r0, r3, #4
 8004036:	6010      	str	r0, [r2, #0]
 8004038:	0628      	lsls	r0, r5, #24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	d501      	bpl.n	8004042 <_printf_i+0x196>
 800403e:	6019      	str	r1, [r3, #0]
 8004040:	e002      	b.n	8004048 <_printf_i+0x19c>
 8004042:	066a      	lsls	r2, r5, #25
 8004044:	d5fb      	bpl.n	800403e <_printf_i+0x192>
 8004046:	8019      	strh	r1, [r3, #0]
 8004048:	2300      	movs	r3, #0
 800404a:	6123      	str	r3, [r4, #16]
 800404c:	4665      	mov	r5, ip
 800404e:	e7b9      	b.n	8003fc4 <_printf_i+0x118>
 8004050:	6813      	ldr	r3, [r2, #0]
 8004052:	1d19      	adds	r1, r3, #4
 8004054:	6011      	str	r1, [r2, #0]
 8004056:	681d      	ldr	r5, [r3, #0]
 8004058:	6862      	ldr	r2, [r4, #4]
 800405a:	2100      	movs	r1, #0
 800405c:	4628      	mov	r0, r5
 800405e:	f7fc f8c7 	bl	80001f0 <memchr>
 8004062:	b108      	cbz	r0, 8004068 <_printf_i+0x1bc>
 8004064:	1b40      	subs	r0, r0, r5
 8004066:	6060      	str	r0, [r4, #4]
 8004068:	6863      	ldr	r3, [r4, #4]
 800406a:	6123      	str	r3, [r4, #16]
 800406c:	2300      	movs	r3, #0
 800406e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004072:	e7a7      	b.n	8003fc4 <_printf_i+0x118>
 8004074:	6923      	ldr	r3, [r4, #16]
 8004076:	462a      	mov	r2, r5
 8004078:	4639      	mov	r1, r7
 800407a:	4630      	mov	r0, r6
 800407c:	47c0      	blx	r8
 800407e:	3001      	adds	r0, #1
 8004080:	d0aa      	beq.n	8003fd8 <_printf_i+0x12c>
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	079b      	lsls	r3, r3, #30
 8004086:	d413      	bmi.n	80040b0 <_printf_i+0x204>
 8004088:	68e0      	ldr	r0, [r4, #12]
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	4298      	cmp	r0, r3
 800408e:	bfb8      	it	lt
 8004090:	4618      	movlt	r0, r3
 8004092:	e7a3      	b.n	8003fdc <_printf_i+0x130>
 8004094:	2301      	movs	r3, #1
 8004096:	464a      	mov	r2, r9
 8004098:	4639      	mov	r1, r7
 800409a:	4630      	mov	r0, r6
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d09a      	beq.n	8003fd8 <_printf_i+0x12c>
 80040a2:	3501      	adds	r5, #1
 80040a4:	68e3      	ldr	r3, [r4, #12]
 80040a6:	9a03      	ldr	r2, [sp, #12]
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	42ab      	cmp	r3, r5
 80040ac:	dcf2      	bgt.n	8004094 <_printf_i+0x1e8>
 80040ae:	e7eb      	b.n	8004088 <_printf_i+0x1dc>
 80040b0:	2500      	movs	r5, #0
 80040b2:	f104 0919 	add.w	r9, r4, #25
 80040b6:	e7f5      	b.n	80040a4 <_printf_i+0x1f8>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1ac      	bne.n	8004016 <_printf_i+0x16a>
 80040bc:	7803      	ldrb	r3, [r0, #0]
 80040be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040c6:	e76c      	b.n	8003fa2 <_printf_i+0xf6>
 80040c8:	08007cf2 	.word	0x08007cf2
 80040cc:	08007d03 	.word	0x08007d03

080040d0 <_scanf_float>:
 80040d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d4:	469a      	mov	sl, r3
 80040d6:	688b      	ldr	r3, [r1, #8]
 80040d8:	4616      	mov	r6, r2
 80040da:	1e5a      	subs	r2, r3, #1
 80040dc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80040e0:	b087      	sub	sp, #28
 80040e2:	bf83      	ittte	hi
 80040e4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80040e8:	189b      	addhi	r3, r3, r2
 80040ea:	9301      	strhi	r3, [sp, #4]
 80040ec:	2300      	movls	r3, #0
 80040ee:	bf86      	itte	hi
 80040f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80040f4:	608b      	strhi	r3, [r1, #8]
 80040f6:	9301      	strls	r3, [sp, #4]
 80040f8:	680b      	ldr	r3, [r1, #0]
 80040fa:	4688      	mov	r8, r1
 80040fc:	f04f 0b00 	mov.w	fp, #0
 8004100:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8004104:	f848 3b1c 	str.w	r3, [r8], #28
 8004108:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800410c:	4607      	mov	r7, r0
 800410e:	460c      	mov	r4, r1
 8004110:	4645      	mov	r5, r8
 8004112:	465a      	mov	r2, fp
 8004114:	46d9      	mov	r9, fp
 8004116:	f8cd b008 	str.w	fp, [sp, #8]
 800411a:	68a1      	ldr	r1, [r4, #8]
 800411c:	b181      	cbz	r1, 8004140 <_scanf_float+0x70>
 800411e:	6833      	ldr	r3, [r6, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b49      	cmp	r3, #73	; 0x49
 8004124:	d071      	beq.n	800420a <_scanf_float+0x13a>
 8004126:	d84d      	bhi.n	80041c4 <_scanf_float+0xf4>
 8004128:	2b39      	cmp	r3, #57	; 0x39
 800412a:	d840      	bhi.n	80041ae <_scanf_float+0xde>
 800412c:	2b31      	cmp	r3, #49	; 0x31
 800412e:	f080 8088 	bcs.w	8004242 <_scanf_float+0x172>
 8004132:	2b2d      	cmp	r3, #45	; 0x2d
 8004134:	f000 8090 	beq.w	8004258 <_scanf_float+0x188>
 8004138:	d815      	bhi.n	8004166 <_scanf_float+0x96>
 800413a:	2b2b      	cmp	r3, #43	; 0x2b
 800413c:	f000 808c 	beq.w	8004258 <_scanf_float+0x188>
 8004140:	f1b9 0f00 	cmp.w	r9, #0
 8004144:	d003      	beq.n	800414e <_scanf_float+0x7e>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	3a01      	subs	r2, #1
 8004150:	2a01      	cmp	r2, #1
 8004152:	f200 80ea 	bhi.w	800432a <_scanf_float+0x25a>
 8004156:	4545      	cmp	r5, r8
 8004158:	f200 80dc 	bhi.w	8004314 <_scanf_float+0x244>
 800415c:	2601      	movs	r6, #1
 800415e:	4630      	mov	r0, r6
 8004160:	b007      	add	sp, #28
 8004162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004166:	2b2e      	cmp	r3, #46	; 0x2e
 8004168:	f000 809f 	beq.w	80042aa <_scanf_float+0x1da>
 800416c:	2b30      	cmp	r3, #48	; 0x30
 800416e:	d1e7      	bne.n	8004140 <_scanf_float+0x70>
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004176:	d064      	beq.n	8004242 <_scanf_float+0x172>
 8004178:	9b01      	ldr	r3, [sp, #4]
 800417a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800417e:	6020      	str	r0, [r4, #0]
 8004180:	f109 0901 	add.w	r9, r9, #1
 8004184:	b11b      	cbz	r3, 800418e <_scanf_float+0xbe>
 8004186:	3b01      	subs	r3, #1
 8004188:	3101      	adds	r1, #1
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	60a1      	str	r1, [r4, #8]
 800418e:	68a3      	ldr	r3, [r4, #8]
 8004190:	3b01      	subs	r3, #1
 8004192:	60a3      	str	r3, [r4, #8]
 8004194:	6923      	ldr	r3, [r4, #16]
 8004196:	3301      	adds	r3, #1
 8004198:	6123      	str	r3, [r4, #16]
 800419a:	6873      	ldr	r3, [r6, #4]
 800419c:	3b01      	subs	r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	6073      	str	r3, [r6, #4]
 80041a2:	f340 80ac 	ble.w	80042fe <_scanf_float+0x22e>
 80041a6:	6833      	ldr	r3, [r6, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	6033      	str	r3, [r6, #0]
 80041ac:	e7b5      	b.n	800411a <_scanf_float+0x4a>
 80041ae:	2b45      	cmp	r3, #69	; 0x45
 80041b0:	f000 8085 	beq.w	80042be <_scanf_float+0x1ee>
 80041b4:	2b46      	cmp	r3, #70	; 0x46
 80041b6:	d06a      	beq.n	800428e <_scanf_float+0x1be>
 80041b8:	2b41      	cmp	r3, #65	; 0x41
 80041ba:	d1c1      	bne.n	8004140 <_scanf_float+0x70>
 80041bc:	2a01      	cmp	r2, #1
 80041be:	d1bf      	bne.n	8004140 <_scanf_float+0x70>
 80041c0:	2202      	movs	r2, #2
 80041c2:	e046      	b.n	8004252 <_scanf_float+0x182>
 80041c4:	2b65      	cmp	r3, #101	; 0x65
 80041c6:	d07a      	beq.n	80042be <_scanf_float+0x1ee>
 80041c8:	d818      	bhi.n	80041fc <_scanf_float+0x12c>
 80041ca:	2b54      	cmp	r3, #84	; 0x54
 80041cc:	d066      	beq.n	800429c <_scanf_float+0x1cc>
 80041ce:	d811      	bhi.n	80041f4 <_scanf_float+0x124>
 80041d0:	2b4e      	cmp	r3, #78	; 0x4e
 80041d2:	d1b5      	bne.n	8004140 <_scanf_float+0x70>
 80041d4:	2a00      	cmp	r2, #0
 80041d6:	d146      	bne.n	8004266 <_scanf_float+0x196>
 80041d8:	f1b9 0f00 	cmp.w	r9, #0
 80041dc:	d145      	bne.n	800426a <_scanf_float+0x19a>
 80041de:	6821      	ldr	r1, [r4, #0]
 80041e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80041e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80041e8:	d13f      	bne.n	800426a <_scanf_float+0x19a>
 80041ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80041ee:	6021      	str	r1, [r4, #0]
 80041f0:	2201      	movs	r2, #1
 80041f2:	e02e      	b.n	8004252 <_scanf_float+0x182>
 80041f4:	2b59      	cmp	r3, #89	; 0x59
 80041f6:	d01e      	beq.n	8004236 <_scanf_float+0x166>
 80041f8:	2b61      	cmp	r3, #97	; 0x61
 80041fa:	e7de      	b.n	80041ba <_scanf_float+0xea>
 80041fc:	2b6e      	cmp	r3, #110	; 0x6e
 80041fe:	d0e9      	beq.n	80041d4 <_scanf_float+0x104>
 8004200:	d815      	bhi.n	800422e <_scanf_float+0x15e>
 8004202:	2b66      	cmp	r3, #102	; 0x66
 8004204:	d043      	beq.n	800428e <_scanf_float+0x1be>
 8004206:	2b69      	cmp	r3, #105	; 0x69
 8004208:	d19a      	bne.n	8004140 <_scanf_float+0x70>
 800420a:	f1bb 0f00 	cmp.w	fp, #0
 800420e:	d138      	bne.n	8004282 <_scanf_float+0x1b2>
 8004210:	f1b9 0f00 	cmp.w	r9, #0
 8004214:	d197      	bne.n	8004146 <_scanf_float+0x76>
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800421c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004220:	d195      	bne.n	800414e <_scanf_float+0x7e>
 8004222:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004226:	6021      	str	r1, [r4, #0]
 8004228:	f04f 0b01 	mov.w	fp, #1
 800422c:	e011      	b.n	8004252 <_scanf_float+0x182>
 800422e:	2b74      	cmp	r3, #116	; 0x74
 8004230:	d034      	beq.n	800429c <_scanf_float+0x1cc>
 8004232:	2b79      	cmp	r3, #121	; 0x79
 8004234:	d184      	bne.n	8004140 <_scanf_float+0x70>
 8004236:	f1bb 0f07 	cmp.w	fp, #7
 800423a:	d181      	bne.n	8004140 <_scanf_float+0x70>
 800423c:	f04f 0b08 	mov.w	fp, #8
 8004240:	e007      	b.n	8004252 <_scanf_float+0x182>
 8004242:	eb12 0f0b 	cmn.w	r2, fp
 8004246:	f47f af7b 	bne.w	8004140 <_scanf_float+0x70>
 800424a:	6821      	ldr	r1, [r4, #0]
 800424c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8004250:	6021      	str	r1, [r4, #0]
 8004252:	702b      	strb	r3, [r5, #0]
 8004254:	3501      	adds	r5, #1
 8004256:	e79a      	b.n	800418e <_scanf_float+0xbe>
 8004258:	6821      	ldr	r1, [r4, #0]
 800425a:	0608      	lsls	r0, r1, #24
 800425c:	f57f af70 	bpl.w	8004140 <_scanf_float+0x70>
 8004260:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8004264:	e7f4      	b.n	8004250 <_scanf_float+0x180>
 8004266:	2a02      	cmp	r2, #2
 8004268:	d047      	beq.n	80042fa <_scanf_float+0x22a>
 800426a:	f1bb 0f01 	cmp.w	fp, #1
 800426e:	d003      	beq.n	8004278 <_scanf_float+0x1a8>
 8004270:	f1bb 0f04 	cmp.w	fp, #4
 8004274:	f47f af64 	bne.w	8004140 <_scanf_float+0x70>
 8004278:	f10b 0b01 	add.w	fp, fp, #1
 800427c:	fa5f fb8b 	uxtb.w	fp, fp
 8004280:	e7e7      	b.n	8004252 <_scanf_float+0x182>
 8004282:	f1bb 0f03 	cmp.w	fp, #3
 8004286:	d0f7      	beq.n	8004278 <_scanf_float+0x1a8>
 8004288:	f1bb 0f05 	cmp.w	fp, #5
 800428c:	e7f2      	b.n	8004274 <_scanf_float+0x1a4>
 800428e:	f1bb 0f02 	cmp.w	fp, #2
 8004292:	f47f af55 	bne.w	8004140 <_scanf_float+0x70>
 8004296:	f04f 0b03 	mov.w	fp, #3
 800429a:	e7da      	b.n	8004252 <_scanf_float+0x182>
 800429c:	f1bb 0f06 	cmp.w	fp, #6
 80042a0:	f47f af4e 	bne.w	8004140 <_scanf_float+0x70>
 80042a4:	f04f 0b07 	mov.w	fp, #7
 80042a8:	e7d3      	b.n	8004252 <_scanf_float+0x182>
 80042aa:	6821      	ldr	r1, [r4, #0]
 80042ac:	0588      	lsls	r0, r1, #22
 80042ae:	f57f af47 	bpl.w	8004140 <_scanf_float+0x70>
 80042b2:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 80042b6:	6021      	str	r1, [r4, #0]
 80042b8:	f8cd 9008 	str.w	r9, [sp, #8]
 80042bc:	e7c9      	b.n	8004252 <_scanf_float+0x182>
 80042be:	6821      	ldr	r1, [r4, #0]
 80042c0:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 80042c4:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80042c8:	d006      	beq.n	80042d8 <_scanf_float+0x208>
 80042ca:	0548      	lsls	r0, r1, #21
 80042cc:	f57f af38 	bpl.w	8004140 <_scanf_float+0x70>
 80042d0:	f1b9 0f00 	cmp.w	r9, #0
 80042d4:	f43f af3b 	beq.w	800414e <_scanf_float+0x7e>
 80042d8:	0588      	lsls	r0, r1, #22
 80042da:	bf58      	it	pl
 80042dc:	9802      	ldrpl	r0, [sp, #8]
 80042de:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80042e2:	bf58      	it	pl
 80042e4:	eba9 0000 	subpl.w	r0, r9, r0
 80042e8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80042ec:	bf58      	it	pl
 80042ee:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80042f2:	6021      	str	r1, [r4, #0]
 80042f4:	f04f 0900 	mov.w	r9, #0
 80042f8:	e7ab      	b.n	8004252 <_scanf_float+0x182>
 80042fa:	2203      	movs	r2, #3
 80042fc:	e7a9      	b.n	8004252 <_scanf_float+0x182>
 80042fe:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004302:	9205      	str	r2, [sp, #20]
 8004304:	4631      	mov	r1, r6
 8004306:	4638      	mov	r0, r7
 8004308:	4798      	blx	r3
 800430a:	9a05      	ldr	r2, [sp, #20]
 800430c:	2800      	cmp	r0, #0
 800430e:	f43f af04 	beq.w	800411a <_scanf_float+0x4a>
 8004312:	e715      	b.n	8004140 <_scanf_float+0x70>
 8004314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004318:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800431c:	4632      	mov	r2, r6
 800431e:	4638      	mov	r0, r7
 8004320:	4798      	blx	r3
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	3b01      	subs	r3, #1
 8004326:	6123      	str	r3, [r4, #16]
 8004328:	e715      	b.n	8004156 <_scanf_float+0x86>
 800432a:	f10b 33ff 	add.w	r3, fp, #4294967295
 800432e:	2b06      	cmp	r3, #6
 8004330:	d80a      	bhi.n	8004348 <_scanf_float+0x278>
 8004332:	f1bb 0f02 	cmp.w	fp, #2
 8004336:	d968      	bls.n	800440a <_scanf_float+0x33a>
 8004338:	f1ab 0b03 	sub.w	fp, fp, #3
 800433c:	fa5f fb8b 	uxtb.w	fp, fp
 8004340:	eba5 0b0b 	sub.w	fp, r5, fp
 8004344:	455d      	cmp	r5, fp
 8004346:	d14b      	bne.n	80043e0 <_scanf_float+0x310>
 8004348:	6823      	ldr	r3, [r4, #0]
 800434a:	05da      	lsls	r2, r3, #23
 800434c:	d51f      	bpl.n	800438e <_scanf_float+0x2be>
 800434e:	055b      	lsls	r3, r3, #21
 8004350:	d468      	bmi.n	8004424 <_scanf_float+0x354>
 8004352:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004356:	6923      	ldr	r3, [r4, #16]
 8004358:	2965      	cmp	r1, #101	; 0x65
 800435a:	f103 33ff 	add.w	r3, r3, #4294967295
 800435e:	f105 3bff 	add.w	fp, r5, #4294967295
 8004362:	6123      	str	r3, [r4, #16]
 8004364:	d00d      	beq.n	8004382 <_scanf_float+0x2b2>
 8004366:	2945      	cmp	r1, #69	; 0x45
 8004368:	d00b      	beq.n	8004382 <_scanf_float+0x2b2>
 800436a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800436e:	4632      	mov	r2, r6
 8004370:	4638      	mov	r0, r7
 8004372:	4798      	blx	r3
 8004374:	6923      	ldr	r3, [r4, #16]
 8004376:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800437a:	3b01      	subs	r3, #1
 800437c:	f1a5 0b02 	sub.w	fp, r5, #2
 8004380:	6123      	str	r3, [r4, #16]
 8004382:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004386:	4632      	mov	r2, r6
 8004388:	4638      	mov	r0, r7
 800438a:	4798      	blx	r3
 800438c:	465d      	mov	r5, fp
 800438e:	6826      	ldr	r6, [r4, #0]
 8004390:	f016 0610 	ands.w	r6, r6, #16
 8004394:	d17a      	bne.n	800448c <_scanf_float+0x3bc>
 8004396:	702e      	strb	r6, [r5, #0]
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800439e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a2:	d142      	bne.n	800442a <_scanf_float+0x35a>
 80043a4:	9b02      	ldr	r3, [sp, #8]
 80043a6:	eba9 0303 	sub.w	r3, r9, r3
 80043aa:	425a      	negs	r2, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d149      	bne.n	8004444 <_scanf_float+0x374>
 80043b0:	2200      	movs	r2, #0
 80043b2:	4641      	mov	r1, r8
 80043b4:	4638      	mov	r0, r7
 80043b6:	f000 febb 	bl	8005130 <_strtod_r>
 80043ba:	6825      	ldr	r5, [r4, #0]
 80043bc:	f8da 3000 	ldr.w	r3, [sl]
 80043c0:	f015 0f02 	tst.w	r5, #2
 80043c4:	f103 0204 	add.w	r2, r3, #4
 80043c8:	ec59 8b10 	vmov	r8, r9, d0
 80043cc:	f8ca 2000 	str.w	r2, [sl]
 80043d0:	d043      	beq.n	800445a <_scanf_float+0x38a>
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	e9c3 8900 	strd	r8, r9, [r3]
 80043d8:	68e3      	ldr	r3, [r4, #12]
 80043da:	3301      	adds	r3, #1
 80043dc:	60e3      	str	r3, [r4, #12]
 80043de:	e6be      	b.n	800415e <_scanf_float+0x8e>
 80043e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043e8:	4632      	mov	r2, r6
 80043ea:	4638      	mov	r0, r7
 80043ec:	4798      	blx	r3
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	6123      	str	r3, [r4, #16]
 80043f4:	e7a6      	b.n	8004344 <_scanf_float+0x274>
 80043f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043fa:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043fe:	4632      	mov	r2, r6
 8004400:	4638      	mov	r0, r7
 8004402:	4798      	blx	r3
 8004404:	6923      	ldr	r3, [r4, #16]
 8004406:	3b01      	subs	r3, #1
 8004408:	6123      	str	r3, [r4, #16]
 800440a:	4545      	cmp	r5, r8
 800440c:	d8f3      	bhi.n	80043f6 <_scanf_float+0x326>
 800440e:	e6a5      	b.n	800415c <_scanf_float+0x8c>
 8004410:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004414:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004418:	4632      	mov	r2, r6
 800441a:	4638      	mov	r0, r7
 800441c:	4798      	blx	r3
 800441e:	6923      	ldr	r3, [r4, #16]
 8004420:	3b01      	subs	r3, #1
 8004422:	6123      	str	r3, [r4, #16]
 8004424:	4545      	cmp	r5, r8
 8004426:	d8f3      	bhi.n	8004410 <_scanf_float+0x340>
 8004428:	e698      	b.n	800415c <_scanf_float+0x8c>
 800442a:	9b03      	ldr	r3, [sp, #12]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0bf      	beq.n	80043b0 <_scanf_float+0x2e0>
 8004430:	9904      	ldr	r1, [sp, #16]
 8004432:	230a      	movs	r3, #10
 8004434:	4632      	mov	r2, r6
 8004436:	3101      	adds	r1, #1
 8004438:	4638      	mov	r0, r7
 800443a:	f000 ff45 	bl	80052c8 <_strtol_r>
 800443e:	9b03      	ldr	r3, [sp, #12]
 8004440:	9d04      	ldr	r5, [sp, #16]
 8004442:	1ac2      	subs	r2, r0, r3
 8004444:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004448:	429d      	cmp	r5, r3
 800444a:	bf28      	it	cs
 800444c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8004450:	490f      	ldr	r1, [pc, #60]	; (8004490 <_scanf_float+0x3c0>)
 8004452:	4628      	mov	r0, r5
 8004454:	f000 f83c 	bl	80044d0 <siprintf>
 8004458:	e7aa      	b.n	80043b0 <_scanf_float+0x2e0>
 800445a:	f015 0504 	ands.w	r5, r5, #4
 800445e:	d1b8      	bne.n	80043d2 <_scanf_float+0x302>
 8004460:	681f      	ldr	r7, [r3, #0]
 8004462:	ee10 2a10 	vmov	r2, s0
 8004466:	464b      	mov	r3, r9
 8004468:	ee10 0a10 	vmov	r0, s0
 800446c:	4649      	mov	r1, r9
 800446e:	f7fc fb65 	bl	8000b3c <__aeabi_dcmpun>
 8004472:	b128      	cbz	r0, 8004480 <_scanf_float+0x3b0>
 8004474:	4628      	mov	r0, r5
 8004476:	f000 f825 	bl	80044c4 <nanf>
 800447a:	ed87 0a00 	vstr	s0, [r7]
 800447e:	e7ab      	b.n	80043d8 <_scanf_float+0x308>
 8004480:	4640      	mov	r0, r8
 8004482:	4649      	mov	r1, r9
 8004484:	f7fc fbb8 	bl	8000bf8 <__aeabi_d2f>
 8004488:	6038      	str	r0, [r7, #0]
 800448a:	e7a5      	b.n	80043d8 <_scanf_float+0x308>
 800448c:	2600      	movs	r6, #0
 800448e:	e666      	b.n	800415e <_scanf_float+0x8e>
 8004490:	08007d14 	.word	0x08007d14

08004494 <iprintf>:
 8004494:	b40f      	push	{r0, r1, r2, r3}
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <iprintf+0x2c>)
 8004498:	b513      	push	{r0, r1, r4, lr}
 800449a:	681c      	ldr	r4, [r3, #0]
 800449c:	b124      	cbz	r4, 80044a8 <iprintf+0x14>
 800449e:	69a3      	ldr	r3, [r4, #24]
 80044a0:	b913      	cbnz	r3, 80044a8 <iprintf+0x14>
 80044a2:	4620      	mov	r0, r4
 80044a4:	f001 fda8 	bl	8005ff8 <__sinit>
 80044a8:	ab05      	add	r3, sp, #20
 80044aa:	9a04      	ldr	r2, [sp, #16]
 80044ac:	68a1      	ldr	r1, [r4, #8]
 80044ae:	9301      	str	r3, [sp, #4]
 80044b0:	4620      	mov	r0, r4
 80044b2:	f002 ffbb 	bl	800742c <_vfiprintf_r>
 80044b6:	b002      	add	sp, #8
 80044b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044bc:	b004      	add	sp, #16
 80044be:	4770      	bx	lr
 80044c0:	2000000c 	.word	0x2000000c

080044c4 <nanf>:
 80044c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80044cc <nanf+0x8>
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	7fc00000 	.word	0x7fc00000

080044d0 <siprintf>:
 80044d0:	b40e      	push	{r1, r2, r3}
 80044d2:	b500      	push	{lr}
 80044d4:	b09c      	sub	sp, #112	; 0x70
 80044d6:	ab1d      	add	r3, sp, #116	; 0x74
 80044d8:	9002      	str	r0, [sp, #8]
 80044da:	9006      	str	r0, [sp, #24]
 80044dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044e0:	4809      	ldr	r0, [pc, #36]	; (8004508 <siprintf+0x38>)
 80044e2:	9107      	str	r1, [sp, #28]
 80044e4:	9104      	str	r1, [sp, #16]
 80044e6:	4909      	ldr	r1, [pc, #36]	; (800450c <siprintf+0x3c>)
 80044e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044ec:	9105      	str	r1, [sp, #20]
 80044ee:	6800      	ldr	r0, [r0, #0]
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	a902      	add	r1, sp, #8
 80044f4:	f002 fe78 	bl	80071e8 <_svfiprintf_r>
 80044f8:	9b02      	ldr	r3, [sp, #8]
 80044fa:	2200      	movs	r2, #0
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	b01c      	add	sp, #112	; 0x70
 8004500:	f85d eb04 	ldr.w	lr, [sp], #4
 8004504:	b003      	add	sp, #12
 8004506:	4770      	bx	lr
 8004508:	2000000c 	.word	0x2000000c
 800450c:	ffff0208 	.word	0xffff0208

08004510 <sulp>:
 8004510:	b570      	push	{r4, r5, r6, lr}
 8004512:	4604      	mov	r4, r0
 8004514:	460d      	mov	r5, r1
 8004516:	ec45 4b10 	vmov	d0, r4, r5
 800451a:	4616      	mov	r6, r2
 800451c:	f002 fc20 	bl	8006d60 <__ulp>
 8004520:	ec51 0b10 	vmov	r0, r1, d0
 8004524:	b17e      	cbz	r6, 8004546 <sulp+0x36>
 8004526:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800452a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800452e:	2b00      	cmp	r3, #0
 8004530:	dd09      	ble.n	8004546 <sulp+0x36>
 8004532:	051b      	lsls	r3, r3, #20
 8004534:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004538:	2400      	movs	r4, #0
 800453a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800453e:	4622      	mov	r2, r4
 8004540:	462b      	mov	r3, r5
 8004542:	f7fc f861 	bl	8000608 <__aeabi_dmul>
 8004546:	bd70      	pop	{r4, r5, r6, pc}

08004548 <_strtod_l>:
 8004548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454c:	461f      	mov	r7, r3
 800454e:	b0a1      	sub	sp, #132	; 0x84
 8004550:	2300      	movs	r3, #0
 8004552:	4681      	mov	r9, r0
 8004554:	4638      	mov	r0, r7
 8004556:	460e      	mov	r6, r1
 8004558:	9217      	str	r2, [sp, #92]	; 0x5c
 800455a:	931c      	str	r3, [sp, #112]	; 0x70
 800455c:	f002 f8ff 	bl	800675e <__localeconv_l>
 8004560:	4680      	mov	r8, r0
 8004562:	6800      	ldr	r0, [r0, #0]
 8004564:	f7fb fe3c 	bl	80001e0 <strlen>
 8004568:	f04f 0a00 	mov.w	sl, #0
 800456c:	4604      	mov	r4, r0
 800456e:	f04f 0b00 	mov.w	fp, #0
 8004572:	961b      	str	r6, [sp, #108]	; 0x6c
 8004574:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004576:	781a      	ldrb	r2, [r3, #0]
 8004578:	2a0d      	cmp	r2, #13
 800457a:	d832      	bhi.n	80045e2 <_strtod_l+0x9a>
 800457c:	2a09      	cmp	r2, #9
 800457e:	d236      	bcs.n	80045ee <_strtod_l+0xa6>
 8004580:	2a00      	cmp	r2, #0
 8004582:	d03e      	beq.n	8004602 <_strtod_l+0xba>
 8004584:	2300      	movs	r3, #0
 8004586:	930d      	str	r3, [sp, #52]	; 0x34
 8004588:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800458a:	782b      	ldrb	r3, [r5, #0]
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	f040 80ac 	bne.w	80046ea <_strtod_l+0x1a2>
 8004592:	786b      	ldrb	r3, [r5, #1]
 8004594:	2b58      	cmp	r3, #88	; 0x58
 8004596:	d001      	beq.n	800459c <_strtod_l+0x54>
 8004598:	2b78      	cmp	r3, #120	; 0x78
 800459a:	d167      	bne.n	800466c <_strtod_l+0x124>
 800459c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800459e:	9301      	str	r3, [sp, #4]
 80045a0:	ab1c      	add	r3, sp, #112	; 0x70
 80045a2:	9300      	str	r3, [sp, #0]
 80045a4:	9702      	str	r7, [sp, #8]
 80045a6:	ab1d      	add	r3, sp, #116	; 0x74
 80045a8:	4a88      	ldr	r2, [pc, #544]	; (80047cc <_strtod_l+0x284>)
 80045aa:	a91b      	add	r1, sp, #108	; 0x6c
 80045ac:	4648      	mov	r0, r9
 80045ae:	f001 fdfc 	bl	80061aa <__gethex>
 80045b2:	f010 0407 	ands.w	r4, r0, #7
 80045b6:	4606      	mov	r6, r0
 80045b8:	d005      	beq.n	80045c6 <_strtod_l+0x7e>
 80045ba:	2c06      	cmp	r4, #6
 80045bc:	d12b      	bne.n	8004616 <_strtod_l+0xce>
 80045be:	3501      	adds	r5, #1
 80045c0:	2300      	movs	r3, #0
 80045c2:	951b      	str	r5, [sp, #108]	; 0x6c
 80045c4:	930d      	str	r3, [sp, #52]	; 0x34
 80045c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 859a 	bne.w	8005102 <_strtod_l+0xbba>
 80045ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80045d0:	b1e3      	cbz	r3, 800460c <_strtod_l+0xc4>
 80045d2:	4652      	mov	r2, sl
 80045d4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80045d8:	ec43 2b10 	vmov	d0, r2, r3
 80045dc:	b021      	add	sp, #132	; 0x84
 80045de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e2:	2a2b      	cmp	r2, #43	; 0x2b
 80045e4:	d015      	beq.n	8004612 <_strtod_l+0xca>
 80045e6:	2a2d      	cmp	r2, #45	; 0x2d
 80045e8:	d004      	beq.n	80045f4 <_strtod_l+0xac>
 80045ea:	2a20      	cmp	r2, #32
 80045ec:	d1ca      	bne.n	8004584 <_strtod_l+0x3c>
 80045ee:	3301      	adds	r3, #1
 80045f0:	931b      	str	r3, [sp, #108]	; 0x6c
 80045f2:	e7bf      	b.n	8004574 <_strtod_l+0x2c>
 80045f4:	2201      	movs	r2, #1
 80045f6:	920d      	str	r2, [sp, #52]	; 0x34
 80045f8:	1c5a      	adds	r2, r3, #1
 80045fa:	921b      	str	r2, [sp, #108]	; 0x6c
 80045fc:	785b      	ldrb	r3, [r3, #1]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1c2      	bne.n	8004588 <_strtod_l+0x40>
 8004602:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004604:	961b      	str	r6, [sp, #108]	; 0x6c
 8004606:	2b00      	cmp	r3, #0
 8004608:	f040 8579 	bne.w	80050fe <_strtod_l+0xbb6>
 800460c:	4652      	mov	r2, sl
 800460e:	465b      	mov	r3, fp
 8004610:	e7e2      	b.n	80045d8 <_strtod_l+0x90>
 8004612:	2200      	movs	r2, #0
 8004614:	e7ef      	b.n	80045f6 <_strtod_l+0xae>
 8004616:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004618:	b13a      	cbz	r2, 800462a <_strtod_l+0xe2>
 800461a:	2135      	movs	r1, #53	; 0x35
 800461c:	a81e      	add	r0, sp, #120	; 0x78
 800461e:	f002 fc97 	bl	8006f50 <__copybits>
 8004622:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004624:	4648      	mov	r0, r9
 8004626:	f002 f904 	bl	8006832 <_Bfree>
 800462a:	3c01      	subs	r4, #1
 800462c:	2c04      	cmp	r4, #4
 800462e:	d806      	bhi.n	800463e <_strtod_l+0xf6>
 8004630:	e8df f004 	tbb	[pc, r4]
 8004634:	1714030a 	.word	0x1714030a
 8004638:	0a          	.byte	0x0a
 8004639:	00          	.byte	0x00
 800463a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800463e:	0730      	lsls	r0, r6, #28
 8004640:	d5c1      	bpl.n	80045c6 <_strtod_l+0x7e>
 8004642:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004646:	e7be      	b.n	80045c6 <_strtod_l+0x7e>
 8004648:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800464c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800464e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004652:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004656:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800465a:	e7f0      	b.n	800463e <_strtod_l+0xf6>
 800465c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80047d0 <_strtod_l+0x288>
 8004660:	e7ed      	b.n	800463e <_strtod_l+0xf6>
 8004662:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004666:	f04f 3aff 	mov.w	sl, #4294967295
 800466a:	e7e8      	b.n	800463e <_strtod_l+0xf6>
 800466c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	921b      	str	r2, [sp, #108]	; 0x6c
 8004672:	785b      	ldrb	r3, [r3, #1]
 8004674:	2b30      	cmp	r3, #48	; 0x30
 8004676:	d0f9      	beq.n	800466c <_strtod_l+0x124>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0a4      	beq.n	80045c6 <_strtod_l+0x7e>
 800467c:	2301      	movs	r3, #1
 800467e:	2500      	movs	r5, #0
 8004680:	9306      	str	r3, [sp, #24]
 8004682:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004684:	9308      	str	r3, [sp, #32]
 8004686:	9507      	str	r5, [sp, #28]
 8004688:	9505      	str	r5, [sp, #20]
 800468a:	220a      	movs	r2, #10
 800468c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800468e:	7807      	ldrb	r7, [r0, #0]
 8004690:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8004694:	b2d9      	uxtb	r1, r3
 8004696:	2909      	cmp	r1, #9
 8004698:	d929      	bls.n	80046ee <_strtod_l+0x1a6>
 800469a:	4622      	mov	r2, r4
 800469c:	f8d8 1000 	ldr.w	r1, [r8]
 80046a0:	f003 f82d 	bl	80076fe <strncmp>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d031      	beq.n	800470c <_strtod_l+0x1c4>
 80046a8:	2000      	movs	r0, #0
 80046aa:	9c05      	ldr	r4, [sp, #20]
 80046ac:	9004      	str	r0, [sp, #16]
 80046ae:	463b      	mov	r3, r7
 80046b0:	4602      	mov	r2, r0
 80046b2:	2b65      	cmp	r3, #101	; 0x65
 80046b4:	d001      	beq.n	80046ba <_strtod_l+0x172>
 80046b6:	2b45      	cmp	r3, #69	; 0x45
 80046b8:	d114      	bne.n	80046e4 <_strtod_l+0x19c>
 80046ba:	b924      	cbnz	r4, 80046c6 <_strtod_l+0x17e>
 80046bc:	b910      	cbnz	r0, 80046c4 <_strtod_l+0x17c>
 80046be:	9b06      	ldr	r3, [sp, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d09e      	beq.n	8004602 <_strtod_l+0xba>
 80046c4:	2400      	movs	r4, #0
 80046c6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80046c8:	1c73      	adds	r3, r6, #1
 80046ca:	931b      	str	r3, [sp, #108]	; 0x6c
 80046cc:	7873      	ldrb	r3, [r6, #1]
 80046ce:	2b2b      	cmp	r3, #43	; 0x2b
 80046d0:	d078      	beq.n	80047c4 <_strtod_l+0x27c>
 80046d2:	2b2d      	cmp	r3, #45	; 0x2d
 80046d4:	d070      	beq.n	80047b8 <_strtod_l+0x270>
 80046d6:	f04f 0c00 	mov.w	ip, #0
 80046da:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80046de:	2f09      	cmp	r7, #9
 80046e0:	d97c      	bls.n	80047dc <_strtod_l+0x294>
 80046e2:	961b      	str	r6, [sp, #108]	; 0x6c
 80046e4:	f04f 0e00 	mov.w	lr, #0
 80046e8:	e09a      	b.n	8004820 <_strtod_l+0x2d8>
 80046ea:	2300      	movs	r3, #0
 80046ec:	e7c7      	b.n	800467e <_strtod_l+0x136>
 80046ee:	9905      	ldr	r1, [sp, #20]
 80046f0:	2908      	cmp	r1, #8
 80046f2:	bfdd      	ittte	le
 80046f4:	9907      	ldrle	r1, [sp, #28]
 80046f6:	fb02 3301 	mlale	r3, r2, r1, r3
 80046fa:	9307      	strle	r3, [sp, #28]
 80046fc:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004700:	9b05      	ldr	r3, [sp, #20]
 8004702:	3001      	adds	r0, #1
 8004704:	3301      	adds	r3, #1
 8004706:	9305      	str	r3, [sp, #20]
 8004708:	901b      	str	r0, [sp, #108]	; 0x6c
 800470a:	e7bf      	b.n	800468c <_strtod_l+0x144>
 800470c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800470e:	191a      	adds	r2, r3, r4
 8004710:	921b      	str	r2, [sp, #108]	; 0x6c
 8004712:	9a05      	ldr	r2, [sp, #20]
 8004714:	5d1b      	ldrb	r3, [r3, r4]
 8004716:	2a00      	cmp	r2, #0
 8004718:	d037      	beq.n	800478a <_strtod_l+0x242>
 800471a:	9c05      	ldr	r4, [sp, #20]
 800471c:	4602      	mov	r2, r0
 800471e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004722:	2909      	cmp	r1, #9
 8004724:	d913      	bls.n	800474e <_strtod_l+0x206>
 8004726:	2101      	movs	r1, #1
 8004728:	9104      	str	r1, [sp, #16]
 800472a:	e7c2      	b.n	80046b2 <_strtod_l+0x16a>
 800472c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	921b      	str	r2, [sp, #108]	; 0x6c
 8004732:	785b      	ldrb	r3, [r3, #1]
 8004734:	3001      	adds	r0, #1
 8004736:	2b30      	cmp	r3, #48	; 0x30
 8004738:	d0f8      	beq.n	800472c <_strtod_l+0x1e4>
 800473a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800473e:	2a08      	cmp	r2, #8
 8004740:	f200 84e4 	bhi.w	800510c <_strtod_l+0xbc4>
 8004744:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004746:	9208      	str	r2, [sp, #32]
 8004748:	4602      	mov	r2, r0
 800474a:	2000      	movs	r0, #0
 800474c:	4604      	mov	r4, r0
 800474e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8004752:	f100 0101 	add.w	r1, r0, #1
 8004756:	d012      	beq.n	800477e <_strtod_l+0x236>
 8004758:	440a      	add	r2, r1
 800475a:	eb00 0c04 	add.w	ip, r0, r4
 800475e:	4621      	mov	r1, r4
 8004760:	270a      	movs	r7, #10
 8004762:	458c      	cmp	ip, r1
 8004764:	d113      	bne.n	800478e <_strtod_l+0x246>
 8004766:	1821      	adds	r1, r4, r0
 8004768:	2908      	cmp	r1, #8
 800476a:	f104 0401 	add.w	r4, r4, #1
 800476e:	4404      	add	r4, r0
 8004770:	dc19      	bgt.n	80047a6 <_strtod_l+0x25e>
 8004772:	9b07      	ldr	r3, [sp, #28]
 8004774:	210a      	movs	r1, #10
 8004776:	fb01 e303 	mla	r3, r1, r3, lr
 800477a:	9307      	str	r3, [sp, #28]
 800477c:	2100      	movs	r1, #0
 800477e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004780:	1c58      	adds	r0, r3, #1
 8004782:	901b      	str	r0, [sp, #108]	; 0x6c
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	4608      	mov	r0, r1
 8004788:	e7c9      	b.n	800471e <_strtod_l+0x1d6>
 800478a:	9805      	ldr	r0, [sp, #20]
 800478c:	e7d3      	b.n	8004736 <_strtod_l+0x1ee>
 800478e:	2908      	cmp	r1, #8
 8004790:	f101 0101 	add.w	r1, r1, #1
 8004794:	dc03      	bgt.n	800479e <_strtod_l+0x256>
 8004796:	9b07      	ldr	r3, [sp, #28]
 8004798:	437b      	muls	r3, r7
 800479a:	9307      	str	r3, [sp, #28]
 800479c:	e7e1      	b.n	8004762 <_strtod_l+0x21a>
 800479e:	2910      	cmp	r1, #16
 80047a0:	bfd8      	it	le
 80047a2:	437d      	mulle	r5, r7
 80047a4:	e7dd      	b.n	8004762 <_strtod_l+0x21a>
 80047a6:	2c10      	cmp	r4, #16
 80047a8:	bfdc      	itt	le
 80047aa:	210a      	movle	r1, #10
 80047ac:	fb01 e505 	mlale	r5, r1, r5, lr
 80047b0:	e7e4      	b.n	800477c <_strtod_l+0x234>
 80047b2:	2301      	movs	r3, #1
 80047b4:	9304      	str	r3, [sp, #16]
 80047b6:	e781      	b.n	80046bc <_strtod_l+0x174>
 80047b8:	f04f 0c01 	mov.w	ip, #1
 80047bc:	1cb3      	adds	r3, r6, #2
 80047be:	931b      	str	r3, [sp, #108]	; 0x6c
 80047c0:	78b3      	ldrb	r3, [r6, #2]
 80047c2:	e78a      	b.n	80046da <_strtod_l+0x192>
 80047c4:	f04f 0c00 	mov.w	ip, #0
 80047c8:	e7f8      	b.n	80047bc <_strtod_l+0x274>
 80047ca:	bf00      	nop
 80047cc:	08007d1c 	.word	0x08007d1c
 80047d0:	7ff00000 	.word	0x7ff00000
 80047d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047d6:	1c5f      	adds	r7, r3, #1
 80047d8:	971b      	str	r7, [sp, #108]	; 0x6c
 80047da:	785b      	ldrb	r3, [r3, #1]
 80047dc:	2b30      	cmp	r3, #48	; 0x30
 80047de:	d0f9      	beq.n	80047d4 <_strtod_l+0x28c>
 80047e0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80047e4:	2f08      	cmp	r7, #8
 80047e6:	f63f af7d 	bhi.w	80046e4 <_strtod_l+0x19c>
 80047ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80047ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047f0:	930a      	str	r3, [sp, #40]	; 0x28
 80047f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047f4:	1c5f      	adds	r7, r3, #1
 80047f6:	971b      	str	r7, [sp, #108]	; 0x6c
 80047f8:	785b      	ldrb	r3, [r3, #1]
 80047fa:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80047fe:	f1b8 0f09 	cmp.w	r8, #9
 8004802:	d937      	bls.n	8004874 <_strtod_l+0x32c>
 8004804:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004806:	1a7f      	subs	r7, r7, r1
 8004808:	2f08      	cmp	r7, #8
 800480a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800480e:	dc37      	bgt.n	8004880 <_strtod_l+0x338>
 8004810:	45be      	cmp	lr, r7
 8004812:	bfa8      	it	ge
 8004814:	46be      	movge	lr, r7
 8004816:	f1bc 0f00 	cmp.w	ip, #0
 800481a:	d001      	beq.n	8004820 <_strtod_l+0x2d8>
 800481c:	f1ce 0e00 	rsb	lr, lr, #0
 8004820:	2c00      	cmp	r4, #0
 8004822:	d151      	bne.n	80048c8 <_strtod_l+0x380>
 8004824:	2800      	cmp	r0, #0
 8004826:	f47f aece 	bne.w	80045c6 <_strtod_l+0x7e>
 800482a:	9a06      	ldr	r2, [sp, #24]
 800482c:	2a00      	cmp	r2, #0
 800482e:	f47f aeca 	bne.w	80045c6 <_strtod_l+0x7e>
 8004832:	9a04      	ldr	r2, [sp, #16]
 8004834:	2a00      	cmp	r2, #0
 8004836:	f47f aee4 	bne.w	8004602 <_strtod_l+0xba>
 800483a:	2b4e      	cmp	r3, #78	; 0x4e
 800483c:	d027      	beq.n	800488e <_strtod_l+0x346>
 800483e:	dc21      	bgt.n	8004884 <_strtod_l+0x33c>
 8004840:	2b49      	cmp	r3, #73	; 0x49
 8004842:	f47f aede 	bne.w	8004602 <_strtod_l+0xba>
 8004846:	49a0      	ldr	r1, [pc, #640]	; (8004ac8 <_strtod_l+0x580>)
 8004848:	a81b      	add	r0, sp, #108	; 0x6c
 800484a:	f001 fee1 	bl	8006610 <__match>
 800484e:	2800      	cmp	r0, #0
 8004850:	f43f aed7 	beq.w	8004602 <_strtod_l+0xba>
 8004854:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004856:	499d      	ldr	r1, [pc, #628]	; (8004acc <_strtod_l+0x584>)
 8004858:	3b01      	subs	r3, #1
 800485a:	a81b      	add	r0, sp, #108	; 0x6c
 800485c:	931b      	str	r3, [sp, #108]	; 0x6c
 800485e:	f001 fed7 	bl	8006610 <__match>
 8004862:	b910      	cbnz	r0, 800486a <_strtod_l+0x322>
 8004864:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004866:	3301      	adds	r3, #1
 8004868:	931b      	str	r3, [sp, #108]	; 0x6c
 800486a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004ae0 <_strtod_l+0x598>
 800486e:	f04f 0a00 	mov.w	sl, #0
 8004872:	e6a8      	b.n	80045c6 <_strtod_l+0x7e>
 8004874:	210a      	movs	r1, #10
 8004876:	fb01 3e0e 	mla	lr, r1, lr, r3
 800487a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800487e:	e7b8      	b.n	80047f2 <_strtod_l+0x2aa>
 8004880:	46be      	mov	lr, r7
 8004882:	e7c8      	b.n	8004816 <_strtod_l+0x2ce>
 8004884:	2b69      	cmp	r3, #105	; 0x69
 8004886:	d0de      	beq.n	8004846 <_strtod_l+0x2fe>
 8004888:	2b6e      	cmp	r3, #110	; 0x6e
 800488a:	f47f aeba 	bne.w	8004602 <_strtod_l+0xba>
 800488e:	4990      	ldr	r1, [pc, #576]	; (8004ad0 <_strtod_l+0x588>)
 8004890:	a81b      	add	r0, sp, #108	; 0x6c
 8004892:	f001 febd 	bl	8006610 <__match>
 8004896:	2800      	cmp	r0, #0
 8004898:	f43f aeb3 	beq.w	8004602 <_strtod_l+0xba>
 800489c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b28      	cmp	r3, #40	; 0x28
 80048a2:	d10e      	bne.n	80048c2 <_strtod_l+0x37a>
 80048a4:	aa1e      	add	r2, sp, #120	; 0x78
 80048a6:	498b      	ldr	r1, [pc, #556]	; (8004ad4 <_strtod_l+0x58c>)
 80048a8:	a81b      	add	r0, sp, #108	; 0x6c
 80048aa:	f001 fec5 	bl	8006638 <__hexnan>
 80048ae:	2805      	cmp	r0, #5
 80048b0:	d107      	bne.n	80048c2 <_strtod_l+0x37a>
 80048b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80048b4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80048b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80048bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80048c0:	e681      	b.n	80045c6 <_strtod_l+0x7e>
 80048c2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004ae8 <_strtod_l+0x5a0>
 80048c6:	e7d2      	b.n	800486e <_strtod_l+0x326>
 80048c8:	ebae 0302 	sub.w	r3, lr, r2
 80048cc:	9306      	str	r3, [sp, #24]
 80048ce:	9b05      	ldr	r3, [sp, #20]
 80048d0:	9807      	ldr	r0, [sp, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	bf08      	it	eq
 80048d6:	4623      	moveq	r3, r4
 80048d8:	2c10      	cmp	r4, #16
 80048da:	9305      	str	r3, [sp, #20]
 80048dc:	46a0      	mov	r8, r4
 80048de:	bfa8      	it	ge
 80048e0:	f04f 0810 	movge.w	r8, #16
 80048e4:	f7fb fe16 	bl	8000514 <__aeabi_ui2d>
 80048e8:	2c09      	cmp	r4, #9
 80048ea:	4682      	mov	sl, r0
 80048ec:	468b      	mov	fp, r1
 80048ee:	dc13      	bgt.n	8004918 <_strtod_l+0x3d0>
 80048f0:	9b06      	ldr	r3, [sp, #24]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f43f ae67 	beq.w	80045c6 <_strtod_l+0x7e>
 80048f8:	9b06      	ldr	r3, [sp, #24]
 80048fa:	dd7a      	ble.n	80049f2 <_strtod_l+0x4aa>
 80048fc:	2b16      	cmp	r3, #22
 80048fe:	dc61      	bgt.n	80049c4 <_strtod_l+0x47c>
 8004900:	4a75      	ldr	r2, [pc, #468]	; (8004ad8 <_strtod_l+0x590>)
 8004902:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8004906:	e9de 0100 	ldrd	r0, r1, [lr]
 800490a:	4652      	mov	r2, sl
 800490c:	465b      	mov	r3, fp
 800490e:	f7fb fe7b 	bl	8000608 <__aeabi_dmul>
 8004912:	4682      	mov	sl, r0
 8004914:	468b      	mov	fp, r1
 8004916:	e656      	b.n	80045c6 <_strtod_l+0x7e>
 8004918:	4b6f      	ldr	r3, [pc, #444]	; (8004ad8 <_strtod_l+0x590>)
 800491a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800491e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004922:	f7fb fe71 	bl	8000608 <__aeabi_dmul>
 8004926:	4606      	mov	r6, r0
 8004928:	4628      	mov	r0, r5
 800492a:	460f      	mov	r7, r1
 800492c:	f7fb fdf2 	bl	8000514 <__aeabi_ui2d>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4630      	mov	r0, r6
 8004936:	4639      	mov	r1, r7
 8004938:	f7fb fcb0 	bl	800029c <__adddf3>
 800493c:	2c0f      	cmp	r4, #15
 800493e:	4682      	mov	sl, r0
 8004940:	468b      	mov	fp, r1
 8004942:	ddd5      	ble.n	80048f0 <_strtod_l+0x3a8>
 8004944:	9b06      	ldr	r3, [sp, #24]
 8004946:	eba4 0808 	sub.w	r8, r4, r8
 800494a:	4498      	add	r8, r3
 800494c:	f1b8 0f00 	cmp.w	r8, #0
 8004950:	f340 8096 	ble.w	8004a80 <_strtod_l+0x538>
 8004954:	f018 030f 	ands.w	r3, r8, #15
 8004958:	d00a      	beq.n	8004970 <_strtod_l+0x428>
 800495a:	495f      	ldr	r1, [pc, #380]	; (8004ad8 <_strtod_l+0x590>)
 800495c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004960:	4652      	mov	r2, sl
 8004962:	465b      	mov	r3, fp
 8004964:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004968:	f7fb fe4e 	bl	8000608 <__aeabi_dmul>
 800496c:	4682      	mov	sl, r0
 800496e:	468b      	mov	fp, r1
 8004970:	f038 080f 	bics.w	r8, r8, #15
 8004974:	d073      	beq.n	8004a5e <_strtod_l+0x516>
 8004976:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800497a:	dd47      	ble.n	8004a0c <_strtod_l+0x4c4>
 800497c:	2400      	movs	r4, #0
 800497e:	46a0      	mov	r8, r4
 8004980:	9407      	str	r4, [sp, #28]
 8004982:	9405      	str	r4, [sp, #20]
 8004984:	2322      	movs	r3, #34	; 0x22
 8004986:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004ae0 <_strtod_l+0x598>
 800498a:	f8c9 3000 	str.w	r3, [r9]
 800498e:	f04f 0a00 	mov.w	sl, #0
 8004992:	9b07      	ldr	r3, [sp, #28]
 8004994:	2b00      	cmp	r3, #0
 8004996:	f43f ae16 	beq.w	80045c6 <_strtod_l+0x7e>
 800499a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800499c:	4648      	mov	r0, r9
 800499e:	f001 ff48 	bl	8006832 <_Bfree>
 80049a2:	9905      	ldr	r1, [sp, #20]
 80049a4:	4648      	mov	r0, r9
 80049a6:	f001 ff44 	bl	8006832 <_Bfree>
 80049aa:	4641      	mov	r1, r8
 80049ac:	4648      	mov	r0, r9
 80049ae:	f001 ff40 	bl	8006832 <_Bfree>
 80049b2:	9907      	ldr	r1, [sp, #28]
 80049b4:	4648      	mov	r0, r9
 80049b6:	f001 ff3c 	bl	8006832 <_Bfree>
 80049ba:	4621      	mov	r1, r4
 80049bc:	4648      	mov	r0, r9
 80049be:	f001 ff38 	bl	8006832 <_Bfree>
 80049c2:	e600      	b.n	80045c6 <_strtod_l+0x7e>
 80049c4:	9a06      	ldr	r2, [sp, #24]
 80049c6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80049ca:	4293      	cmp	r3, r2
 80049cc:	dbba      	blt.n	8004944 <_strtod_l+0x3fc>
 80049ce:	4d42      	ldr	r5, [pc, #264]	; (8004ad8 <_strtod_l+0x590>)
 80049d0:	f1c4 040f 	rsb	r4, r4, #15
 80049d4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80049d8:	4652      	mov	r2, sl
 80049da:	465b      	mov	r3, fp
 80049dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049e0:	f7fb fe12 	bl	8000608 <__aeabi_dmul>
 80049e4:	9b06      	ldr	r3, [sp, #24]
 80049e6:	1b1c      	subs	r4, r3, r4
 80049e8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80049ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80049f0:	e78d      	b.n	800490e <_strtod_l+0x3c6>
 80049f2:	f113 0f16 	cmn.w	r3, #22
 80049f6:	dba5      	blt.n	8004944 <_strtod_l+0x3fc>
 80049f8:	4a37      	ldr	r2, [pc, #220]	; (8004ad8 <_strtod_l+0x590>)
 80049fa:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80049fe:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004a02:	4650      	mov	r0, sl
 8004a04:	4659      	mov	r1, fp
 8004a06:	f7fb ff29 	bl	800085c <__aeabi_ddiv>
 8004a0a:	e782      	b.n	8004912 <_strtod_l+0x3ca>
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	4e33      	ldr	r6, [pc, #204]	; (8004adc <_strtod_l+0x594>)
 8004a10:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004a14:	4650      	mov	r0, sl
 8004a16:	4659      	mov	r1, fp
 8004a18:	461d      	mov	r5, r3
 8004a1a:	f1b8 0f01 	cmp.w	r8, #1
 8004a1e:	dc21      	bgt.n	8004a64 <_strtod_l+0x51c>
 8004a20:	b10b      	cbz	r3, 8004a26 <_strtod_l+0x4de>
 8004a22:	4682      	mov	sl, r0
 8004a24:	468b      	mov	fp, r1
 8004a26:	4b2d      	ldr	r3, [pc, #180]	; (8004adc <_strtod_l+0x594>)
 8004a28:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004a2c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004a30:	4652      	mov	r2, sl
 8004a32:	465b      	mov	r3, fp
 8004a34:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004a38:	f7fb fde6 	bl	8000608 <__aeabi_dmul>
 8004a3c:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <_strtod_l+0x598>)
 8004a3e:	460a      	mov	r2, r1
 8004a40:	400b      	ands	r3, r1
 8004a42:	4928      	ldr	r1, [pc, #160]	; (8004ae4 <_strtod_l+0x59c>)
 8004a44:	428b      	cmp	r3, r1
 8004a46:	4682      	mov	sl, r0
 8004a48:	d898      	bhi.n	800497c <_strtod_l+0x434>
 8004a4a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004a4e:	428b      	cmp	r3, r1
 8004a50:	bf86      	itte	hi
 8004a52:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004aec <_strtod_l+0x5a4>
 8004a56:	f04f 3aff 	movhi.w	sl, #4294967295
 8004a5a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004a5e:	2300      	movs	r3, #0
 8004a60:	9304      	str	r3, [sp, #16]
 8004a62:	e077      	b.n	8004b54 <_strtod_l+0x60c>
 8004a64:	f018 0f01 	tst.w	r8, #1
 8004a68:	d006      	beq.n	8004a78 <_strtod_l+0x530>
 8004a6a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a72:	f7fb fdc9 	bl	8000608 <__aeabi_dmul>
 8004a76:	2301      	movs	r3, #1
 8004a78:	3501      	adds	r5, #1
 8004a7a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004a7e:	e7cc      	b.n	8004a1a <_strtod_l+0x4d2>
 8004a80:	d0ed      	beq.n	8004a5e <_strtod_l+0x516>
 8004a82:	f1c8 0800 	rsb	r8, r8, #0
 8004a86:	f018 020f 	ands.w	r2, r8, #15
 8004a8a:	d00a      	beq.n	8004aa2 <_strtod_l+0x55a>
 8004a8c:	4b12      	ldr	r3, [pc, #72]	; (8004ad8 <_strtod_l+0x590>)
 8004a8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a92:	4650      	mov	r0, sl
 8004a94:	4659      	mov	r1, fp
 8004a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9a:	f7fb fedf 	bl	800085c <__aeabi_ddiv>
 8004a9e:	4682      	mov	sl, r0
 8004aa0:	468b      	mov	fp, r1
 8004aa2:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004aa6:	d0da      	beq.n	8004a5e <_strtod_l+0x516>
 8004aa8:	f1b8 0f1f 	cmp.w	r8, #31
 8004aac:	dd20      	ble.n	8004af0 <_strtod_l+0x5a8>
 8004aae:	2400      	movs	r4, #0
 8004ab0:	46a0      	mov	r8, r4
 8004ab2:	9407      	str	r4, [sp, #28]
 8004ab4:	9405      	str	r4, [sp, #20]
 8004ab6:	2322      	movs	r3, #34	; 0x22
 8004ab8:	f04f 0a00 	mov.w	sl, #0
 8004abc:	f04f 0b00 	mov.w	fp, #0
 8004ac0:	f8c9 3000 	str.w	r3, [r9]
 8004ac4:	e765      	b.n	8004992 <_strtod_l+0x44a>
 8004ac6:	bf00      	nop
 8004ac8:	08007ce5 	.word	0x08007ce5
 8004acc:	08007d73 	.word	0x08007d73
 8004ad0:	08007ced 	.word	0x08007ced
 8004ad4:	08007d30 	.word	0x08007d30
 8004ad8:	08007e18 	.word	0x08007e18
 8004adc:	08007df0 	.word	0x08007df0
 8004ae0:	7ff00000 	.word	0x7ff00000
 8004ae4:	7ca00000 	.word	0x7ca00000
 8004ae8:	fff80000 	.word	0xfff80000
 8004aec:	7fefffff 	.word	0x7fefffff
 8004af0:	f018 0310 	ands.w	r3, r8, #16
 8004af4:	bf18      	it	ne
 8004af6:	236a      	movne	r3, #106	; 0x6a
 8004af8:	4da0      	ldr	r5, [pc, #640]	; (8004d7c <_strtod_l+0x834>)
 8004afa:	9304      	str	r3, [sp, #16]
 8004afc:	4650      	mov	r0, sl
 8004afe:	4659      	mov	r1, fp
 8004b00:	2300      	movs	r3, #0
 8004b02:	f1b8 0f00 	cmp.w	r8, #0
 8004b06:	f300 810a 	bgt.w	8004d1e <_strtod_l+0x7d6>
 8004b0a:	b10b      	cbz	r3, 8004b10 <_strtod_l+0x5c8>
 8004b0c:	4682      	mov	sl, r0
 8004b0e:	468b      	mov	fp, r1
 8004b10:	9b04      	ldr	r3, [sp, #16]
 8004b12:	b1bb      	cbz	r3, 8004b44 <_strtod_l+0x5fc>
 8004b14:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004b18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	4659      	mov	r1, fp
 8004b20:	dd10      	ble.n	8004b44 <_strtod_l+0x5fc>
 8004b22:	2b1f      	cmp	r3, #31
 8004b24:	f340 8107 	ble.w	8004d36 <_strtod_l+0x7ee>
 8004b28:	2b34      	cmp	r3, #52	; 0x34
 8004b2a:	bfde      	ittt	le
 8004b2c:	3b20      	suble	r3, #32
 8004b2e:	f04f 32ff 	movle.w	r2, #4294967295
 8004b32:	fa02 f303 	lslle.w	r3, r2, r3
 8004b36:	f04f 0a00 	mov.w	sl, #0
 8004b3a:	bfcc      	ite	gt
 8004b3c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004b40:	ea03 0b01 	andle.w	fp, r3, r1
 8004b44:	2200      	movs	r2, #0
 8004b46:	2300      	movs	r3, #0
 8004b48:	4650      	mov	r0, sl
 8004b4a:	4659      	mov	r1, fp
 8004b4c:	f7fb ffc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d1ac      	bne.n	8004aae <_strtod_l+0x566>
 8004b54:	9b07      	ldr	r3, [sp, #28]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	9a05      	ldr	r2, [sp, #20]
 8004b5a:	9908      	ldr	r1, [sp, #32]
 8004b5c:	4623      	mov	r3, r4
 8004b5e:	4648      	mov	r0, r9
 8004b60:	f001 feb9 	bl	80068d6 <__s2b>
 8004b64:	9007      	str	r0, [sp, #28]
 8004b66:	2800      	cmp	r0, #0
 8004b68:	f43f af08 	beq.w	800497c <_strtod_l+0x434>
 8004b6c:	9a06      	ldr	r2, [sp, #24]
 8004b6e:	9b06      	ldr	r3, [sp, #24]
 8004b70:	2a00      	cmp	r2, #0
 8004b72:	f1c3 0300 	rsb	r3, r3, #0
 8004b76:	bfa8      	it	ge
 8004b78:	2300      	movge	r3, #0
 8004b7a:	930e      	str	r3, [sp, #56]	; 0x38
 8004b7c:	2400      	movs	r4, #0
 8004b7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004b82:	9316      	str	r3, [sp, #88]	; 0x58
 8004b84:	46a0      	mov	r8, r4
 8004b86:	9b07      	ldr	r3, [sp, #28]
 8004b88:	4648      	mov	r0, r9
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	f001 fe1d 	bl	80067ca <_Balloc>
 8004b90:	9005      	str	r0, [sp, #20]
 8004b92:	2800      	cmp	r0, #0
 8004b94:	f43f aef6 	beq.w	8004984 <_strtod_l+0x43c>
 8004b98:	9b07      	ldr	r3, [sp, #28]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	3202      	adds	r2, #2
 8004b9e:	f103 010c 	add.w	r1, r3, #12
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	300c      	adds	r0, #12
 8004ba6:	f001 fe05 	bl	80067b4 <memcpy>
 8004baa:	aa1e      	add	r2, sp, #120	; 0x78
 8004bac:	a91d      	add	r1, sp, #116	; 0x74
 8004bae:	ec4b ab10 	vmov	d0, sl, fp
 8004bb2:	4648      	mov	r0, r9
 8004bb4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004bb8:	f002 f948 	bl	8006e4c <__d2b>
 8004bbc:	901c      	str	r0, [sp, #112]	; 0x70
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f43f aee0 	beq.w	8004984 <_strtod_l+0x43c>
 8004bc4:	2101      	movs	r1, #1
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f001 ff11 	bl	80069ee <__i2b>
 8004bcc:	4680      	mov	r8, r0
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	f43f aed8 	beq.w	8004984 <_strtod_l+0x43c>
 8004bd4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004bd6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004bd8:	2e00      	cmp	r6, #0
 8004bda:	bfab      	itete	ge
 8004bdc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004bde:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004be0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004be2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004be4:	bfac      	ite	ge
 8004be6:	18f7      	addge	r7, r6, r3
 8004be8:	1b9d      	sublt	r5, r3, r6
 8004bea:	9b04      	ldr	r3, [sp, #16]
 8004bec:	1af6      	subs	r6, r6, r3
 8004bee:	4416      	add	r6, r2
 8004bf0:	4b63      	ldr	r3, [pc, #396]	; (8004d80 <_strtod_l+0x838>)
 8004bf2:	3e01      	subs	r6, #1
 8004bf4:	429e      	cmp	r6, r3
 8004bf6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004bfa:	f280 80af 	bge.w	8004d5c <_strtod_l+0x814>
 8004bfe:	1b9b      	subs	r3, r3, r6
 8004c00:	2b1f      	cmp	r3, #31
 8004c02:	eba2 0203 	sub.w	r2, r2, r3
 8004c06:	f04f 0101 	mov.w	r1, #1
 8004c0a:	f300 809b 	bgt.w	8004d44 <_strtod_l+0x7fc>
 8004c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c12:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c14:	2300      	movs	r3, #0
 8004c16:	930a      	str	r3, [sp, #40]	; 0x28
 8004c18:	18be      	adds	r6, r7, r2
 8004c1a:	9b04      	ldr	r3, [sp, #16]
 8004c1c:	42b7      	cmp	r7, r6
 8004c1e:	4415      	add	r5, r2
 8004c20:	441d      	add	r5, r3
 8004c22:	463b      	mov	r3, r7
 8004c24:	bfa8      	it	ge
 8004c26:	4633      	movge	r3, r6
 8004c28:	42ab      	cmp	r3, r5
 8004c2a:	bfa8      	it	ge
 8004c2c:	462b      	movge	r3, r5
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfc2      	ittt	gt
 8004c32:	1af6      	subgt	r6, r6, r3
 8004c34:	1aed      	subgt	r5, r5, r3
 8004c36:	1aff      	subgt	r7, r7, r3
 8004c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c3a:	b1bb      	cbz	r3, 8004c6c <_strtod_l+0x724>
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	461a      	mov	r2, r3
 8004c40:	4648      	mov	r0, r9
 8004c42:	f001 ff73 	bl	8006b2c <__pow5mult>
 8004c46:	4680      	mov	r8, r0
 8004c48:	2800      	cmp	r0, #0
 8004c4a:	f43f ae9b 	beq.w	8004984 <_strtod_l+0x43c>
 8004c4e:	4601      	mov	r1, r0
 8004c50:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004c52:	4648      	mov	r0, r9
 8004c54:	f001 fed4 	bl	8006a00 <__multiply>
 8004c58:	900c      	str	r0, [sp, #48]	; 0x30
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	f43f ae92 	beq.w	8004984 <_strtod_l+0x43c>
 8004c60:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004c62:	4648      	mov	r0, r9
 8004c64:	f001 fde5 	bl	8006832 <_Bfree>
 8004c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c6a:	931c      	str	r3, [sp, #112]	; 0x70
 8004c6c:	2e00      	cmp	r6, #0
 8004c6e:	dc7a      	bgt.n	8004d66 <_strtod_l+0x81e>
 8004c70:	9b06      	ldr	r3, [sp, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	dd08      	ble.n	8004c88 <_strtod_l+0x740>
 8004c76:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004c78:	9905      	ldr	r1, [sp, #20]
 8004c7a:	4648      	mov	r0, r9
 8004c7c:	f001 ff56 	bl	8006b2c <__pow5mult>
 8004c80:	9005      	str	r0, [sp, #20]
 8004c82:	2800      	cmp	r0, #0
 8004c84:	f43f ae7e 	beq.w	8004984 <_strtod_l+0x43c>
 8004c88:	2d00      	cmp	r5, #0
 8004c8a:	dd08      	ble.n	8004c9e <_strtod_l+0x756>
 8004c8c:	462a      	mov	r2, r5
 8004c8e:	9905      	ldr	r1, [sp, #20]
 8004c90:	4648      	mov	r0, r9
 8004c92:	f001 ff99 	bl	8006bc8 <__lshift>
 8004c96:	9005      	str	r0, [sp, #20]
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	f43f ae73 	beq.w	8004984 <_strtod_l+0x43c>
 8004c9e:	2f00      	cmp	r7, #0
 8004ca0:	dd08      	ble.n	8004cb4 <_strtod_l+0x76c>
 8004ca2:	4641      	mov	r1, r8
 8004ca4:	463a      	mov	r2, r7
 8004ca6:	4648      	mov	r0, r9
 8004ca8:	f001 ff8e 	bl	8006bc8 <__lshift>
 8004cac:	4680      	mov	r8, r0
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f43f ae68 	beq.w	8004984 <_strtod_l+0x43c>
 8004cb4:	9a05      	ldr	r2, [sp, #20]
 8004cb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004cb8:	4648      	mov	r0, r9
 8004cba:	f001 fff3 	bl	8006ca4 <__mdiff>
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	2800      	cmp	r0, #0
 8004cc2:	f43f ae5f 	beq.w	8004984 <_strtod_l+0x43c>
 8004cc6:	68c3      	ldr	r3, [r0, #12]
 8004cc8:	930c      	str	r3, [sp, #48]	; 0x30
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60c3      	str	r3, [r0, #12]
 8004cce:	4641      	mov	r1, r8
 8004cd0:	f001 ffce 	bl	8006c70 <__mcmp>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	da55      	bge.n	8004d84 <_strtod_l+0x83c>
 8004cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cda:	b9e3      	cbnz	r3, 8004d16 <_strtod_l+0x7ce>
 8004cdc:	f1ba 0f00 	cmp.w	sl, #0
 8004ce0:	d119      	bne.n	8004d16 <_strtod_l+0x7ce>
 8004ce2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ce6:	b9b3      	cbnz	r3, 8004d16 <_strtod_l+0x7ce>
 8004ce8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004cec:	0d1b      	lsrs	r3, r3, #20
 8004cee:	051b      	lsls	r3, r3, #20
 8004cf0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004cf4:	d90f      	bls.n	8004d16 <_strtod_l+0x7ce>
 8004cf6:	6963      	ldr	r3, [r4, #20]
 8004cf8:	b913      	cbnz	r3, 8004d00 <_strtod_l+0x7b8>
 8004cfa:	6923      	ldr	r3, [r4, #16]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	dd0a      	ble.n	8004d16 <_strtod_l+0x7ce>
 8004d00:	4621      	mov	r1, r4
 8004d02:	2201      	movs	r2, #1
 8004d04:	4648      	mov	r0, r9
 8004d06:	f001 ff5f 	bl	8006bc8 <__lshift>
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	4604      	mov	r4, r0
 8004d0e:	f001 ffaf 	bl	8006c70 <__mcmp>
 8004d12:	2800      	cmp	r0, #0
 8004d14:	dc67      	bgt.n	8004de6 <_strtod_l+0x89e>
 8004d16:	9b04      	ldr	r3, [sp, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d171      	bne.n	8004e00 <_strtod_l+0x8b8>
 8004d1c:	e63d      	b.n	800499a <_strtod_l+0x452>
 8004d1e:	f018 0f01 	tst.w	r8, #1
 8004d22:	d004      	beq.n	8004d2e <_strtod_l+0x7e6>
 8004d24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d28:	f7fb fc6e 	bl	8000608 <__aeabi_dmul>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004d32:	3508      	adds	r5, #8
 8004d34:	e6e5      	b.n	8004b02 <_strtod_l+0x5ba>
 8004d36:	f04f 32ff 	mov.w	r2, #4294967295
 8004d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3e:	ea03 0a0a 	and.w	sl, r3, sl
 8004d42:	e6ff      	b.n	8004b44 <_strtod_l+0x5fc>
 8004d44:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004d48:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004d4c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004d50:	36e2      	adds	r6, #226	; 0xe2
 8004d52:	fa01 f306 	lsl.w	r3, r1, r6
 8004d56:	930a      	str	r3, [sp, #40]	; 0x28
 8004d58:	910f      	str	r1, [sp, #60]	; 0x3c
 8004d5a:	e75d      	b.n	8004c18 <_strtod_l+0x6d0>
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004d60:	2301      	movs	r3, #1
 8004d62:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d64:	e758      	b.n	8004c18 <_strtod_l+0x6d0>
 8004d66:	4632      	mov	r2, r6
 8004d68:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d6a:	4648      	mov	r0, r9
 8004d6c:	f001 ff2c 	bl	8006bc8 <__lshift>
 8004d70:	901c      	str	r0, [sp, #112]	; 0x70
 8004d72:	2800      	cmp	r0, #0
 8004d74:	f47f af7c 	bne.w	8004c70 <_strtod_l+0x728>
 8004d78:	e604      	b.n	8004984 <_strtod_l+0x43c>
 8004d7a:	bf00      	nop
 8004d7c:	08007d48 	.word	0x08007d48
 8004d80:	fffffc02 	.word	0xfffffc02
 8004d84:	465d      	mov	r5, fp
 8004d86:	f040 8086 	bne.w	8004e96 <_strtod_l+0x94e>
 8004d8a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d90:	b32a      	cbz	r2, 8004dde <_strtod_l+0x896>
 8004d92:	4aaf      	ldr	r2, [pc, #700]	; (8005050 <_strtod_l+0xb08>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d153      	bne.n	8004e40 <_strtod_l+0x8f8>
 8004d98:	9b04      	ldr	r3, [sp, #16]
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	b1d3      	cbz	r3, 8004dd4 <_strtod_l+0x88c>
 8004d9e:	4aad      	ldr	r2, [pc, #692]	; (8005054 <_strtod_l+0xb0c>)
 8004da0:	402a      	ands	r2, r5
 8004da2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004da6:	f04f 31ff 	mov.w	r1, #4294967295
 8004daa:	d816      	bhi.n	8004dda <_strtod_l+0x892>
 8004dac:	0d12      	lsrs	r2, r2, #20
 8004dae:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004db2:	fa01 f303 	lsl.w	r3, r1, r3
 8004db6:	4298      	cmp	r0, r3
 8004db8:	d142      	bne.n	8004e40 <_strtod_l+0x8f8>
 8004dba:	4ba7      	ldr	r3, [pc, #668]	; (8005058 <_strtod_l+0xb10>)
 8004dbc:	429d      	cmp	r5, r3
 8004dbe:	d102      	bne.n	8004dc6 <_strtod_l+0x87e>
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	f43f addf 	beq.w	8004984 <_strtod_l+0x43c>
 8004dc6:	4ba3      	ldr	r3, [pc, #652]	; (8005054 <_strtod_l+0xb0c>)
 8004dc8:	402b      	ands	r3, r5
 8004dca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004dce:	f04f 0a00 	mov.w	sl, #0
 8004dd2:	e7a0      	b.n	8004d16 <_strtod_l+0x7ce>
 8004dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8004dd8:	e7ed      	b.n	8004db6 <_strtod_l+0x86e>
 8004dda:	460b      	mov	r3, r1
 8004ddc:	e7eb      	b.n	8004db6 <_strtod_l+0x86e>
 8004dde:	bb7b      	cbnz	r3, 8004e40 <_strtod_l+0x8f8>
 8004de0:	f1ba 0f00 	cmp.w	sl, #0
 8004de4:	d12c      	bne.n	8004e40 <_strtod_l+0x8f8>
 8004de6:	9904      	ldr	r1, [sp, #16]
 8004de8:	4a9a      	ldr	r2, [pc, #616]	; (8005054 <_strtod_l+0xb0c>)
 8004dea:	465b      	mov	r3, fp
 8004dec:	b1f1      	cbz	r1, 8004e2c <_strtod_l+0x8e4>
 8004dee:	ea02 010b 	and.w	r1, r2, fp
 8004df2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004df6:	dc19      	bgt.n	8004e2c <_strtod_l+0x8e4>
 8004df8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004dfc:	f77f ae5b 	ble.w	8004ab6 <_strtod_l+0x56e>
 8004e00:	4a96      	ldr	r2, [pc, #600]	; (800505c <_strtod_l+0xb14>)
 8004e02:	2300      	movs	r3, #0
 8004e04:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004e08:	4650      	mov	r0, sl
 8004e0a:	4659      	mov	r1, fp
 8004e0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004e10:	f7fb fbfa 	bl	8000608 <__aeabi_dmul>
 8004e14:	4682      	mov	sl, r0
 8004e16:	468b      	mov	fp, r1
 8004e18:	2900      	cmp	r1, #0
 8004e1a:	f47f adbe 	bne.w	800499a <_strtod_l+0x452>
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	f47f adbb 	bne.w	800499a <_strtod_l+0x452>
 8004e24:	2322      	movs	r3, #34	; 0x22
 8004e26:	f8c9 3000 	str.w	r3, [r9]
 8004e2a:	e5b6      	b.n	800499a <_strtod_l+0x452>
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004e32:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004e36:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004e3a:	f04f 3aff 	mov.w	sl, #4294967295
 8004e3e:	e76a      	b.n	8004d16 <_strtod_l+0x7ce>
 8004e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e42:	b193      	cbz	r3, 8004e6a <_strtod_l+0x922>
 8004e44:	422b      	tst	r3, r5
 8004e46:	f43f af66 	beq.w	8004d16 <_strtod_l+0x7ce>
 8004e4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004e4c:	9a04      	ldr	r2, [sp, #16]
 8004e4e:	4650      	mov	r0, sl
 8004e50:	4659      	mov	r1, fp
 8004e52:	b173      	cbz	r3, 8004e72 <_strtod_l+0x92a>
 8004e54:	f7ff fb5c 	bl	8004510 <sulp>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e60:	f7fb fa1c 	bl	800029c <__adddf3>
 8004e64:	4682      	mov	sl, r0
 8004e66:	468b      	mov	fp, r1
 8004e68:	e755      	b.n	8004d16 <_strtod_l+0x7ce>
 8004e6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e6c:	ea13 0f0a 	tst.w	r3, sl
 8004e70:	e7e9      	b.n	8004e46 <_strtod_l+0x8fe>
 8004e72:	f7ff fb4d 	bl	8004510 <sulp>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004e7e:	f7fb fa0b 	bl	8000298 <__aeabi_dsub>
 8004e82:	2200      	movs	r2, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4682      	mov	sl, r0
 8004e88:	468b      	mov	fp, r1
 8004e8a:	f7fb fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	f47f ae11 	bne.w	8004ab6 <_strtod_l+0x56e>
 8004e94:	e73f      	b.n	8004d16 <_strtod_l+0x7ce>
 8004e96:	4641      	mov	r1, r8
 8004e98:	4620      	mov	r0, r4
 8004e9a:	f002 f826 	bl	8006eea <__ratio>
 8004e9e:	ec57 6b10 	vmov	r6, r7, d0
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ea8:	ee10 0a10 	vmov	r0, s0
 8004eac:	4639      	mov	r1, r7
 8004eae:	f7fb fe27 	bl	8000b00 <__aeabi_dcmple>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d077      	beq.n	8004fa6 <_strtod_l+0xa5e>
 8004eb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d04a      	beq.n	8004f52 <_strtod_l+0xa0a>
 8004ebc:	4b68      	ldr	r3, [pc, #416]	; (8005060 <_strtod_l+0xb18>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ec4:	4f66      	ldr	r7, [pc, #408]	; (8005060 <_strtod_l+0xb18>)
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	4b62      	ldr	r3, [pc, #392]	; (8005054 <_strtod_l+0xb0c>)
 8004eca:	402b      	ands	r3, r5
 8004ecc:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ece:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ed0:	4b64      	ldr	r3, [pc, #400]	; (8005064 <_strtod_l+0xb1c>)
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	f040 80ce 	bne.w	8005074 <_strtod_l+0xb2c>
 8004ed8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004edc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ee0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8004ee4:	ec4b ab10 	vmov	d0, sl, fp
 8004ee8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004eec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004ef0:	f001 ff36 	bl	8006d60 <__ulp>
 8004ef4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ef8:	ec53 2b10 	vmov	r2, r3, d0
 8004efc:	f7fb fb84 	bl	8000608 <__aeabi_dmul>
 8004f00:	4652      	mov	r2, sl
 8004f02:	465b      	mov	r3, fp
 8004f04:	f7fb f9ca 	bl	800029c <__adddf3>
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4952      	ldr	r1, [pc, #328]	; (8005054 <_strtod_l+0xb0c>)
 8004f0c:	4a56      	ldr	r2, [pc, #344]	; (8005068 <_strtod_l+0xb20>)
 8004f0e:	4019      	ands	r1, r3
 8004f10:	4291      	cmp	r1, r2
 8004f12:	4682      	mov	sl, r0
 8004f14:	d95b      	bls.n	8004fce <_strtod_l+0xa86>
 8004f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f18:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d103      	bne.n	8004f28 <_strtod_l+0x9e0>
 8004f20:	9b08      	ldr	r3, [sp, #32]
 8004f22:	3301      	adds	r3, #1
 8004f24:	f43f ad2e 	beq.w	8004984 <_strtod_l+0x43c>
 8004f28:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8005058 <_strtod_l+0xb10>
 8004f2c:	f04f 3aff 	mov.w	sl, #4294967295
 8004f30:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f32:	4648      	mov	r0, r9
 8004f34:	f001 fc7d 	bl	8006832 <_Bfree>
 8004f38:	9905      	ldr	r1, [sp, #20]
 8004f3a:	4648      	mov	r0, r9
 8004f3c:	f001 fc79 	bl	8006832 <_Bfree>
 8004f40:	4641      	mov	r1, r8
 8004f42:	4648      	mov	r0, r9
 8004f44:	f001 fc75 	bl	8006832 <_Bfree>
 8004f48:	4621      	mov	r1, r4
 8004f4a:	4648      	mov	r0, r9
 8004f4c:	f001 fc71 	bl	8006832 <_Bfree>
 8004f50:	e619      	b.n	8004b86 <_strtod_l+0x63e>
 8004f52:	f1ba 0f00 	cmp.w	sl, #0
 8004f56:	d11a      	bne.n	8004f8e <_strtod_l+0xa46>
 8004f58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004f5c:	b9eb      	cbnz	r3, 8004f9a <_strtod_l+0xa52>
 8004f5e:	2200      	movs	r2, #0
 8004f60:	4b3f      	ldr	r3, [pc, #252]	; (8005060 <_strtod_l+0xb18>)
 8004f62:	4630      	mov	r0, r6
 8004f64:	4639      	mov	r1, r7
 8004f66:	f7fb fdc1 	bl	8000aec <__aeabi_dcmplt>
 8004f6a:	b9c8      	cbnz	r0, 8004fa0 <_strtod_l+0xa58>
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	4639      	mov	r1, r7
 8004f70:	2200      	movs	r2, #0
 8004f72:	4b3e      	ldr	r3, [pc, #248]	; (800506c <_strtod_l+0xb24>)
 8004f74:	f7fb fb48 	bl	8000608 <__aeabi_dmul>
 8004f78:	4606      	mov	r6, r0
 8004f7a:	460f      	mov	r7, r1
 8004f7c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004f80:	9618      	str	r6, [sp, #96]	; 0x60
 8004f82:	9319      	str	r3, [sp, #100]	; 0x64
 8004f84:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004f88:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f8c:	e79c      	b.n	8004ec8 <_strtod_l+0x980>
 8004f8e:	f1ba 0f01 	cmp.w	sl, #1
 8004f92:	d102      	bne.n	8004f9a <_strtod_l+0xa52>
 8004f94:	2d00      	cmp	r5, #0
 8004f96:	f43f ad8e 	beq.w	8004ab6 <_strtod_l+0x56e>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	4b34      	ldr	r3, [pc, #208]	; (8005070 <_strtod_l+0xb28>)
 8004f9e:	e78f      	b.n	8004ec0 <_strtod_l+0x978>
 8004fa0:	2600      	movs	r6, #0
 8004fa2:	4f32      	ldr	r7, [pc, #200]	; (800506c <_strtod_l+0xb24>)
 8004fa4:	e7ea      	b.n	8004f7c <_strtod_l+0xa34>
 8004fa6:	4b31      	ldr	r3, [pc, #196]	; (800506c <_strtod_l+0xb24>)
 8004fa8:	4630      	mov	r0, r6
 8004faa:	4639      	mov	r1, r7
 8004fac:	2200      	movs	r2, #0
 8004fae:	f7fb fb2b 	bl	8000608 <__aeabi_dmul>
 8004fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	460f      	mov	r7, r1
 8004fb8:	b933      	cbnz	r3, 8004fc8 <_strtod_l+0xa80>
 8004fba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004fbe:	9010      	str	r0, [sp, #64]	; 0x40
 8004fc0:	9311      	str	r3, [sp, #68]	; 0x44
 8004fc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004fc6:	e7df      	b.n	8004f88 <_strtod_l+0xa40>
 8004fc8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004fcc:	e7f9      	b.n	8004fc2 <_strtod_l+0xa7a>
 8004fce:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004fd2:	9b04      	ldr	r3, [sp, #16]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1ab      	bne.n	8004f30 <_strtod_l+0x9e8>
 8004fd8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004fdc:	0d1b      	lsrs	r3, r3, #20
 8004fde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fe0:	051b      	lsls	r3, r3, #20
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	465d      	mov	r5, fp
 8004fe6:	d1a3      	bne.n	8004f30 <_strtod_l+0x9e8>
 8004fe8:	4639      	mov	r1, r7
 8004fea:	4630      	mov	r0, r6
 8004fec:	f7fb fdbc 	bl	8000b68 <__aeabi_d2iz>
 8004ff0:	f7fb faa0 	bl	8000534 <__aeabi_i2d>
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	f7fb f94c 	bl	8000298 <__aeabi_dsub>
 8005000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005002:	4606      	mov	r6, r0
 8005004:	460f      	mov	r7, r1
 8005006:	b933      	cbnz	r3, 8005016 <_strtod_l+0xace>
 8005008:	f1ba 0f00 	cmp.w	sl, #0
 800500c:	d103      	bne.n	8005016 <_strtod_l+0xace>
 800500e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8005012:	2d00      	cmp	r5, #0
 8005014:	d06d      	beq.n	80050f2 <_strtod_l+0xbaa>
 8005016:	a30a      	add	r3, pc, #40	; (adr r3, 8005040 <_strtod_l+0xaf8>)
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	4630      	mov	r0, r6
 800501e:	4639      	mov	r1, r7
 8005020:	f7fb fd64 	bl	8000aec <__aeabi_dcmplt>
 8005024:	2800      	cmp	r0, #0
 8005026:	f47f acb8 	bne.w	800499a <_strtod_l+0x452>
 800502a:	a307      	add	r3, pc, #28	; (adr r3, 8005048 <_strtod_l+0xb00>)
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	4630      	mov	r0, r6
 8005032:	4639      	mov	r1, r7
 8005034:	f7fb fd78 	bl	8000b28 <__aeabi_dcmpgt>
 8005038:	2800      	cmp	r0, #0
 800503a:	f43f af79 	beq.w	8004f30 <_strtod_l+0x9e8>
 800503e:	e4ac      	b.n	800499a <_strtod_l+0x452>
 8005040:	94a03595 	.word	0x94a03595
 8005044:	3fdfffff 	.word	0x3fdfffff
 8005048:	35afe535 	.word	0x35afe535
 800504c:	3fe00000 	.word	0x3fe00000
 8005050:	000fffff 	.word	0x000fffff
 8005054:	7ff00000 	.word	0x7ff00000
 8005058:	7fefffff 	.word	0x7fefffff
 800505c:	39500000 	.word	0x39500000
 8005060:	3ff00000 	.word	0x3ff00000
 8005064:	7fe00000 	.word	0x7fe00000
 8005068:	7c9fffff 	.word	0x7c9fffff
 800506c:	3fe00000 	.word	0x3fe00000
 8005070:	bff00000 	.word	0xbff00000
 8005074:	9b04      	ldr	r3, [sp, #16]
 8005076:	b333      	cbz	r3, 80050c6 <_strtod_l+0xb7e>
 8005078:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800507a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800507e:	d822      	bhi.n	80050c6 <_strtod_l+0xb7e>
 8005080:	a327      	add	r3, pc, #156	; (adr r3, 8005120 <_strtod_l+0xbd8>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	4630      	mov	r0, r6
 8005088:	4639      	mov	r1, r7
 800508a:	f7fb fd39 	bl	8000b00 <__aeabi_dcmple>
 800508e:	b1a0      	cbz	r0, 80050ba <_strtod_l+0xb72>
 8005090:	4639      	mov	r1, r7
 8005092:	4630      	mov	r0, r6
 8005094:	f7fb fd90 	bl	8000bb8 <__aeabi_d2uiz>
 8005098:	2800      	cmp	r0, #0
 800509a:	bf08      	it	eq
 800509c:	2001      	moveq	r0, #1
 800509e:	f7fb fa39 	bl	8000514 <__aeabi_ui2d>
 80050a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050a4:	4606      	mov	r6, r0
 80050a6:	460f      	mov	r7, r1
 80050a8:	bb03      	cbnz	r3, 80050ec <_strtod_l+0xba4>
 80050aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050ae:	9012      	str	r0, [sp, #72]	; 0x48
 80050b0:	9313      	str	r3, [sp, #76]	; 0x4c
 80050b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80050b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80050ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050be:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80050c2:	1a9b      	subs	r3, r3, r2
 80050c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80050c6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80050ca:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80050ce:	f001 fe47 	bl	8006d60 <__ulp>
 80050d2:	4650      	mov	r0, sl
 80050d4:	ec53 2b10 	vmov	r2, r3, d0
 80050d8:	4659      	mov	r1, fp
 80050da:	f7fb fa95 	bl	8000608 <__aeabi_dmul>
 80050de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050e2:	f7fb f8db 	bl	800029c <__adddf3>
 80050e6:	4682      	mov	sl, r0
 80050e8:	468b      	mov	fp, r1
 80050ea:	e772      	b.n	8004fd2 <_strtod_l+0xa8a>
 80050ec:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80050f0:	e7df      	b.n	80050b2 <_strtod_l+0xb6a>
 80050f2:	a30d      	add	r3, pc, #52	; (adr r3, 8005128 <_strtod_l+0xbe0>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb fcf8 	bl	8000aec <__aeabi_dcmplt>
 80050fc:	e79c      	b.n	8005038 <_strtod_l+0xaf0>
 80050fe:	2300      	movs	r3, #0
 8005100:	930d      	str	r3, [sp, #52]	; 0x34
 8005102:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	f7ff ba61 	b.w	80045ce <_strtod_l+0x86>
 800510c:	2b65      	cmp	r3, #101	; 0x65
 800510e:	f04f 0200 	mov.w	r2, #0
 8005112:	f43f ab4e 	beq.w	80047b2 <_strtod_l+0x26a>
 8005116:	2101      	movs	r1, #1
 8005118:	4614      	mov	r4, r2
 800511a:	9104      	str	r1, [sp, #16]
 800511c:	f7ff bacb 	b.w	80046b6 <_strtod_l+0x16e>
 8005120:	ffc00000 	.word	0xffc00000
 8005124:	41dfffff 	.word	0x41dfffff
 8005128:	94a03595 	.word	0x94a03595
 800512c:	3fcfffff 	.word	0x3fcfffff

08005130 <_strtod_r>:
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <_strtod_r+0x18>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	b410      	push	{r4}
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4c04      	ldr	r4, [pc, #16]	; (800514c <_strtod_r+0x1c>)
 800513a:	2b00      	cmp	r3, #0
 800513c:	bf08      	it	eq
 800513e:	4623      	moveq	r3, r4
 8005140:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005144:	f7ff ba00 	b.w	8004548 <_strtod_l>
 8005148:	2000000c 	.word	0x2000000c
 800514c:	20000070 	.word	0x20000070

08005150 <strtod>:
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <strtod+0x20>)
 8005152:	4a08      	ldr	r2, [pc, #32]	; (8005174 <strtod+0x24>)
 8005154:	b410      	push	{r4}
 8005156:	681c      	ldr	r4, [r3, #0]
 8005158:	6a23      	ldr	r3, [r4, #32]
 800515a:	2b00      	cmp	r3, #0
 800515c:	bf08      	it	eq
 800515e:	4613      	moveq	r3, r2
 8005160:	460a      	mov	r2, r1
 8005162:	4601      	mov	r1, r0
 8005164:	4620      	mov	r0, r4
 8005166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800516a:	f7ff b9ed 	b.w	8004548 <_strtod_l>
 800516e:	bf00      	nop
 8005170:	2000000c 	.word	0x2000000c
 8005174:	20000070 	.word	0x20000070

08005178 <__strtok_r>:
 8005178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517a:	b918      	cbnz	r0, 8005184 <__strtok_r+0xc>
 800517c:	6810      	ldr	r0, [r2, #0]
 800517e:	b908      	cbnz	r0, 8005184 <__strtok_r+0xc>
 8005180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005182:	4620      	mov	r0, r4
 8005184:	4604      	mov	r4, r0
 8005186:	460f      	mov	r7, r1
 8005188:	f814 5b01 	ldrb.w	r5, [r4], #1
 800518c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005190:	b91e      	cbnz	r6, 800519a <__strtok_r+0x22>
 8005192:	b96d      	cbnz	r5, 80051b0 <__strtok_r+0x38>
 8005194:	6015      	str	r5, [r2, #0]
 8005196:	4628      	mov	r0, r5
 8005198:	e7f2      	b.n	8005180 <__strtok_r+0x8>
 800519a:	42b5      	cmp	r5, r6
 800519c:	d1f6      	bne.n	800518c <__strtok_r+0x14>
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1ef      	bne.n	8005182 <__strtok_r+0xa>
 80051a2:	6014      	str	r4, [r2, #0]
 80051a4:	7003      	strb	r3, [r0, #0]
 80051a6:	e7eb      	b.n	8005180 <__strtok_r+0x8>
 80051a8:	462b      	mov	r3, r5
 80051aa:	e00d      	b.n	80051c8 <__strtok_r+0x50>
 80051ac:	b926      	cbnz	r6, 80051b8 <__strtok_r+0x40>
 80051ae:	461c      	mov	r4, r3
 80051b0:	4623      	mov	r3, r4
 80051b2:	460f      	mov	r7, r1
 80051b4:	f813 5b01 	ldrb.w	r5, [r3], #1
 80051b8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80051bc:	42b5      	cmp	r5, r6
 80051be:	d1f5      	bne.n	80051ac <__strtok_r+0x34>
 80051c0:	2d00      	cmp	r5, #0
 80051c2:	d0f1      	beq.n	80051a8 <__strtok_r+0x30>
 80051c4:	2100      	movs	r1, #0
 80051c6:	7021      	strb	r1, [r4, #0]
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	e7d9      	b.n	8005180 <__strtok_r+0x8>

080051cc <strtok_r>:
 80051cc:	2301      	movs	r3, #1
 80051ce:	f7ff bfd3 	b.w	8005178 <__strtok_r>

080051d2 <_strtol_l.isra.0>:
 80051d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d6:	4680      	mov	r8, r0
 80051d8:	4689      	mov	r9, r1
 80051da:	4692      	mov	sl, r2
 80051dc:	461e      	mov	r6, r3
 80051de:	460f      	mov	r7, r1
 80051e0:	463d      	mov	r5, r7
 80051e2:	9808      	ldr	r0, [sp, #32]
 80051e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051e8:	f001 fab6 	bl	8006758 <__locale_ctype_ptr_l>
 80051ec:	4420      	add	r0, r4
 80051ee:	7843      	ldrb	r3, [r0, #1]
 80051f0:	f013 0308 	ands.w	r3, r3, #8
 80051f4:	d132      	bne.n	800525c <_strtol_l.isra.0+0x8a>
 80051f6:	2c2d      	cmp	r4, #45	; 0x2d
 80051f8:	d132      	bne.n	8005260 <_strtol_l.isra.0+0x8e>
 80051fa:	787c      	ldrb	r4, [r7, #1]
 80051fc:	1cbd      	adds	r5, r7, #2
 80051fe:	2201      	movs	r2, #1
 8005200:	2e00      	cmp	r6, #0
 8005202:	d05d      	beq.n	80052c0 <_strtol_l.isra.0+0xee>
 8005204:	2e10      	cmp	r6, #16
 8005206:	d109      	bne.n	800521c <_strtol_l.isra.0+0x4a>
 8005208:	2c30      	cmp	r4, #48	; 0x30
 800520a:	d107      	bne.n	800521c <_strtol_l.isra.0+0x4a>
 800520c:	782b      	ldrb	r3, [r5, #0]
 800520e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005212:	2b58      	cmp	r3, #88	; 0x58
 8005214:	d14f      	bne.n	80052b6 <_strtol_l.isra.0+0xe4>
 8005216:	786c      	ldrb	r4, [r5, #1]
 8005218:	2610      	movs	r6, #16
 800521a:	3502      	adds	r5, #2
 800521c:	2a00      	cmp	r2, #0
 800521e:	bf14      	ite	ne
 8005220:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005224:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005228:	2700      	movs	r7, #0
 800522a:	fbb1 fcf6 	udiv	ip, r1, r6
 800522e:	4638      	mov	r0, r7
 8005230:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005234:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005238:	2b09      	cmp	r3, #9
 800523a:	d817      	bhi.n	800526c <_strtol_l.isra.0+0x9a>
 800523c:	461c      	mov	r4, r3
 800523e:	42a6      	cmp	r6, r4
 8005240:	dd23      	ble.n	800528a <_strtol_l.isra.0+0xb8>
 8005242:	1c7b      	adds	r3, r7, #1
 8005244:	d007      	beq.n	8005256 <_strtol_l.isra.0+0x84>
 8005246:	4584      	cmp	ip, r0
 8005248:	d31c      	bcc.n	8005284 <_strtol_l.isra.0+0xb2>
 800524a:	d101      	bne.n	8005250 <_strtol_l.isra.0+0x7e>
 800524c:	45a6      	cmp	lr, r4
 800524e:	db19      	blt.n	8005284 <_strtol_l.isra.0+0xb2>
 8005250:	fb00 4006 	mla	r0, r0, r6, r4
 8005254:	2701      	movs	r7, #1
 8005256:	f815 4b01 	ldrb.w	r4, [r5], #1
 800525a:	e7eb      	b.n	8005234 <_strtol_l.isra.0+0x62>
 800525c:	462f      	mov	r7, r5
 800525e:	e7bf      	b.n	80051e0 <_strtol_l.isra.0+0xe>
 8005260:	2c2b      	cmp	r4, #43	; 0x2b
 8005262:	bf04      	itt	eq
 8005264:	1cbd      	addeq	r5, r7, #2
 8005266:	787c      	ldrbeq	r4, [r7, #1]
 8005268:	461a      	mov	r2, r3
 800526a:	e7c9      	b.n	8005200 <_strtol_l.isra.0+0x2e>
 800526c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005270:	2b19      	cmp	r3, #25
 8005272:	d801      	bhi.n	8005278 <_strtol_l.isra.0+0xa6>
 8005274:	3c37      	subs	r4, #55	; 0x37
 8005276:	e7e2      	b.n	800523e <_strtol_l.isra.0+0x6c>
 8005278:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800527c:	2b19      	cmp	r3, #25
 800527e:	d804      	bhi.n	800528a <_strtol_l.isra.0+0xb8>
 8005280:	3c57      	subs	r4, #87	; 0x57
 8005282:	e7dc      	b.n	800523e <_strtol_l.isra.0+0x6c>
 8005284:	f04f 37ff 	mov.w	r7, #4294967295
 8005288:	e7e5      	b.n	8005256 <_strtol_l.isra.0+0x84>
 800528a:	1c7b      	adds	r3, r7, #1
 800528c:	d108      	bne.n	80052a0 <_strtol_l.isra.0+0xce>
 800528e:	2322      	movs	r3, #34	; 0x22
 8005290:	f8c8 3000 	str.w	r3, [r8]
 8005294:	4608      	mov	r0, r1
 8005296:	f1ba 0f00 	cmp.w	sl, #0
 800529a:	d107      	bne.n	80052ac <_strtol_l.isra.0+0xda>
 800529c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a0:	b102      	cbz	r2, 80052a4 <_strtol_l.isra.0+0xd2>
 80052a2:	4240      	negs	r0, r0
 80052a4:	f1ba 0f00 	cmp.w	sl, #0
 80052a8:	d0f8      	beq.n	800529c <_strtol_l.isra.0+0xca>
 80052aa:	b10f      	cbz	r7, 80052b0 <_strtol_l.isra.0+0xde>
 80052ac:	f105 39ff 	add.w	r9, r5, #4294967295
 80052b0:	f8ca 9000 	str.w	r9, [sl]
 80052b4:	e7f2      	b.n	800529c <_strtol_l.isra.0+0xca>
 80052b6:	2430      	movs	r4, #48	; 0x30
 80052b8:	2e00      	cmp	r6, #0
 80052ba:	d1af      	bne.n	800521c <_strtol_l.isra.0+0x4a>
 80052bc:	2608      	movs	r6, #8
 80052be:	e7ad      	b.n	800521c <_strtol_l.isra.0+0x4a>
 80052c0:	2c30      	cmp	r4, #48	; 0x30
 80052c2:	d0a3      	beq.n	800520c <_strtol_l.isra.0+0x3a>
 80052c4:	260a      	movs	r6, #10
 80052c6:	e7a9      	b.n	800521c <_strtol_l.isra.0+0x4a>

080052c8 <_strtol_r>:
 80052c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052ca:	4c06      	ldr	r4, [pc, #24]	; (80052e4 <_strtol_r+0x1c>)
 80052cc:	4d06      	ldr	r5, [pc, #24]	; (80052e8 <_strtol_r+0x20>)
 80052ce:	6824      	ldr	r4, [r4, #0]
 80052d0:	6a24      	ldr	r4, [r4, #32]
 80052d2:	2c00      	cmp	r4, #0
 80052d4:	bf08      	it	eq
 80052d6:	462c      	moveq	r4, r5
 80052d8:	9400      	str	r4, [sp, #0]
 80052da:	f7ff ff7a 	bl	80051d2 <_strtol_l.isra.0>
 80052de:	b003      	add	sp, #12
 80052e0:	bd30      	pop	{r4, r5, pc}
 80052e2:	bf00      	nop
 80052e4:	2000000c 	.word	0x2000000c
 80052e8:	20000070 	.word	0x20000070

080052ec <quorem>:
 80052ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f0:	6903      	ldr	r3, [r0, #16]
 80052f2:	690c      	ldr	r4, [r1, #16]
 80052f4:	42a3      	cmp	r3, r4
 80052f6:	4680      	mov	r8, r0
 80052f8:	f2c0 8082 	blt.w	8005400 <quorem+0x114>
 80052fc:	3c01      	subs	r4, #1
 80052fe:	f101 0714 	add.w	r7, r1, #20
 8005302:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005306:	f100 0614 	add.w	r6, r0, #20
 800530a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800530e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005312:	eb06 030c 	add.w	r3, r6, ip
 8005316:	3501      	adds	r5, #1
 8005318:	eb07 090c 	add.w	r9, r7, ip
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	fbb0 f5f5 	udiv	r5, r0, r5
 8005322:	b395      	cbz	r5, 800538a <quorem+0x9e>
 8005324:	f04f 0a00 	mov.w	sl, #0
 8005328:	4638      	mov	r0, r7
 800532a:	46b6      	mov	lr, r6
 800532c:	46d3      	mov	fp, sl
 800532e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005332:	b293      	uxth	r3, r2
 8005334:	fb05 a303 	mla	r3, r5, r3, sl
 8005338:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800533c:	b29b      	uxth	r3, r3
 800533e:	ebab 0303 	sub.w	r3, fp, r3
 8005342:	0c12      	lsrs	r2, r2, #16
 8005344:	f8de b000 	ldr.w	fp, [lr]
 8005348:	fb05 a202 	mla	r2, r5, r2, sl
 800534c:	fa13 f38b 	uxtah	r3, r3, fp
 8005350:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005354:	fa1f fb82 	uxth.w	fp, r2
 8005358:	f8de 2000 	ldr.w	r2, [lr]
 800535c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005360:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005364:	b29b      	uxth	r3, r3
 8005366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800536a:	4581      	cmp	r9, r0
 800536c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005370:	f84e 3b04 	str.w	r3, [lr], #4
 8005374:	d2db      	bcs.n	800532e <quorem+0x42>
 8005376:	f856 300c 	ldr.w	r3, [r6, ip]
 800537a:	b933      	cbnz	r3, 800538a <quorem+0x9e>
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	3b04      	subs	r3, #4
 8005380:	429e      	cmp	r6, r3
 8005382:	461a      	mov	r2, r3
 8005384:	d330      	bcc.n	80053e8 <quorem+0xfc>
 8005386:	f8c8 4010 	str.w	r4, [r8, #16]
 800538a:	4640      	mov	r0, r8
 800538c:	f001 fc70 	bl	8006c70 <__mcmp>
 8005390:	2800      	cmp	r0, #0
 8005392:	db25      	blt.n	80053e0 <quorem+0xf4>
 8005394:	3501      	adds	r5, #1
 8005396:	4630      	mov	r0, r6
 8005398:	f04f 0c00 	mov.w	ip, #0
 800539c:	f857 2b04 	ldr.w	r2, [r7], #4
 80053a0:	f8d0 e000 	ldr.w	lr, [r0]
 80053a4:	b293      	uxth	r3, r2
 80053a6:	ebac 0303 	sub.w	r3, ip, r3
 80053aa:	0c12      	lsrs	r2, r2, #16
 80053ac:	fa13 f38e 	uxtah	r3, r3, lr
 80053b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80053b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053be:	45b9      	cmp	r9, r7
 80053c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053c4:	f840 3b04 	str.w	r3, [r0], #4
 80053c8:	d2e8      	bcs.n	800539c <quorem+0xb0>
 80053ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053d2:	b92a      	cbnz	r2, 80053e0 <quorem+0xf4>
 80053d4:	3b04      	subs	r3, #4
 80053d6:	429e      	cmp	r6, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	d30b      	bcc.n	80053f4 <quorem+0x108>
 80053dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80053e0:	4628      	mov	r0, r5
 80053e2:	b003      	add	sp, #12
 80053e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e8:	6812      	ldr	r2, [r2, #0]
 80053ea:	3b04      	subs	r3, #4
 80053ec:	2a00      	cmp	r2, #0
 80053ee:	d1ca      	bne.n	8005386 <quorem+0x9a>
 80053f0:	3c01      	subs	r4, #1
 80053f2:	e7c5      	b.n	8005380 <quorem+0x94>
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	3b04      	subs	r3, #4
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d1ef      	bne.n	80053dc <quorem+0xf0>
 80053fc:	3c01      	subs	r4, #1
 80053fe:	e7ea      	b.n	80053d6 <quorem+0xea>
 8005400:	2000      	movs	r0, #0
 8005402:	e7ee      	b.n	80053e2 <quorem+0xf6>
 8005404:	0000      	movs	r0, r0
	...

08005408 <_dtoa_r>:
 8005408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800540c:	ec57 6b10 	vmov	r6, r7, d0
 8005410:	b097      	sub	sp, #92	; 0x5c
 8005412:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005414:	9106      	str	r1, [sp, #24]
 8005416:	4604      	mov	r4, r0
 8005418:	920b      	str	r2, [sp, #44]	; 0x2c
 800541a:	9312      	str	r3, [sp, #72]	; 0x48
 800541c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005420:	e9cd 6700 	strd	r6, r7, [sp]
 8005424:	b93d      	cbnz	r5, 8005436 <_dtoa_r+0x2e>
 8005426:	2010      	movs	r0, #16
 8005428:	f001 f9aa 	bl	8006780 <malloc>
 800542c:	6260      	str	r0, [r4, #36]	; 0x24
 800542e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005432:	6005      	str	r5, [r0, #0]
 8005434:	60c5      	str	r5, [r0, #12]
 8005436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005438:	6819      	ldr	r1, [r3, #0]
 800543a:	b151      	cbz	r1, 8005452 <_dtoa_r+0x4a>
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	604a      	str	r2, [r1, #4]
 8005440:	2301      	movs	r3, #1
 8005442:	4093      	lsls	r3, r2
 8005444:	608b      	str	r3, [r1, #8]
 8005446:	4620      	mov	r0, r4
 8005448:	f001 f9f3 	bl	8006832 <_Bfree>
 800544c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	1e3b      	subs	r3, r7, #0
 8005454:	bfbb      	ittet	lt
 8005456:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800545a:	9301      	strlt	r3, [sp, #4]
 800545c:	2300      	movge	r3, #0
 800545e:	2201      	movlt	r2, #1
 8005460:	bfac      	ite	ge
 8005462:	f8c8 3000 	strge.w	r3, [r8]
 8005466:	f8c8 2000 	strlt.w	r2, [r8]
 800546a:	4baf      	ldr	r3, [pc, #700]	; (8005728 <_dtoa_r+0x320>)
 800546c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005470:	ea33 0308 	bics.w	r3, r3, r8
 8005474:	d114      	bne.n	80054a0 <_dtoa_r+0x98>
 8005476:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005478:	f242 730f 	movw	r3, #9999	; 0x270f
 800547c:	6013      	str	r3, [r2, #0]
 800547e:	9b00      	ldr	r3, [sp, #0]
 8005480:	b923      	cbnz	r3, 800548c <_dtoa_r+0x84>
 8005482:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005486:	2800      	cmp	r0, #0
 8005488:	f000 8542 	beq.w	8005f10 <_dtoa_r+0xb08>
 800548c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800548e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800573c <_dtoa_r+0x334>
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 8544 	beq.w	8005f20 <_dtoa_r+0xb18>
 8005498:	f10b 0303 	add.w	r3, fp, #3
 800549c:	f000 bd3e 	b.w	8005f1c <_dtoa_r+0xb14>
 80054a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80054a4:	2200      	movs	r2, #0
 80054a6:	2300      	movs	r3, #0
 80054a8:	4630      	mov	r0, r6
 80054aa:	4639      	mov	r1, r7
 80054ac:	f7fb fb14 	bl	8000ad8 <__aeabi_dcmpeq>
 80054b0:	4681      	mov	r9, r0
 80054b2:	b168      	cbz	r0, 80054d0 <_dtoa_r+0xc8>
 80054b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80054b6:	2301      	movs	r3, #1
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8524 	beq.w	8005f0a <_dtoa_r+0xb02>
 80054c2:	4b9a      	ldr	r3, [pc, #616]	; (800572c <_dtoa_r+0x324>)
 80054c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	f000 bd28 	b.w	8005f20 <_dtoa_r+0xb18>
 80054d0:	aa14      	add	r2, sp, #80	; 0x50
 80054d2:	a915      	add	r1, sp, #84	; 0x54
 80054d4:	ec47 6b10 	vmov	d0, r6, r7
 80054d8:	4620      	mov	r0, r4
 80054da:	f001 fcb7 	bl	8006e4c <__d2b>
 80054de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054e2:	9004      	str	r0, [sp, #16]
 80054e4:	2d00      	cmp	r5, #0
 80054e6:	d07c      	beq.n	80055e2 <_dtoa_r+0x1da>
 80054e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80054f0:	46b2      	mov	sl, r6
 80054f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80054f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80054fe:	2200      	movs	r2, #0
 8005500:	4b8b      	ldr	r3, [pc, #556]	; (8005730 <_dtoa_r+0x328>)
 8005502:	4650      	mov	r0, sl
 8005504:	4659      	mov	r1, fp
 8005506:	f7fa fec7 	bl	8000298 <__aeabi_dsub>
 800550a:	a381      	add	r3, pc, #516	; (adr r3, 8005710 <_dtoa_r+0x308>)
 800550c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005510:	f7fb f87a 	bl	8000608 <__aeabi_dmul>
 8005514:	a380      	add	r3, pc, #512	; (adr r3, 8005718 <_dtoa_r+0x310>)
 8005516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551a:	f7fa febf 	bl	800029c <__adddf3>
 800551e:	4606      	mov	r6, r0
 8005520:	4628      	mov	r0, r5
 8005522:	460f      	mov	r7, r1
 8005524:	f7fb f806 	bl	8000534 <__aeabi_i2d>
 8005528:	a37d      	add	r3, pc, #500	; (adr r3, 8005720 <_dtoa_r+0x318>)
 800552a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552e:	f7fb f86b 	bl	8000608 <__aeabi_dmul>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4630      	mov	r0, r6
 8005538:	4639      	mov	r1, r7
 800553a:	f7fa feaf 	bl	800029c <__adddf3>
 800553e:	4606      	mov	r6, r0
 8005540:	460f      	mov	r7, r1
 8005542:	f7fb fb11 	bl	8000b68 <__aeabi_d2iz>
 8005546:	2200      	movs	r2, #0
 8005548:	4682      	mov	sl, r0
 800554a:	2300      	movs	r3, #0
 800554c:	4630      	mov	r0, r6
 800554e:	4639      	mov	r1, r7
 8005550:	f7fb facc 	bl	8000aec <__aeabi_dcmplt>
 8005554:	b148      	cbz	r0, 800556a <_dtoa_r+0x162>
 8005556:	4650      	mov	r0, sl
 8005558:	f7fa ffec 	bl	8000534 <__aeabi_i2d>
 800555c:	4632      	mov	r2, r6
 800555e:	463b      	mov	r3, r7
 8005560:	f7fb faba 	bl	8000ad8 <__aeabi_dcmpeq>
 8005564:	b908      	cbnz	r0, 800556a <_dtoa_r+0x162>
 8005566:	f10a 3aff 	add.w	sl, sl, #4294967295
 800556a:	f1ba 0f16 	cmp.w	sl, #22
 800556e:	d859      	bhi.n	8005624 <_dtoa_r+0x21c>
 8005570:	4970      	ldr	r1, [pc, #448]	; (8005734 <_dtoa_r+0x32c>)
 8005572:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005576:	e9dd 2300 	ldrd	r2, r3, [sp]
 800557a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800557e:	f7fb fad3 	bl	8000b28 <__aeabi_dcmpgt>
 8005582:	2800      	cmp	r0, #0
 8005584:	d050      	beq.n	8005628 <_dtoa_r+0x220>
 8005586:	f10a 3aff 	add.w	sl, sl, #4294967295
 800558a:	2300      	movs	r3, #0
 800558c:	930f      	str	r3, [sp, #60]	; 0x3c
 800558e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005590:	1b5d      	subs	r5, r3, r5
 8005592:	f1b5 0801 	subs.w	r8, r5, #1
 8005596:	bf49      	itett	mi
 8005598:	f1c5 0301 	rsbmi	r3, r5, #1
 800559c:	2300      	movpl	r3, #0
 800559e:	9305      	strmi	r3, [sp, #20]
 80055a0:	f04f 0800 	movmi.w	r8, #0
 80055a4:	bf58      	it	pl
 80055a6:	9305      	strpl	r3, [sp, #20]
 80055a8:	f1ba 0f00 	cmp.w	sl, #0
 80055ac:	db3e      	blt.n	800562c <_dtoa_r+0x224>
 80055ae:	2300      	movs	r3, #0
 80055b0:	44d0      	add	r8, sl
 80055b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80055b6:	9307      	str	r3, [sp, #28]
 80055b8:	9b06      	ldr	r3, [sp, #24]
 80055ba:	2b09      	cmp	r3, #9
 80055bc:	f200 8090 	bhi.w	80056e0 <_dtoa_r+0x2d8>
 80055c0:	2b05      	cmp	r3, #5
 80055c2:	bfc4      	itt	gt
 80055c4:	3b04      	subgt	r3, #4
 80055c6:	9306      	strgt	r3, [sp, #24]
 80055c8:	9b06      	ldr	r3, [sp, #24]
 80055ca:	f1a3 0302 	sub.w	r3, r3, #2
 80055ce:	bfcc      	ite	gt
 80055d0:	2500      	movgt	r5, #0
 80055d2:	2501      	movle	r5, #1
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	f200 808f 	bhi.w	80056f8 <_dtoa_r+0x2f0>
 80055da:	e8df f003 	tbb	[pc, r3]
 80055de:	7f7d      	.short	0x7f7d
 80055e0:	7131      	.short	0x7131
 80055e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80055e6:	441d      	add	r5, r3
 80055e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80055ec:	2820      	cmp	r0, #32
 80055ee:	dd13      	ble.n	8005618 <_dtoa_r+0x210>
 80055f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80055f4:	9b00      	ldr	r3, [sp, #0]
 80055f6:	fa08 f800 	lsl.w	r8, r8, r0
 80055fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80055fe:	fa23 f000 	lsr.w	r0, r3, r0
 8005602:	ea48 0000 	orr.w	r0, r8, r0
 8005606:	f7fa ff85 	bl	8000514 <__aeabi_ui2d>
 800560a:	2301      	movs	r3, #1
 800560c:	4682      	mov	sl, r0
 800560e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8005612:	3d01      	subs	r5, #1
 8005614:	9313      	str	r3, [sp, #76]	; 0x4c
 8005616:	e772      	b.n	80054fe <_dtoa_r+0xf6>
 8005618:	9b00      	ldr	r3, [sp, #0]
 800561a:	f1c0 0020 	rsb	r0, r0, #32
 800561e:	fa03 f000 	lsl.w	r0, r3, r0
 8005622:	e7f0      	b.n	8005606 <_dtoa_r+0x1fe>
 8005624:	2301      	movs	r3, #1
 8005626:	e7b1      	b.n	800558c <_dtoa_r+0x184>
 8005628:	900f      	str	r0, [sp, #60]	; 0x3c
 800562a:	e7b0      	b.n	800558e <_dtoa_r+0x186>
 800562c:	9b05      	ldr	r3, [sp, #20]
 800562e:	eba3 030a 	sub.w	r3, r3, sl
 8005632:	9305      	str	r3, [sp, #20]
 8005634:	f1ca 0300 	rsb	r3, sl, #0
 8005638:	9307      	str	r3, [sp, #28]
 800563a:	2300      	movs	r3, #0
 800563c:	930e      	str	r3, [sp, #56]	; 0x38
 800563e:	e7bb      	b.n	80055b8 <_dtoa_r+0x1b0>
 8005640:	2301      	movs	r3, #1
 8005642:	930a      	str	r3, [sp, #40]	; 0x28
 8005644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005646:	2b00      	cmp	r3, #0
 8005648:	dd59      	ble.n	80056fe <_dtoa_r+0x2f6>
 800564a:	9302      	str	r3, [sp, #8]
 800564c:	4699      	mov	r9, r3
 800564e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005650:	2200      	movs	r2, #0
 8005652:	6072      	str	r2, [r6, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	f102 0014 	add.w	r0, r2, #20
 800565a:	4298      	cmp	r0, r3
 800565c:	6871      	ldr	r1, [r6, #4]
 800565e:	d953      	bls.n	8005708 <_dtoa_r+0x300>
 8005660:	4620      	mov	r0, r4
 8005662:	f001 f8b2 	bl	80067ca <_Balloc>
 8005666:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005668:	6030      	str	r0, [r6, #0]
 800566a:	f1b9 0f0e 	cmp.w	r9, #14
 800566e:	f8d3 b000 	ldr.w	fp, [r3]
 8005672:	f200 80e6 	bhi.w	8005842 <_dtoa_r+0x43a>
 8005676:	2d00      	cmp	r5, #0
 8005678:	f000 80e3 	beq.w	8005842 <_dtoa_r+0x43a>
 800567c:	ed9d 7b00 	vldr	d7, [sp]
 8005680:	f1ba 0f00 	cmp.w	sl, #0
 8005684:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005688:	dd74      	ble.n	8005774 <_dtoa_r+0x36c>
 800568a:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <_dtoa_r+0x32c>)
 800568c:	f00a 030f 	and.w	r3, sl, #15
 8005690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005694:	ed93 7b00 	vldr	d7, [r3]
 8005698:	ea4f 162a 	mov.w	r6, sl, asr #4
 800569c:	06f0      	lsls	r0, r6, #27
 800569e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80056a2:	d565      	bpl.n	8005770 <_dtoa_r+0x368>
 80056a4:	4b24      	ldr	r3, [pc, #144]	; (8005738 <_dtoa_r+0x330>)
 80056a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80056aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056ae:	f7fb f8d5 	bl	800085c <__aeabi_ddiv>
 80056b2:	e9cd 0100 	strd	r0, r1, [sp]
 80056b6:	f006 060f 	and.w	r6, r6, #15
 80056ba:	2503      	movs	r5, #3
 80056bc:	4f1e      	ldr	r7, [pc, #120]	; (8005738 <_dtoa_r+0x330>)
 80056be:	e04c      	b.n	800575a <_dtoa_r+0x352>
 80056c0:	2301      	movs	r3, #1
 80056c2:	930a      	str	r3, [sp, #40]	; 0x28
 80056c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c6:	4453      	add	r3, sl
 80056c8:	f103 0901 	add.w	r9, r3, #1
 80056cc:	9302      	str	r3, [sp, #8]
 80056ce:	464b      	mov	r3, r9
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bfb8      	it	lt
 80056d4:	2301      	movlt	r3, #1
 80056d6:	e7ba      	b.n	800564e <_dtoa_r+0x246>
 80056d8:	2300      	movs	r3, #0
 80056da:	e7b2      	b.n	8005642 <_dtoa_r+0x23a>
 80056dc:	2300      	movs	r3, #0
 80056de:	e7f0      	b.n	80056c2 <_dtoa_r+0x2ba>
 80056e0:	2501      	movs	r5, #1
 80056e2:	2300      	movs	r3, #0
 80056e4:	9306      	str	r3, [sp, #24]
 80056e6:	950a      	str	r5, [sp, #40]	; 0x28
 80056e8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ec:	9302      	str	r3, [sp, #8]
 80056ee:	4699      	mov	r9, r3
 80056f0:	2200      	movs	r2, #0
 80056f2:	2312      	movs	r3, #18
 80056f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80056f6:	e7aa      	b.n	800564e <_dtoa_r+0x246>
 80056f8:	2301      	movs	r3, #1
 80056fa:	930a      	str	r3, [sp, #40]	; 0x28
 80056fc:	e7f4      	b.n	80056e8 <_dtoa_r+0x2e0>
 80056fe:	2301      	movs	r3, #1
 8005700:	9302      	str	r3, [sp, #8]
 8005702:	4699      	mov	r9, r3
 8005704:	461a      	mov	r2, r3
 8005706:	e7f5      	b.n	80056f4 <_dtoa_r+0x2ec>
 8005708:	3101      	adds	r1, #1
 800570a:	6071      	str	r1, [r6, #4]
 800570c:	0052      	lsls	r2, r2, #1
 800570e:	e7a2      	b.n	8005656 <_dtoa_r+0x24e>
 8005710:	636f4361 	.word	0x636f4361
 8005714:	3fd287a7 	.word	0x3fd287a7
 8005718:	8b60c8b3 	.word	0x8b60c8b3
 800571c:	3fc68a28 	.word	0x3fc68a28
 8005720:	509f79fb 	.word	0x509f79fb
 8005724:	3fd34413 	.word	0x3fd34413
 8005728:	7ff00000 	.word	0x7ff00000
 800572c:	08007cf1 	.word	0x08007cf1
 8005730:	3ff80000 	.word	0x3ff80000
 8005734:	08007e18 	.word	0x08007e18
 8005738:	08007df0 	.word	0x08007df0
 800573c:	08007d79 	.word	0x08007d79
 8005740:	07f1      	lsls	r1, r6, #31
 8005742:	d508      	bpl.n	8005756 <_dtoa_r+0x34e>
 8005744:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005748:	e9d7 2300 	ldrd	r2, r3, [r7]
 800574c:	f7fa ff5c 	bl	8000608 <__aeabi_dmul>
 8005750:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005754:	3501      	adds	r5, #1
 8005756:	1076      	asrs	r6, r6, #1
 8005758:	3708      	adds	r7, #8
 800575a:	2e00      	cmp	r6, #0
 800575c:	d1f0      	bne.n	8005740 <_dtoa_r+0x338>
 800575e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005762:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005766:	f7fb f879 	bl	800085c <__aeabi_ddiv>
 800576a:	e9cd 0100 	strd	r0, r1, [sp]
 800576e:	e01a      	b.n	80057a6 <_dtoa_r+0x39e>
 8005770:	2502      	movs	r5, #2
 8005772:	e7a3      	b.n	80056bc <_dtoa_r+0x2b4>
 8005774:	f000 80a0 	beq.w	80058b8 <_dtoa_r+0x4b0>
 8005778:	f1ca 0600 	rsb	r6, sl, #0
 800577c:	4b9f      	ldr	r3, [pc, #636]	; (80059fc <_dtoa_r+0x5f4>)
 800577e:	4fa0      	ldr	r7, [pc, #640]	; (8005a00 <_dtoa_r+0x5f8>)
 8005780:	f006 020f 	and.w	r2, r6, #15
 8005784:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005790:	f7fa ff3a 	bl	8000608 <__aeabi_dmul>
 8005794:	e9cd 0100 	strd	r0, r1, [sp]
 8005798:	1136      	asrs	r6, r6, #4
 800579a:	2300      	movs	r3, #0
 800579c:	2502      	movs	r5, #2
 800579e:	2e00      	cmp	r6, #0
 80057a0:	d17f      	bne.n	80058a2 <_dtoa_r+0x49a>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e1      	bne.n	800576a <_dtoa_r+0x362>
 80057a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8087 	beq.w	80058bc <_dtoa_r+0x4b4>
 80057ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80057b2:	2200      	movs	r2, #0
 80057b4:	4b93      	ldr	r3, [pc, #588]	; (8005a04 <_dtoa_r+0x5fc>)
 80057b6:	4630      	mov	r0, r6
 80057b8:	4639      	mov	r1, r7
 80057ba:	f7fb f997 	bl	8000aec <__aeabi_dcmplt>
 80057be:	2800      	cmp	r0, #0
 80057c0:	d07c      	beq.n	80058bc <_dtoa_r+0x4b4>
 80057c2:	f1b9 0f00 	cmp.w	r9, #0
 80057c6:	d079      	beq.n	80058bc <_dtoa_r+0x4b4>
 80057c8:	9b02      	ldr	r3, [sp, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	dd35      	ble.n	800583a <_dtoa_r+0x432>
 80057ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057d2:	9308      	str	r3, [sp, #32]
 80057d4:	4639      	mov	r1, r7
 80057d6:	2200      	movs	r2, #0
 80057d8:	4b8b      	ldr	r3, [pc, #556]	; (8005a08 <_dtoa_r+0x600>)
 80057da:	4630      	mov	r0, r6
 80057dc:	f7fa ff14 	bl	8000608 <__aeabi_dmul>
 80057e0:	e9cd 0100 	strd	r0, r1, [sp]
 80057e4:	9f02      	ldr	r7, [sp, #8]
 80057e6:	3501      	adds	r5, #1
 80057e8:	4628      	mov	r0, r5
 80057ea:	f7fa fea3 	bl	8000534 <__aeabi_i2d>
 80057ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057f2:	f7fa ff09 	bl	8000608 <__aeabi_dmul>
 80057f6:	2200      	movs	r2, #0
 80057f8:	4b84      	ldr	r3, [pc, #528]	; (8005a0c <_dtoa_r+0x604>)
 80057fa:	f7fa fd4f 	bl	800029c <__adddf3>
 80057fe:	4605      	mov	r5, r0
 8005800:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005804:	2f00      	cmp	r7, #0
 8005806:	d15d      	bne.n	80058c4 <_dtoa_r+0x4bc>
 8005808:	2200      	movs	r2, #0
 800580a:	4b81      	ldr	r3, [pc, #516]	; (8005a10 <_dtoa_r+0x608>)
 800580c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005810:	f7fa fd42 	bl	8000298 <__aeabi_dsub>
 8005814:	462a      	mov	r2, r5
 8005816:	4633      	mov	r3, r6
 8005818:	e9cd 0100 	strd	r0, r1, [sp]
 800581c:	f7fb f984 	bl	8000b28 <__aeabi_dcmpgt>
 8005820:	2800      	cmp	r0, #0
 8005822:	f040 8288 	bne.w	8005d36 <_dtoa_r+0x92e>
 8005826:	462a      	mov	r2, r5
 8005828:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800582c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005830:	f7fb f95c 	bl	8000aec <__aeabi_dcmplt>
 8005834:	2800      	cmp	r0, #0
 8005836:	f040 827c 	bne.w	8005d32 <_dtoa_r+0x92a>
 800583a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800583e:	e9cd 2300 	strd	r2, r3, [sp]
 8005842:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005844:	2b00      	cmp	r3, #0
 8005846:	f2c0 8150 	blt.w	8005aea <_dtoa_r+0x6e2>
 800584a:	f1ba 0f0e 	cmp.w	sl, #14
 800584e:	f300 814c 	bgt.w	8005aea <_dtoa_r+0x6e2>
 8005852:	4b6a      	ldr	r3, [pc, #424]	; (80059fc <_dtoa_r+0x5f4>)
 8005854:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005858:	ed93 7b00 	vldr	d7, [r3]
 800585c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800585e:	2b00      	cmp	r3, #0
 8005860:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005864:	f280 80d8 	bge.w	8005a18 <_dtoa_r+0x610>
 8005868:	f1b9 0f00 	cmp.w	r9, #0
 800586c:	f300 80d4 	bgt.w	8005a18 <_dtoa_r+0x610>
 8005870:	f040 825e 	bne.w	8005d30 <_dtoa_r+0x928>
 8005874:	2200      	movs	r2, #0
 8005876:	4b66      	ldr	r3, [pc, #408]	; (8005a10 <_dtoa_r+0x608>)
 8005878:	ec51 0b17 	vmov	r0, r1, d7
 800587c:	f7fa fec4 	bl	8000608 <__aeabi_dmul>
 8005880:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005884:	f7fb f946 	bl	8000b14 <__aeabi_dcmpge>
 8005888:	464f      	mov	r7, r9
 800588a:	464e      	mov	r6, r9
 800588c:	2800      	cmp	r0, #0
 800588e:	f040 8234 	bne.w	8005cfa <_dtoa_r+0x8f2>
 8005892:	2331      	movs	r3, #49	; 0x31
 8005894:	f10b 0501 	add.w	r5, fp, #1
 8005898:	f88b 3000 	strb.w	r3, [fp]
 800589c:	f10a 0a01 	add.w	sl, sl, #1
 80058a0:	e22f      	b.n	8005d02 <_dtoa_r+0x8fa>
 80058a2:	07f2      	lsls	r2, r6, #31
 80058a4:	d505      	bpl.n	80058b2 <_dtoa_r+0x4aa>
 80058a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058aa:	f7fa fead 	bl	8000608 <__aeabi_dmul>
 80058ae:	3501      	adds	r5, #1
 80058b0:	2301      	movs	r3, #1
 80058b2:	1076      	asrs	r6, r6, #1
 80058b4:	3708      	adds	r7, #8
 80058b6:	e772      	b.n	800579e <_dtoa_r+0x396>
 80058b8:	2502      	movs	r5, #2
 80058ba:	e774      	b.n	80057a6 <_dtoa_r+0x39e>
 80058bc:	f8cd a020 	str.w	sl, [sp, #32]
 80058c0:	464f      	mov	r7, r9
 80058c2:	e791      	b.n	80057e8 <_dtoa_r+0x3e0>
 80058c4:	4b4d      	ldr	r3, [pc, #308]	; (80059fc <_dtoa_r+0x5f4>)
 80058c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d047      	beq.n	8005964 <_dtoa_r+0x55c>
 80058d4:	4602      	mov	r2, r0
 80058d6:	460b      	mov	r3, r1
 80058d8:	2000      	movs	r0, #0
 80058da:	494e      	ldr	r1, [pc, #312]	; (8005a14 <_dtoa_r+0x60c>)
 80058dc:	f7fa ffbe 	bl	800085c <__aeabi_ddiv>
 80058e0:	462a      	mov	r2, r5
 80058e2:	4633      	mov	r3, r6
 80058e4:	f7fa fcd8 	bl	8000298 <__aeabi_dsub>
 80058e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058ec:	465d      	mov	r5, fp
 80058ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058f2:	f7fb f939 	bl	8000b68 <__aeabi_d2iz>
 80058f6:	4606      	mov	r6, r0
 80058f8:	f7fa fe1c 	bl	8000534 <__aeabi_i2d>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005904:	f7fa fcc8 	bl	8000298 <__aeabi_dsub>
 8005908:	3630      	adds	r6, #48	; 0x30
 800590a:	f805 6b01 	strb.w	r6, [r5], #1
 800590e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005912:	e9cd 0100 	strd	r0, r1, [sp]
 8005916:	f7fb f8e9 	bl	8000aec <__aeabi_dcmplt>
 800591a:	2800      	cmp	r0, #0
 800591c:	d163      	bne.n	80059e6 <_dtoa_r+0x5de>
 800591e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005922:	2000      	movs	r0, #0
 8005924:	4937      	ldr	r1, [pc, #220]	; (8005a04 <_dtoa_r+0x5fc>)
 8005926:	f7fa fcb7 	bl	8000298 <__aeabi_dsub>
 800592a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800592e:	f7fb f8dd 	bl	8000aec <__aeabi_dcmplt>
 8005932:	2800      	cmp	r0, #0
 8005934:	f040 80b7 	bne.w	8005aa6 <_dtoa_r+0x69e>
 8005938:	eba5 030b 	sub.w	r3, r5, fp
 800593c:	429f      	cmp	r7, r3
 800593e:	f77f af7c 	ble.w	800583a <_dtoa_r+0x432>
 8005942:	2200      	movs	r2, #0
 8005944:	4b30      	ldr	r3, [pc, #192]	; (8005a08 <_dtoa_r+0x600>)
 8005946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800594a:	f7fa fe5d 	bl	8000608 <__aeabi_dmul>
 800594e:	2200      	movs	r2, #0
 8005950:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005954:	4b2c      	ldr	r3, [pc, #176]	; (8005a08 <_dtoa_r+0x600>)
 8005956:	e9dd 0100 	ldrd	r0, r1, [sp]
 800595a:	f7fa fe55 	bl	8000608 <__aeabi_dmul>
 800595e:	e9cd 0100 	strd	r0, r1, [sp]
 8005962:	e7c4      	b.n	80058ee <_dtoa_r+0x4e6>
 8005964:	462a      	mov	r2, r5
 8005966:	4633      	mov	r3, r6
 8005968:	f7fa fe4e 	bl	8000608 <__aeabi_dmul>
 800596c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005970:	eb0b 0507 	add.w	r5, fp, r7
 8005974:	465e      	mov	r6, fp
 8005976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800597a:	f7fb f8f5 	bl	8000b68 <__aeabi_d2iz>
 800597e:	4607      	mov	r7, r0
 8005980:	f7fa fdd8 	bl	8000534 <__aeabi_i2d>
 8005984:	3730      	adds	r7, #48	; 0x30
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800598e:	f7fa fc83 	bl	8000298 <__aeabi_dsub>
 8005992:	f806 7b01 	strb.w	r7, [r6], #1
 8005996:	42ae      	cmp	r6, r5
 8005998:	e9cd 0100 	strd	r0, r1, [sp]
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	d126      	bne.n	80059f0 <_dtoa_r+0x5e8>
 80059a2:	4b1c      	ldr	r3, [pc, #112]	; (8005a14 <_dtoa_r+0x60c>)
 80059a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059a8:	f7fa fc78 	bl	800029c <__adddf3>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b4:	f7fb f8b8 	bl	8000b28 <__aeabi_dcmpgt>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d174      	bne.n	8005aa6 <_dtoa_r+0x69e>
 80059bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059c0:	2000      	movs	r0, #0
 80059c2:	4914      	ldr	r1, [pc, #80]	; (8005a14 <_dtoa_r+0x60c>)
 80059c4:	f7fa fc68 	bl	8000298 <__aeabi_dsub>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059d0:	f7fb f88c 	bl	8000aec <__aeabi_dcmplt>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f43f af30 	beq.w	800583a <_dtoa_r+0x432>
 80059da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059de:	2b30      	cmp	r3, #48	; 0x30
 80059e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80059e4:	d002      	beq.n	80059ec <_dtoa_r+0x5e4>
 80059e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80059ea:	e04a      	b.n	8005a82 <_dtoa_r+0x67a>
 80059ec:	4615      	mov	r5, r2
 80059ee:	e7f4      	b.n	80059da <_dtoa_r+0x5d2>
 80059f0:	4b05      	ldr	r3, [pc, #20]	; (8005a08 <_dtoa_r+0x600>)
 80059f2:	f7fa fe09 	bl	8000608 <__aeabi_dmul>
 80059f6:	e9cd 0100 	strd	r0, r1, [sp]
 80059fa:	e7bc      	b.n	8005976 <_dtoa_r+0x56e>
 80059fc:	08007e18 	.word	0x08007e18
 8005a00:	08007df0 	.word	0x08007df0
 8005a04:	3ff00000 	.word	0x3ff00000
 8005a08:	40240000 	.word	0x40240000
 8005a0c:	401c0000 	.word	0x401c0000
 8005a10:	40140000 	.word	0x40140000
 8005a14:	3fe00000 	.word	0x3fe00000
 8005a18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a1c:	465d      	mov	r5, fp
 8005a1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a22:	4630      	mov	r0, r6
 8005a24:	4639      	mov	r1, r7
 8005a26:	f7fa ff19 	bl	800085c <__aeabi_ddiv>
 8005a2a:	f7fb f89d 	bl	8000b68 <__aeabi_d2iz>
 8005a2e:	4680      	mov	r8, r0
 8005a30:	f7fa fd80 	bl	8000534 <__aeabi_i2d>
 8005a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a38:	f7fa fde6 	bl	8000608 <__aeabi_dmul>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	460b      	mov	r3, r1
 8005a40:	4630      	mov	r0, r6
 8005a42:	4639      	mov	r1, r7
 8005a44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005a48:	f7fa fc26 	bl	8000298 <__aeabi_dsub>
 8005a4c:	f805 6b01 	strb.w	r6, [r5], #1
 8005a50:	eba5 060b 	sub.w	r6, r5, fp
 8005a54:	45b1      	cmp	r9, r6
 8005a56:	4602      	mov	r2, r0
 8005a58:	460b      	mov	r3, r1
 8005a5a:	d139      	bne.n	8005ad0 <_dtoa_r+0x6c8>
 8005a5c:	f7fa fc1e 	bl	800029c <__adddf3>
 8005a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a64:	4606      	mov	r6, r0
 8005a66:	460f      	mov	r7, r1
 8005a68:	f7fb f85e 	bl	8000b28 <__aeabi_dcmpgt>
 8005a6c:	b9c8      	cbnz	r0, 8005aa2 <_dtoa_r+0x69a>
 8005a6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a72:	4630      	mov	r0, r6
 8005a74:	4639      	mov	r1, r7
 8005a76:	f7fb f82f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a7a:	b110      	cbz	r0, 8005a82 <_dtoa_r+0x67a>
 8005a7c:	f018 0f01 	tst.w	r8, #1
 8005a80:	d10f      	bne.n	8005aa2 <_dtoa_r+0x69a>
 8005a82:	9904      	ldr	r1, [sp, #16]
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 fed4 	bl	8006832 <_Bfree>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a8e:	702b      	strb	r3, [r5, #0]
 8005a90:	f10a 0301 	add.w	r3, sl, #1
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8241 	beq.w	8005f20 <_dtoa_r+0xb18>
 8005a9e:	601d      	str	r5, [r3, #0]
 8005aa0:	e23e      	b.n	8005f20 <_dtoa_r+0xb18>
 8005aa2:	f8cd a020 	str.w	sl, [sp, #32]
 8005aa6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005aaa:	2a39      	cmp	r2, #57	; 0x39
 8005aac:	f105 33ff 	add.w	r3, r5, #4294967295
 8005ab0:	d108      	bne.n	8005ac4 <_dtoa_r+0x6bc>
 8005ab2:	459b      	cmp	fp, r3
 8005ab4:	d10a      	bne.n	8005acc <_dtoa_r+0x6c4>
 8005ab6:	9b08      	ldr	r3, [sp, #32]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	9308      	str	r3, [sp, #32]
 8005abc:	2330      	movs	r3, #48	; 0x30
 8005abe:	f88b 3000 	strb.w	r3, [fp]
 8005ac2:	465b      	mov	r3, fp
 8005ac4:	781a      	ldrb	r2, [r3, #0]
 8005ac6:	3201      	adds	r2, #1
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	e78c      	b.n	80059e6 <_dtoa_r+0x5de>
 8005acc:	461d      	mov	r5, r3
 8005ace:	e7ea      	b.n	8005aa6 <_dtoa_r+0x69e>
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4b9b      	ldr	r3, [pc, #620]	; (8005d40 <_dtoa_r+0x938>)
 8005ad4:	f7fa fd98 	bl	8000608 <__aeabi_dmul>
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2300      	movs	r3, #0
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	f7fa fffa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d09a      	beq.n	8005a1e <_dtoa_r+0x616>
 8005ae8:	e7cb      	b.n	8005a82 <_dtoa_r+0x67a>
 8005aea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005aec:	2a00      	cmp	r2, #0
 8005aee:	f000 808b 	beq.w	8005c08 <_dtoa_r+0x800>
 8005af2:	9a06      	ldr	r2, [sp, #24]
 8005af4:	2a01      	cmp	r2, #1
 8005af6:	dc6e      	bgt.n	8005bd6 <_dtoa_r+0x7ce>
 8005af8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005afa:	2a00      	cmp	r2, #0
 8005afc:	d067      	beq.n	8005bce <_dtoa_r+0x7c6>
 8005afe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005b02:	9f07      	ldr	r7, [sp, #28]
 8005b04:	9d05      	ldr	r5, [sp, #20]
 8005b06:	9a05      	ldr	r2, [sp, #20]
 8005b08:	2101      	movs	r1, #1
 8005b0a:	441a      	add	r2, r3
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	9205      	str	r2, [sp, #20]
 8005b10:	4498      	add	r8, r3
 8005b12:	f000 ff6c 	bl	80069ee <__i2b>
 8005b16:	4606      	mov	r6, r0
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	dd0c      	ble.n	8005b36 <_dtoa_r+0x72e>
 8005b1c:	f1b8 0f00 	cmp.w	r8, #0
 8005b20:	dd09      	ble.n	8005b36 <_dtoa_r+0x72e>
 8005b22:	4545      	cmp	r5, r8
 8005b24:	9a05      	ldr	r2, [sp, #20]
 8005b26:	462b      	mov	r3, r5
 8005b28:	bfa8      	it	ge
 8005b2a:	4643      	movge	r3, r8
 8005b2c:	1ad2      	subs	r2, r2, r3
 8005b2e:	9205      	str	r2, [sp, #20]
 8005b30:	1aed      	subs	r5, r5, r3
 8005b32:	eba8 0803 	sub.w	r8, r8, r3
 8005b36:	9b07      	ldr	r3, [sp, #28]
 8005b38:	b1eb      	cbz	r3, 8005b76 <_dtoa_r+0x76e>
 8005b3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d067      	beq.n	8005c10 <_dtoa_r+0x808>
 8005b40:	b18f      	cbz	r7, 8005b66 <_dtoa_r+0x75e>
 8005b42:	4631      	mov	r1, r6
 8005b44:	463a      	mov	r2, r7
 8005b46:	4620      	mov	r0, r4
 8005b48:	f000 fff0 	bl	8006b2c <__pow5mult>
 8005b4c:	9a04      	ldr	r2, [sp, #16]
 8005b4e:	4601      	mov	r1, r0
 8005b50:	4606      	mov	r6, r0
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 ff54 	bl	8006a00 <__multiply>
 8005b58:	9904      	ldr	r1, [sp, #16]
 8005b5a:	9008      	str	r0, [sp, #32]
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	f000 fe68 	bl	8006832 <_Bfree>
 8005b62:	9b08      	ldr	r3, [sp, #32]
 8005b64:	9304      	str	r3, [sp, #16]
 8005b66:	9b07      	ldr	r3, [sp, #28]
 8005b68:	1bda      	subs	r2, r3, r7
 8005b6a:	d004      	beq.n	8005b76 <_dtoa_r+0x76e>
 8005b6c:	9904      	ldr	r1, [sp, #16]
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 ffdc 	bl	8006b2c <__pow5mult>
 8005b74:	9004      	str	r0, [sp, #16]
 8005b76:	2101      	movs	r1, #1
 8005b78:	4620      	mov	r0, r4
 8005b7a:	f000 ff38 	bl	80069ee <__i2b>
 8005b7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b80:	4607      	mov	r7, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 81d0 	beq.w	8005f28 <_dtoa_r+0xb20>
 8005b88:	461a      	mov	r2, r3
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	f000 ffcd 	bl	8006b2c <__pow5mult>
 8005b92:	9b06      	ldr	r3, [sp, #24]
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	4607      	mov	r7, r0
 8005b98:	dc40      	bgt.n	8005c1c <_dtoa_r+0x814>
 8005b9a:	9b00      	ldr	r3, [sp, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d139      	bne.n	8005c14 <_dtoa_r+0x80c>
 8005ba0:	9b01      	ldr	r3, [sp, #4]
 8005ba2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d136      	bne.n	8005c18 <_dtoa_r+0x810>
 8005baa:	9b01      	ldr	r3, [sp, #4]
 8005bac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	0d1b      	lsrs	r3, r3, #20
 8005bb2:	051b      	lsls	r3, r3, #20
 8005bb4:	b12b      	cbz	r3, 8005bc2 <_dtoa_r+0x7ba>
 8005bb6:	9b05      	ldr	r3, [sp, #20]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	9305      	str	r3, [sp, #20]
 8005bbc:	f108 0801 	add.w	r8, r8, #1
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	9307      	str	r3, [sp, #28]
 8005bc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d12a      	bne.n	8005c20 <_dtoa_r+0x818>
 8005bca:	2001      	movs	r0, #1
 8005bcc:	e030      	b.n	8005c30 <_dtoa_r+0x828>
 8005bce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bd0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bd4:	e795      	b.n	8005b02 <_dtoa_r+0x6fa>
 8005bd6:	9b07      	ldr	r3, [sp, #28]
 8005bd8:	f109 37ff 	add.w	r7, r9, #4294967295
 8005bdc:	42bb      	cmp	r3, r7
 8005bde:	bfbf      	itttt	lt
 8005be0:	9b07      	ldrlt	r3, [sp, #28]
 8005be2:	9707      	strlt	r7, [sp, #28]
 8005be4:	1afa      	sublt	r2, r7, r3
 8005be6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005be8:	bfbb      	ittet	lt
 8005bea:	189b      	addlt	r3, r3, r2
 8005bec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005bee:	1bdf      	subge	r7, r3, r7
 8005bf0:	2700      	movlt	r7, #0
 8005bf2:	f1b9 0f00 	cmp.w	r9, #0
 8005bf6:	bfb5      	itete	lt
 8005bf8:	9b05      	ldrlt	r3, [sp, #20]
 8005bfa:	9d05      	ldrge	r5, [sp, #20]
 8005bfc:	eba3 0509 	sublt.w	r5, r3, r9
 8005c00:	464b      	movge	r3, r9
 8005c02:	bfb8      	it	lt
 8005c04:	2300      	movlt	r3, #0
 8005c06:	e77e      	b.n	8005b06 <_dtoa_r+0x6fe>
 8005c08:	9f07      	ldr	r7, [sp, #28]
 8005c0a:	9d05      	ldr	r5, [sp, #20]
 8005c0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005c0e:	e783      	b.n	8005b18 <_dtoa_r+0x710>
 8005c10:	9a07      	ldr	r2, [sp, #28]
 8005c12:	e7ab      	b.n	8005b6c <_dtoa_r+0x764>
 8005c14:	2300      	movs	r3, #0
 8005c16:	e7d4      	b.n	8005bc2 <_dtoa_r+0x7ba>
 8005c18:	9b00      	ldr	r3, [sp, #0]
 8005c1a:	e7d2      	b.n	8005bc2 <_dtoa_r+0x7ba>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	9307      	str	r3, [sp, #28]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005c26:	6918      	ldr	r0, [r3, #16]
 8005c28:	f000 fe93 	bl	8006952 <__hi0bits>
 8005c2c:	f1c0 0020 	rsb	r0, r0, #32
 8005c30:	4440      	add	r0, r8
 8005c32:	f010 001f 	ands.w	r0, r0, #31
 8005c36:	d047      	beq.n	8005cc8 <_dtoa_r+0x8c0>
 8005c38:	f1c0 0320 	rsb	r3, r0, #32
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	dd3b      	ble.n	8005cb8 <_dtoa_r+0x8b0>
 8005c40:	9b05      	ldr	r3, [sp, #20]
 8005c42:	f1c0 001c 	rsb	r0, r0, #28
 8005c46:	4403      	add	r3, r0
 8005c48:	9305      	str	r3, [sp, #20]
 8005c4a:	4405      	add	r5, r0
 8005c4c:	4480      	add	r8, r0
 8005c4e:	9b05      	ldr	r3, [sp, #20]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	dd05      	ble.n	8005c60 <_dtoa_r+0x858>
 8005c54:	461a      	mov	r2, r3
 8005c56:	9904      	ldr	r1, [sp, #16]
 8005c58:	4620      	mov	r0, r4
 8005c5a:	f000 ffb5 	bl	8006bc8 <__lshift>
 8005c5e:	9004      	str	r0, [sp, #16]
 8005c60:	f1b8 0f00 	cmp.w	r8, #0
 8005c64:	dd05      	ble.n	8005c72 <_dtoa_r+0x86a>
 8005c66:	4639      	mov	r1, r7
 8005c68:	4642      	mov	r2, r8
 8005c6a:	4620      	mov	r0, r4
 8005c6c:	f000 ffac 	bl	8006bc8 <__lshift>
 8005c70:	4607      	mov	r7, r0
 8005c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c74:	b353      	cbz	r3, 8005ccc <_dtoa_r+0x8c4>
 8005c76:	4639      	mov	r1, r7
 8005c78:	9804      	ldr	r0, [sp, #16]
 8005c7a:	f000 fff9 	bl	8006c70 <__mcmp>
 8005c7e:	2800      	cmp	r0, #0
 8005c80:	da24      	bge.n	8005ccc <_dtoa_r+0x8c4>
 8005c82:	2300      	movs	r3, #0
 8005c84:	220a      	movs	r2, #10
 8005c86:	9904      	ldr	r1, [sp, #16]
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f000 fde9 	bl	8006860 <__multadd>
 8005c8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c90:	9004      	str	r0, [sp, #16]
 8005c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	f000 814d 	beq.w	8005f36 <_dtoa_r+0xb2e>
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	220a      	movs	r2, #10
 8005ca2:	4620      	mov	r0, r4
 8005ca4:	f000 fddc 	bl	8006860 <__multadd>
 8005ca8:	9b02      	ldr	r3, [sp, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	4606      	mov	r6, r0
 8005cae:	dc4f      	bgt.n	8005d50 <_dtoa_r+0x948>
 8005cb0:	9b06      	ldr	r3, [sp, #24]
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	dd4c      	ble.n	8005d50 <_dtoa_r+0x948>
 8005cb6:	e011      	b.n	8005cdc <_dtoa_r+0x8d4>
 8005cb8:	d0c9      	beq.n	8005c4e <_dtoa_r+0x846>
 8005cba:	9a05      	ldr	r2, [sp, #20]
 8005cbc:	331c      	adds	r3, #28
 8005cbe:	441a      	add	r2, r3
 8005cc0:	9205      	str	r2, [sp, #20]
 8005cc2:	441d      	add	r5, r3
 8005cc4:	4498      	add	r8, r3
 8005cc6:	e7c2      	b.n	8005c4e <_dtoa_r+0x846>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	e7f6      	b.n	8005cba <_dtoa_r+0x8b2>
 8005ccc:	f1b9 0f00 	cmp.w	r9, #0
 8005cd0:	dc38      	bgt.n	8005d44 <_dtoa_r+0x93c>
 8005cd2:	9b06      	ldr	r3, [sp, #24]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	dd35      	ble.n	8005d44 <_dtoa_r+0x93c>
 8005cd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cdc:	9b02      	ldr	r3, [sp, #8]
 8005cde:	b963      	cbnz	r3, 8005cfa <_dtoa_r+0x8f2>
 8005ce0:	4639      	mov	r1, r7
 8005ce2:	2205      	movs	r2, #5
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f000 fdbb 	bl	8006860 <__multadd>
 8005cea:	4601      	mov	r1, r0
 8005cec:	4607      	mov	r7, r0
 8005cee:	9804      	ldr	r0, [sp, #16]
 8005cf0:	f000 ffbe 	bl	8006c70 <__mcmp>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	f73f adcc 	bgt.w	8005892 <_dtoa_r+0x48a>
 8005cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cfc:	465d      	mov	r5, fp
 8005cfe:	ea6f 0a03 	mvn.w	sl, r3
 8005d02:	f04f 0900 	mov.w	r9, #0
 8005d06:	4639      	mov	r1, r7
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fd92 	bl	8006832 <_Bfree>
 8005d0e:	2e00      	cmp	r6, #0
 8005d10:	f43f aeb7 	beq.w	8005a82 <_dtoa_r+0x67a>
 8005d14:	f1b9 0f00 	cmp.w	r9, #0
 8005d18:	d005      	beq.n	8005d26 <_dtoa_r+0x91e>
 8005d1a:	45b1      	cmp	r9, r6
 8005d1c:	d003      	beq.n	8005d26 <_dtoa_r+0x91e>
 8005d1e:	4649      	mov	r1, r9
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 fd86 	bl	8006832 <_Bfree>
 8005d26:	4631      	mov	r1, r6
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 fd82 	bl	8006832 <_Bfree>
 8005d2e:	e6a8      	b.n	8005a82 <_dtoa_r+0x67a>
 8005d30:	2700      	movs	r7, #0
 8005d32:	463e      	mov	r6, r7
 8005d34:	e7e1      	b.n	8005cfa <_dtoa_r+0x8f2>
 8005d36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d3a:	463e      	mov	r6, r7
 8005d3c:	e5a9      	b.n	8005892 <_dtoa_r+0x48a>
 8005d3e:	bf00      	nop
 8005d40:	40240000 	.word	0x40240000
 8005d44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d46:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	f000 80fa 	beq.w	8005f44 <_dtoa_r+0xb3c>
 8005d50:	2d00      	cmp	r5, #0
 8005d52:	dd05      	ble.n	8005d60 <_dtoa_r+0x958>
 8005d54:	4631      	mov	r1, r6
 8005d56:	462a      	mov	r2, r5
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 ff35 	bl	8006bc8 <__lshift>
 8005d5e:	4606      	mov	r6, r0
 8005d60:	9b07      	ldr	r3, [sp, #28]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d04c      	beq.n	8005e00 <_dtoa_r+0x9f8>
 8005d66:	6871      	ldr	r1, [r6, #4]
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f000 fd2e 	bl	80067ca <_Balloc>
 8005d6e:	6932      	ldr	r2, [r6, #16]
 8005d70:	3202      	adds	r2, #2
 8005d72:	4605      	mov	r5, r0
 8005d74:	0092      	lsls	r2, r2, #2
 8005d76:	f106 010c 	add.w	r1, r6, #12
 8005d7a:	300c      	adds	r0, #12
 8005d7c:	f000 fd1a 	bl	80067b4 <memcpy>
 8005d80:	2201      	movs	r2, #1
 8005d82:	4629      	mov	r1, r5
 8005d84:	4620      	mov	r0, r4
 8005d86:	f000 ff1f 	bl	8006bc8 <__lshift>
 8005d8a:	9b00      	ldr	r3, [sp, #0]
 8005d8c:	f8cd b014 	str.w	fp, [sp, #20]
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	46b1      	mov	r9, r6
 8005d96:	9307      	str	r3, [sp, #28]
 8005d98:	4606      	mov	r6, r0
 8005d9a:	4639      	mov	r1, r7
 8005d9c:	9804      	ldr	r0, [sp, #16]
 8005d9e:	f7ff faa5 	bl	80052ec <quorem>
 8005da2:	4649      	mov	r1, r9
 8005da4:	4605      	mov	r5, r0
 8005da6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005daa:	9804      	ldr	r0, [sp, #16]
 8005dac:	f000 ff60 	bl	8006c70 <__mcmp>
 8005db0:	4632      	mov	r2, r6
 8005db2:	9000      	str	r0, [sp, #0]
 8005db4:	4639      	mov	r1, r7
 8005db6:	4620      	mov	r0, r4
 8005db8:	f000 ff74 	bl	8006ca4 <__mdiff>
 8005dbc:	68c3      	ldr	r3, [r0, #12]
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	bb03      	cbnz	r3, 8005e04 <_dtoa_r+0x9fc>
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	9008      	str	r0, [sp, #32]
 8005dc6:	9804      	ldr	r0, [sp, #16]
 8005dc8:	f000 ff52 	bl	8006c70 <__mcmp>
 8005dcc:	9a08      	ldr	r2, [sp, #32]
 8005dce:	4603      	mov	r3, r0
 8005dd0:	4611      	mov	r1, r2
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	9308      	str	r3, [sp, #32]
 8005dd6:	f000 fd2c 	bl	8006832 <_Bfree>
 8005dda:	9b08      	ldr	r3, [sp, #32]
 8005ddc:	b9a3      	cbnz	r3, 8005e08 <_dtoa_r+0xa00>
 8005dde:	9a06      	ldr	r2, [sp, #24]
 8005de0:	b992      	cbnz	r2, 8005e08 <_dtoa_r+0xa00>
 8005de2:	9a07      	ldr	r2, [sp, #28]
 8005de4:	b982      	cbnz	r2, 8005e08 <_dtoa_r+0xa00>
 8005de6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dea:	d029      	beq.n	8005e40 <_dtoa_r+0xa38>
 8005dec:	9b00      	ldr	r3, [sp, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dd01      	ble.n	8005df6 <_dtoa_r+0x9ee>
 8005df2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005df6:	9b05      	ldr	r3, [sp, #20]
 8005df8:	1c5d      	adds	r5, r3, #1
 8005dfa:	f883 8000 	strb.w	r8, [r3]
 8005dfe:	e782      	b.n	8005d06 <_dtoa_r+0x8fe>
 8005e00:	4630      	mov	r0, r6
 8005e02:	e7c2      	b.n	8005d8a <_dtoa_r+0x982>
 8005e04:	2301      	movs	r3, #1
 8005e06:	e7e3      	b.n	8005dd0 <_dtoa_r+0x9c8>
 8005e08:	9a00      	ldr	r2, [sp, #0]
 8005e0a:	2a00      	cmp	r2, #0
 8005e0c:	db04      	blt.n	8005e18 <_dtoa_r+0xa10>
 8005e0e:	d125      	bne.n	8005e5c <_dtoa_r+0xa54>
 8005e10:	9a06      	ldr	r2, [sp, #24]
 8005e12:	bb1a      	cbnz	r2, 8005e5c <_dtoa_r+0xa54>
 8005e14:	9a07      	ldr	r2, [sp, #28]
 8005e16:	bb0a      	cbnz	r2, 8005e5c <_dtoa_r+0xa54>
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	ddec      	ble.n	8005df6 <_dtoa_r+0x9ee>
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	9904      	ldr	r1, [sp, #16]
 8005e20:	4620      	mov	r0, r4
 8005e22:	f000 fed1 	bl	8006bc8 <__lshift>
 8005e26:	4639      	mov	r1, r7
 8005e28:	9004      	str	r0, [sp, #16]
 8005e2a:	f000 ff21 	bl	8006c70 <__mcmp>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	dc03      	bgt.n	8005e3a <_dtoa_r+0xa32>
 8005e32:	d1e0      	bne.n	8005df6 <_dtoa_r+0x9ee>
 8005e34:	f018 0f01 	tst.w	r8, #1
 8005e38:	d0dd      	beq.n	8005df6 <_dtoa_r+0x9ee>
 8005e3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e3e:	d1d8      	bne.n	8005df2 <_dtoa_r+0x9ea>
 8005e40:	9b05      	ldr	r3, [sp, #20]
 8005e42:	9a05      	ldr	r2, [sp, #20]
 8005e44:	1c5d      	adds	r5, r3, #1
 8005e46:	2339      	movs	r3, #57	; 0x39
 8005e48:	7013      	strb	r3, [r2, #0]
 8005e4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e4e:	2b39      	cmp	r3, #57	; 0x39
 8005e50:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e54:	d04f      	beq.n	8005ef6 <_dtoa_r+0xaee>
 8005e56:	3301      	adds	r3, #1
 8005e58:	7013      	strb	r3, [r2, #0]
 8005e5a:	e754      	b.n	8005d06 <_dtoa_r+0x8fe>
 8005e5c:	9a05      	ldr	r2, [sp, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f102 0501 	add.w	r5, r2, #1
 8005e64:	dd06      	ble.n	8005e74 <_dtoa_r+0xa6c>
 8005e66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e6a:	d0e9      	beq.n	8005e40 <_dtoa_r+0xa38>
 8005e6c:	f108 0801 	add.w	r8, r8, #1
 8005e70:	9b05      	ldr	r3, [sp, #20]
 8005e72:	e7c2      	b.n	8005dfa <_dtoa_r+0x9f2>
 8005e74:	9a02      	ldr	r2, [sp, #8]
 8005e76:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e7a:	eba5 030b 	sub.w	r3, r5, fp
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d021      	beq.n	8005ec6 <_dtoa_r+0xabe>
 8005e82:	2300      	movs	r3, #0
 8005e84:	220a      	movs	r2, #10
 8005e86:	9904      	ldr	r1, [sp, #16]
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f000 fce9 	bl	8006860 <__multadd>
 8005e8e:	45b1      	cmp	r9, r6
 8005e90:	9004      	str	r0, [sp, #16]
 8005e92:	f04f 0300 	mov.w	r3, #0
 8005e96:	f04f 020a 	mov.w	r2, #10
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	d105      	bne.n	8005eac <_dtoa_r+0xaa4>
 8005ea0:	f000 fcde 	bl	8006860 <__multadd>
 8005ea4:	4681      	mov	r9, r0
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	9505      	str	r5, [sp, #20]
 8005eaa:	e776      	b.n	8005d9a <_dtoa_r+0x992>
 8005eac:	f000 fcd8 	bl	8006860 <__multadd>
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4681      	mov	r9, r0
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	220a      	movs	r2, #10
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f000 fcd1 	bl	8006860 <__multadd>
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	e7f2      	b.n	8005ea8 <_dtoa_r+0xaa0>
 8005ec2:	f04f 0900 	mov.w	r9, #0
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	9904      	ldr	r1, [sp, #16]
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f000 fe7c 	bl	8006bc8 <__lshift>
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	9004      	str	r0, [sp, #16]
 8005ed4:	f000 fecc 	bl	8006c70 <__mcmp>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	dcb6      	bgt.n	8005e4a <_dtoa_r+0xa42>
 8005edc:	d102      	bne.n	8005ee4 <_dtoa_r+0xadc>
 8005ede:	f018 0f01 	tst.w	r8, #1
 8005ee2:	d1b2      	bne.n	8005e4a <_dtoa_r+0xa42>
 8005ee4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ee8:	2b30      	cmp	r3, #48	; 0x30
 8005eea:	f105 32ff 	add.w	r2, r5, #4294967295
 8005eee:	f47f af0a 	bne.w	8005d06 <_dtoa_r+0x8fe>
 8005ef2:	4615      	mov	r5, r2
 8005ef4:	e7f6      	b.n	8005ee4 <_dtoa_r+0xadc>
 8005ef6:	4593      	cmp	fp, r2
 8005ef8:	d105      	bne.n	8005f06 <_dtoa_r+0xafe>
 8005efa:	2331      	movs	r3, #49	; 0x31
 8005efc:	f10a 0a01 	add.w	sl, sl, #1
 8005f00:	f88b 3000 	strb.w	r3, [fp]
 8005f04:	e6ff      	b.n	8005d06 <_dtoa_r+0x8fe>
 8005f06:	4615      	mov	r5, r2
 8005f08:	e79f      	b.n	8005e4a <_dtoa_r+0xa42>
 8005f0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005f70 <_dtoa_r+0xb68>
 8005f0e:	e007      	b.n	8005f20 <_dtoa_r+0xb18>
 8005f10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f12:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005f74 <_dtoa_r+0xb6c>
 8005f16:	b11b      	cbz	r3, 8005f20 <_dtoa_r+0xb18>
 8005f18:	f10b 0308 	add.w	r3, fp, #8
 8005f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	4658      	mov	r0, fp
 8005f22:	b017      	add	sp, #92	; 0x5c
 8005f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f28:	9b06      	ldr	r3, [sp, #24]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	f77f ae35 	ble.w	8005b9a <_dtoa_r+0x792>
 8005f30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f32:	9307      	str	r3, [sp, #28]
 8005f34:	e649      	b.n	8005bca <_dtoa_r+0x7c2>
 8005f36:	9b02      	ldr	r3, [sp, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	dc03      	bgt.n	8005f44 <_dtoa_r+0xb3c>
 8005f3c:	9b06      	ldr	r3, [sp, #24]
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	f73f aecc 	bgt.w	8005cdc <_dtoa_r+0x8d4>
 8005f44:	465d      	mov	r5, fp
 8005f46:	4639      	mov	r1, r7
 8005f48:	9804      	ldr	r0, [sp, #16]
 8005f4a:	f7ff f9cf 	bl	80052ec <quorem>
 8005f4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f52:	f805 8b01 	strb.w	r8, [r5], #1
 8005f56:	9a02      	ldr	r2, [sp, #8]
 8005f58:	eba5 030b 	sub.w	r3, r5, fp
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	ddb0      	ble.n	8005ec2 <_dtoa_r+0xaba>
 8005f60:	2300      	movs	r3, #0
 8005f62:	220a      	movs	r2, #10
 8005f64:	9904      	ldr	r1, [sp, #16]
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 fc7a 	bl	8006860 <__multadd>
 8005f6c:	9004      	str	r0, [sp, #16]
 8005f6e:	e7ea      	b.n	8005f46 <_dtoa_r+0xb3e>
 8005f70:	08007cf0 	.word	0x08007cf0
 8005f74:	08007d70 	.word	0x08007d70

08005f78 <std>:
 8005f78:	2300      	movs	r3, #0
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8005f82:	6083      	str	r3, [r0, #8]
 8005f84:	8181      	strh	r1, [r0, #12]
 8005f86:	6643      	str	r3, [r0, #100]	; 0x64
 8005f88:	81c2      	strh	r2, [r0, #14]
 8005f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f8e:	6183      	str	r3, [r0, #24]
 8005f90:	4619      	mov	r1, r3
 8005f92:	2208      	movs	r2, #8
 8005f94:	305c      	adds	r0, #92	; 0x5c
 8005f96:	f7fd fc37 	bl	8003808 <memset>
 8005f9a:	4b05      	ldr	r3, [pc, #20]	; (8005fb0 <std+0x38>)
 8005f9c:	6263      	str	r3, [r4, #36]	; 0x24
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <std+0x3c>)
 8005fa0:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fa2:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <std+0x40>)
 8005fa4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fa6:	4b05      	ldr	r3, [pc, #20]	; (8005fbc <std+0x44>)
 8005fa8:	6224      	str	r4, [r4, #32]
 8005faa:	6323      	str	r3, [r4, #48]	; 0x30
 8005fac:	bd10      	pop	{r4, pc}
 8005fae:	bf00      	nop
 8005fb0:	08007679 	.word	0x08007679
 8005fb4:	0800769b 	.word	0x0800769b
 8005fb8:	080076d3 	.word	0x080076d3
 8005fbc:	080076f7 	.word	0x080076f7

08005fc0 <_cleanup_r>:
 8005fc0:	4901      	ldr	r1, [pc, #4]	; (8005fc8 <_cleanup_r+0x8>)
 8005fc2:	f000 b885 	b.w	80060d0 <_fwalk_reent>
 8005fc6:	bf00      	nop
 8005fc8:	08007a11 	.word	0x08007a11

08005fcc <__sfmoreglue>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	1e4a      	subs	r2, r1, #1
 8005fd0:	2568      	movs	r5, #104	; 0x68
 8005fd2:	4355      	muls	r5, r2
 8005fd4:	460e      	mov	r6, r1
 8005fd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005fda:	f001 f851 	bl	8007080 <_malloc_r>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	b140      	cbz	r0, 8005ff4 <__sfmoreglue+0x28>
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	e9c0 1600 	strd	r1, r6, [r0]
 8005fe8:	300c      	adds	r0, #12
 8005fea:	60a0      	str	r0, [r4, #8]
 8005fec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ff0:	f7fd fc0a 	bl	8003808 <memset>
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}

08005ff8 <__sinit>:
 8005ff8:	6983      	ldr	r3, [r0, #24]
 8005ffa:	b510      	push	{r4, lr}
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	bb33      	cbnz	r3, 800604e <__sinit+0x56>
 8006000:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006004:	6503      	str	r3, [r0, #80]	; 0x50
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <__sinit+0x58>)
 8006008:	4a12      	ldr	r2, [pc, #72]	; (8006054 <__sinit+0x5c>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6282      	str	r2, [r0, #40]	; 0x28
 800600e:	4298      	cmp	r0, r3
 8006010:	bf04      	itt	eq
 8006012:	2301      	moveq	r3, #1
 8006014:	6183      	streq	r3, [r0, #24]
 8006016:	f000 f81f 	bl	8006058 <__sfp>
 800601a:	6060      	str	r0, [r4, #4]
 800601c:	4620      	mov	r0, r4
 800601e:	f000 f81b 	bl	8006058 <__sfp>
 8006022:	60a0      	str	r0, [r4, #8]
 8006024:	4620      	mov	r0, r4
 8006026:	f000 f817 	bl	8006058 <__sfp>
 800602a:	2200      	movs	r2, #0
 800602c:	60e0      	str	r0, [r4, #12]
 800602e:	2104      	movs	r1, #4
 8006030:	6860      	ldr	r0, [r4, #4]
 8006032:	f7ff ffa1 	bl	8005f78 <std>
 8006036:	2201      	movs	r2, #1
 8006038:	2109      	movs	r1, #9
 800603a:	68a0      	ldr	r0, [r4, #8]
 800603c:	f7ff ff9c 	bl	8005f78 <std>
 8006040:	2202      	movs	r2, #2
 8006042:	2112      	movs	r1, #18
 8006044:	68e0      	ldr	r0, [r4, #12]
 8006046:	f7ff ff97 	bl	8005f78 <std>
 800604a:	2301      	movs	r3, #1
 800604c:	61a3      	str	r3, [r4, #24]
 800604e:	bd10      	pop	{r4, pc}
 8006050:	08007cdc 	.word	0x08007cdc
 8006054:	08005fc1 	.word	0x08005fc1

08006058 <__sfp>:
 8006058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605a:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <__sfp+0x70>)
 800605c:	681e      	ldr	r6, [r3, #0]
 800605e:	69b3      	ldr	r3, [r6, #24]
 8006060:	4607      	mov	r7, r0
 8006062:	b913      	cbnz	r3, 800606a <__sfp+0x12>
 8006064:	4630      	mov	r0, r6
 8006066:	f7ff ffc7 	bl	8005ff8 <__sinit>
 800606a:	3648      	adds	r6, #72	; 0x48
 800606c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006070:	3b01      	subs	r3, #1
 8006072:	d503      	bpl.n	800607c <__sfp+0x24>
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	b133      	cbz	r3, 8006086 <__sfp+0x2e>
 8006078:	6836      	ldr	r6, [r6, #0]
 800607a:	e7f7      	b.n	800606c <__sfp+0x14>
 800607c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006080:	b16d      	cbz	r5, 800609e <__sfp+0x46>
 8006082:	3468      	adds	r4, #104	; 0x68
 8006084:	e7f4      	b.n	8006070 <__sfp+0x18>
 8006086:	2104      	movs	r1, #4
 8006088:	4638      	mov	r0, r7
 800608a:	f7ff ff9f 	bl	8005fcc <__sfmoreglue>
 800608e:	6030      	str	r0, [r6, #0]
 8006090:	2800      	cmp	r0, #0
 8006092:	d1f1      	bne.n	8006078 <__sfp+0x20>
 8006094:	230c      	movs	r3, #12
 8006096:	603b      	str	r3, [r7, #0]
 8006098:	4604      	mov	r4, r0
 800609a:	4620      	mov	r0, r4
 800609c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800609e:	4b0b      	ldr	r3, [pc, #44]	; (80060cc <__sfp+0x74>)
 80060a0:	6665      	str	r5, [r4, #100]	; 0x64
 80060a2:	e9c4 5500 	strd	r5, r5, [r4]
 80060a6:	60a5      	str	r5, [r4, #8]
 80060a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80060ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80060b0:	2208      	movs	r2, #8
 80060b2:	4629      	mov	r1, r5
 80060b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80060b8:	f7fd fba6 	bl	8003808 <memset>
 80060bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80060c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80060c4:	e7e9      	b.n	800609a <__sfp+0x42>
 80060c6:	bf00      	nop
 80060c8:	08007cdc 	.word	0x08007cdc
 80060cc:	ffff0001 	.word	0xffff0001

080060d0 <_fwalk_reent>:
 80060d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d4:	4680      	mov	r8, r0
 80060d6:	4689      	mov	r9, r1
 80060d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80060dc:	2600      	movs	r6, #0
 80060de:	b914      	cbnz	r4, 80060e6 <_fwalk_reent+0x16>
 80060e0:	4630      	mov	r0, r6
 80060e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80060ea:	3f01      	subs	r7, #1
 80060ec:	d501      	bpl.n	80060f2 <_fwalk_reent+0x22>
 80060ee:	6824      	ldr	r4, [r4, #0]
 80060f0:	e7f5      	b.n	80060de <_fwalk_reent+0xe>
 80060f2:	89ab      	ldrh	r3, [r5, #12]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d907      	bls.n	8006108 <_fwalk_reent+0x38>
 80060f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060fc:	3301      	adds	r3, #1
 80060fe:	d003      	beq.n	8006108 <_fwalk_reent+0x38>
 8006100:	4629      	mov	r1, r5
 8006102:	4640      	mov	r0, r8
 8006104:	47c8      	blx	r9
 8006106:	4306      	orrs	r6, r0
 8006108:	3568      	adds	r5, #104	; 0x68
 800610a:	e7ee      	b.n	80060ea <_fwalk_reent+0x1a>

0800610c <rshift>:
 800610c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800610e:	6906      	ldr	r6, [r0, #16]
 8006110:	114b      	asrs	r3, r1, #5
 8006112:	429e      	cmp	r6, r3
 8006114:	f100 0414 	add.w	r4, r0, #20
 8006118:	dd30      	ble.n	800617c <rshift+0x70>
 800611a:	f011 011f 	ands.w	r1, r1, #31
 800611e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8006122:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8006126:	d108      	bne.n	800613a <rshift+0x2e>
 8006128:	4621      	mov	r1, r4
 800612a:	42b2      	cmp	r2, r6
 800612c:	460b      	mov	r3, r1
 800612e:	d211      	bcs.n	8006154 <rshift+0x48>
 8006130:	f852 3b04 	ldr.w	r3, [r2], #4
 8006134:	f841 3b04 	str.w	r3, [r1], #4
 8006138:	e7f7      	b.n	800612a <rshift+0x1e>
 800613a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800613e:	f1c1 0c20 	rsb	ip, r1, #32
 8006142:	40cd      	lsrs	r5, r1
 8006144:	3204      	adds	r2, #4
 8006146:	4623      	mov	r3, r4
 8006148:	42b2      	cmp	r2, r6
 800614a:	4617      	mov	r7, r2
 800614c:	d30c      	bcc.n	8006168 <rshift+0x5c>
 800614e:	601d      	str	r5, [r3, #0]
 8006150:	b105      	cbz	r5, 8006154 <rshift+0x48>
 8006152:	3304      	adds	r3, #4
 8006154:	1b1a      	subs	r2, r3, r4
 8006156:	42a3      	cmp	r3, r4
 8006158:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800615c:	bf08      	it	eq
 800615e:	2300      	moveq	r3, #0
 8006160:	6102      	str	r2, [r0, #16]
 8006162:	bf08      	it	eq
 8006164:	6143      	streq	r3, [r0, #20]
 8006166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006168:	683f      	ldr	r7, [r7, #0]
 800616a:	fa07 f70c 	lsl.w	r7, r7, ip
 800616e:	433d      	orrs	r5, r7
 8006170:	f843 5b04 	str.w	r5, [r3], #4
 8006174:	f852 5b04 	ldr.w	r5, [r2], #4
 8006178:	40cd      	lsrs	r5, r1
 800617a:	e7e5      	b.n	8006148 <rshift+0x3c>
 800617c:	4623      	mov	r3, r4
 800617e:	e7e9      	b.n	8006154 <rshift+0x48>

08006180 <__hexdig_fun>:
 8006180:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006184:	2b09      	cmp	r3, #9
 8006186:	d802      	bhi.n	800618e <__hexdig_fun+0xe>
 8006188:	3820      	subs	r0, #32
 800618a:	b2c0      	uxtb	r0, r0
 800618c:	4770      	bx	lr
 800618e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006192:	2b05      	cmp	r3, #5
 8006194:	d801      	bhi.n	800619a <__hexdig_fun+0x1a>
 8006196:	3847      	subs	r0, #71	; 0x47
 8006198:	e7f7      	b.n	800618a <__hexdig_fun+0xa>
 800619a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800619e:	2b05      	cmp	r3, #5
 80061a0:	d801      	bhi.n	80061a6 <__hexdig_fun+0x26>
 80061a2:	3827      	subs	r0, #39	; 0x27
 80061a4:	e7f1      	b.n	800618a <__hexdig_fun+0xa>
 80061a6:	2000      	movs	r0, #0
 80061a8:	4770      	bx	lr

080061aa <__gethex>:
 80061aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ae:	b08b      	sub	sp, #44	; 0x2c
 80061b0:	468a      	mov	sl, r1
 80061b2:	9002      	str	r0, [sp, #8]
 80061b4:	9816      	ldr	r0, [sp, #88]	; 0x58
 80061b6:	9306      	str	r3, [sp, #24]
 80061b8:	4690      	mov	r8, r2
 80061ba:	f000 fad0 	bl	800675e <__localeconv_l>
 80061be:	6803      	ldr	r3, [r0, #0]
 80061c0:	9303      	str	r3, [sp, #12]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa f80c 	bl	80001e0 <strlen>
 80061c8:	9b03      	ldr	r3, [sp, #12]
 80061ca:	9001      	str	r0, [sp, #4]
 80061cc:	4403      	add	r3, r0
 80061ce:	f04f 0b00 	mov.w	fp, #0
 80061d2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80061d6:	9307      	str	r3, [sp, #28]
 80061d8:	f8da 3000 	ldr.w	r3, [sl]
 80061dc:	3302      	adds	r3, #2
 80061de:	461f      	mov	r7, r3
 80061e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 80061e4:	2830      	cmp	r0, #48	; 0x30
 80061e6:	d06c      	beq.n	80062c2 <__gethex+0x118>
 80061e8:	f7ff ffca 	bl	8006180 <__hexdig_fun>
 80061ec:	4604      	mov	r4, r0
 80061ee:	2800      	cmp	r0, #0
 80061f0:	d16a      	bne.n	80062c8 <__gethex+0x11e>
 80061f2:	9a01      	ldr	r2, [sp, #4]
 80061f4:	9903      	ldr	r1, [sp, #12]
 80061f6:	4638      	mov	r0, r7
 80061f8:	f001 fa81 	bl	80076fe <strncmp>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d166      	bne.n	80062ce <__gethex+0x124>
 8006200:	9b01      	ldr	r3, [sp, #4]
 8006202:	5cf8      	ldrb	r0, [r7, r3]
 8006204:	18fe      	adds	r6, r7, r3
 8006206:	f7ff ffbb 	bl	8006180 <__hexdig_fun>
 800620a:	2800      	cmp	r0, #0
 800620c:	d062      	beq.n	80062d4 <__gethex+0x12a>
 800620e:	4633      	mov	r3, r6
 8006210:	7818      	ldrb	r0, [r3, #0]
 8006212:	2830      	cmp	r0, #48	; 0x30
 8006214:	461f      	mov	r7, r3
 8006216:	f103 0301 	add.w	r3, r3, #1
 800621a:	d0f9      	beq.n	8006210 <__gethex+0x66>
 800621c:	f7ff ffb0 	bl	8006180 <__hexdig_fun>
 8006220:	fab0 f580 	clz	r5, r0
 8006224:	096d      	lsrs	r5, r5, #5
 8006226:	4634      	mov	r4, r6
 8006228:	f04f 0b01 	mov.w	fp, #1
 800622c:	463a      	mov	r2, r7
 800622e:	4616      	mov	r6, r2
 8006230:	3201      	adds	r2, #1
 8006232:	7830      	ldrb	r0, [r6, #0]
 8006234:	f7ff ffa4 	bl	8006180 <__hexdig_fun>
 8006238:	2800      	cmp	r0, #0
 800623a:	d1f8      	bne.n	800622e <__gethex+0x84>
 800623c:	9a01      	ldr	r2, [sp, #4]
 800623e:	9903      	ldr	r1, [sp, #12]
 8006240:	4630      	mov	r0, r6
 8006242:	f001 fa5c 	bl	80076fe <strncmp>
 8006246:	b950      	cbnz	r0, 800625e <__gethex+0xb4>
 8006248:	b954      	cbnz	r4, 8006260 <__gethex+0xb6>
 800624a:	9b01      	ldr	r3, [sp, #4]
 800624c:	18f4      	adds	r4, r6, r3
 800624e:	4622      	mov	r2, r4
 8006250:	4616      	mov	r6, r2
 8006252:	3201      	adds	r2, #1
 8006254:	7830      	ldrb	r0, [r6, #0]
 8006256:	f7ff ff93 	bl	8006180 <__hexdig_fun>
 800625a:	2800      	cmp	r0, #0
 800625c:	d1f8      	bne.n	8006250 <__gethex+0xa6>
 800625e:	b10c      	cbz	r4, 8006264 <__gethex+0xba>
 8006260:	1ba4      	subs	r4, r4, r6
 8006262:	00a4      	lsls	r4, r4, #2
 8006264:	7833      	ldrb	r3, [r6, #0]
 8006266:	2b50      	cmp	r3, #80	; 0x50
 8006268:	d001      	beq.n	800626e <__gethex+0xc4>
 800626a:	2b70      	cmp	r3, #112	; 0x70
 800626c:	d140      	bne.n	80062f0 <__gethex+0x146>
 800626e:	7873      	ldrb	r3, [r6, #1]
 8006270:	2b2b      	cmp	r3, #43	; 0x2b
 8006272:	d031      	beq.n	80062d8 <__gethex+0x12e>
 8006274:	2b2d      	cmp	r3, #45	; 0x2d
 8006276:	d033      	beq.n	80062e0 <__gethex+0x136>
 8006278:	1c71      	adds	r1, r6, #1
 800627a:	f04f 0900 	mov.w	r9, #0
 800627e:	7808      	ldrb	r0, [r1, #0]
 8006280:	f7ff ff7e 	bl	8006180 <__hexdig_fun>
 8006284:	1e43      	subs	r3, r0, #1
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b18      	cmp	r3, #24
 800628a:	d831      	bhi.n	80062f0 <__gethex+0x146>
 800628c:	f1a0 0210 	sub.w	r2, r0, #16
 8006290:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006294:	f7ff ff74 	bl	8006180 <__hexdig_fun>
 8006298:	1e43      	subs	r3, r0, #1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b18      	cmp	r3, #24
 800629e:	d922      	bls.n	80062e6 <__gethex+0x13c>
 80062a0:	f1b9 0f00 	cmp.w	r9, #0
 80062a4:	d000      	beq.n	80062a8 <__gethex+0xfe>
 80062a6:	4252      	negs	r2, r2
 80062a8:	4414      	add	r4, r2
 80062aa:	f8ca 1000 	str.w	r1, [sl]
 80062ae:	b30d      	cbz	r5, 80062f4 <__gethex+0x14a>
 80062b0:	f1bb 0f00 	cmp.w	fp, #0
 80062b4:	bf0c      	ite	eq
 80062b6:	2706      	moveq	r7, #6
 80062b8:	2700      	movne	r7, #0
 80062ba:	4638      	mov	r0, r7
 80062bc:	b00b      	add	sp, #44	; 0x2c
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	f10b 0b01 	add.w	fp, fp, #1
 80062c6:	e78a      	b.n	80061de <__gethex+0x34>
 80062c8:	2500      	movs	r5, #0
 80062ca:	462c      	mov	r4, r5
 80062cc:	e7ae      	b.n	800622c <__gethex+0x82>
 80062ce:	463e      	mov	r6, r7
 80062d0:	2501      	movs	r5, #1
 80062d2:	e7c7      	b.n	8006264 <__gethex+0xba>
 80062d4:	4604      	mov	r4, r0
 80062d6:	e7fb      	b.n	80062d0 <__gethex+0x126>
 80062d8:	f04f 0900 	mov.w	r9, #0
 80062dc:	1cb1      	adds	r1, r6, #2
 80062de:	e7ce      	b.n	800627e <__gethex+0xd4>
 80062e0:	f04f 0901 	mov.w	r9, #1
 80062e4:	e7fa      	b.n	80062dc <__gethex+0x132>
 80062e6:	230a      	movs	r3, #10
 80062e8:	fb03 0202 	mla	r2, r3, r2, r0
 80062ec:	3a10      	subs	r2, #16
 80062ee:	e7cf      	b.n	8006290 <__gethex+0xe6>
 80062f0:	4631      	mov	r1, r6
 80062f2:	e7da      	b.n	80062aa <__gethex+0x100>
 80062f4:	1bf3      	subs	r3, r6, r7
 80062f6:	3b01      	subs	r3, #1
 80062f8:	4629      	mov	r1, r5
 80062fa:	2b07      	cmp	r3, #7
 80062fc:	dc49      	bgt.n	8006392 <__gethex+0x1e8>
 80062fe:	9802      	ldr	r0, [sp, #8]
 8006300:	f000 fa63 	bl	80067ca <_Balloc>
 8006304:	9b01      	ldr	r3, [sp, #4]
 8006306:	f100 0914 	add.w	r9, r0, #20
 800630a:	f04f 0b00 	mov.w	fp, #0
 800630e:	f1c3 0301 	rsb	r3, r3, #1
 8006312:	4605      	mov	r5, r0
 8006314:	f8cd 9010 	str.w	r9, [sp, #16]
 8006318:	46da      	mov	sl, fp
 800631a:	9308      	str	r3, [sp, #32]
 800631c:	42b7      	cmp	r7, r6
 800631e:	d33b      	bcc.n	8006398 <__gethex+0x1ee>
 8006320:	9804      	ldr	r0, [sp, #16]
 8006322:	f840 ab04 	str.w	sl, [r0], #4
 8006326:	eba0 0009 	sub.w	r0, r0, r9
 800632a:	1080      	asrs	r0, r0, #2
 800632c:	6128      	str	r0, [r5, #16]
 800632e:	0147      	lsls	r7, r0, #5
 8006330:	4650      	mov	r0, sl
 8006332:	f000 fb0e 	bl	8006952 <__hi0bits>
 8006336:	f8d8 6000 	ldr.w	r6, [r8]
 800633a:	1a3f      	subs	r7, r7, r0
 800633c:	42b7      	cmp	r7, r6
 800633e:	dd64      	ble.n	800640a <__gethex+0x260>
 8006340:	1bbf      	subs	r7, r7, r6
 8006342:	4639      	mov	r1, r7
 8006344:	4628      	mov	r0, r5
 8006346:	f000 fe1d 	bl	8006f84 <__any_on>
 800634a:	4682      	mov	sl, r0
 800634c:	b178      	cbz	r0, 800636e <__gethex+0x1c4>
 800634e:	1e7b      	subs	r3, r7, #1
 8006350:	1159      	asrs	r1, r3, #5
 8006352:	f003 021f 	and.w	r2, r3, #31
 8006356:	f04f 0a01 	mov.w	sl, #1
 800635a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800635e:	fa0a f202 	lsl.w	r2, sl, r2
 8006362:	420a      	tst	r2, r1
 8006364:	d003      	beq.n	800636e <__gethex+0x1c4>
 8006366:	4553      	cmp	r3, sl
 8006368:	dc46      	bgt.n	80063f8 <__gethex+0x24e>
 800636a:	f04f 0a02 	mov.w	sl, #2
 800636e:	4639      	mov	r1, r7
 8006370:	4628      	mov	r0, r5
 8006372:	f7ff fecb 	bl	800610c <rshift>
 8006376:	443c      	add	r4, r7
 8006378:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800637c:	42a3      	cmp	r3, r4
 800637e:	da52      	bge.n	8006426 <__gethex+0x27c>
 8006380:	4629      	mov	r1, r5
 8006382:	9802      	ldr	r0, [sp, #8]
 8006384:	f000 fa55 	bl	8006832 <_Bfree>
 8006388:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800638a:	2300      	movs	r3, #0
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	27a3      	movs	r7, #163	; 0xa3
 8006390:	e793      	b.n	80062ba <__gethex+0x110>
 8006392:	3101      	adds	r1, #1
 8006394:	105b      	asrs	r3, r3, #1
 8006396:	e7b0      	b.n	80062fa <__gethex+0x150>
 8006398:	1e73      	subs	r3, r6, #1
 800639a:	9305      	str	r3, [sp, #20]
 800639c:	9a07      	ldr	r2, [sp, #28]
 800639e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <__gethex+0x22e>
 80063a6:	f1bb 0f20 	cmp.w	fp, #32
 80063aa:	d107      	bne.n	80063bc <__gethex+0x212>
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	f8c3 a000 	str.w	sl, [r3]
 80063b2:	3304      	adds	r3, #4
 80063b4:	f04f 0a00 	mov.w	sl, #0
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	46d3      	mov	fp, sl
 80063bc:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80063c0:	f7ff fede 	bl	8006180 <__hexdig_fun>
 80063c4:	f000 000f 	and.w	r0, r0, #15
 80063c8:	fa00 f00b 	lsl.w	r0, r0, fp
 80063cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80063d0:	f10b 0b04 	add.w	fp, fp, #4
 80063d4:	9b05      	ldr	r3, [sp, #20]
 80063d6:	e00d      	b.n	80063f4 <__gethex+0x24a>
 80063d8:	9b05      	ldr	r3, [sp, #20]
 80063da:	9a08      	ldr	r2, [sp, #32]
 80063dc:	4413      	add	r3, r2
 80063de:	42bb      	cmp	r3, r7
 80063e0:	d3e1      	bcc.n	80063a6 <__gethex+0x1fc>
 80063e2:	4618      	mov	r0, r3
 80063e4:	9a01      	ldr	r2, [sp, #4]
 80063e6:	9903      	ldr	r1, [sp, #12]
 80063e8:	9309      	str	r3, [sp, #36]	; 0x24
 80063ea:	f001 f988 	bl	80076fe <strncmp>
 80063ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f0:	2800      	cmp	r0, #0
 80063f2:	d1d8      	bne.n	80063a6 <__gethex+0x1fc>
 80063f4:	461e      	mov	r6, r3
 80063f6:	e791      	b.n	800631c <__gethex+0x172>
 80063f8:	1eb9      	subs	r1, r7, #2
 80063fa:	4628      	mov	r0, r5
 80063fc:	f000 fdc2 	bl	8006f84 <__any_on>
 8006400:	2800      	cmp	r0, #0
 8006402:	d0b2      	beq.n	800636a <__gethex+0x1c0>
 8006404:	f04f 0a03 	mov.w	sl, #3
 8006408:	e7b1      	b.n	800636e <__gethex+0x1c4>
 800640a:	da09      	bge.n	8006420 <__gethex+0x276>
 800640c:	1bf7      	subs	r7, r6, r7
 800640e:	4629      	mov	r1, r5
 8006410:	463a      	mov	r2, r7
 8006412:	9802      	ldr	r0, [sp, #8]
 8006414:	f000 fbd8 	bl	8006bc8 <__lshift>
 8006418:	1be4      	subs	r4, r4, r7
 800641a:	4605      	mov	r5, r0
 800641c:	f100 0914 	add.w	r9, r0, #20
 8006420:	f04f 0a00 	mov.w	sl, #0
 8006424:	e7a8      	b.n	8006378 <__gethex+0x1ce>
 8006426:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800642a:	42a0      	cmp	r0, r4
 800642c:	dd6a      	ble.n	8006504 <__gethex+0x35a>
 800642e:	1b04      	subs	r4, r0, r4
 8006430:	42a6      	cmp	r6, r4
 8006432:	dc2e      	bgt.n	8006492 <__gethex+0x2e8>
 8006434:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006438:	2b02      	cmp	r3, #2
 800643a:	d022      	beq.n	8006482 <__gethex+0x2d8>
 800643c:	2b03      	cmp	r3, #3
 800643e:	d024      	beq.n	800648a <__gethex+0x2e0>
 8006440:	2b01      	cmp	r3, #1
 8006442:	d115      	bne.n	8006470 <__gethex+0x2c6>
 8006444:	42a6      	cmp	r6, r4
 8006446:	d113      	bne.n	8006470 <__gethex+0x2c6>
 8006448:	2e01      	cmp	r6, #1
 800644a:	dc0b      	bgt.n	8006464 <__gethex+0x2ba>
 800644c:	9a06      	ldr	r2, [sp, #24]
 800644e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	2301      	movs	r3, #1
 8006456:	612b      	str	r3, [r5, #16]
 8006458:	f8c9 3000 	str.w	r3, [r9]
 800645c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800645e:	2762      	movs	r7, #98	; 0x62
 8006460:	601d      	str	r5, [r3, #0]
 8006462:	e72a      	b.n	80062ba <__gethex+0x110>
 8006464:	1e71      	subs	r1, r6, #1
 8006466:	4628      	mov	r0, r5
 8006468:	f000 fd8c 	bl	8006f84 <__any_on>
 800646c:	2800      	cmp	r0, #0
 800646e:	d1ed      	bne.n	800644c <__gethex+0x2a2>
 8006470:	4629      	mov	r1, r5
 8006472:	9802      	ldr	r0, [sp, #8]
 8006474:	f000 f9dd 	bl	8006832 <_Bfree>
 8006478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800647a:	2300      	movs	r3, #0
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	2750      	movs	r7, #80	; 0x50
 8006480:	e71b      	b.n	80062ba <__gethex+0x110>
 8006482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0e1      	beq.n	800644c <__gethex+0x2a2>
 8006488:	e7f2      	b.n	8006470 <__gethex+0x2c6>
 800648a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1dd      	bne.n	800644c <__gethex+0x2a2>
 8006490:	e7ee      	b.n	8006470 <__gethex+0x2c6>
 8006492:	1e67      	subs	r7, r4, #1
 8006494:	f1ba 0f00 	cmp.w	sl, #0
 8006498:	d131      	bne.n	80064fe <__gethex+0x354>
 800649a:	b127      	cbz	r7, 80064a6 <__gethex+0x2fc>
 800649c:	4639      	mov	r1, r7
 800649e:	4628      	mov	r0, r5
 80064a0:	f000 fd70 	bl	8006f84 <__any_on>
 80064a4:	4682      	mov	sl, r0
 80064a6:	117a      	asrs	r2, r7, #5
 80064a8:	2301      	movs	r3, #1
 80064aa:	f007 071f 	and.w	r7, r7, #31
 80064ae:	fa03 f707 	lsl.w	r7, r3, r7
 80064b2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80064b6:	4621      	mov	r1, r4
 80064b8:	421f      	tst	r7, r3
 80064ba:	4628      	mov	r0, r5
 80064bc:	bf18      	it	ne
 80064be:	f04a 0a02 	orrne.w	sl, sl, #2
 80064c2:	1b36      	subs	r6, r6, r4
 80064c4:	f7ff fe22 	bl	800610c <rshift>
 80064c8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80064cc:	2702      	movs	r7, #2
 80064ce:	f1ba 0f00 	cmp.w	sl, #0
 80064d2:	d048      	beq.n	8006566 <__gethex+0x3bc>
 80064d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80064d8:	2b02      	cmp	r3, #2
 80064da:	d015      	beq.n	8006508 <__gethex+0x35e>
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d017      	beq.n	8006510 <__gethex+0x366>
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d109      	bne.n	80064f8 <__gethex+0x34e>
 80064e4:	f01a 0f02 	tst.w	sl, #2
 80064e8:	d006      	beq.n	80064f8 <__gethex+0x34e>
 80064ea:	f8d9 3000 	ldr.w	r3, [r9]
 80064ee:	ea4a 0a03 	orr.w	sl, sl, r3
 80064f2:	f01a 0f01 	tst.w	sl, #1
 80064f6:	d10e      	bne.n	8006516 <__gethex+0x36c>
 80064f8:	f047 0710 	orr.w	r7, r7, #16
 80064fc:	e033      	b.n	8006566 <__gethex+0x3bc>
 80064fe:	f04f 0a01 	mov.w	sl, #1
 8006502:	e7d0      	b.n	80064a6 <__gethex+0x2fc>
 8006504:	2701      	movs	r7, #1
 8006506:	e7e2      	b.n	80064ce <__gethex+0x324>
 8006508:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800650a:	f1c3 0301 	rsb	r3, r3, #1
 800650e:	9315      	str	r3, [sp, #84]	; 0x54
 8006510:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <__gethex+0x34e>
 8006516:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800651a:	f105 0314 	add.w	r3, r5, #20
 800651e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006522:	eb03 010a 	add.w	r1, r3, sl
 8006526:	f04f 0c00 	mov.w	ip, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006530:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006534:	d01c      	beq.n	8006570 <__gethex+0x3c6>
 8006536:	3201      	adds	r2, #1
 8006538:	6002      	str	r2, [r0, #0]
 800653a:	2f02      	cmp	r7, #2
 800653c:	f105 0314 	add.w	r3, r5, #20
 8006540:	d138      	bne.n	80065b4 <__gethex+0x40a>
 8006542:	f8d8 2000 	ldr.w	r2, [r8]
 8006546:	3a01      	subs	r2, #1
 8006548:	42b2      	cmp	r2, r6
 800654a:	d10a      	bne.n	8006562 <__gethex+0x3b8>
 800654c:	1171      	asrs	r1, r6, #5
 800654e:	2201      	movs	r2, #1
 8006550:	f006 061f 	and.w	r6, r6, #31
 8006554:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006558:	fa02 f606 	lsl.w	r6, r2, r6
 800655c:	421e      	tst	r6, r3
 800655e:	bf18      	it	ne
 8006560:	4617      	movne	r7, r2
 8006562:	f047 0720 	orr.w	r7, r7, #32
 8006566:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006568:	601d      	str	r5, [r3, #0]
 800656a:	9b06      	ldr	r3, [sp, #24]
 800656c:	601c      	str	r4, [r3, #0]
 800656e:	e6a4      	b.n	80062ba <__gethex+0x110>
 8006570:	4299      	cmp	r1, r3
 8006572:	f843 cc04 	str.w	ip, [r3, #-4]
 8006576:	d8d8      	bhi.n	800652a <__gethex+0x380>
 8006578:	68ab      	ldr	r3, [r5, #8]
 800657a:	4599      	cmp	r9, r3
 800657c:	db12      	blt.n	80065a4 <__gethex+0x3fa>
 800657e:	6869      	ldr	r1, [r5, #4]
 8006580:	9802      	ldr	r0, [sp, #8]
 8006582:	3101      	adds	r1, #1
 8006584:	f000 f921 	bl	80067ca <_Balloc>
 8006588:	692a      	ldr	r2, [r5, #16]
 800658a:	3202      	adds	r2, #2
 800658c:	f105 010c 	add.w	r1, r5, #12
 8006590:	4683      	mov	fp, r0
 8006592:	0092      	lsls	r2, r2, #2
 8006594:	300c      	adds	r0, #12
 8006596:	f000 f90d 	bl	80067b4 <memcpy>
 800659a:	4629      	mov	r1, r5
 800659c:	9802      	ldr	r0, [sp, #8]
 800659e:	f000 f948 	bl	8006832 <_Bfree>
 80065a2:	465d      	mov	r5, fp
 80065a4:	692b      	ldr	r3, [r5, #16]
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80065ac:	612a      	str	r2, [r5, #16]
 80065ae:	2201      	movs	r2, #1
 80065b0:	615a      	str	r2, [r3, #20]
 80065b2:	e7c2      	b.n	800653a <__gethex+0x390>
 80065b4:	692a      	ldr	r2, [r5, #16]
 80065b6:	454a      	cmp	r2, r9
 80065b8:	dd0b      	ble.n	80065d2 <__gethex+0x428>
 80065ba:	2101      	movs	r1, #1
 80065bc:	4628      	mov	r0, r5
 80065be:	f7ff fda5 	bl	800610c <rshift>
 80065c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80065c6:	3401      	adds	r4, #1
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	f6ff aed9 	blt.w	8006380 <__gethex+0x1d6>
 80065ce:	2701      	movs	r7, #1
 80065d0:	e7c7      	b.n	8006562 <__gethex+0x3b8>
 80065d2:	f016 061f 	ands.w	r6, r6, #31
 80065d6:	d0fa      	beq.n	80065ce <__gethex+0x424>
 80065d8:	449a      	add	sl, r3
 80065da:	f1c6 0620 	rsb	r6, r6, #32
 80065de:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80065e2:	f000 f9b6 	bl	8006952 <__hi0bits>
 80065e6:	42b0      	cmp	r0, r6
 80065e8:	dbe7      	blt.n	80065ba <__gethex+0x410>
 80065ea:	e7f0      	b.n	80065ce <__gethex+0x424>

080065ec <L_shift>:
 80065ec:	f1c2 0208 	rsb	r2, r2, #8
 80065f0:	0092      	lsls	r2, r2, #2
 80065f2:	b570      	push	{r4, r5, r6, lr}
 80065f4:	f1c2 0620 	rsb	r6, r2, #32
 80065f8:	6843      	ldr	r3, [r0, #4]
 80065fa:	6804      	ldr	r4, [r0, #0]
 80065fc:	fa03 f506 	lsl.w	r5, r3, r6
 8006600:	432c      	orrs	r4, r5
 8006602:	40d3      	lsrs	r3, r2
 8006604:	6004      	str	r4, [r0, #0]
 8006606:	f840 3f04 	str.w	r3, [r0, #4]!
 800660a:	4288      	cmp	r0, r1
 800660c:	d3f4      	bcc.n	80065f8 <L_shift+0xc>
 800660e:	bd70      	pop	{r4, r5, r6, pc}

08006610 <__match>:
 8006610:	b530      	push	{r4, r5, lr}
 8006612:	6803      	ldr	r3, [r0, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	f811 4b01 	ldrb.w	r4, [r1], #1
 800661a:	b914      	cbnz	r4, 8006622 <__match+0x12>
 800661c:	6003      	str	r3, [r0, #0]
 800661e:	2001      	movs	r0, #1
 8006620:	bd30      	pop	{r4, r5, pc}
 8006622:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006626:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800662a:	2d19      	cmp	r5, #25
 800662c:	bf98      	it	ls
 800662e:	3220      	addls	r2, #32
 8006630:	42a2      	cmp	r2, r4
 8006632:	d0f0      	beq.n	8006616 <__match+0x6>
 8006634:	2000      	movs	r0, #0
 8006636:	e7f3      	b.n	8006620 <__match+0x10>

08006638 <__hexnan>:
 8006638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	680b      	ldr	r3, [r1, #0]
 800663e:	6801      	ldr	r1, [r0, #0]
 8006640:	115f      	asrs	r7, r3, #5
 8006642:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8006646:	f013 031f 	ands.w	r3, r3, #31
 800664a:	b087      	sub	sp, #28
 800664c:	bf18      	it	ne
 800664e:	3704      	addne	r7, #4
 8006650:	2500      	movs	r5, #0
 8006652:	1f3e      	subs	r6, r7, #4
 8006654:	4682      	mov	sl, r0
 8006656:	4690      	mov	r8, r2
 8006658:	9301      	str	r3, [sp, #4]
 800665a:	f847 5c04 	str.w	r5, [r7, #-4]
 800665e:	46b1      	mov	r9, r6
 8006660:	4634      	mov	r4, r6
 8006662:	9502      	str	r5, [sp, #8]
 8006664:	46ab      	mov	fp, r5
 8006666:	784a      	ldrb	r2, [r1, #1]
 8006668:	1c4b      	adds	r3, r1, #1
 800666a:	9303      	str	r3, [sp, #12]
 800666c:	b342      	cbz	r2, 80066c0 <__hexnan+0x88>
 800666e:	4610      	mov	r0, r2
 8006670:	9105      	str	r1, [sp, #20]
 8006672:	9204      	str	r2, [sp, #16]
 8006674:	f7ff fd84 	bl	8006180 <__hexdig_fun>
 8006678:	2800      	cmp	r0, #0
 800667a:	d143      	bne.n	8006704 <__hexnan+0xcc>
 800667c:	9a04      	ldr	r2, [sp, #16]
 800667e:	9905      	ldr	r1, [sp, #20]
 8006680:	2a20      	cmp	r2, #32
 8006682:	d818      	bhi.n	80066b6 <__hexnan+0x7e>
 8006684:	9b02      	ldr	r3, [sp, #8]
 8006686:	459b      	cmp	fp, r3
 8006688:	dd13      	ble.n	80066b2 <__hexnan+0x7a>
 800668a:	454c      	cmp	r4, r9
 800668c:	d206      	bcs.n	800669c <__hexnan+0x64>
 800668e:	2d07      	cmp	r5, #7
 8006690:	dc04      	bgt.n	800669c <__hexnan+0x64>
 8006692:	462a      	mov	r2, r5
 8006694:	4649      	mov	r1, r9
 8006696:	4620      	mov	r0, r4
 8006698:	f7ff ffa8 	bl	80065ec <L_shift>
 800669c:	4544      	cmp	r4, r8
 800669e:	d944      	bls.n	800672a <__hexnan+0xf2>
 80066a0:	2300      	movs	r3, #0
 80066a2:	f1a4 0904 	sub.w	r9, r4, #4
 80066a6:	f844 3c04 	str.w	r3, [r4, #-4]
 80066aa:	f8cd b008 	str.w	fp, [sp, #8]
 80066ae:	464c      	mov	r4, r9
 80066b0:	461d      	mov	r5, r3
 80066b2:	9903      	ldr	r1, [sp, #12]
 80066b4:	e7d7      	b.n	8006666 <__hexnan+0x2e>
 80066b6:	2a29      	cmp	r2, #41	; 0x29
 80066b8:	d14a      	bne.n	8006750 <__hexnan+0x118>
 80066ba:	3102      	adds	r1, #2
 80066bc:	f8ca 1000 	str.w	r1, [sl]
 80066c0:	f1bb 0f00 	cmp.w	fp, #0
 80066c4:	d044      	beq.n	8006750 <__hexnan+0x118>
 80066c6:	454c      	cmp	r4, r9
 80066c8:	d206      	bcs.n	80066d8 <__hexnan+0xa0>
 80066ca:	2d07      	cmp	r5, #7
 80066cc:	dc04      	bgt.n	80066d8 <__hexnan+0xa0>
 80066ce:	462a      	mov	r2, r5
 80066d0:	4649      	mov	r1, r9
 80066d2:	4620      	mov	r0, r4
 80066d4:	f7ff ff8a 	bl	80065ec <L_shift>
 80066d8:	4544      	cmp	r4, r8
 80066da:	d928      	bls.n	800672e <__hexnan+0xf6>
 80066dc:	4643      	mov	r3, r8
 80066de:	f854 2b04 	ldr.w	r2, [r4], #4
 80066e2:	f843 2b04 	str.w	r2, [r3], #4
 80066e6:	42a6      	cmp	r6, r4
 80066e8:	d2f9      	bcs.n	80066de <__hexnan+0xa6>
 80066ea:	2200      	movs	r2, #0
 80066ec:	f843 2b04 	str.w	r2, [r3], #4
 80066f0:	429e      	cmp	r6, r3
 80066f2:	d2fb      	bcs.n	80066ec <__hexnan+0xb4>
 80066f4:	6833      	ldr	r3, [r6, #0]
 80066f6:	b91b      	cbnz	r3, 8006700 <__hexnan+0xc8>
 80066f8:	4546      	cmp	r6, r8
 80066fa:	d127      	bne.n	800674c <__hexnan+0x114>
 80066fc:	2301      	movs	r3, #1
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	2005      	movs	r0, #5
 8006702:	e026      	b.n	8006752 <__hexnan+0x11a>
 8006704:	3501      	adds	r5, #1
 8006706:	2d08      	cmp	r5, #8
 8006708:	f10b 0b01 	add.w	fp, fp, #1
 800670c:	dd06      	ble.n	800671c <__hexnan+0xe4>
 800670e:	4544      	cmp	r4, r8
 8006710:	d9cf      	bls.n	80066b2 <__hexnan+0x7a>
 8006712:	2300      	movs	r3, #0
 8006714:	f844 3c04 	str.w	r3, [r4, #-4]
 8006718:	2501      	movs	r5, #1
 800671a:	3c04      	subs	r4, #4
 800671c:	6822      	ldr	r2, [r4, #0]
 800671e:	f000 000f 	and.w	r0, r0, #15
 8006722:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006726:	6020      	str	r0, [r4, #0]
 8006728:	e7c3      	b.n	80066b2 <__hexnan+0x7a>
 800672a:	2508      	movs	r5, #8
 800672c:	e7c1      	b.n	80066b2 <__hexnan+0x7a>
 800672e:	9b01      	ldr	r3, [sp, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0df      	beq.n	80066f4 <__hexnan+0xbc>
 8006734:	f04f 32ff 	mov.w	r2, #4294967295
 8006738:	f1c3 0320 	rsb	r3, r3, #32
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
 8006740:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006744:	401a      	ands	r2, r3
 8006746:	f847 2c04 	str.w	r2, [r7, #-4]
 800674a:	e7d3      	b.n	80066f4 <__hexnan+0xbc>
 800674c:	3e04      	subs	r6, #4
 800674e:	e7d1      	b.n	80066f4 <__hexnan+0xbc>
 8006750:	2004      	movs	r0, #4
 8006752:	b007      	add	sp, #28
 8006754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006758 <__locale_ctype_ptr_l>:
 8006758:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800675c:	4770      	bx	lr

0800675e <__localeconv_l>:
 800675e:	30f0      	adds	r0, #240	; 0xf0
 8006760:	4770      	bx	lr
	...

08006764 <_localeconv_r>:
 8006764:	4b04      	ldr	r3, [pc, #16]	; (8006778 <_localeconv_r+0x14>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6a18      	ldr	r0, [r3, #32]
 800676a:	4b04      	ldr	r3, [pc, #16]	; (800677c <_localeconv_r+0x18>)
 800676c:	2800      	cmp	r0, #0
 800676e:	bf08      	it	eq
 8006770:	4618      	moveq	r0, r3
 8006772:	30f0      	adds	r0, #240	; 0xf0
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	2000000c 	.word	0x2000000c
 800677c:	20000070 	.word	0x20000070

08006780 <malloc>:
 8006780:	4b02      	ldr	r3, [pc, #8]	; (800678c <malloc+0xc>)
 8006782:	4601      	mov	r1, r0
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	f000 bc7b 	b.w	8007080 <_malloc_r>
 800678a:	bf00      	nop
 800678c:	2000000c 	.word	0x2000000c

08006790 <__ascii_mbtowc>:
 8006790:	b082      	sub	sp, #8
 8006792:	b901      	cbnz	r1, 8006796 <__ascii_mbtowc+0x6>
 8006794:	a901      	add	r1, sp, #4
 8006796:	b142      	cbz	r2, 80067aa <__ascii_mbtowc+0x1a>
 8006798:	b14b      	cbz	r3, 80067ae <__ascii_mbtowc+0x1e>
 800679a:	7813      	ldrb	r3, [r2, #0]
 800679c:	600b      	str	r3, [r1, #0]
 800679e:	7812      	ldrb	r2, [r2, #0]
 80067a0:	1c10      	adds	r0, r2, #0
 80067a2:	bf18      	it	ne
 80067a4:	2001      	movne	r0, #1
 80067a6:	b002      	add	sp, #8
 80067a8:	4770      	bx	lr
 80067aa:	4610      	mov	r0, r2
 80067ac:	e7fb      	b.n	80067a6 <__ascii_mbtowc+0x16>
 80067ae:	f06f 0001 	mvn.w	r0, #1
 80067b2:	e7f8      	b.n	80067a6 <__ascii_mbtowc+0x16>

080067b4 <memcpy>:
 80067b4:	b510      	push	{r4, lr}
 80067b6:	1e43      	subs	r3, r0, #1
 80067b8:	440a      	add	r2, r1
 80067ba:	4291      	cmp	r1, r2
 80067bc:	d100      	bne.n	80067c0 <memcpy+0xc>
 80067be:	bd10      	pop	{r4, pc}
 80067c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067c8:	e7f7      	b.n	80067ba <memcpy+0x6>

080067ca <_Balloc>:
 80067ca:	b570      	push	{r4, r5, r6, lr}
 80067cc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067ce:	4604      	mov	r4, r0
 80067d0:	460e      	mov	r6, r1
 80067d2:	b93d      	cbnz	r5, 80067e4 <_Balloc+0x1a>
 80067d4:	2010      	movs	r0, #16
 80067d6:	f7ff ffd3 	bl	8006780 <malloc>
 80067da:	6260      	str	r0, [r4, #36]	; 0x24
 80067dc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067e0:	6005      	str	r5, [r0, #0]
 80067e2:	60c5      	str	r5, [r0, #12]
 80067e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80067e6:	68eb      	ldr	r3, [r5, #12]
 80067e8:	b183      	cbz	r3, 800680c <_Balloc+0x42>
 80067ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80067f2:	b9b8      	cbnz	r0, 8006824 <_Balloc+0x5a>
 80067f4:	2101      	movs	r1, #1
 80067f6:	fa01 f506 	lsl.w	r5, r1, r6
 80067fa:	1d6a      	adds	r2, r5, #5
 80067fc:	0092      	lsls	r2, r2, #2
 80067fe:	4620      	mov	r0, r4
 8006800:	f000 fbe1 	bl	8006fc6 <_calloc_r>
 8006804:	b160      	cbz	r0, 8006820 <_Balloc+0x56>
 8006806:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800680a:	e00e      	b.n	800682a <_Balloc+0x60>
 800680c:	2221      	movs	r2, #33	; 0x21
 800680e:	2104      	movs	r1, #4
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fbd8 	bl	8006fc6 <_calloc_r>
 8006816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006818:	60e8      	str	r0, [r5, #12]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e4      	bne.n	80067ea <_Balloc+0x20>
 8006820:	2000      	movs	r0, #0
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	6802      	ldr	r2, [r0, #0]
 8006826:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800682a:	2300      	movs	r3, #0
 800682c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006830:	e7f7      	b.n	8006822 <_Balloc+0x58>

08006832 <_Bfree>:
 8006832:	b570      	push	{r4, r5, r6, lr}
 8006834:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006836:	4606      	mov	r6, r0
 8006838:	460d      	mov	r5, r1
 800683a:	b93c      	cbnz	r4, 800684c <_Bfree+0x1a>
 800683c:	2010      	movs	r0, #16
 800683e:	f7ff ff9f 	bl	8006780 <malloc>
 8006842:	6270      	str	r0, [r6, #36]	; 0x24
 8006844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006848:	6004      	str	r4, [r0, #0]
 800684a:	60c4      	str	r4, [r0, #12]
 800684c:	b13d      	cbz	r5, 800685e <_Bfree+0x2c>
 800684e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006850:	686a      	ldr	r2, [r5, #4]
 8006852:	68db      	ldr	r3, [r3, #12]
 8006854:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006858:	6029      	str	r1, [r5, #0]
 800685a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800685e:	bd70      	pop	{r4, r5, r6, pc}

08006860 <__multadd>:
 8006860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006864:	690d      	ldr	r5, [r1, #16]
 8006866:	461f      	mov	r7, r3
 8006868:	4606      	mov	r6, r0
 800686a:	460c      	mov	r4, r1
 800686c:	f101 0c14 	add.w	ip, r1, #20
 8006870:	2300      	movs	r3, #0
 8006872:	f8dc 0000 	ldr.w	r0, [ip]
 8006876:	b281      	uxth	r1, r0
 8006878:	fb02 7101 	mla	r1, r2, r1, r7
 800687c:	0c0f      	lsrs	r7, r1, #16
 800687e:	0c00      	lsrs	r0, r0, #16
 8006880:	fb02 7000 	mla	r0, r2, r0, r7
 8006884:	b289      	uxth	r1, r1
 8006886:	3301      	adds	r3, #1
 8006888:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800688c:	429d      	cmp	r5, r3
 800688e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006892:	f84c 1b04 	str.w	r1, [ip], #4
 8006896:	dcec      	bgt.n	8006872 <__multadd+0x12>
 8006898:	b1d7      	cbz	r7, 80068d0 <__multadd+0x70>
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	42ab      	cmp	r3, r5
 800689e:	dc12      	bgt.n	80068c6 <__multadd+0x66>
 80068a0:	6861      	ldr	r1, [r4, #4]
 80068a2:	4630      	mov	r0, r6
 80068a4:	3101      	adds	r1, #1
 80068a6:	f7ff ff90 	bl	80067ca <_Balloc>
 80068aa:	6922      	ldr	r2, [r4, #16]
 80068ac:	3202      	adds	r2, #2
 80068ae:	f104 010c 	add.w	r1, r4, #12
 80068b2:	4680      	mov	r8, r0
 80068b4:	0092      	lsls	r2, r2, #2
 80068b6:	300c      	adds	r0, #12
 80068b8:	f7ff ff7c 	bl	80067b4 <memcpy>
 80068bc:	4621      	mov	r1, r4
 80068be:	4630      	mov	r0, r6
 80068c0:	f7ff ffb7 	bl	8006832 <_Bfree>
 80068c4:	4644      	mov	r4, r8
 80068c6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80068ca:	3501      	adds	r5, #1
 80068cc:	615f      	str	r7, [r3, #20]
 80068ce:	6125      	str	r5, [r4, #16]
 80068d0:	4620      	mov	r0, r4
 80068d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068d6 <__s2b>:
 80068d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068da:	460c      	mov	r4, r1
 80068dc:	4615      	mov	r5, r2
 80068de:	461f      	mov	r7, r3
 80068e0:	2209      	movs	r2, #9
 80068e2:	3308      	adds	r3, #8
 80068e4:	4606      	mov	r6, r0
 80068e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80068ea:	2100      	movs	r1, #0
 80068ec:	2201      	movs	r2, #1
 80068ee:	429a      	cmp	r2, r3
 80068f0:	db20      	blt.n	8006934 <__s2b+0x5e>
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff ff69 	bl	80067ca <_Balloc>
 80068f8:	9b08      	ldr	r3, [sp, #32]
 80068fa:	6143      	str	r3, [r0, #20]
 80068fc:	2d09      	cmp	r5, #9
 80068fe:	f04f 0301 	mov.w	r3, #1
 8006902:	6103      	str	r3, [r0, #16]
 8006904:	dd19      	ble.n	800693a <__s2b+0x64>
 8006906:	f104 0809 	add.w	r8, r4, #9
 800690a:	46c1      	mov	r9, r8
 800690c:	442c      	add	r4, r5
 800690e:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006912:	4601      	mov	r1, r0
 8006914:	3b30      	subs	r3, #48	; 0x30
 8006916:	220a      	movs	r2, #10
 8006918:	4630      	mov	r0, r6
 800691a:	f7ff ffa1 	bl	8006860 <__multadd>
 800691e:	45a1      	cmp	r9, r4
 8006920:	d1f5      	bne.n	800690e <__s2b+0x38>
 8006922:	eb08 0405 	add.w	r4, r8, r5
 8006926:	3c08      	subs	r4, #8
 8006928:	1b2d      	subs	r5, r5, r4
 800692a:	1963      	adds	r3, r4, r5
 800692c:	42bb      	cmp	r3, r7
 800692e:	db07      	blt.n	8006940 <__s2b+0x6a>
 8006930:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006934:	0052      	lsls	r2, r2, #1
 8006936:	3101      	adds	r1, #1
 8006938:	e7d9      	b.n	80068ee <__s2b+0x18>
 800693a:	340a      	adds	r4, #10
 800693c:	2509      	movs	r5, #9
 800693e:	e7f3      	b.n	8006928 <__s2b+0x52>
 8006940:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006944:	4601      	mov	r1, r0
 8006946:	3b30      	subs	r3, #48	; 0x30
 8006948:	220a      	movs	r2, #10
 800694a:	4630      	mov	r0, r6
 800694c:	f7ff ff88 	bl	8006860 <__multadd>
 8006950:	e7eb      	b.n	800692a <__s2b+0x54>

08006952 <__hi0bits>:
 8006952:	0c02      	lsrs	r2, r0, #16
 8006954:	0412      	lsls	r2, r2, #16
 8006956:	4603      	mov	r3, r0
 8006958:	b9b2      	cbnz	r2, 8006988 <__hi0bits+0x36>
 800695a:	0403      	lsls	r3, r0, #16
 800695c:	2010      	movs	r0, #16
 800695e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006962:	bf04      	itt	eq
 8006964:	021b      	lsleq	r3, r3, #8
 8006966:	3008      	addeq	r0, #8
 8006968:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800696c:	bf04      	itt	eq
 800696e:	011b      	lsleq	r3, r3, #4
 8006970:	3004      	addeq	r0, #4
 8006972:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006976:	bf04      	itt	eq
 8006978:	009b      	lsleq	r3, r3, #2
 800697a:	3002      	addeq	r0, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	db06      	blt.n	800698e <__hi0bits+0x3c>
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	d503      	bpl.n	800698c <__hi0bits+0x3a>
 8006984:	3001      	adds	r0, #1
 8006986:	4770      	bx	lr
 8006988:	2000      	movs	r0, #0
 800698a:	e7e8      	b.n	800695e <__hi0bits+0xc>
 800698c:	2020      	movs	r0, #32
 800698e:	4770      	bx	lr

08006990 <__lo0bits>:
 8006990:	6803      	ldr	r3, [r0, #0]
 8006992:	f013 0207 	ands.w	r2, r3, #7
 8006996:	4601      	mov	r1, r0
 8006998:	d00b      	beq.n	80069b2 <__lo0bits+0x22>
 800699a:	07da      	lsls	r2, r3, #31
 800699c:	d423      	bmi.n	80069e6 <__lo0bits+0x56>
 800699e:	0798      	lsls	r0, r3, #30
 80069a0:	bf49      	itett	mi
 80069a2:	085b      	lsrmi	r3, r3, #1
 80069a4:	089b      	lsrpl	r3, r3, #2
 80069a6:	2001      	movmi	r0, #1
 80069a8:	600b      	strmi	r3, [r1, #0]
 80069aa:	bf5c      	itt	pl
 80069ac:	600b      	strpl	r3, [r1, #0]
 80069ae:	2002      	movpl	r0, #2
 80069b0:	4770      	bx	lr
 80069b2:	b298      	uxth	r0, r3
 80069b4:	b9a8      	cbnz	r0, 80069e2 <__lo0bits+0x52>
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	2010      	movs	r0, #16
 80069ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80069be:	bf04      	itt	eq
 80069c0:	0a1b      	lsreq	r3, r3, #8
 80069c2:	3008      	addeq	r0, #8
 80069c4:	071a      	lsls	r2, r3, #28
 80069c6:	bf04      	itt	eq
 80069c8:	091b      	lsreq	r3, r3, #4
 80069ca:	3004      	addeq	r0, #4
 80069cc:	079a      	lsls	r2, r3, #30
 80069ce:	bf04      	itt	eq
 80069d0:	089b      	lsreq	r3, r3, #2
 80069d2:	3002      	addeq	r0, #2
 80069d4:	07da      	lsls	r2, r3, #31
 80069d6:	d402      	bmi.n	80069de <__lo0bits+0x4e>
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	d006      	beq.n	80069ea <__lo0bits+0x5a>
 80069dc:	3001      	adds	r0, #1
 80069de:	600b      	str	r3, [r1, #0]
 80069e0:	4770      	bx	lr
 80069e2:	4610      	mov	r0, r2
 80069e4:	e7e9      	b.n	80069ba <__lo0bits+0x2a>
 80069e6:	2000      	movs	r0, #0
 80069e8:	4770      	bx	lr
 80069ea:	2020      	movs	r0, #32
 80069ec:	4770      	bx	lr

080069ee <__i2b>:
 80069ee:	b510      	push	{r4, lr}
 80069f0:	460c      	mov	r4, r1
 80069f2:	2101      	movs	r1, #1
 80069f4:	f7ff fee9 	bl	80067ca <_Balloc>
 80069f8:	2201      	movs	r2, #1
 80069fa:	6144      	str	r4, [r0, #20]
 80069fc:	6102      	str	r2, [r0, #16]
 80069fe:	bd10      	pop	{r4, pc}

08006a00 <__multiply>:
 8006a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a04:	4614      	mov	r4, r2
 8006a06:	690a      	ldr	r2, [r1, #16]
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	bfb8      	it	lt
 8006a0e:	460b      	movlt	r3, r1
 8006a10:	4688      	mov	r8, r1
 8006a12:	bfbc      	itt	lt
 8006a14:	46a0      	movlt	r8, r4
 8006a16:	461c      	movlt	r4, r3
 8006a18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a1c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006a20:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a24:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a28:	eb07 0609 	add.w	r6, r7, r9
 8006a2c:	42b3      	cmp	r3, r6
 8006a2e:	bfb8      	it	lt
 8006a30:	3101      	addlt	r1, #1
 8006a32:	f7ff feca 	bl	80067ca <_Balloc>
 8006a36:	f100 0514 	add.w	r5, r0, #20
 8006a3a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006a3e:	462b      	mov	r3, r5
 8006a40:	2200      	movs	r2, #0
 8006a42:	4573      	cmp	r3, lr
 8006a44:	d316      	bcc.n	8006a74 <__multiply+0x74>
 8006a46:	f104 0214 	add.w	r2, r4, #20
 8006a4a:	f108 0114 	add.w	r1, r8, #20
 8006a4e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006a52:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	9b00      	ldr	r3, [sp, #0]
 8006a5a:	9201      	str	r2, [sp, #4]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d80c      	bhi.n	8006a7a <__multiply+0x7a>
 8006a60:	2e00      	cmp	r6, #0
 8006a62:	dd03      	ble.n	8006a6c <__multiply+0x6c>
 8006a64:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d05d      	beq.n	8006b28 <__multiply+0x128>
 8006a6c:	6106      	str	r6, [r0, #16]
 8006a6e:	b003      	add	sp, #12
 8006a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a74:	f843 2b04 	str.w	r2, [r3], #4
 8006a78:	e7e3      	b.n	8006a42 <__multiply+0x42>
 8006a7a:	f8b2 b000 	ldrh.w	fp, [r2]
 8006a7e:	f1bb 0f00 	cmp.w	fp, #0
 8006a82:	d023      	beq.n	8006acc <__multiply+0xcc>
 8006a84:	4689      	mov	r9, r1
 8006a86:	46ac      	mov	ip, r5
 8006a88:	f04f 0800 	mov.w	r8, #0
 8006a8c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a90:	f8dc a000 	ldr.w	sl, [ip]
 8006a94:	b2a3      	uxth	r3, r4
 8006a96:	fa1f fa8a 	uxth.w	sl, sl
 8006a9a:	fb0b a303 	mla	r3, fp, r3, sl
 8006a9e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006aa2:	f8dc 4000 	ldr.w	r4, [ip]
 8006aa6:	4443      	add	r3, r8
 8006aa8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006aac:	fb0b 840a 	mla	r4, fp, sl, r8
 8006ab0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ab4:	46e2      	mov	sl, ip
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006abc:	454f      	cmp	r7, r9
 8006abe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ac2:	f84a 3b04 	str.w	r3, [sl], #4
 8006ac6:	d82b      	bhi.n	8006b20 <__multiply+0x120>
 8006ac8:	f8cc 8004 	str.w	r8, [ip, #4]
 8006acc:	9b01      	ldr	r3, [sp, #4]
 8006ace:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006ad2:	3204      	adds	r2, #4
 8006ad4:	f1ba 0f00 	cmp.w	sl, #0
 8006ad8:	d020      	beq.n	8006b1c <__multiply+0x11c>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	4689      	mov	r9, r1
 8006ade:	46a8      	mov	r8, r5
 8006ae0:	f04f 0b00 	mov.w	fp, #0
 8006ae4:	f8b9 c000 	ldrh.w	ip, [r9]
 8006ae8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006aec:	fb0a 440c 	mla	r4, sl, ip, r4
 8006af0:	445c      	add	r4, fp
 8006af2:	46c4      	mov	ip, r8
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006afa:	f84c 3b04 	str.w	r3, [ip], #4
 8006afe:	f859 3b04 	ldr.w	r3, [r9], #4
 8006b02:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006b06:	0c1b      	lsrs	r3, r3, #16
 8006b08:	fb0a b303 	mla	r3, sl, r3, fp
 8006b0c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006b10:	454f      	cmp	r7, r9
 8006b12:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006b16:	d805      	bhi.n	8006b24 <__multiply+0x124>
 8006b18:	f8c8 3004 	str.w	r3, [r8, #4]
 8006b1c:	3504      	adds	r5, #4
 8006b1e:	e79b      	b.n	8006a58 <__multiply+0x58>
 8006b20:	46d4      	mov	ip, sl
 8006b22:	e7b3      	b.n	8006a8c <__multiply+0x8c>
 8006b24:	46e0      	mov	r8, ip
 8006b26:	e7dd      	b.n	8006ae4 <__multiply+0xe4>
 8006b28:	3e01      	subs	r6, #1
 8006b2a:	e799      	b.n	8006a60 <__multiply+0x60>

08006b2c <__pow5mult>:
 8006b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b30:	4615      	mov	r5, r2
 8006b32:	f012 0203 	ands.w	r2, r2, #3
 8006b36:	4606      	mov	r6, r0
 8006b38:	460f      	mov	r7, r1
 8006b3a:	d007      	beq.n	8006b4c <__pow5mult+0x20>
 8006b3c:	3a01      	subs	r2, #1
 8006b3e:	4c21      	ldr	r4, [pc, #132]	; (8006bc4 <__pow5mult+0x98>)
 8006b40:	2300      	movs	r3, #0
 8006b42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b46:	f7ff fe8b 	bl	8006860 <__multadd>
 8006b4a:	4607      	mov	r7, r0
 8006b4c:	10ad      	asrs	r5, r5, #2
 8006b4e:	d035      	beq.n	8006bbc <__pow5mult+0x90>
 8006b50:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006b52:	b93c      	cbnz	r4, 8006b64 <__pow5mult+0x38>
 8006b54:	2010      	movs	r0, #16
 8006b56:	f7ff fe13 	bl	8006780 <malloc>
 8006b5a:	6270      	str	r0, [r6, #36]	; 0x24
 8006b5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b60:	6004      	str	r4, [r0, #0]
 8006b62:	60c4      	str	r4, [r0, #12]
 8006b64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006b68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b6c:	b94c      	cbnz	r4, 8006b82 <__pow5mult+0x56>
 8006b6e:	f240 2171 	movw	r1, #625	; 0x271
 8006b72:	4630      	mov	r0, r6
 8006b74:	f7ff ff3b 	bl	80069ee <__i2b>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b7e:	4604      	mov	r4, r0
 8006b80:	6003      	str	r3, [r0, #0]
 8006b82:	f04f 0800 	mov.w	r8, #0
 8006b86:	07eb      	lsls	r3, r5, #31
 8006b88:	d50a      	bpl.n	8006ba0 <__pow5mult+0x74>
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	4622      	mov	r2, r4
 8006b8e:	4630      	mov	r0, r6
 8006b90:	f7ff ff36 	bl	8006a00 <__multiply>
 8006b94:	4639      	mov	r1, r7
 8006b96:	4681      	mov	r9, r0
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f7ff fe4a 	bl	8006832 <_Bfree>
 8006b9e:	464f      	mov	r7, r9
 8006ba0:	106d      	asrs	r5, r5, #1
 8006ba2:	d00b      	beq.n	8006bbc <__pow5mult+0x90>
 8006ba4:	6820      	ldr	r0, [r4, #0]
 8006ba6:	b938      	cbnz	r0, 8006bb8 <__pow5mult+0x8c>
 8006ba8:	4622      	mov	r2, r4
 8006baa:	4621      	mov	r1, r4
 8006bac:	4630      	mov	r0, r6
 8006bae:	f7ff ff27 	bl	8006a00 <__multiply>
 8006bb2:	6020      	str	r0, [r4, #0]
 8006bb4:	f8c0 8000 	str.w	r8, [r0]
 8006bb8:	4604      	mov	r4, r0
 8006bba:	e7e4      	b.n	8006b86 <__pow5mult+0x5a>
 8006bbc:	4638      	mov	r0, r7
 8006bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bc2:	bf00      	nop
 8006bc4:	08007ee0 	.word	0x08007ee0

08006bc8 <__lshift>:
 8006bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	460c      	mov	r4, r1
 8006bce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	6849      	ldr	r1, [r1, #4]
 8006bd6:	eb0a 0903 	add.w	r9, sl, r3
 8006bda:	68a3      	ldr	r3, [r4, #8]
 8006bdc:	4607      	mov	r7, r0
 8006bde:	4616      	mov	r6, r2
 8006be0:	f109 0501 	add.w	r5, r9, #1
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	db32      	blt.n	8006c4e <__lshift+0x86>
 8006be8:	4638      	mov	r0, r7
 8006bea:	f7ff fdee 	bl	80067ca <_Balloc>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	f100 0114 	add.w	r1, r0, #20
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	4553      	cmp	r3, sl
 8006bfa:	db2b      	blt.n	8006c54 <__lshift+0x8c>
 8006bfc:	6920      	ldr	r0, [r4, #16]
 8006bfe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c02:	f104 0314 	add.w	r3, r4, #20
 8006c06:	f016 021f 	ands.w	r2, r6, #31
 8006c0a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c0e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c12:	d025      	beq.n	8006c60 <__lshift+0x98>
 8006c14:	f1c2 0e20 	rsb	lr, r2, #32
 8006c18:	2000      	movs	r0, #0
 8006c1a:	681e      	ldr	r6, [r3, #0]
 8006c1c:	468a      	mov	sl, r1
 8006c1e:	4096      	lsls	r6, r2
 8006c20:	4330      	orrs	r0, r6
 8006c22:	f84a 0b04 	str.w	r0, [sl], #4
 8006c26:	f853 0b04 	ldr.w	r0, [r3], #4
 8006c2a:	459c      	cmp	ip, r3
 8006c2c:	fa20 f00e 	lsr.w	r0, r0, lr
 8006c30:	d814      	bhi.n	8006c5c <__lshift+0x94>
 8006c32:	6048      	str	r0, [r1, #4]
 8006c34:	b108      	cbz	r0, 8006c3a <__lshift+0x72>
 8006c36:	f109 0502 	add.w	r5, r9, #2
 8006c3a:	3d01      	subs	r5, #1
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006c42:	4621      	mov	r1, r4
 8006c44:	f7ff fdf5 	bl	8006832 <_Bfree>
 8006c48:	4640      	mov	r0, r8
 8006c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4e:	3101      	adds	r1, #1
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	e7c7      	b.n	8006be4 <__lshift+0x1c>
 8006c54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006c58:	3301      	adds	r3, #1
 8006c5a:	e7cd      	b.n	8006bf8 <__lshift+0x30>
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	e7dc      	b.n	8006c1a <__lshift+0x52>
 8006c60:	3904      	subs	r1, #4
 8006c62:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c66:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c6a:	459c      	cmp	ip, r3
 8006c6c:	d8f9      	bhi.n	8006c62 <__lshift+0x9a>
 8006c6e:	e7e4      	b.n	8006c3a <__lshift+0x72>

08006c70 <__mcmp>:
 8006c70:	6903      	ldr	r3, [r0, #16]
 8006c72:	690a      	ldr	r2, [r1, #16]
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	b530      	push	{r4, r5, lr}
 8006c78:	d10c      	bne.n	8006c94 <__mcmp+0x24>
 8006c7a:	0092      	lsls	r2, r2, #2
 8006c7c:	3014      	adds	r0, #20
 8006c7e:	3114      	adds	r1, #20
 8006c80:	1884      	adds	r4, r0, r2
 8006c82:	4411      	add	r1, r2
 8006c84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006c88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c8c:	4295      	cmp	r5, r2
 8006c8e:	d003      	beq.n	8006c98 <__mcmp+0x28>
 8006c90:	d305      	bcc.n	8006c9e <__mcmp+0x2e>
 8006c92:	2301      	movs	r3, #1
 8006c94:	4618      	mov	r0, r3
 8006c96:	bd30      	pop	{r4, r5, pc}
 8006c98:	42a0      	cmp	r0, r4
 8006c9a:	d3f3      	bcc.n	8006c84 <__mcmp+0x14>
 8006c9c:	e7fa      	b.n	8006c94 <__mcmp+0x24>
 8006c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca2:	e7f7      	b.n	8006c94 <__mcmp+0x24>

08006ca4 <__mdiff>:
 8006ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	460d      	mov	r5, r1
 8006caa:	4607      	mov	r7, r0
 8006cac:	4611      	mov	r1, r2
 8006cae:	4628      	mov	r0, r5
 8006cb0:	4614      	mov	r4, r2
 8006cb2:	f7ff ffdd 	bl	8006c70 <__mcmp>
 8006cb6:	1e06      	subs	r6, r0, #0
 8006cb8:	d108      	bne.n	8006ccc <__mdiff+0x28>
 8006cba:	4631      	mov	r1, r6
 8006cbc:	4638      	mov	r0, r7
 8006cbe:	f7ff fd84 	bl	80067ca <_Balloc>
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ccc:	bfa4      	itt	ge
 8006cce:	4623      	movge	r3, r4
 8006cd0:	462c      	movge	r4, r5
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	6861      	ldr	r1, [r4, #4]
 8006cd6:	bfa6      	itte	ge
 8006cd8:	461d      	movge	r5, r3
 8006cda:	2600      	movge	r6, #0
 8006cdc:	2601      	movlt	r6, #1
 8006cde:	f7ff fd74 	bl	80067ca <_Balloc>
 8006ce2:	692b      	ldr	r3, [r5, #16]
 8006ce4:	60c6      	str	r6, [r0, #12]
 8006ce6:	6926      	ldr	r6, [r4, #16]
 8006ce8:	f105 0914 	add.w	r9, r5, #20
 8006cec:	f104 0214 	add.w	r2, r4, #20
 8006cf0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006cf4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006cf8:	f100 0514 	add.w	r5, r0, #20
 8006cfc:	f04f 0e00 	mov.w	lr, #0
 8006d00:	f852 ab04 	ldr.w	sl, [r2], #4
 8006d04:	f859 4b04 	ldr.w	r4, [r9], #4
 8006d08:	fa1e f18a 	uxtah	r1, lr, sl
 8006d0c:	b2a3      	uxth	r3, r4
 8006d0e:	1ac9      	subs	r1, r1, r3
 8006d10:	0c23      	lsrs	r3, r4, #16
 8006d12:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006d16:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006d1a:	b289      	uxth	r1, r1
 8006d1c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006d20:	45c8      	cmp	r8, r9
 8006d22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006d26:	4694      	mov	ip, r2
 8006d28:	f845 3b04 	str.w	r3, [r5], #4
 8006d2c:	d8e8      	bhi.n	8006d00 <__mdiff+0x5c>
 8006d2e:	45bc      	cmp	ip, r7
 8006d30:	d304      	bcc.n	8006d3c <__mdiff+0x98>
 8006d32:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006d36:	b183      	cbz	r3, 8006d5a <__mdiff+0xb6>
 8006d38:	6106      	str	r6, [r0, #16]
 8006d3a:	e7c5      	b.n	8006cc8 <__mdiff+0x24>
 8006d3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006d40:	fa1e f381 	uxtah	r3, lr, r1
 8006d44:	141a      	asrs	r2, r3, #16
 8006d46:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d50:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006d54:	f845 3b04 	str.w	r3, [r5], #4
 8006d58:	e7e9      	b.n	8006d2e <__mdiff+0x8a>
 8006d5a:	3e01      	subs	r6, #1
 8006d5c:	e7e9      	b.n	8006d32 <__mdiff+0x8e>
	...

08006d60 <__ulp>:
 8006d60:	4b12      	ldr	r3, [pc, #72]	; (8006dac <__ulp+0x4c>)
 8006d62:	ee10 2a90 	vmov	r2, s1
 8006d66:	401a      	ands	r2, r3
 8006d68:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	dd04      	ble.n	8006d7a <__ulp+0x1a>
 8006d70:	2000      	movs	r0, #0
 8006d72:	4619      	mov	r1, r3
 8006d74:	ec41 0b10 	vmov	d0, r0, r1
 8006d78:	4770      	bx	lr
 8006d7a:	425b      	negs	r3, r3
 8006d7c:	151b      	asrs	r3, r3, #20
 8006d7e:	2b13      	cmp	r3, #19
 8006d80:	f04f 0000 	mov.w	r0, #0
 8006d84:	f04f 0100 	mov.w	r1, #0
 8006d88:	dc04      	bgt.n	8006d94 <__ulp+0x34>
 8006d8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d8e:	fa42 f103 	asr.w	r1, r2, r3
 8006d92:	e7ef      	b.n	8006d74 <__ulp+0x14>
 8006d94:	3b14      	subs	r3, #20
 8006d96:	2b1e      	cmp	r3, #30
 8006d98:	f04f 0201 	mov.w	r2, #1
 8006d9c:	bfda      	itte	le
 8006d9e:	f1c3 031f 	rsble	r3, r3, #31
 8006da2:	fa02 f303 	lslle.w	r3, r2, r3
 8006da6:	4613      	movgt	r3, r2
 8006da8:	4618      	mov	r0, r3
 8006daa:	e7e3      	b.n	8006d74 <__ulp+0x14>
 8006dac:	7ff00000 	.word	0x7ff00000

08006db0 <__b2d>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	6905      	ldr	r5, [r0, #16]
 8006db4:	f100 0714 	add.w	r7, r0, #20
 8006db8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006dbc:	1f2e      	subs	r6, r5, #4
 8006dbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f7ff fdc5 	bl	8006952 <__hi0bits>
 8006dc8:	f1c0 0320 	rsb	r3, r0, #32
 8006dcc:	280a      	cmp	r0, #10
 8006dce:	600b      	str	r3, [r1, #0]
 8006dd0:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006e48 <__b2d+0x98>
 8006dd4:	dc14      	bgt.n	8006e00 <__b2d+0x50>
 8006dd6:	f1c0 0e0b 	rsb	lr, r0, #11
 8006dda:	fa24 f10e 	lsr.w	r1, r4, lr
 8006dde:	42b7      	cmp	r7, r6
 8006de0:	ea41 030c 	orr.w	r3, r1, ip
 8006de4:	bf34      	ite	cc
 8006de6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006dea:	2100      	movcs	r1, #0
 8006dec:	3015      	adds	r0, #21
 8006dee:	fa04 f000 	lsl.w	r0, r4, r0
 8006df2:	fa21 f10e 	lsr.w	r1, r1, lr
 8006df6:	ea40 0201 	orr.w	r2, r0, r1
 8006dfa:	ec43 2b10 	vmov	d0, r2, r3
 8006dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e00:	42b7      	cmp	r7, r6
 8006e02:	bf3a      	itte	cc
 8006e04:	f1a5 0608 	subcc.w	r6, r5, #8
 8006e08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006e0c:	2100      	movcs	r1, #0
 8006e0e:	380b      	subs	r0, #11
 8006e10:	d015      	beq.n	8006e3e <__b2d+0x8e>
 8006e12:	4084      	lsls	r4, r0
 8006e14:	f1c0 0520 	rsb	r5, r0, #32
 8006e18:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006e1c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006e20:	42be      	cmp	r6, r7
 8006e22:	fa21 fc05 	lsr.w	ip, r1, r5
 8006e26:	ea44 030c 	orr.w	r3, r4, ip
 8006e2a:	bf8c      	ite	hi
 8006e2c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006e30:	2400      	movls	r4, #0
 8006e32:	fa01 f000 	lsl.w	r0, r1, r0
 8006e36:	40ec      	lsrs	r4, r5
 8006e38:	ea40 0204 	orr.w	r2, r0, r4
 8006e3c:	e7dd      	b.n	8006dfa <__b2d+0x4a>
 8006e3e:	ea44 030c 	orr.w	r3, r4, ip
 8006e42:	460a      	mov	r2, r1
 8006e44:	e7d9      	b.n	8006dfa <__b2d+0x4a>
 8006e46:	bf00      	nop
 8006e48:	3ff00000 	.word	0x3ff00000

08006e4c <__d2b>:
 8006e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e50:	460e      	mov	r6, r1
 8006e52:	2101      	movs	r1, #1
 8006e54:	ec59 8b10 	vmov	r8, r9, d0
 8006e58:	4615      	mov	r5, r2
 8006e5a:	f7ff fcb6 	bl	80067ca <_Balloc>
 8006e5e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006e62:	4607      	mov	r7, r0
 8006e64:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e68:	bb34      	cbnz	r4, 8006eb8 <__d2b+0x6c>
 8006e6a:	9301      	str	r3, [sp, #4]
 8006e6c:	f1b8 0300 	subs.w	r3, r8, #0
 8006e70:	d027      	beq.n	8006ec2 <__d2b+0x76>
 8006e72:	a802      	add	r0, sp, #8
 8006e74:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006e78:	f7ff fd8a 	bl	8006990 <__lo0bits>
 8006e7c:	9900      	ldr	r1, [sp, #0]
 8006e7e:	b1f0      	cbz	r0, 8006ebe <__d2b+0x72>
 8006e80:	9a01      	ldr	r2, [sp, #4]
 8006e82:	f1c0 0320 	rsb	r3, r0, #32
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	430b      	orrs	r3, r1
 8006e8c:	40c2      	lsrs	r2, r0
 8006e8e:	617b      	str	r3, [r7, #20]
 8006e90:	9201      	str	r2, [sp, #4]
 8006e92:	9b01      	ldr	r3, [sp, #4]
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bf14      	ite	ne
 8006e9a:	2102      	movne	r1, #2
 8006e9c:	2101      	moveq	r1, #1
 8006e9e:	6139      	str	r1, [r7, #16]
 8006ea0:	b1c4      	cbz	r4, 8006ed4 <__d2b+0x88>
 8006ea2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006ea6:	4404      	add	r4, r0
 8006ea8:	6034      	str	r4, [r6, #0]
 8006eaa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006eae:	6028      	str	r0, [r5, #0]
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	b003      	add	sp, #12
 8006eb4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ebc:	e7d5      	b.n	8006e6a <__d2b+0x1e>
 8006ebe:	6179      	str	r1, [r7, #20]
 8006ec0:	e7e7      	b.n	8006e92 <__d2b+0x46>
 8006ec2:	a801      	add	r0, sp, #4
 8006ec4:	f7ff fd64 	bl	8006990 <__lo0bits>
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	2101      	movs	r1, #1
 8006ece:	6139      	str	r1, [r7, #16]
 8006ed0:	3020      	adds	r0, #32
 8006ed2:	e7e5      	b.n	8006ea0 <__d2b+0x54>
 8006ed4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006ed8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006edc:	6030      	str	r0, [r6, #0]
 8006ede:	6918      	ldr	r0, [r3, #16]
 8006ee0:	f7ff fd37 	bl	8006952 <__hi0bits>
 8006ee4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006ee8:	e7e1      	b.n	8006eae <__d2b+0x62>

08006eea <__ratio>:
 8006eea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eee:	4688      	mov	r8, r1
 8006ef0:	4669      	mov	r1, sp
 8006ef2:	4681      	mov	r9, r0
 8006ef4:	f7ff ff5c 	bl	8006db0 <__b2d>
 8006ef8:	a901      	add	r1, sp, #4
 8006efa:	4640      	mov	r0, r8
 8006efc:	ec57 6b10 	vmov	r6, r7, d0
 8006f00:	f7ff ff56 	bl	8006db0 <__b2d>
 8006f04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006f08:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006f0c:	eba3 0c02 	sub.w	ip, r3, r2
 8006f10:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006f1a:	ec5b ab10 	vmov	sl, fp, d0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	bfce      	itee	gt
 8006f22:	463a      	movgt	r2, r7
 8006f24:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006f28:	465a      	movle	r2, fp
 8006f2a:	4659      	mov	r1, fp
 8006f2c:	463d      	mov	r5, r7
 8006f2e:	bfd4      	ite	le
 8006f30:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8006f34:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8006f38:	4630      	mov	r0, r6
 8006f3a:	ee10 2a10 	vmov	r2, s0
 8006f3e:	460b      	mov	r3, r1
 8006f40:	4629      	mov	r1, r5
 8006f42:	f7f9 fc8b 	bl	800085c <__aeabi_ddiv>
 8006f46:	ec41 0b10 	vmov	d0, r0, r1
 8006f4a:	b003      	add	sp, #12
 8006f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f50 <__copybits>:
 8006f50:	3901      	subs	r1, #1
 8006f52:	b510      	push	{r4, lr}
 8006f54:	1149      	asrs	r1, r1, #5
 8006f56:	6914      	ldr	r4, [r2, #16]
 8006f58:	3101      	adds	r1, #1
 8006f5a:	f102 0314 	add.w	r3, r2, #20
 8006f5e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006f62:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006f66:	42a3      	cmp	r3, r4
 8006f68:	4602      	mov	r2, r0
 8006f6a:	d303      	bcc.n	8006f74 <__copybits+0x24>
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	428a      	cmp	r2, r1
 8006f70:	d305      	bcc.n	8006f7e <__copybits+0x2e>
 8006f72:	bd10      	pop	{r4, pc}
 8006f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f78:	f840 2b04 	str.w	r2, [r0], #4
 8006f7c:	e7f3      	b.n	8006f66 <__copybits+0x16>
 8006f7e:	f842 3b04 	str.w	r3, [r2], #4
 8006f82:	e7f4      	b.n	8006f6e <__copybits+0x1e>

08006f84 <__any_on>:
 8006f84:	f100 0214 	add.w	r2, r0, #20
 8006f88:	6900      	ldr	r0, [r0, #16]
 8006f8a:	114b      	asrs	r3, r1, #5
 8006f8c:	4298      	cmp	r0, r3
 8006f8e:	b510      	push	{r4, lr}
 8006f90:	db11      	blt.n	8006fb6 <__any_on+0x32>
 8006f92:	dd0a      	ble.n	8006faa <__any_on+0x26>
 8006f94:	f011 011f 	ands.w	r1, r1, #31
 8006f98:	d007      	beq.n	8006faa <__any_on+0x26>
 8006f9a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006f9e:	fa24 f001 	lsr.w	r0, r4, r1
 8006fa2:	fa00 f101 	lsl.w	r1, r0, r1
 8006fa6:	428c      	cmp	r4, r1
 8006fa8:	d10b      	bne.n	8006fc2 <__any_on+0x3e>
 8006faa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d803      	bhi.n	8006fba <__any_on+0x36>
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	bd10      	pop	{r4, pc}
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	e7f7      	b.n	8006faa <__any_on+0x26>
 8006fba:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006fbe:	2900      	cmp	r1, #0
 8006fc0:	d0f5      	beq.n	8006fae <__any_on+0x2a>
 8006fc2:	2001      	movs	r0, #1
 8006fc4:	e7f6      	b.n	8006fb4 <__any_on+0x30>

08006fc6 <_calloc_r>:
 8006fc6:	b538      	push	{r3, r4, r5, lr}
 8006fc8:	fb02 f401 	mul.w	r4, r2, r1
 8006fcc:	4621      	mov	r1, r4
 8006fce:	f000 f857 	bl	8007080 <_malloc_r>
 8006fd2:	4605      	mov	r5, r0
 8006fd4:	b118      	cbz	r0, 8006fde <_calloc_r+0x18>
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	2100      	movs	r1, #0
 8006fda:	f7fc fc15 	bl	8003808 <memset>
 8006fde:	4628      	mov	r0, r5
 8006fe0:	bd38      	pop	{r3, r4, r5, pc}
	...

08006fe4 <_free_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	4605      	mov	r5, r0
 8006fe8:	2900      	cmp	r1, #0
 8006fea:	d045      	beq.n	8007078 <_free_r+0x94>
 8006fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff0:	1f0c      	subs	r4, r1, #4
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	bfb8      	it	lt
 8006ff6:	18e4      	addlt	r4, r4, r3
 8006ff8:	f000 fdc3 	bl	8007b82 <__malloc_lock>
 8006ffc:	4a1f      	ldr	r2, [pc, #124]	; (800707c <_free_r+0x98>)
 8006ffe:	6813      	ldr	r3, [r2, #0]
 8007000:	4610      	mov	r0, r2
 8007002:	b933      	cbnz	r3, 8007012 <_free_r+0x2e>
 8007004:	6063      	str	r3, [r4, #4]
 8007006:	6014      	str	r4, [r2, #0]
 8007008:	4628      	mov	r0, r5
 800700a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800700e:	f000 bdb9 	b.w	8007b84 <__malloc_unlock>
 8007012:	42a3      	cmp	r3, r4
 8007014:	d90c      	bls.n	8007030 <_free_r+0x4c>
 8007016:	6821      	ldr	r1, [r4, #0]
 8007018:	1862      	adds	r2, r4, r1
 800701a:	4293      	cmp	r3, r2
 800701c:	bf04      	itt	eq
 800701e:	681a      	ldreq	r2, [r3, #0]
 8007020:	685b      	ldreq	r3, [r3, #4]
 8007022:	6063      	str	r3, [r4, #4]
 8007024:	bf04      	itt	eq
 8007026:	1852      	addeq	r2, r2, r1
 8007028:	6022      	streq	r2, [r4, #0]
 800702a:	6004      	str	r4, [r0, #0]
 800702c:	e7ec      	b.n	8007008 <_free_r+0x24>
 800702e:	4613      	mov	r3, r2
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	b10a      	cbz	r2, 8007038 <_free_r+0x54>
 8007034:	42a2      	cmp	r2, r4
 8007036:	d9fa      	bls.n	800702e <_free_r+0x4a>
 8007038:	6819      	ldr	r1, [r3, #0]
 800703a:	1858      	adds	r0, r3, r1
 800703c:	42a0      	cmp	r0, r4
 800703e:	d10b      	bne.n	8007058 <_free_r+0x74>
 8007040:	6820      	ldr	r0, [r4, #0]
 8007042:	4401      	add	r1, r0
 8007044:	1858      	adds	r0, r3, r1
 8007046:	4282      	cmp	r2, r0
 8007048:	6019      	str	r1, [r3, #0]
 800704a:	d1dd      	bne.n	8007008 <_free_r+0x24>
 800704c:	6810      	ldr	r0, [r2, #0]
 800704e:	6852      	ldr	r2, [r2, #4]
 8007050:	605a      	str	r2, [r3, #4]
 8007052:	4401      	add	r1, r0
 8007054:	6019      	str	r1, [r3, #0]
 8007056:	e7d7      	b.n	8007008 <_free_r+0x24>
 8007058:	d902      	bls.n	8007060 <_free_r+0x7c>
 800705a:	230c      	movs	r3, #12
 800705c:	602b      	str	r3, [r5, #0]
 800705e:	e7d3      	b.n	8007008 <_free_r+0x24>
 8007060:	6820      	ldr	r0, [r4, #0]
 8007062:	1821      	adds	r1, r4, r0
 8007064:	428a      	cmp	r2, r1
 8007066:	bf04      	itt	eq
 8007068:	6811      	ldreq	r1, [r2, #0]
 800706a:	6852      	ldreq	r2, [r2, #4]
 800706c:	6062      	str	r2, [r4, #4]
 800706e:	bf04      	itt	eq
 8007070:	1809      	addeq	r1, r1, r0
 8007072:	6021      	streq	r1, [r4, #0]
 8007074:	605c      	str	r4, [r3, #4]
 8007076:	e7c7      	b.n	8007008 <_free_r+0x24>
 8007078:	bd38      	pop	{r3, r4, r5, pc}
 800707a:	bf00      	nop
 800707c:	20000210 	.word	0x20000210

08007080 <_malloc_r>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	1ccd      	adds	r5, r1, #3
 8007084:	f025 0503 	bic.w	r5, r5, #3
 8007088:	3508      	adds	r5, #8
 800708a:	2d0c      	cmp	r5, #12
 800708c:	bf38      	it	cc
 800708e:	250c      	movcc	r5, #12
 8007090:	2d00      	cmp	r5, #0
 8007092:	4606      	mov	r6, r0
 8007094:	db01      	blt.n	800709a <_malloc_r+0x1a>
 8007096:	42a9      	cmp	r1, r5
 8007098:	d903      	bls.n	80070a2 <_malloc_r+0x22>
 800709a:	230c      	movs	r3, #12
 800709c:	6033      	str	r3, [r6, #0]
 800709e:	2000      	movs	r0, #0
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
 80070a2:	f000 fd6e 	bl	8007b82 <__malloc_lock>
 80070a6:	4a21      	ldr	r2, [pc, #132]	; (800712c <_malloc_r+0xac>)
 80070a8:	6814      	ldr	r4, [r2, #0]
 80070aa:	4621      	mov	r1, r4
 80070ac:	b991      	cbnz	r1, 80070d4 <_malloc_r+0x54>
 80070ae:	4c20      	ldr	r4, [pc, #128]	; (8007130 <_malloc_r+0xb0>)
 80070b0:	6823      	ldr	r3, [r4, #0]
 80070b2:	b91b      	cbnz	r3, 80070bc <_malloc_r+0x3c>
 80070b4:	4630      	mov	r0, r6
 80070b6:	f000 facf 	bl	8007658 <_sbrk_r>
 80070ba:	6020      	str	r0, [r4, #0]
 80070bc:	4629      	mov	r1, r5
 80070be:	4630      	mov	r0, r6
 80070c0:	f000 faca 	bl	8007658 <_sbrk_r>
 80070c4:	1c43      	adds	r3, r0, #1
 80070c6:	d124      	bne.n	8007112 <_malloc_r+0x92>
 80070c8:	230c      	movs	r3, #12
 80070ca:	6033      	str	r3, [r6, #0]
 80070cc:	4630      	mov	r0, r6
 80070ce:	f000 fd59 	bl	8007b84 <__malloc_unlock>
 80070d2:	e7e4      	b.n	800709e <_malloc_r+0x1e>
 80070d4:	680b      	ldr	r3, [r1, #0]
 80070d6:	1b5b      	subs	r3, r3, r5
 80070d8:	d418      	bmi.n	800710c <_malloc_r+0x8c>
 80070da:	2b0b      	cmp	r3, #11
 80070dc:	d90f      	bls.n	80070fe <_malloc_r+0x7e>
 80070de:	600b      	str	r3, [r1, #0]
 80070e0:	50cd      	str	r5, [r1, r3]
 80070e2:	18cc      	adds	r4, r1, r3
 80070e4:	4630      	mov	r0, r6
 80070e6:	f000 fd4d 	bl	8007b84 <__malloc_unlock>
 80070ea:	f104 000b 	add.w	r0, r4, #11
 80070ee:	1d23      	adds	r3, r4, #4
 80070f0:	f020 0007 	bic.w	r0, r0, #7
 80070f4:	1ac3      	subs	r3, r0, r3
 80070f6:	d0d3      	beq.n	80070a0 <_malloc_r+0x20>
 80070f8:	425a      	negs	r2, r3
 80070fa:	50e2      	str	r2, [r4, r3]
 80070fc:	e7d0      	b.n	80070a0 <_malloc_r+0x20>
 80070fe:	428c      	cmp	r4, r1
 8007100:	684b      	ldr	r3, [r1, #4]
 8007102:	bf16      	itet	ne
 8007104:	6063      	strne	r3, [r4, #4]
 8007106:	6013      	streq	r3, [r2, #0]
 8007108:	460c      	movne	r4, r1
 800710a:	e7eb      	b.n	80070e4 <_malloc_r+0x64>
 800710c:	460c      	mov	r4, r1
 800710e:	6849      	ldr	r1, [r1, #4]
 8007110:	e7cc      	b.n	80070ac <_malloc_r+0x2c>
 8007112:	1cc4      	adds	r4, r0, #3
 8007114:	f024 0403 	bic.w	r4, r4, #3
 8007118:	42a0      	cmp	r0, r4
 800711a:	d005      	beq.n	8007128 <_malloc_r+0xa8>
 800711c:	1a21      	subs	r1, r4, r0
 800711e:	4630      	mov	r0, r6
 8007120:	f000 fa9a 	bl	8007658 <_sbrk_r>
 8007124:	3001      	adds	r0, #1
 8007126:	d0cf      	beq.n	80070c8 <_malloc_r+0x48>
 8007128:	6025      	str	r5, [r4, #0]
 800712a:	e7db      	b.n	80070e4 <_malloc_r+0x64>
 800712c:	20000210 	.word	0x20000210
 8007130:	20000214 	.word	0x20000214

08007134 <__ssputs_r>:
 8007134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007138:	688e      	ldr	r6, [r1, #8]
 800713a:	429e      	cmp	r6, r3
 800713c:	4682      	mov	sl, r0
 800713e:	460c      	mov	r4, r1
 8007140:	4690      	mov	r8, r2
 8007142:	4699      	mov	r9, r3
 8007144:	d837      	bhi.n	80071b6 <__ssputs_r+0x82>
 8007146:	898a      	ldrh	r2, [r1, #12]
 8007148:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800714c:	d031      	beq.n	80071b2 <__ssputs_r+0x7e>
 800714e:	6825      	ldr	r5, [r4, #0]
 8007150:	6909      	ldr	r1, [r1, #16]
 8007152:	1a6f      	subs	r7, r5, r1
 8007154:	6965      	ldr	r5, [r4, #20]
 8007156:	2302      	movs	r3, #2
 8007158:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800715c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007160:	f109 0301 	add.w	r3, r9, #1
 8007164:	443b      	add	r3, r7
 8007166:	429d      	cmp	r5, r3
 8007168:	bf38      	it	cc
 800716a:	461d      	movcc	r5, r3
 800716c:	0553      	lsls	r3, r2, #21
 800716e:	d530      	bpl.n	80071d2 <__ssputs_r+0x9e>
 8007170:	4629      	mov	r1, r5
 8007172:	f7ff ff85 	bl	8007080 <_malloc_r>
 8007176:	4606      	mov	r6, r0
 8007178:	b950      	cbnz	r0, 8007190 <__ssputs_r+0x5c>
 800717a:	230c      	movs	r3, #12
 800717c:	f8ca 3000 	str.w	r3, [sl]
 8007180:	89a3      	ldrh	r3, [r4, #12]
 8007182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007186:	81a3      	strh	r3, [r4, #12]
 8007188:	f04f 30ff 	mov.w	r0, #4294967295
 800718c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007190:	463a      	mov	r2, r7
 8007192:	6921      	ldr	r1, [r4, #16]
 8007194:	f7ff fb0e 	bl	80067b4 <memcpy>
 8007198:	89a3      	ldrh	r3, [r4, #12]
 800719a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800719e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071a2:	81a3      	strh	r3, [r4, #12]
 80071a4:	6126      	str	r6, [r4, #16]
 80071a6:	6165      	str	r5, [r4, #20]
 80071a8:	443e      	add	r6, r7
 80071aa:	1bed      	subs	r5, r5, r7
 80071ac:	6026      	str	r6, [r4, #0]
 80071ae:	60a5      	str	r5, [r4, #8]
 80071b0:	464e      	mov	r6, r9
 80071b2:	454e      	cmp	r6, r9
 80071b4:	d900      	bls.n	80071b8 <__ssputs_r+0x84>
 80071b6:	464e      	mov	r6, r9
 80071b8:	4632      	mov	r2, r6
 80071ba:	4641      	mov	r1, r8
 80071bc:	6820      	ldr	r0, [r4, #0]
 80071be:	f000 fcc7 	bl	8007b50 <memmove>
 80071c2:	68a3      	ldr	r3, [r4, #8]
 80071c4:	1b9b      	subs	r3, r3, r6
 80071c6:	60a3      	str	r3, [r4, #8]
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	441e      	add	r6, r3
 80071cc:	6026      	str	r6, [r4, #0]
 80071ce:	2000      	movs	r0, #0
 80071d0:	e7dc      	b.n	800718c <__ssputs_r+0x58>
 80071d2:	462a      	mov	r2, r5
 80071d4:	f000 fcd7 	bl	8007b86 <_realloc_r>
 80071d8:	4606      	mov	r6, r0
 80071da:	2800      	cmp	r0, #0
 80071dc:	d1e2      	bne.n	80071a4 <__ssputs_r+0x70>
 80071de:	6921      	ldr	r1, [r4, #16]
 80071e0:	4650      	mov	r0, sl
 80071e2:	f7ff feff 	bl	8006fe4 <_free_r>
 80071e6:	e7c8      	b.n	800717a <__ssputs_r+0x46>

080071e8 <_svfiprintf_r>:
 80071e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ec:	461d      	mov	r5, r3
 80071ee:	898b      	ldrh	r3, [r1, #12]
 80071f0:	061f      	lsls	r7, r3, #24
 80071f2:	b09d      	sub	sp, #116	; 0x74
 80071f4:	4680      	mov	r8, r0
 80071f6:	460c      	mov	r4, r1
 80071f8:	4616      	mov	r6, r2
 80071fa:	d50f      	bpl.n	800721c <_svfiprintf_r+0x34>
 80071fc:	690b      	ldr	r3, [r1, #16]
 80071fe:	b96b      	cbnz	r3, 800721c <_svfiprintf_r+0x34>
 8007200:	2140      	movs	r1, #64	; 0x40
 8007202:	f7ff ff3d 	bl	8007080 <_malloc_r>
 8007206:	6020      	str	r0, [r4, #0]
 8007208:	6120      	str	r0, [r4, #16]
 800720a:	b928      	cbnz	r0, 8007218 <_svfiprintf_r+0x30>
 800720c:	230c      	movs	r3, #12
 800720e:	f8c8 3000 	str.w	r3, [r8]
 8007212:	f04f 30ff 	mov.w	r0, #4294967295
 8007216:	e0c8      	b.n	80073aa <_svfiprintf_r+0x1c2>
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	6163      	str	r3, [r4, #20]
 800721c:	2300      	movs	r3, #0
 800721e:	9309      	str	r3, [sp, #36]	; 0x24
 8007220:	2320      	movs	r3, #32
 8007222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007226:	2330      	movs	r3, #48	; 0x30
 8007228:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800722c:	9503      	str	r5, [sp, #12]
 800722e:	f04f 0b01 	mov.w	fp, #1
 8007232:	4637      	mov	r7, r6
 8007234:	463d      	mov	r5, r7
 8007236:	f815 3b01 	ldrb.w	r3, [r5], #1
 800723a:	b10b      	cbz	r3, 8007240 <_svfiprintf_r+0x58>
 800723c:	2b25      	cmp	r3, #37	; 0x25
 800723e:	d13e      	bne.n	80072be <_svfiprintf_r+0xd6>
 8007240:	ebb7 0a06 	subs.w	sl, r7, r6
 8007244:	d00b      	beq.n	800725e <_svfiprintf_r+0x76>
 8007246:	4653      	mov	r3, sl
 8007248:	4632      	mov	r2, r6
 800724a:	4621      	mov	r1, r4
 800724c:	4640      	mov	r0, r8
 800724e:	f7ff ff71 	bl	8007134 <__ssputs_r>
 8007252:	3001      	adds	r0, #1
 8007254:	f000 80a4 	beq.w	80073a0 <_svfiprintf_r+0x1b8>
 8007258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800725a:	4453      	add	r3, sl
 800725c:	9309      	str	r3, [sp, #36]	; 0x24
 800725e:	783b      	ldrb	r3, [r7, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	f000 809d 	beq.w	80073a0 <_svfiprintf_r+0x1b8>
 8007266:	2300      	movs	r3, #0
 8007268:	f04f 32ff 	mov.w	r2, #4294967295
 800726c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	9307      	str	r3, [sp, #28]
 8007274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007278:	931a      	str	r3, [sp, #104]	; 0x68
 800727a:	462f      	mov	r7, r5
 800727c:	2205      	movs	r2, #5
 800727e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007282:	4850      	ldr	r0, [pc, #320]	; (80073c4 <_svfiprintf_r+0x1dc>)
 8007284:	f7f8 ffb4 	bl	80001f0 <memchr>
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	b9d0      	cbnz	r0, 80072c2 <_svfiprintf_r+0xda>
 800728c:	06d9      	lsls	r1, r3, #27
 800728e:	bf44      	itt	mi
 8007290:	2220      	movmi	r2, #32
 8007292:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007296:	071a      	lsls	r2, r3, #28
 8007298:	bf44      	itt	mi
 800729a:	222b      	movmi	r2, #43	; 0x2b
 800729c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80072a0:	782a      	ldrb	r2, [r5, #0]
 80072a2:	2a2a      	cmp	r2, #42	; 0x2a
 80072a4:	d015      	beq.n	80072d2 <_svfiprintf_r+0xea>
 80072a6:	9a07      	ldr	r2, [sp, #28]
 80072a8:	462f      	mov	r7, r5
 80072aa:	2000      	movs	r0, #0
 80072ac:	250a      	movs	r5, #10
 80072ae:	4639      	mov	r1, r7
 80072b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072b4:	3b30      	subs	r3, #48	; 0x30
 80072b6:	2b09      	cmp	r3, #9
 80072b8:	d94d      	bls.n	8007356 <_svfiprintf_r+0x16e>
 80072ba:	b1b8      	cbz	r0, 80072ec <_svfiprintf_r+0x104>
 80072bc:	e00f      	b.n	80072de <_svfiprintf_r+0xf6>
 80072be:	462f      	mov	r7, r5
 80072c0:	e7b8      	b.n	8007234 <_svfiprintf_r+0x4c>
 80072c2:	4a40      	ldr	r2, [pc, #256]	; (80073c4 <_svfiprintf_r+0x1dc>)
 80072c4:	1a80      	subs	r0, r0, r2
 80072c6:	fa0b f000 	lsl.w	r0, fp, r0
 80072ca:	4318      	orrs	r0, r3
 80072cc:	9004      	str	r0, [sp, #16]
 80072ce:	463d      	mov	r5, r7
 80072d0:	e7d3      	b.n	800727a <_svfiprintf_r+0x92>
 80072d2:	9a03      	ldr	r2, [sp, #12]
 80072d4:	1d11      	adds	r1, r2, #4
 80072d6:	6812      	ldr	r2, [r2, #0]
 80072d8:	9103      	str	r1, [sp, #12]
 80072da:	2a00      	cmp	r2, #0
 80072dc:	db01      	blt.n	80072e2 <_svfiprintf_r+0xfa>
 80072de:	9207      	str	r2, [sp, #28]
 80072e0:	e004      	b.n	80072ec <_svfiprintf_r+0x104>
 80072e2:	4252      	negs	r2, r2
 80072e4:	f043 0302 	orr.w	r3, r3, #2
 80072e8:	9207      	str	r2, [sp, #28]
 80072ea:	9304      	str	r3, [sp, #16]
 80072ec:	783b      	ldrb	r3, [r7, #0]
 80072ee:	2b2e      	cmp	r3, #46	; 0x2e
 80072f0:	d10c      	bne.n	800730c <_svfiprintf_r+0x124>
 80072f2:	787b      	ldrb	r3, [r7, #1]
 80072f4:	2b2a      	cmp	r3, #42	; 0x2a
 80072f6:	d133      	bne.n	8007360 <_svfiprintf_r+0x178>
 80072f8:	9b03      	ldr	r3, [sp, #12]
 80072fa:	1d1a      	adds	r2, r3, #4
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	9203      	str	r2, [sp, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	bfb8      	it	lt
 8007304:	f04f 33ff 	movlt.w	r3, #4294967295
 8007308:	3702      	adds	r7, #2
 800730a:	9305      	str	r3, [sp, #20]
 800730c:	4d2e      	ldr	r5, [pc, #184]	; (80073c8 <_svfiprintf_r+0x1e0>)
 800730e:	7839      	ldrb	r1, [r7, #0]
 8007310:	2203      	movs	r2, #3
 8007312:	4628      	mov	r0, r5
 8007314:	f7f8 ff6c 	bl	80001f0 <memchr>
 8007318:	b138      	cbz	r0, 800732a <_svfiprintf_r+0x142>
 800731a:	2340      	movs	r3, #64	; 0x40
 800731c:	1b40      	subs	r0, r0, r5
 800731e:	fa03 f000 	lsl.w	r0, r3, r0
 8007322:	9b04      	ldr	r3, [sp, #16]
 8007324:	4303      	orrs	r3, r0
 8007326:	3701      	adds	r7, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	7839      	ldrb	r1, [r7, #0]
 800732c:	4827      	ldr	r0, [pc, #156]	; (80073cc <_svfiprintf_r+0x1e4>)
 800732e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007332:	2206      	movs	r2, #6
 8007334:	1c7e      	adds	r6, r7, #1
 8007336:	f7f8 ff5b 	bl	80001f0 <memchr>
 800733a:	2800      	cmp	r0, #0
 800733c:	d038      	beq.n	80073b0 <_svfiprintf_r+0x1c8>
 800733e:	4b24      	ldr	r3, [pc, #144]	; (80073d0 <_svfiprintf_r+0x1e8>)
 8007340:	bb13      	cbnz	r3, 8007388 <_svfiprintf_r+0x1a0>
 8007342:	9b03      	ldr	r3, [sp, #12]
 8007344:	3307      	adds	r3, #7
 8007346:	f023 0307 	bic.w	r3, r3, #7
 800734a:	3308      	adds	r3, #8
 800734c:	9303      	str	r3, [sp, #12]
 800734e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007350:	444b      	add	r3, r9
 8007352:	9309      	str	r3, [sp, #36]	; 0x24
 8007354:	e76d      	b.n	8007232 <_svfiprintf_r+0x4a>
 8007356:	fb05 3202 	mla	r2, r5, r2, r3
 800735a:	2001      	movs	r0, #1
 800735c:	460f      	mov	r7, r1
 800735e:	e7a6      	b.n	80072ae <_svfiprintf_r+0xc6>
 8007360:	2300      	movs	r3, #0
 8007362:	3701      	adds	r7, #1
 8007364:	9305      	str	r3, [sp, #20]
 8007366:	4619      	mov	r1, r3
 8007368:	250a      	movs	r5, #10
 800736a:	4638      	mov	r0, r7
 800736c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007370:	3a30      	subs	r2, #48	; 0x30
 8007372:	2a09      	cmp	r2, #9
 8007374:	d903      	bls.n	800737e <_svfiprintf_r+0x196>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d0c8      	beq.n	800730c <_svfiprintf_r+0x124>
 800737a:	9105      	str	r1, [sp, #20]
 800737c:	e7c6      	b.n	800730c <_svfiprintf_r+0x124>
 800737e:	fb05 2101 	mla	r1, r5, r1, r2
 8007382:	2301      	movs	r3, #1
 8007384:	4607      	mov	r7, r0
 8007386:	e7f0      	b.n	800736a <_svfiprintf_r+0x182>
 8007388:	ab03      	add	r3, sp, #12
 800738a:	9300      	str	r3, [sp, #0]
 800738c:	4622      	mov	r2, r4
 800738e:	4b11      	ldr	r3, [pc, #68]	; (80073d4 <_svfiprintf_r+0x1ec>)
 8007390:	a904      	add	r1, sp, #16
 8007392:	4640      	mov	r0, r8
 8007394:	f7fc fad4 	bl	8003940 <_printf_float>
 8007398:	f1b0 3fff 	cmp.w	r0, #4294967295
 800739c:	4681      	mov	r9, r0
 800739e:	d1d6      	bne.n	800734e <_svfiprintf_r+0x166>
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	065b      	lsls	r3, r3, #25
 80073a4:	f53f af35 	bmi.w	8007212 <_svfiprintf_r+0x2a>
 80073a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073aa:	b01d      	add	sp, #116	; 0x74
 80073ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073b0:	ab03      	add	r3, sp, #12
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	4622      	mov	r2, r4
 80073b6:	4b07      	ldr	r3, [pc, #28]	; (80073d4 <_svfiprintf_r+0x1ec>)
 80073b8:	a904      	add	r1, sp, #16
 80073ba:	4640      	mov	r0, r8
 80073bc:	f7fc fd76 	bl	8003eac <_printf_i>
 80073c0:	e7ea      	b.n	8007398 <_svfiprintf_r+0x1b0>
 80073c2:	bf00      	nop
 80073c4:	08007eec 	.word	0x08007eec
 80073c8:	08007ef2 	.word	0x08007ef2
 80073cc:	08007ef6 	.word	0x08007ef6
 80073d0:	08003941 	.word	0x08003941
 80073d4:	08007135 	.word	0x08007135

080073d8 <__sfputc_r>:
 80073d8:	6893      	ldr	r3, [r2, #8]
 80073da:	3b01      	subs	r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	b410      	push	{r4}
 80073e0:	6093      	str	r3, [r2, #8]
 80073e2:	da08      	bge.n	80073f6 <__sfputc_r+0x1e>
 80073e4:	6994      	ldr	r4, [r2, #24]
 80073e6:	42a3      	cmp	r3, r4
 80073e8:	db01      	blt.n	80073ee <__sfputc_r+0x16>
 80073ea:	290a      	cmp	r1, #10
 80073ec:	d103      	bne.n	80073f6 <__sfputc_r+0x1e>
 80073ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f2:	f000 b997 	b.w	8007724 <__swbuf_r>
 80073f6:	6813      	ldr	r3, [r2, #0]
 80073f8:	1c58      	adds	r0, r3, #1
 80073fa:	6010      	str	r0, [r2, #0]
 80073fc:	7019      	strb	r1, [r3, #0]
 80073fe:	4608      	mov	r0, r1
 8007400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007404:	4770      	bx	lr

08007406 <__sfputs_r>:
 8007406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007408:	4606      	mov	r6, r0
 800740a:	460f      	mov	r7, r1
 800740c:	4614      	mov	r4, r2
 800740e:	18d5      	adds	r5, r2, r3
 8007410:	42ac      	cmp	r4, r5
 8007412:	d101      	bne.n	8007418 <__sfputs_r+0x12>
 8007414:	2000      	movs	r0, #0
 8007416:	e007      	b.n	8007428 <__sfputs_r+0x22>
 8007418:	463a      	mov	r2, r7
 800741a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800741e:	4630      	mov	r0, r6
 8007420:	f7ff ffda 	bl	80073d8 <__sfputc_r>
 8007424:	1c43      	adds	r3, r0, #1
 8007426:	d1f3      	bne.n	8007410 <__sfputs_r+0xa>
 8007428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800742c <_vfiprintf_r>:
 800742c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007430:	460c      	mov	r4, r1
 8007432:	b09d      	sub	sp, #116	; 0x74
 8007434:	4617      	mov	r7, r2
 8007436:	461d      	mov	r5, r3
 8007438:	4606      	mov	r6, r0
 800743a:	b118      	cbz	r0, 8007444 <_vfiprintf_r+0x18>
 800743c:	6983      	ldr	r3, [r0, #24]
 800743e:	b90b      	cbnz	r3, 8007444 <_vfiprintf_r+0x18>
 8007440:	f7fe fdda 	bl	8005ff8 <__sinit>
 8007444:	4b7c      	ldr	r3, [pc, #496]	; (8007638 <_vfiprintf_r+0x20c>)
 8007446:	429c      	cmp	r4, r3
 8007448:	d158      	bne.n	80074fc <_vfiprintf_r+0xd0>
 800744a:	6874      	ldr	r4, [r6, #4]
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	0718      	lsls	r0, r3, #28
 8007450:	d55e      	bpl.n	8007510 <_vfiprintf_r+0xe4>
 8007452:	6923      	ldr	r3, [r4, #16]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d05b      	beq.n	8007510 <_vfiprintf_r+0xe4>
 8007458:	2300      	movs	r3, #0
 800745a:	9309      	str	r3, [sp, #36]	; 0x24
 800745c:	2320      	movs	r3, #32
 800745e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007462:	2330      	movs	r3, #48	; 0x30
 8007464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007468:	9503      	str	r5, [sp, #12]
 800746a:	f04f 0b01 	mov.w	fp, #1
 800746e:	46b8      	mov	r8, r7
 8007470:	4645      	mov	r5, r8
 8007472:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007476:	b10b      	cbz	r3, 800747c <_vfiprintf_r+0x50>
 8007478:	2b25      	cmp	r3, #37	; 0x25
 800747a:	d154      	bne.n	8007526 <_vfiprintf_r+0xfa>
 800747c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007480:	d00b      	beq.n	800749a <_vfiprintf_r+0x6e>
 8007482:	4653      	mov	r3, sl
 8007484:	463a      	mov	r2, r7
 8007486:	4621      	mov	r1, r4
 8007488:	4630      	mov	r0, r6
 800748a:	f7ff ffbc 	bl	8007406 <__sfputs_r>
 800748e:	3001      	adds	r0, #1
 8007490:	f000 80c2 	beq.w	8007618 <_vfiprintf_r+0x1ec>
 8007494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007496:	4453      	add	r3, sl
 8007498:	9309      	str	r3, [sp, #36]	; 0x24
 800749a:	f898 3000 	ldrb.w	r3, [r8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 80ba 	beq.w	8007618 <_vfiprintf_r+0x1ec>
 80074a4:	2300      	movs	r3, #0
 80074a6:	f04f 32ff 	mov.w	r2, #4294967295
 80074aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074ae:	9304      	str	r3, [sp, #16]
 80074b0:	9307      	str	r3, [sp, #28]
 80074b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074b6:	931a      	str	r3, [sp, #104]	; 0x68
 80074b8:	46a8      	mov	r8, r5
 80074ba:	2205      	movs	r2, #5
 80074bc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80074c0:	485e      	ldr	r0, [pc, #376]	; (800763c <_vfiprintf_r+0x210>)
 80074c2:	f7f8 fe95 	bl	80001f0 <memchr>
 80074c6:	9b04      	ldr	r3, [sp, #16]
 80074c8:	bb78      	cbnz	r0, 800752a <_vfiprintf_r+0xfe>
 80074ca:	06d9      	lsls	r1, r3, #27
 80074cc:	bf44      	itt	mi
 80074ce:	2220      	movmi	r2, #32
 80074d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074d4:	071a      	lsls	r2, r3, #28
 80074d6:	bf44      	itt	mi
 80074d8:	222b      	movmi	r2, #43	; 0x2b
 80074da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074de:	782a      	ldrb	r2, [r5, #0]
 80074e0:	2a2a      	cmp	r2, #42	; 0x2a
 80074e2:	d02a      	beq.n	800753a <_vfiprintf_r+0x10e>
 80074e4:	9a07      	ldr	r2, [sp, #28]
 80074e6:	46a8      	mov	r8, r5
 80074e8:	2000      	movs	r0, #0
 80074ea:	250a      	movs	r5, #10
 80074ec:	4641      	mov	r1, r8
 80074ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074f2:	3b30      	subs	r3, #48	; 0x30
 80074f4:	2b09      	cmp	r3, #9
 80074f6:	d969      	bls.n	80075cc <_vfiprintf_r+0x1a0>
 80074f8:	b360      	cbz	r0, 8007554 <_vfiprintf_r+0x128>
 80074fa:	e024      	b.n	8007546 <_vfiprintf_r+0x11a>
 80074fc:	4b50      	ldr	r3, [pc, #320]	; (8007640 <_vfiprintf_r+0x214>)
 80074fe:	429c      	cmp	r4, r3
 8007500:	d101      	bne.n	8007506 <_vfiprintf_r+0xda>
 8007502:	68b4      	ldr	r4, [r6, #8]
 8007504:	e7a2      	b.n	800744c <_vfiprintf_r+0x20>
 8007506:	4b4f      	ldr	r3, [pc, #316]	; (8007644 <_vfiprintf_r+0x218>)
 8007508:	429c      	cmp	r4, r3
 800750a:	bf08      	it	eq
 800750c:	68f4      	ldreq	r4, [r6, #12]
 800750e:	e79d      	b.n	800744c <_vfiprintf_r+0x20>
 8007510:	4621      	mov	r1, r4
 8007512:	4630      	mov	r0, r6
 8007514:	f000 f978 	bl	8007808 <__swsetup_r>
 8007518:	2800      	cmp	r0, #0
 800751a:	d09d      	beq.n	8007458 <_vfiprintf_r+0x2c>
 800751c:	f04f 30ff 	mov.w	r0, #4294967295
 8007520:	b01d      	add	sp, #116	; 0x74
 8007522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007526:	46a8      	mov	r8, r5
 8007528:	e7a2      	b.n	8007470 <_vfiprintf_r+0x44>
 800752a:	4a44      	ldr	r2, [pc, #272]	; (800763c <_vfiprintf_r+0x210>)
 800752c:	1a80      	subs	r0, r0, r2
 800752e:	fa0b f000 	lsl.w	r0, fp, r0
 8007532:	4318      	orrs	r0, r3
 8007534:	9004      	str	r0, [sp, #16]
 8007536:	4645      	mov	r5, r8
 8007538:	e7be      	b.n	80074b8 <_vfiprintf_r+0x8c>
 800753a:	9a03      	ldr	r2, [sp, #12]
 800753c:	1d11      	adds	r1, r2, #4
 800753e:	6812      	ldr	r2, [r2, #0]
 8007540:	9103      	str	r1, [sp, #12]
 8007542:	2a00      	cmp	r2, #0
 8007544:	db01      	blt.n	800754a <_vfiprintf_r+0x11e>
 8007546:	9207      	str	r2, [sp, #28]
 8007548:	e004      	b.n	8007554 <_vfiprintf_r+0x128>
 800754a:	4252      	negs	r2, r2
 800754c:	f043 0302 	orr.w	r3, r3, #2
 8007550:	9207      	str	r2, [sp, #28]
 8007552:	9304      	str	r3, [sp, #16]
 8007554:	f898 3000 	ldrb.w	r3, [r8]
 8007558:	2b2e      	cmp	r3, #46	; 0x2e
 800755a:	d10e      	bne.n	800757a <_vfiprintf_r+0x14e>
 800755c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007560:	2b2a      	cmp	r3, #42	; 0x2a
 8007562:	d138      	bne.n	80075d6 <_vfiprintf_r+0x1aa>
 8007564:	9b03      	ldr	r3, [sp, #12]
 8007566:	1d1a      	adds	r2, r3, #4
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	9203      	str	r2, [sp, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	bfb8      	it	lt
 8007570:	f04f 33ff 	movlt.w	r3, #4294967295
 8007574:	f108 0802 	add.w	r8, r8, #2
 8007578:	9305      	str	r3, [sp, #20]
 800757a:	4d33      	ldr	r5, [pc, #204]	; (8007648 <_vfiprintf_r+0x21c>)
 800757c:	f898 1000 	ldrb.w	r1, [r8]
 8007580:	2203      	movs	r2, #3
 8007582:	4628      	mov	r0, r5
 8007584:	f7f8 fe34 	bl	80001f0 <memchr>
 8007588:	b140      	cbz	r0, 800759c <_vfiprintf_r+0x170>
 800758a:	2340      	movs	r3, #64	; 0x40
 800758c:	1b40      	subs	r0, r0, r5
 800758e:	fa03 f000 	lsl.w	r0, r3, r0
 8007592:	9b04      	ldr	r3, [sp, #16]
 8007594:	4303      	orrs	r3, r0
 8007596:	f108 0801 	add.w	r8, r8, #1
 800759a:	9304      	str	r3, [sp, #16]
 800759c:	f898 1000 	ldrb.w	r1, [r8]
 80075a0:	482a      	ldr	r0, [pc, #168]	; (800764c <_vfiprintf_r+0x220>)
 80075a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075a6:	2206      	movs	r2, #6
 80075a8:	f108 0701 	add.w	r7, r8, #1
 80075ac:	f7f8 fe20 	bl	80001f0 <memchr>
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d037      	beq.n	8007624 <_vfiprintf_r+0x1f8>
 80075b4:	4b26      	ldr	r3, [pc, #152]	; (8007650 <_vfiprintf_r+0x224>)
 80075b6:	bb1b      	cbnz	r3, 8007600 <_vfiprintf_r+0x1d4>
 80075b8:	9b03      	ldr	r3, [sp, #12]
 80075ba:	3307      	adds	r3, #7
 80075bc:	f023 0307 	bic.w	r3, r3, #7
 80075c0:	3308      	adds	r3, #8
 80075c2:	9303      	str	r3, [sp, #12]
 80075c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c6:	444b      	add	r3, r9
 80075c8:	9309      	str	r3, [sp, #36]	; 0x24
 80075ca:	e750      	b.n	800746e <_vfiprintf_r+0x42>
 80075cc:	fb05 3202 	mla	r2, r5, r2, r3
 80075d0:	2001      	movs	r0, #1
 80075d2:	4688      	mov	r8, r1
 80075d4:	e78a      	b.n	80074ec <_vfiprintf_r+0xc0>
 80075d6:	2300      	movs	r3, #0
 80075d8:	f108 0801 	add.w	r8, r8, #1
 80075dc:	9305      	str	r3, [sp, #20]
 80075de:	4619      	mov	r1, r3
 80075e0:	250a      	movs	r5, #10
 80075e2:	4640      	mov	r0, r8
 80075e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075e8:	3a30      	subs	r2, #48	; 0x30
 80075ea:	2a09      	cmp	r2, #9
 80075ec:	d903      	bls.n	80075f6 <_vfiprintf_r+0x1ca>
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d0c3      	beq.n	800757a <_vfiprintf_r+0x14e>
 80075f2:	9105      	str	r1, [sp, #20]
 80075f4:	e7c1      	b.n	800757a <_vfiprintf_r+0x14e>
 80075f6:	fb05 2101 	mla	r1, r5, r1, r2
 80075fa:	2301      	movs	r3, #1
 80075fc:	4680      	mov	r8, r0
 80075fe:	e7f0      	b.n	80075e2 <_vfiprintf_r+0x1b6>
 8007600:	ab03      	add	r3, sp, #12
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	4622      	mov	r2, r4
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <_vfiprintf_r+0x228>)
 8007608:	a904      	add	r1, sp, #16
 800760a:	4630      	mov	r0, r6
 800760c:	f7fc f998 	bl	8003940 <_printf_float>
 8007610:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007614:	4681      	mov	r9, r0
 8007616:	d1d5      	bne.n	80075c4 <_vfiprintf_r+0x198>
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	065b      	lsls	r3, r3, #25
 800761c:	f53f af7e 	bmi.w	800751c <_vfiprintf_r+0xf0>
 8007620:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007622:	e77d      	b.n	8007520 <_vfiprintf_r+0xf4>
 8007624:	ab03      	add	r3, sp, #12
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	4622      	mov	r2, r4
 800762a:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <_vfiprintf_r+0x228>)
 800762c:	a904      	add	r1, sp, #16
 800762e:	4630      	mov	r0, r6
 8007630:	f7fc fc3c 	bl	8003eac <_printf_i>
 8007634:	e7ec      	b.n	8007610 <_vfiprintf_r+0x1e4>
 8007636:	bf00      	nop
 8007638:	08007da0 	.word	0x08007da0
 800763c:	08007eec 	.word	0x08007eec
 8007640:	08007dc0 	.word	0x08007dc0
 8007644:	08007d80 	.word	0x08007d80
 8007648:	08007ef2 	.word	0x08007ef2
 800764c:	08007ef6 	.word	0x08007ef6
 8007650:	08003941 	.word	0x08003941
 8007654:	08007407 	.word	0x08007407

08007658 <_sbrk_r>:
 8007658:	b538      	push	{r3, r4, r5, lr}
 800765a:	4c06      	ldr	r4, [pc, #24]	; (8007674 <_sbrk_r+0x1c>)
 800765c:	2300      	movs	r3, #0
 800765e:	4605      	mov	r5, r0
 8007660:	4608      	mov	r0, r1
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	f7fa f906 	bl	8001874 <_sbrk>
 8007668:	1c43      	adds	r3, r0, #1
 800766a:	d102      	bne.n	8007672 <_sbrk_r+0x1a>
 800766c:	6823      	ldr	r3, [r4, #0]
 800766e:	b103      	cbz	r3, 8007672 <_sbrk_r+0x1a>
 8007670:	602b      	str	r3, [r5, #0]
 8007672:	bd38      	pop	{r3, r4, r5, pc}
 8007674:	200015fc 	.word	0x200015fc

08007678 <__sread>:
 8007678:	b510      	push	{r4, lr}
 800767a:	460c      	mov	r4, r1
 800767c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007680:	f000 faa8 	bl	8007bd4 <_read_r>
 8007684:	2800      	cmp	r0, #0
 8007686:	bfab      	itete	ge
 8007688:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800768a:	89a3      	ldrhlt	r3, [r4, #12]
 800768c:	181b      	addge	r3, r3, r0
 800768e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007692:	bfac      	ite	ge
 8007694:	6563      	strge	r3, [r4, #84]	; 0x54
 8007696:	81a3      	strhlt	r3, [r4, #12]
 8007698:	bd10      	pop	{r4, pc}

0800769a <__swrite>:
 800769a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800769e:	461f      	mov	r7, r3
 80076a0:	898b      	ldrh	r3, [r1, #12]
 80076a2:	05db      	lsls	r3, r3, #23
 80076a4:	4605      	mov	r5, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	4616      	mov	r6, r2
 80076aa:	d505      	bpl.n	80076b8 <__swrite+0x1e>
 80076ac:	2302      	movs	r3, #2
 80076ae:	2200      	movs	r2, #0
 80076b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076b4:	f000 f9d6 	bl	8007a64 <_lseek_r>
 80076b8:	89a3      	ldrh	r3, [r4, #12]
 80076ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076c2:	81a3      	strh	r3, [r4, #12]
 80076c4:	4632      	mov	r2, r6
 80076c6:	463b      	mov	r3, r7
 80076c8:	4628      	mov	r0, r5
 80076ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076ce:	f000 b889 	b.w	80077e4 <_write_r>

080076d2 <__sseek>:
 80076d2:	b510      	push	{r4, lr}
 80076d4:	460c      	mov	r4, r1
 80076d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076da:	f000 f9c3 	bl	8007a64 <_lseek_r>
 80076de:	1c43      	adds	r3, r0, #1
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	bf15      	itete	ne
 80076e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80076e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80076ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80076ee:	81a3      	strheq	r3, [r4, #12]
 80076f0:	bf18      	it	ne
 80076f2:	81a3      	strhne	r3, [r4, #12]
 80076f4:	bd10      	pop	{r4, pc}

080076f6 <__sclose>:
 80076f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fa:	f000 b8f3 	b.w	80078e4 <_close_r>

080076fe <strncmp>:
 80076fe:	b510      	push	{r4, lr}
 8007700:	b16a      	cbz	r2, 800771e <strncmp+0x20>
 8007702:	3901      	subs	r1, #1
 8007704:	1884      	adds	r4, r0, r2
 8007706:	f810 3b01 	ldrb.w	r3, [r0], #1
 800770a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800770e:	4293      	cmp	r3, r2
 8007710:	d103      	bne.n	800771a <strncmp+0x1c>
 8007712:	42a0      	cmp	r0, r4
 8007714:	d001      	beq.n	800771a <strncmp+0x1c>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1f5      	bne.n	8007706 <strncmp+0x8>
 800771a:	1a98      	subs	r0, r3, r2
 800771c:	bd10      	pop	{r4, pc}
 800771e:	4610      	mov	r0, r2
 8007720:	e7fc      	b.n	800771c <strncmp+0x1e>
	...

08007724 <__swbuf_r>:
 8007724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007726:	460e      	mov	r6, r1
 8007728:	4614      	mov	r4, r2
 800772a:	4605      	mov	r5, r0
 800772c:	b118      	cbz	r0, 8007736 <__swbuf_r+0x12>
 800772e:	6983      	ldr	r3, [r0, #24]
 8007730:	b90b      	cbnz	r3, 8007736 <__swbuf_r+0x12>
 8007732:	f7fe fc61 	bl	8005ff8 <__sinit>
 8007736:	4b21      	ldr	r3, [pc, #132]	; (80077bc <__swbuf_r+0x98>)
 8007738:	429c      	cmp	r4, r3
 800773a:	d12a      	bne.n	8007792 <__swbuf_r+0x6e>
 800773c:	686c      	ldr	r4, [r5, #4]
 800773e:	69a3      	ldr	r3, [r4, #24]
 8007740:	60a3      	str	r3, [r4, #8]
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	071a      	lsls	r2, r3, #28
 8007746:	d52e      	bpl.n	80077a6 <__swbuf_r+0x82>
 8007748:	6923      	ldr	r3, [r4, #16]
 800774a:	b363      	cbz	r3, 80077a6 <__swbuf_r+0x82>
 800774c:	6923      	ldr	r3, [r4, #16]
 800774e:	6820      	ldr	r0, [r4, #0]
 8007750:	1ac0      	subs	r0, r0, r3
 8007752:	6963      	ldr	r3, [r4, #20]
 8007754:	b2f6      	uxtb	r6, r6
 8007756:	4283      	cmp	r3, r0
 8007758:	4637      	mov	r7, r6
 800775a:	dc04      	bgt.n	8007766 <__swbuf_r+0x42>
 800775c:	4621      	mov	r1, r4
 800775e:	4628      	mov	r0, r5
 8007760:	f000 f956 	bl	8007a10 <_fflush_r>
 8007764:	bb28      	cbnz	r0, 80077b2 <__swbuf_r+0x8e>
 8007766:	68a3      	ldr	r3, [r4, #8]
 8007768:	3b01      	subs	r3, #1
 800776a:	60a3      	str	r3, [r4, #8]
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	6022      	str	r2, [r4, #0]
 8007772:	701e      	strb	r6, [r3, #0]
 8007774:	6963      	ldr	r3, [r4, #20]
 8007776:	3001      	adds	r0, #1
 8007778:	4283      	cmp	r3, r0
 800777a:	d004      	beq.n	8007786 <__swbuf_r+0x62>
 800777c:	89a3      	ldrh	r3, [r4, #12]
 800777e:	07db      	lsls	r3, r3, #31
 8007780:	d519      	bpl.n	80077b6 <__swbuf_r+0x92>
 8007782:	2e0a      	cmp	r6, #10
 8007784:	d117      	bne.n	80077b6 <__swbuf_r+0x92>
 8007786:	4621      	mov	r1, r4
 8007788:	4628      	mov	r0, r5
 800778a:	f000 f941 	bl	8007a10 <_fflush_r>
 800778e:	b190      	cbz	r0, 80077b6 <__swbuf_r+0x92>
 8007790:	e00f      	b.n	80077b2 <__swbuf_r+0x8e>
 8007792:	4b0b      	ldr	r3, [pc, #44]	; (80077c0 <__swbuf_r+0x9c>)
 8007794:	429c      	cmp	r4, r3
 8007796:	d101      	bne.n	800779c <__swbuf_r+0x78>
 8007798:	68ac      	ldr	r4, [r5, #8]
 800779a:	e7d0      	b.n	800773e <__swbuf_r+0x1a>
 800779c:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <__swbuf_r+0xa0>)
 800779e:	429c      	cmp	r4, r3
 80077a0:	bf08      	it	eq
 80077a2:	68ec      	ldreq	r4, [r5, #12]
 80077a4:	e7cb      	b.n	800773e <__swbuf_r+0x1a>
 80077a6:	4621      	mov	r1, r4
 80077a8:	4628      	mov	r0, r5
 80077aa:	f000 f82d 	bl	8007808 <__swsetup_r>
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d0cc      	beq.n	800774c <__swbuf_r+0x28>
 80077b2:	f04f 37ff 	mov.w	r7, #4294967295
 80077b6:	4638      	mov	r0, r7
 80077b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ba:	bf00      	nop
 80077bc:	08007da0 	.word	0x08007da0
 80077c0:	08007dc0 	.word	0x08007dc0
 80077c4:	08007d80 	.word	0x08007d80

080077c8 <__ascii_wctomb>:
 80077c8:	b149      	cbz	r1, 80077de <__ascii_wctomb+0x16>
 80077ca:	2aff      	cmp	r2, #255	; 0xff
 80077cc:	bf85      	ittet	hi
 80077ce:	238a      	movhi	r3, #138	; 0x8a
 80077d0:	6003      	strhi	r3, [r0, #0]
 80077d2:	700a      	strbls	r2, [r1, #0]
 80077d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80077d8:	bf98      	it	ls
 80077da:	2001      	movls	r0, #1
 80077dc:	4770      	bx	lr
 80077de:	4608      	mov	r0, r1
 80077e0:	4770      	bx	lr
	...

080077e4 <_write_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4c07      	ldr	r4, [pc, #28]	; (8007804 <_write_r+0x20>)
 80077e8:	4605      	mov	r5, r0
 80077ea:	4608      	mov	r0, r1
 80077ec:	4611      	mov	r1, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	6022      	str	r2, [r4, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f7f9 ffed 	bl	80017d2 <_write>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_write_r+0x1e>
 80077fc:	6823      	ldr	r3, [r4, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_write_r+0x1e>
 8007800:	602b      	str	r3, [r5, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	200015fc 	.word	0x200015fc

08007808 <__swsetup_r>:
 8007808:	4b32      	ldr	r3, [pc, #200]	; (80078d4 <__swsetup_r+0xcc>)
 800780a:	b570      	push	{r4, r5, r6, lr}
 800780c:	681d      	ldr	r5, [r3, #0]
 800780e:	4606      	mov	r6, r0
 8007810:	460c      	mov	r4, r1
 8007812:	b125      	cbz	r5, 800781e <__swsetup_r+0x16>
 8007814:	69ab      	ldr	r3, [r5, #24]
 8007816:	b913      	cbnz	r3, 800781e <__swsetup_r+0x16>
 8007818:	4628      	mov	r0, r5
 800781a:	f7fe fbed 	bl	8005ff8 <__sinit>
 800781e:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <__swsetup_r+0xd0>)
 8007820:	429c      	cmp	r4, r3
 8007822:	d10f      	bne.n	8007844 <__swsetup_r+0x3c>
 8007824:	686c      	ldr	r4, [r5, #4]
 8007826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800782a:	b29a      	uxth	r2, r3
 800782c:	0715      	lsls	r5, r2, #28
 800782e:	d42c      	bmi.n	800788a <__swsetup_r+0x82>
 8007830:	06d0      	lsls	r0, r2, #27
 8007832:	d411      	bmi.n	8007858 <__swsetup_r+0x50>
 8007834:	2209      	movs	r2, #9
 8007836:	6032      	str	r2, [r6, #0]
 8007838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	f04f 30ff 	mov.w	r0, #4294967295
 8007842:	e03e      	b.n	80078c2 <__swsetup_r+0xba>
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <__swsetup_r+0xd4>)
 8007846:	429c      	cmp	r4, r3
 8007848:	d101      	bne.n	800784e <__swsetup_r+0x46>
 800784a:	68ac      	ldr	r4, [r5, #8]
 800784c:	e7eb      	b.n	8007826 <__swsetup_r+0x1e>
 800784e:	4b24      	ldr	r3, [pc, #144]	; (80078e0 <__swsetup_r+0xd8>)
 8007850:	429c      	cmp	r4, r3
 8007852:	bf08      	it	eq
 8007854:	68ec      	ldreq	r4, [r5, #12]
 8007856:	e7e6      	b.n	8007826 <__swsetup_r+0x1e>
 8007858:	0751      	lsls	r1, r2, #29
 800785a:	d512      	bpl.n	8007882 <__swsetup_r+0x7a>
 800785c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800785e:	b141      	cbz	r1, 8007872 <__swsetup_r+0x6a>
 8007860:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007864:	4299      	cmp	r1, r3
 8007866:	d002      	beq.n	800786e <__swsetup_r+0x66>
 8007868:	4630      	mov	r0, r6
 800786a:	f7ff fbbb 	bl	8006fe4 <_free_r>
 800786e:	2300      	movs	r3, #0
 8007870:	6363      	str	r3, [r4, #52]	; 0x34
 8007872:	89a3      	ldrh	r3, [r4, #12]
 8007874:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007878:	81a3      	strh	r3, [r4, #12]
 800787a:	2300      	movs	r3, #0
 800787c:	6063      	str	r3, [r4, #4]
 800787e:	6923      	ldr	r3, [r4, #16]
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	89a3      	ldrh	r3, [r4, #12]
 8007884:	f043 0308 	orr.w	r3, r3, #8
 8007888:	81a3      	strh	r3, [r4, #12]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	b94b      	cbnz	r3, 80078a2 <__swsetup_r+0x9a>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007894:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007898:	d003      	beq.n	80078a2 <__swsetup_r+0x9a>
 800789a:	4621      	mov	r1, r4
 800789c:	4630      	mov	r0, r6
 800789e:	f000 f917 	bl	8007ad0 <__smakebuf_r>
 80078a2:	89a2      	ldrh	r2, [r4, #12]
 80078a4:	f012 0301 	ands.w	r3, r2, #1
 80078a8:	d00c      	beq.n	80078c4 <__swsetup_r+0xbc>
 80078aa:	2300      	movs	r3, #0
 80078ac:	60a3      	str	r3, [r4, #8]
 80078ae:	6963      	ldr	r3, [r4, #20]
 80078b0:	425b      	negs	r3, r3
 80078b2:	61a3      	str	r3, [r4, #24]
 80078b4:	6923      	ldr	r3, [r4, #16]
 80078b6:	b953      	cbnz	r3, 80078ce <__swsetup_r+0xc6>
 80078b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80078c0:	d1ba      	bne.n	8007838 <__swsetup_r+0x30>
 80078c2:	bd70      	pop	{r4, r5, r6, pc}
 80078c4:	0792      	lsls	r2, r2, #30
 80078c6:	bf58      	it	pl
 80078c8:	6963      	ldrpl	r3, [r4, #20]
 80078ca:	60a3      	str	r3, [r4, #8]
 80078cc:	e7f2      	b.n	80078b4 <__swsetup_r+0xac>
 80078ce:	2000      	movs	r0, #0
 80078d0:	e7f7      	b.n	80078c2 <__swsetup_r+0xba>
 80078d2:	bf00      	nop
 80078d4:	2000000c 	.word	0x2000000c
 80078d8:	08007da0 	.word	0x08007da0
 80078dc:	08007dc0 	.word	0x08007dc0
 80078e0:	08007d80 	.word	0x08007d80

080078e4 <_close_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	4c06      	ldr	r4, [pc, #24]	; (8007900 <_close_r+0x1c>)
 80078e8:	2300      	movs	r3, #0
 80078ea:	4605      	mov	r5, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	6023      	str	r3, [r4, #0]
 80078f0:	f7f9 ff8b 	bl	800180a <_close>
 80078f4:	1c43      	adds	r3, r0, #1
 80078f6:	d102      	bne.n	80078fe <_close_r+0x1a>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	b103      	cbz	r3, 80078fe <_close_r+0x1a>
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	200015fc 	.word	0x200015fc

08007904 <__sflush_r>:
 8007904:	898a      	ldrh	r2, [r1, #12]
 8007906:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800790a:	4605      	mov	r5, r0
 800790c:	0710      	lsls	r0, r2, #28
 800790e:	460c      	mov	r4, r1
 8007910:	d458      	bmi.n	80079c4 <__sflush_r+0xc0>
 8007912:	684b      	ldr	r3, [r1, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	dc05      	bgt.n	8007924 <__sflush_r+0x20>
 8007918:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800791a:	2b00      	cmp	r3, #0
 800791c:	dc02      	bgt.n	8007924 <__sflush_r+0x20>
 800791e:	2000      	movs	r0, #0
 8007920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007926:	2e00      	cmp	r6, #0
 8007928:	d0f9      	beq.n	800791e <__sflush_r+0x1a>
 800792a:	2300      	movs	r3, #0
 800792c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007930:	682f      	ldr	r7, [r5, #0]
 8007932:	6a21      	ldr	r1, [r4, #32]
 8007934:	602b      	str	r3, [r5, #0]
 8007936:	d032      	beq.n	800799e <__sflush_r+0x9a>
 8007938:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800793a:	89a3      	ldrh	r3, [r4, #12]
 800793c:	075a      	lsls	r2, r3, #29
 800793e:	d505      	bpl.n	800794c <__sflush_r+0x48>
 8007940:	6863      	ldr	r3, [r4, #4]
 8007942:	1ac0      	subs	r0, r0, r3
 8007944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007946:	b10b      	cbz	r3, 800794c <__sflush_r+0x48>
 8007948:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800794a:	1ac0      	subs	r0, r0, r3
 800794c:	2300      	movs	r3, #0
 800794e:	4602      	mov	r2, r0
 8007950:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007952:	6a21      	ldr	r1, [r4, #32]
 8007954:	4628      	mov	r0, r5
 8007956:	47b0      	blx	r6
 8007958:	1c43      	adds	r3, r0, #1
 800795a:	89a3      	ldrh	r3, [r4, #12]
 800795c:	d106      	bne.n	800796c <__sflush_r+0x68>
 800795e:	6829      	ldr	r1, [r5, #0]
 8007960:	291d      	cmp	r1, #29
 8007962:	d848      	bhi.n	80079f6 <__sflush_r+0xf2>
 8007964:	4a29      	ldr	r2, [pc, #164]	; (8007a0c <__sflush_r+0x108>)
 8007966:	40ca      	lsrs	r2, r1
 8007968:	07d6      	lsls	r6, r2, #31
 800796a:	d544      	bpl.n	80079f6 <__sflush_r+0xf2>
 800796c:	2200      	movs	r2, #0
 800796e:	6062      	str	r2, [r4, #4]
 8007970:	04d9      	lsls	r1, r3, #19
 8007972:	6922      	ldr	r2, [r4, #16]
 8007974:	6022      	str	r2, [r4, #0]
 8007976:	d504      	bpl.n	8007982 <__sflush_r+0x7e>
 8007978:	1c42      	adds	r2, r0, #1
 800797a:	d101      	bne.n	8007980 <__sflush_r+0x7c>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b903      	cbnz	r3, 8007982 <__sflush_r+0x7e>
 8007980:	6560      	str	r0, [r4, #84]	; 0x54
 8007982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007984:	602f      	str	r7, [r5, #0]
 8007986:	2900      	cmp	r1, #0
 8007988:	d0c9      	beq.n	800791e <__sflush_r+0x1a>
 800798a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800798e:	4299      	cmp	r1, r3
 8007990:	d002      	beq.n	8007998 <__sflush_r+0x94>
 8007992:	4628      	mov	r0, r5
 8007994:	f7ff fb26 	bl	8006fe4 <_free_r>
 8007998:	2000      	movs	r0, #0
 800799a:	6360      	str	r0, [r4, #52]	; 0x34
 800799c:	e7c0      	b.n	8007920 <__sflush_r+0x1c>
 800799e:	2301      	movs	r3, #1
 80079a0:	4628      	mov	r0, r5
 80079a2:	47b0      	blx	r6
 80079a4:	1c41      	adds	r1, r0, #1
 80079a6:	d1c8      	bne.n	800793a <__sflush_r+0x36>
 80079a8:	682b      	ldr	r3, [r5, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d0c5      	beq.n	800793a <__sflush_r+0x36>
 80079ae:	2b1d      	cmp	r3, #29
 80079b0:	d001      	beq.n	80079b6 <__sflush_r+0xb2>
 80079b2:	2b16      	cmp	r3, #22
 80079b4:	d101      	bne.n	80079ba <__sflush_r+0xb6>
 80079b6:	602f      	str	r7, [r5, #0]
 80079b8:	e7b1      	b.n	800791e <__sflush_r+0x1a>
 80079ba:	89a3      	ldrh	r3, [r4, #12]
 80079bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079c0:	81a3      	strh	r3, [r4, #12]
 80079c2:	e7ad      	b.n	8007920 <__sflush_r+0x1c>
 80079c4:	690f      	ldr	r7, [r1, #16]
 80079c6:	2f00      	cmp	r7, #0
 80079c8:	d0a9      	beq.n	800791e <__sflush_r+0x1a>
 80079ca:	0793      	lsls	r3, r2, #30
 80079cc:	680e      	ldr	r6, [r1, #0]
 80079ce:	bf08      	it	eq
 80079d0:	694b      	ldreq	r3, [r1, #20]
 80079d2:	600f      	str	r7, [r1, #0]
 80079d4:	bf18      	it	ne
 80079d6:	2300      	movne	r3, #0
 80079d8:	eba6 0807 	sub.w	r8, r6, r7
 80079dc:	608b      	str	r3, [r1, #8]
 80079de:	f1b8 0f00 	cmp.w	r8, #0
 80079e2:	dd9c      	ble.n	800791e <__sflush_r+0x1a>
 80079e4:	4643      	mov	r3, r8
 80079e6:	463a      	mov	r2, r7
 80079e8:	6a21      	ldr	r1, [r4, #32]
 80079ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b0      	blx	r6
 80079f0:	2800      	cmp	r0, #0
 80079f2:	dc06      	bgt.n	8007a02 <__sflush_r+0xfe>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079fa:	81a3      	strh	r3, [r4, #12]
 80079fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007a00:	e78e      	b.n	8007920 <__sflush_r+0x1c>
 8007a02:	4407      	add	r7, r0
 8007a04:	eba8 0800 	sub.w	r8, r8, r0
 8007a08:	e7e9      	b.n	80079de <__sflush_r+0xda>
 8007a0a:	bf00      	nop
 8007a0c:	20400001 	.word	0x20400001

08007a10 <_fflush_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	690b      	ldr	r3, [r1, #16]
 8007a14:	4605      	mov	r5, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	b1db      	cbz	r3, 8007a52 <_fflush_r+0x42>
 8007a1a:	b118      	cbz	r0, 8007a24 <_fflush_r+0x14>
 8007a1c:	6983      	ldr	r3, [r0, #24]
 8007a1e:	b90b      	cbnz	r3, 8007a24 <_fflush_r+0x14>
 8007a20:	f7fe faea 	bl	8005ff8 <__sinit>
 8007a24:	4b0c      	ldr	r3, [pc, #48]	; (8007a58 <_fflush_r+0x48>)
 8007a26:	429c      	cmp	r4, r3
 8007a28:	d109      	bne.n	8007a3e <_fflush_r+0x2e>
 8007a2a:	686c      	ldr	r4, [r5, #4]
 8007a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a30:	b17b      	cbz	r3, 8007a52 <_fflush_r+0x42>
 8007a32:	4621      	mov	r1, r4
 8007a34:	4628      	mov	r0, r5
 8007a36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a3a:	f7ff bf63 	b.w	8007904 <__sflush_r>
 8007a3e:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <_fflush_r+0x4c>)
 8007a40:	429c      	cmp	r4, r3
 8007a42:	d101      	bne.n	8007a48 <_fflush_r+0x38>
 8007a44:	68ac      	ldr	r4, [r5, #8]
 8007a46:	e7f1      	b.n	8007a2c <_fflush_r+0x1c>
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <_fflush_r+0x50>)
 8007a4a:	429c      	cmp	r4, r3
 8007a4c:	bf08      	it	eq
 8007a4e:	68ec      	ldreq	r4, [r5, #12]
 8007a50:	e7ec      	b.n	8007a2c <_fflush_r+0x1c>
 8007a52:	2000      	movs	r0, #0
 8007a54:	bd38      	pop	{r3, r4, r5, pc}
 8007a56:	bf00      	nop
 8007a58:	08007da0 	.word	0x08007da0
 8007a5c:	08007dc0 	.word	0x08007dc0
 8007a60:	08007d80 	.word	0x08007d80

08007a64 <_lseek_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4c07      	ldr	r4, [pc, #28]	; (8007a84 <_lseek_r+0x20>)
 8007a68:	4605      	mov	r5, r0
 8007a6a:	4608      	mov	r0, r1
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	2200      	movs	r2, #0
 8007a70:	6022      	str	r2, [r4, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	f7f9 fef0 	bl	8001858 <_lseek>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_lseek_r+0x1e>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_lseek_r+0x1e>
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	200015fc 	.word	0x200015fc

08007a88 <__swhatbuf_r>:
 8007a88:	b570      	push	{r4, r5, r6, lr}
 8007a8a:	460e      	mov	r6, r1
 8007a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a90:	2900      	cmp	r1, #0
 8007a92:	b096      	sub	sp, #88	; 0x58
 8007a94:	4614      	mov	r4, r2
 8007a96:	461d      	mov	r5, r3
 8007a98:	da07      	bge.n	8007aaa <__swhatbuf_r+0x22>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	602b      	str	r3, [r5, #0]
 8007a9e:	89b3      	ldrh	r3, [r6, #12]
 8007aa0:	061a      	lsls	r2, r3, #24
 8007aa2:	d410      	bmi.n	8007ac6 <__swhatbuf_r+0x3e>
 8007aa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aa8:	e00e      	b.n	8007ac8 <__swhatbuf_r+0x40>
 8007aaa:	466a      	mov	r2, sp
 8007aac:	f000 f8a4 	bl	8007bf8 <_fstat_r>
 8007ab0:	2800      	cmp	r0, #0
 8007ab2:	dbf2      	blt.n	8007a9a <__swhatbuf_r+0x12>
 8007ab4:	9a01      	ldr	r2, [sp, #4]
 8007ab6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007aba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007abe:	425a      	negs	r2, r3
 8007ac0:	415a      	adcs	r2, r3
 8007ac2:	602a      	str	r2, [r5, #0]
 8007ac4:	e7ee      	b.n	8007aa4 <__swhatbuf_r+0x1c>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	2000      	movs	r0, #0
 8007aca:	6023      	str	r3, [r4, #0]
 8007acc:	b016      	add	sp, #88	; 0x58
 8007ace:	bd70      	pop	{r4, r5, r6, pc}

08007ad0 <__smakebuf_r>:
 8007ad0:	898b      	ldrh	r3, [r1, #12]
 8007ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007ad4:	079d      	lsls	r5, r3, #30
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	460c      	mov	r4, r1
 8007ada:	d507      	bpl.n	8007aec <__smakebuf_r+0x1c>
 8007adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ae0:	6023      	str	r3, [r4, #0]
 8007ae2:	6123      	str	r3, [r4, #16]
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	6163      	str	r3, [r4, #20]
 8007ae8:	b002      	add	sp, #8
 8007aea:	bd70      	pop	{r4, r5, r6, pc}
 8007aec:	ab01      	add	r3, sp, #4
 8007aee:	466a      	mov	r2, sp
 8007af0:	f7ff ffca 	bl	8007a88 <__swhatbuf_r>
 8007af4:	9900      	ldr	r1, [sp, #0]
 8007af6:	4605      	mov	r5, r0
 8007af8:	4630      	mov	r0, r6
 8007afa:	f7ff fac1 	bl	8007080 <_malloc_r>
 8007afe:	b948      	cbnz	r0, 8007b14 <__smakebuf_r+0x44>
 8007b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b04:	059a      	lsls	r2, r3, #22
 8007b06:	d4ef      	bmi.n	8007ae8 <__smakebuf_r+0x18>
 8007b08:	f023 0303 	bic.w	r3, r3, #3
 8007b0c:	f043 0302 	orr.w	r3, r3, #2
 8007b10:	81a3      	strh	r3, [r4, #12]
 8007b12:	e7e3      	b.n	8007adc <__smakebuf_r+0xc>
 8007b14:	4b0d      	ldr	r3, [pc, #52]	; (8007b4c <__smakebuf_r+0x7c>)
 8007b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8007b18:	89a3      	ldrh	r3, [r4, #12]
 8007b1a:	6020      	str	r0, [r4, #0]
 8007b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b20:	81a3      	strh	r3, [r4, #12]
 8007b22:	9b00      	ldr	r3, [sp, #0]
 8007b24:	6163      	str	r3, [r4, #20]
 8007b26:	9b01      	ldr	r3, [sp, #4]
 8007b28:	6120      	str	r0, [r4, #16]
 8007b2a:	b15b      	cbz	r3, 8007b44 <__smakebuf_r+0x74>
 8007b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b30:	4630      	mov	r0, r6
 8007b32:	f000 f873 	bl	8007c1c <_isatty_r>
 8007b36:	b128      	cbz	r0, 8007b44 <__smakebuf_r+0x74>
 8007b38:	89a3      	ldrh	r3, [r4, #12]
 8007b3a:	f023 0303 	bic.w	r3, r3, #3
 8007b3e:	f043 0301 	orr.w	r3, r3, #1
 8007b42:	81a3      	strh	r3, [r4, #12]
 8007b44:	89a3      	ldrh	r3, [r4, #12]
 8007b46:	431d      	orrs	r5, r3
 8007b48:	81a5      	strh	r5, [r4, #12]
 8007b4a:	e7cd      	b.n	8007ae8 <__smakebuf_r+0x18>
 8007b4c:	08005fc1 	.word	0x08005fc1

08007b50 <memmove>:
 8007b50:	4288      	cmp	r0, r1
 8007b52:	b510      	push	{r4, lr}
 8007b54:	eb01 0302 	add.w	r3, r1, r2
 8007b58:	d807      	bhi.n	8007b6a <memmove+0x1a>
 8007b5a:	1e42      	subs	r2, r0, #1
 8007b5c:	4299      	cmp	r1, r3
 8007b5e:	d00a      	beq.n	8007b76 <memmove+0x26>
 8007b60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b64:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007b68:	e7f8      	b.n	8007b5c <memmove+0xc>
 8007b6a:	4283      	cmp	r3, r0
 8007b6c:	d9f5      	bls.n	8007b5a <memmove+0xa>
 8007b6e:	1881      	adds	r1, r0, r2
 8007b70:	1ad2      	subs	r2, r2, r3
 8007b72:	42d3      	cmn	r3, r2
 8007b74:	d100      	bne.n	8007b78 <memmove+0x28>
 8007b76:	bd10      	pop	{r4, pc}
 8007b78:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b7c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007b80:	e7f7      	b.n	8007b72 <memmove+0x22>

08007b82 <__malloc_lock>:
 8007b82:	4770      	bx	lr

08007b84 <__malloc_unlock>:
 8007b84:	4770      	bx	lr

08007b86 <_realloc_r>:
 8007b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b88:	4607      	mov	r7, r0
 8007b8a:	4614      	mov	r4, r2
 8007b8c:	460e      	mov	r6, r1
 8007b8e:	b921      	cbnz	r1, 8007b9a <_realloc_r+0x14>
 8007b90:	4611      	mov	r1, r2
 8007b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b96:	f7ff ba73 	b.w	8007080 <_malloc_r>
 8007b9a:	b922      	cbnz	r2, 8007ba6 <_realloc_r+0x20>
 8007b9c:	f7ff fa22 	bl	8006fe4 <_free_r>
 8007ba0:	4625      	mov	r5, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba6:	f000 f849 	bl	8007c3c <_malloc_usable_size_r>
 8007baa:	42a0      	cmp	r0, r4
 8007bac:	d20f      	bcs.n	8007bce <_realloc_r+0x48>
 8007bae:	4621      	mov	r1, r4
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	f7ff fa65 	bl	8007080 <_malloc_r>
 8007bb6:	4605      	mov	r5, r0
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d0f2      	beq.n	8007ba2 <_realloc_r+0x1c>
 8007bbc:	4631      	mov	r1, r6
 8007bbe:	4622      	mov	r2, r4
 8007bc0:	f7fe fdf8 	bl	80067b4 <memcpy>
 8007bc4:	4631      	mov	r1, r6
 8007bc6:	4638      	mov	r0, r7
 8007bc8:	f7ff fa0c 	bl	8006fe4 <_free_r>
 8007bcc:	e7e9      	b.n	8007ba2 <_realloc_r+0x1c>
 8007bce:	4635      	mov	r5, r6
 8007bd0:	e7e7      	b.n	8007ba2 <_realloc_r+0x1c>
	...

08007bd4 <_read_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4c07      	ldr	r4, [pc, #28]	; (8007bf4 <_read_r+0x20>)
 8007bd8:	4605      	mov	r5, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	6022      	str	r2, [r4, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7f9 fdd8 	bl	8001798 <_read>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_read_r+0x1e>
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_read_r+0x1e>
 8007bf0:	602b      	str	r3, [r5, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	200015fc 	.word	0x200015fc

08007bf8 <_fstat_r>:
 8007bf8:	b538      	push	{r3, r4, r5, lr}
 8007bfa:	4c07      	ldr	r4, [pc, #28]	; (8007c18 <_fstat_r+0x20>)
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	4605      	mov	r5, r0
 8007c00:	4608      	mov	r0, r1
 8007c02:	4611      	mov	r1, r2
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	f7f9 fe0c 	bl	8001822 <_fstat>
 8007c0a:	1c43      	adds	r3, r0, #1
 8007c0c:	d102      	bne.n	8007c14 <_fstat_r+0x1c>
 8007c0e:	6823      	ldr	r3, [r4, #0]
 8007c10:	b103      	cbz	r3, 8007c14 <_fstat_r+0x1c>
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	bd38      	pop	{r3, r4, r5, pc}
 8007c16:	bf00      	nop
 8007c18:	200015fc 	.word	0x200015fc

08007c1c <_isatty_r>:
 8007c1c:	b538      	push	{r3, r4, r5, lr}
 8007c1e:	4c06      	ldr	r4, [pc, #24]	; (8007c38 <_isatty_r+0x1c>)
 8007c20:	2300      	movs	r3, #0
 8007c22:	4605      	mov	r5, r0
 8007c24:	4608      	mov	r0, r1
 8007c26:	6023      	str	r3, [r4, #0]
 8007c28:	f7f9 fe0b 	bl	8001842 <_isatty>
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d102      	bne.n	8007c36 <_isatty_r+0x1a>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	b103      	cbz	r3, 8007c36 <_isatty_r+0x1a>
 8007c34:	602b      	str	r3, [r5, #0]
 8007c36:	bd38      	pop	{r3, r4, r5, pc}
 8007c38:	200015fc 	.word	0x200015fc

08007c3c <_malloc_usable_size_r>:
 8007c3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c40:	1f18      	subs	r0, r3, #4
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bfbc      	itt	lt
 8007c46:	580b      	ldrlt	r3, [r1, r0]
 8007c48:	18c0      	addlt	r0, r0, r3
 8007c4a:	4770      	bx	lr

08007c4c <_init>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr

08007c58 <_fini>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	bf00      	nop
 8007c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5e:	bc08      	pop	{r3}
 8007c60:	469e      	mov	lr, r3
 8007c62:	4770      	bx	lr
