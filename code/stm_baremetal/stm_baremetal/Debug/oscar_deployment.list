
oscar_deployment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009470  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08009610  08009610  00019610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099e8  080099e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099f0  080099f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099f0  080099f0  000199f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099f4  080099f4  000199f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080099f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a8  200001e0  08009bd8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001688  08009bd8  00021688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb42  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e16  00000000  00000000  0002bd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000838  00000000  00000000  0002db68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000750  00000000  00000000  0002e3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018756  00000000  00000000  0002eaf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009625  00000000  00000000  00047246  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009a90c  00000000  00000000  0005086b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000eb177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003524  00000000  00000000  000eb1f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095f8 	.word	0x080095f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	080095f8 	.word	0x080095f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <parseData>:
/* USER CODE END EV */

/**
  * @brief This function handles Hard fault interrupt.
  */
void parseData(byte * parseMsg){
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  byte* frameToken = strtok_r(parseMsg,(byte *)startMarker,&saveptr1);
 8000fa0:	4a1d      	ldr	r2, [pc, #116]	; (8001018 <parseData+0x80>)
 8000fa2:	491e      	ldr	r1, [pc, #120]	; (800101c <parseData+0x84>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f005 fdf1 	bl	8006b8c <strtok_r>
 8000faa:	6178      	str	r0, [r7, #20]
  frameToken = strtok_r(NULL,(byte *)endMarker,&saveptr1); // Now it points to the first frame.
 8000fac:	4a1a      	ldr	r2, [pc, #104]	; (8001018 <parseData+0x80>)
 8000fae:	491c      	ldr	r1, [pc, #112]	; (8001020 <parseData+0x88>)
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f005 fdeb 	bl	8006b8c <strtok_r>
 8000fb6:	6178      	str	r0, [r7, #20]

  int frameIndex = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  byte* frameTokenCopy = frameToken;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	60fb      	str	r3, [r7, #12]
  parseCoeffs(frameTokenCopy,frameIndex);
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f000 f82e 	bl	8001024 <parseCoeffs>
  while (frameToken != NULL){
 8000fc8:	e01b      	b.n	8001002 <parseData+0x6a>
    /* code */

	  ++frameIndex;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
    frameToken = strtok_r(NULL, (byte *)startMarker,&saveptr1);
 8000fd0:	4a11      	ldr	r2, [pc, #68]	; (8001018 <parseData+0x80>)
 8000fd2:	4912      	ldr	r1, [pc, #72]	; (800101c <parseData+0x84>)
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f005 fdd9 	bl	8006b8c <strtok_r>
 8000fda:	6178      	str	r0, [r7, #20]

    if(frameToken == NULL){
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d013      	beq.n	800100a <parseData+0x72>

        break;
    }

    frameToken = strtok_r(NULL, (byte *)endMarker,&saveptr1);
 8000fe2:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <parseData+0x80>)
 8000fe4:	490e      	ldr	r1, [pc, #56]	; (8001020 <parseData+0x88>)
 8000fe6:	2000      	movs	r0, #0
 8000fe8:	f005 fdd0 	bl	8006b8c <strtok_r>
 8000fec:	6178      	str	r0, [r7, #20]

        if(frameToken == NULL){
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00c      	beq.n	800100e <parseData+0x76>

        break;
    }
    
    if(frameToken!=NULL){
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <parseData+0x6a>

        parseCoeffs(frameToken,frameIndex);
 8000ffa:	6939      	ldr	r1, [r7, #16]
 8000ffc:	6978      	ldr	r0, [r7, #20]
 8000ffe:	f000 f811 	bl	8001024 <parseCoeffs>
  while (frameToken != NULL){
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d1e0      	bne.n	8000fca <parseData+0x32>
    }
    

  }
    
}
 8001008:	e002      	b.n	8001010 <parseData+0x78>
        break;
 800100a:	bf00      	nop
 800100c:	e000      	b.n	8001010 <parseData+0x78>
        break;
 800100e:	bf00      	nop
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001fc 	.word	0x200001fc
 800101c:	0800964c 	.word	0x0800964c
 8001020:	08009650 	.word	0x08009650

08001024 <parseCoeffs>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void parseCoeffs(byte * frameMsg, int index){
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  byte * coeffsToken = strtok_r(frameMsg,(byte*) delimiter, &saveptr2);
 800102e:	4ab0      	ldr	r2, [pc, #704]	; (80012f0 <parseCoeffs+0x2cc>)
 8001030:	49b0      	ldr	r1, [pc, #704]	; (80012f4 <parseCoeffs+0x2d0>)
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f005 fdaa 	bl	8006b8c <strtok_r>
 8001038:	60f8      	str	r0, [r7, #12]

  area.curves[index].d = atof(coeffsToken);
 800103a:	68f8      	ldr	r0, [r7, #12]
 800103c:	f004 f889 	bl	8005152 <atof>
 8001040:	ec54 3b10 	vmov	r3, r4, d0
 8001044:	4618      	mov	r0, r3
 8001046:	4621      	mov	r1, r4
 8001048:	f7ff fdd6 	bl	8000bf8 <__aeabi_d2f>
 800104c:	4601      	mov	r1, r0
 800104e:	4aaa      	ldr	r2, [pc, #680]	; (80012f8 <parseCoeffs+0x2d4>)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	011b      	lsls	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001058:	4aa5      	ldr	r2, [pc, #660]	; (80012f0 <parseCoeffs+0x2cc>)
 800105a:	49a6      	ldr	r1, [pc, #664]	; (80012f4 <parseCoeffs+0x2d0>)
 800105c:	2000      	movs	r0, #0
 800105e:	f005 fd95 	bl	8006b8c <strtok_r>
 8001062:	60f8      	str	r0, [r7, #12]
  area.curves[index].c = atof(coeffsToken);
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f004 f874 	bl	8005152 <atof>
 800106a:	ec54 3b10 	vmov	r3, r4, d0
 800106e:	4618      	mov	r0, r3
 8001070:	4621      	mov	r1, r4
 8001072:	f7ff fdc1 	bl	8000bf8 <__aeabi_d2f>
 8001076:	4601      	mov	r1, r0
 8001078:	4a9f      	ldr	r2, [pc, #636]	; (80012f8 <parseCoeffs+0x2d4>)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	011b      	lsls	r3, r3, #4
 800107e:	4413      	add	r3, r2
 8001080:	3304      	adds	r3, #4
 8001082:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001084:	4a9a      	ldr	r2, [pc, #616]	; (80012f0 <parseCoeffs+0x2cc>)
 8001086:	499b      	ldr	r1, [pc, #620]	; (80012f4 <parseCoeffs+0x2d0>)
 8001088:	2000      	movs	r0, #0
 800108a:	f005 fd7f 	bl	8006b8c <strtok_r>
 800108e:	60f8      	str	r0, [r7, #12]
  area.curves[index].b = atof(coeffsToken);
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f004 f85e 	bl	8005152 <atof>
 8001096:	ec54 3b10 	vmov	r3, r4, d0
 800109a:	4618      	mov	r0, r3
 800109c:	4621      	mov	r1, r4
 800109e:	f7ff fdab 	bl	8000bf8 <__aeabi_d2f>
 80010a2:	4601      	mov	r1, r0
 80010a4:	4a94      	ldr	r2, [pc, #592]	; (80012f8 <parseCoeffs+0x2d4>)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	011b      	lsls	r3, r3, #4
 80010aa:	4413      	add	r3, r2
 80010ac:	3308      	adds	r3, #8
 80010ae:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80010b0:	4a8f      	ldr	r2, [pc, #572]	; (80012f0 <parseCoeffs+0x2cc>)
 80010b2:	4990      	ldr	r1, [pc, #576]	; (80012f4 <parseCoeffs+0x2d0>)
 80010b4:	2000      	movs	r0, #0
 80010b6:	f005 fd69 	bl	8006b8c <strtok_r>
 80010ba:	60f8      	str	r0, [r7, #12]
  area.curves[index].a = atof(coeffsToken);
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f004 f848 	bl	8005152 <atof>
 80010c2:	ec54 3b10 	vmov	r3, r4, d0
 80010c6:	4618      	mov	r0, r3
 80010c8:	4621      	mov	r1, r4
 80010ca:	f7ff fd95 	bl	8000bf8 <__aeabi_d2f>
 80010ce:	4601      	mov	r1, r0
 80010d0:	4a89      	ldr	r2, [pc, #548]	; (80012f8 <parseCoeffs+0x2d4>)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	4413      	add	r3, r2
 80010d8:	330c      	adds	r3, #12
 80010da:	6019      	str	r1, [r3, #0]
  
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80010dc:	4a84      	ldr	r2, [pc, #528]	; (80012f0 <parseCoeffs+0x2cc>)
 80010de:	4985      	ldr	r1, [pc, #532]	; (80012f4 <parseCoeffs+0x2d0>)
 80010e0:	2000      	movs	r0, #0
 80010e2:	f005 fd53 	bl	8006b8c <strtok_r>
 80010e6:	60f8      	str	r0, [r7, #12]
  roll.curves[index].d = atof(coeffsToken);
 80010e8:	68f8      	ldr	r0, [r7, #12]
 80010ea:	f004 f832 	bl	8005152 <atof>
 80010ee:	ec54 3b10 	vmov	r3, r4, d0
 80010f2:	4618      	mov	r0, r3
 80010f4:	4621      	mov	r1, r4
 80010f6:	f7ff fd7f 	bl	8000bf8 <__aeabi_d2f>
 80010fa:	4601      	mov	r1, r0
 80010fc:	4a7f      	ldr	r2, [pc, #508]	; (80012fc <parseCoeffs+0x2d8>)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001106:	4a7a      	ldr	r2, [pc, #488]	; (80012f0 <parseCoeffs+0x2cc>)
 8001108:	497a      	ldr	r1, [pc, #488]	; (80012f4 <parseCoeffs+0x2d0>)
 800110a:	2000      	movs	r0, #0
 800110c:	f005 fd3e 	bl	8006b8c <strtok_r>
 8001110:	60f8      	str	r0, [r7, #12]
  roll.curves[index].c = atof(coeffsToken);
 8001112:	68f8      	ldr	r0, [r7, #12]
 8001114:	f004 f81d 	bl	8005152 <atof>
 8001118:	ec54 3b10 	vmov	r3, r4, d0
 800111c:	4618      	mov	r0, r3
 800111e:	4621      	mov	r1, r4
 8001120:	f7ff fd6a 	bl	8000bf8 <__aeabi_d2f>
 8001124:	4601      	mov	r1, r0
 8001126:	4a75      	ldr	r2, [pc, #468]	; (80012fc <parseCoeffs+0x2d8>)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	011b      	lsls	r3, r3, #4
 800112c:	4413      	add	r3, r2
 800112e:	3304      	adds	r3, #4
 8001130:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001132:	4a6f      	ldr	r2, [pc, #444]	; (80012f0 <parseCoeffs+0x2cc>)
 8001134:	496f      	ldr	r1, [pc, #444]	; (80012f4 <parseCoeffs+0x2d0>)
 8001136:	2000      	movs	r0, #0
 8001138:	f005 fd28 	bl	8006b8c <strtok_r>
 800113c:	60f8      	str	r0, [r7, #12]
  roll.curves[index].b = atof(coeffsToken);
 800113e:	68f8      	ldr	r0, [r7, #12]
 8001140:	f004 f807 	bl	8005152 <atof>
 8001144:	ec54 3b10 	vmov	r3, r4, d0
 8001148:	4618      	mov	r0, r3
 800114a:	4621      	mov	r1, r4
 800114c:	f7ff fd54 	bl	8000bf8 <__aeabi_d2f>
 8001150:	4601      	mov	r1, r0
 8001152:	4a6a      	ldr	r2, [pc, #424]	; (80012fc <parseCoeffs+0x2d8>)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4413      	add	r3, r2
 800115a:	3308      	adds	r3, #8
 800115c:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800115e:	4a64      	ldr	r2, [pc, #400]	; (80012f0 <parseCoeffs+0x2cc>)
 8001160:	4964      	ldr	r1, [pc, #400]	; (80012f4 <parseCoeffs+0x2d0>)
 8001162:	2000      	movs	r0, #0
 8001164:	f005 fd12 	bl	8006b8c <strtok_r>
 8001168:	60f8      	str	r0, [r7, #12]
  roll.curves[index].a = atof(coeffsToken);
 800116a:	68f8      	ldr	r0, [r7, #12]
 800116c:	f003 fff1 	bl	8005152 <atof>
 8001170:	ec54 3b10 	vmov	r3, r4, d0
 8001174:	4618      	mov	r0, r3
 8001176:	4621      	mov	r1, r4
 8001178:	f7ff fd3e 	bl	8000bf8 <__aeabi_d2f>
 800117c:	4601      	mov	r1, r0
 800117e:	4a5f      	ldr	r2, [pc, #380]	; (80012fc <parseCoeffs+0x2d8>)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4413      	add	r3, r2
 8001186:	330c      	adds	r3, #12
 8001188:	6019      	str	r1, [r3, #0]

  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800118a:	4a59      	ldr	r2, [pc, #356]	; (80012f0 <parseCoeffs+0x2cc>)
 800118c:	4959      	ldr	r1, [pc, #356]	; (80012f4 <parseCoeffs+0x2d0>)
 800118e:	2000      	movs	r0, #0
 8001190:	f005 fcfc 	bl	8006b8c <strtok_r>
 8001194:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].d = atof(coeffsToken);
 8001196:	68f8      	ldr	r0, [r7, #12]
 8001198:	f003 ffdb 	bl	8005152 <atof>
 800119c:	ec54 3b10 	vmov	r3, r4, d0
 80011a0:	4618      	mov	r0, r3
 80011a2:	4621      	mov	r1, r4
 80011a4:	f7ff fd28 	bl	8000bf8 <__aeabi_d2f>
 80011a8:	4601      	mov	r1, r0
 80011aa:	4a55      	ldr	r2, [pc, #340]	; (8001300 <parseCoeffs+0x2dc>)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80011b4:	4a4e      	ldr	r2, [pc, #312]	; (80012f0 <parseCoeffs+0x2cc>)
 80011b6:	494f      	ldr	r1, [pc, #316]	; (80012f4 <parseCoeffs+0x2d0>)
 80011b8:	2000      	movs	r0, #0
 80011ba:	f005 fce7 	bl	8006b8c <strtok_r>
 80011be:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].c = atof(coeffsToken);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f003 ffc6 	bl	8005152 <atof>
 80011c6:	ec54 3b10 	vmov	r3, r4, d0
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	f7ff fd13 	bl	8000bf8 <__aeabi_d2f>
 80011d2:	4601      	mov	r1, r0
 80011d4:	4a4a      	ldr	r2, [pc, #296]	; (8001300 <parseCoeffs+0x2dc>)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4413      	add	r3, r2
 80011dc:	3304      	adds	r3, #4
 80011de:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80011e0:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <parseCoeffs+0x2cc>)
 80011e2:	4944      	ldr	r1, [pc, #272]	; (80012f4 <parseCoeffs+0x2d0>)
 80011e4:	2000      	movs	r0, #0
 80011e6:	f005 fcd1 	bl	8006b8c <strtok_r>
 80011ea:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].b = atof(coeffsToken);
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f003 ffb0 	bl	8005152 <atof>
 80011f2:	ec54 3b10 	vmov	r3, r4, d0
 80011f6:	4618      	mov	r0, r3
 80011f8:	4621      	mov	r1, r4
 80011fa:	f7ff fcfd 	bl	8000bf8 <__aeabi_d2f>
 80011fe:	4601      	mov	r1, r0
 8001200:	4a3f      	ldr	r2, [pc, #252]	; (8001300 <parseCoeffs+0x2dc>)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	011b      	lsls	r3, r3, #4
 8001206:	4413      	add	r3, r2
 8001208:	3308      	adds	r3, #8
 800120a:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800120c:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <parseCoeffs+0x2cc>)
 800120e:	4939      	ldr	r1, [pc, #228]	; (80012f4 <parseCoeffs+0x2d0>)
 8001210:	2000      	movs	r0, #0
 8001212:	f005 fcbb 	bl	8006b8c <strtok_r>
 8001216:	60f8      	str	r0, [r7, #12]
  pitch.curves[index].a = atof(coeffsToken);
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	f003 ff9a 	bl	8005152 <atof>
 800121e:	ec54 3b10 	vmov	r3, r4, d0
 8001222:	4618      	mov	r0, r3
 8001224:	4621      	mov	r1, r4
 8001226:	f7ff fce7 	bl	8000bf8 <__aeabi_d2f>
 800122a:	4601      	mov	r1, r0
 800122c:	4a34      	ldr	r2, [pc, #208]	; (8001300 <parseCoeffs+0x2dc>)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4413      	add	r3, r2
 8001234:	330c      	adds	r3, #12
 8001236:	6019      	str	r1, [r3, #0]

  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001238:	4a2d      	ldr	r2, [pc, #180]	; (80012f0 <parseCoeffs+0x2cc>)
 800123a:	492e      	ldr	r1, [pc, #184]	; (80012f4 <parseCoeffs+0x2d0>)
 800123c:	2000      	movs	r0, #0
 800123e:	f005 fca5 	bl	8006b8c <strtok_r>
 8001242:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].d = atof(coeffsToken);
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f003 ff84 	bl	8005152 <atof>
 800124a:	ec54 3b10 	vmov	r3, r4, d0
 800124e:	4618      	mov	r0, r3
 8001250:	4621      	mov	r1, r4
 8001252:	f7ff fcd1 	bl	8000bf8 <__aeabi_d2f>
 8001256:	4601      	mov	r1, r0
 8001258:	4a2a      	ldr	r2, [pc, #168]	; (8001304 <parseCoeffs+0x2e0>)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	4413      	add	r3, r2
 8001260:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <parseCoeffs+0x2cc>)
 8001264:	4923      	ldr	r1, [pc, #140]	; (80012f4 <parseCoeffs+0x2d0>)
 8001266:	2000      	movs	r0, #0
 8001268:	f005 fc90 	bl	8006b8c <strtok_r>
 800126c:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].c = atof(coeffsToken);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f003 ff6f 	bl	8005152 <atof>
 8001274:	ec54 3b10 	vmov	r3, r4, d0
 8001278:	4618      	mov	r0, r3
 800127a:	4621      	mov	r1, r4
 800127c:	f7ff fcbc 	bl	8000bf8 <__aeabi_d2f>
 8001280:	4601      	mov	r1, r0
 8001282:	4a20      	ldr	r2, [pc, #128]	; (8001304 <parseCoeffs+0x2e0>)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	011b      	lsls	r3, r3, #4
 8001288:	4413      	add	r3, r2
 800128a:	3304      	adds	r3, #4
 800128c:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 800128e:	4a18      	ldr	r2, [pc, #96]	; (80012f0 <parseCoeffs+0x2cc>)
 8001290:	4918      	ldr	r1, [pc, #96]	; (80012f4 <parseCoeffs+0x2d0>)
 8001292:	2000      	movs	r0, #0
 8001294:	f005 fc7a 	bl	8006b8c <strtok_r>
 8001298:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].b = atof(coeffsToken);
 800129a:	68f8      	ldr	r0, [r7, #12]
 800129c:	f003 ff59 	bl	8005152 <atof>
 80012a0:	ec54 3b10 	vmov	r3, r4, d0
 80012a4:	4618      	mov	r0, r3
 80012a6:	4621      	mov	r1, r4
 80012a8:	f7ff fca6 	bl	8000bf8 <__aeabi_d2f>
 80012ac:	4601      	mov	r1, r0
 80012ae:	4a15      	ldr	r2, [pc, #84]	; (8001304 <parseCoeffs+0x2e0>)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	4413      	add	r3, r2
 80012b6:	3308      	adds	r3, #8
 80012b8:	6019      	str	r1, [r3, #0]
  coeffsToken = strtok_r(NULL,(byte*) delimiter, &saveptr2);
 80012ba:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <parseCoeffs+0x2cc>)
 80012bc:	490d      	ldr	r1, [pc, #52]	; (80012f4 <parseCoeffs+0x2d0>)
 80012be:	2000      	movs	r0, #0
 80012c0:	f005 fc64 	bl	8006b8c <strtok_r>
 80012c4:	60f8      	str	r0, [r7, #12]
  yaw.curves[index].a = atof(coeffsToken);
 80012c6:	68f8      	ldr	r0, [r7, #12]
 80012c8:	f003 ff43 	bl	8005152 <atof>
 80012cc:	ec54 3b10 	vmov	r3, r4, d0
 80012d0:	4618      	mov	r0, r3
 80012d2:	4621      	mov	r1, r4
 80012d4:	f7ff fc90 	bl	8000bf8 <__aeabi_d2f>
 80012d8:	4601      	mov	r1, r0
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <parseCoeffs+0x2e0>)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	011b      	lsls	r3, r3, #4
 80012e0:	4413      	add	r3, r2
 80012e2:	330c      	adds	r3, #12
 80012e4:	6019      	str	r1, [r3, #0]

}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd90      	pop	{r4, r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000200 	.word	0x20000200
 80012f4:	08009654 	.word	0x08009654
 80012f8:	20000530 	.word	0x20000530
 80012fc:	20000440 	.word	0x20000440
 8001300:	20000350 	.word	0x20000350
 8001304:	20000260 	.word	0x20000260

08001308 <crc_accumulate>:
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
#ifndef HAVE_CRC_ACCUMULATE
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4053      	eors	r3, r2
 800131e:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8001320:	7bfb      	ldrb	r3, [r7, #15]
 8001322:	011b      	lsls	r3, r3, #4
 8001324:	b25a      	sxtb	r2, r3
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4053      	eors	r3, r2
 800132c:	b25b      	sxtb	r3, r3
 800132e:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	881b      	ldrh	r3, [r3, #0]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	7bfb      	ldrb	r3, [r7, #15]
 800133c:	021b      	lsls	r3, r3, #8
 800133e:	b21b      	sxth	r3, r3
 8001340:	4053      	eors	r3, r2
 8001342:	b21a      	sxth	r2, r3
 8001344:	7bfb      	ldrb	r3, [r7, #15]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	b21b      	sxth	r3, r3
 800134a:	4053      	eors	r3, r2
 800134c:	b21a      	sxth	r2, r3
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	b2db      	uxtb	r3, r3
 8001354:	b21b      	sxth	r3, r3
 8001356:	4053      	eors	r3, r2
 8001358:	b21b      	sxth	r3, r3
 800135a:	b29a      	uxth	r2, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	801a      	strh	r2, [r3, #0]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137a:	801a      	strh	r2, [r3, #0]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8001394:	f107 030e 	add.w	r3, r7, #14
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffe7 	bl	800136c <crc_init>
	while (length--) {
 800139e:	e009      	b.n	80013b4 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	1c5a      	adds	r2, r3, #1
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f107 020e 	add.w	r2, r7, #14
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffaa 	bl	8001308 <crc_accumulate>
	while (length--) {
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	1e5a      	subs	r2, r3, #1
 80013b8:	807a      	strh	r2, [r7, #2]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <crc_calculate+0x18>
        }
        return crcTmp;
 80013be:	89fb      	ldrh	r3, [r7, #14]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <mavlink_get_channel_status>:

/*
  internal function to give access to the channel status for each channel
 */
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
 80013d2:	79fa      	ldrb	r2, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <mavlink_get_channel_status+0x24>)
 80013de:	4413      	add	r3, r2
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	20000218 	.word	0x20000218

080013f0 <mavlink_finalize_message_chan>:
						      uint8_t chan, uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						      uint8_t chan, uint8_t length)
#endif
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b085      	sub	sp, #20
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	4608      	mov	r0, r1
 80013fa:	4611      	mov	r1, r2
 80013fc:	461a      	mov	r2, r3
 80013fe:	4603      	mov	r3, r0
 8001400:	70fb      	strb	r3, [r7, #3]
 8001402:	460b      	mov	r3, r1
 8001404:	70bb      	strb	r3, [r7, #2]
 8001406:	4613      	mov	r3, r2
 8001408:	707b      	strb	r3, [r7, #1]
	// This code part is the same for all messages;
	uint16_t checksum;
	msg->magic = MAVLINK_STX;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	22fe      	movs	r2, #254	; 0xfe
 800140e:	709a      	strb	r2, [r3, #2]
	msg->len = length;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001416:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	715a      	strb	r2, [r3, #5]
	msg->compid = component_id;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	78ba      	ldrb	r2, [r7, #2]
 8001422:	719a      	strb	r2, [r3, #6]
	// One sequence number per component
	msg->seq = mavlink_get_channel_status(chan)->current_tx_seq;
 8001424:	787b      	ldrb	r3, [r7, #1]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffce 	bl	80013c8 <mavlink_get_channel_status>
 800142c:	4603      	mov	r3, r0
 800142e:	799a      	ldrb	r2, [r3, #6]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	711a      	strb	r2, [r3, #4]
	mavlink_get_channel_status(chan)->current_tx_seq = mavlink_get_channel_status(chan)->current_tx_seq+1;
 8001434:	787b      	ldrb	r3, [r7, #1]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff ffc6 	bl	80013c8 <mavlink_get_channel_status>
 800143c:	4603      	mov	r3, r0
 800143e:	799c      	ldrb	r4, [r3, #6]
 8001440:	787b      	ldrb	r3, [r7, #1]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff ffc0 	bl	80013c8 <mavlink_get_channel_status>
 8001448:	4603      	mov	r3, r0
 800144a:	1c62      	adds	r2, r4, #1
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	719a      	strb	r2, [r3, #6]
	checksum = crc_calculate((uint8_t*)&msg->len, length + MAVLINK_CORE_HEADER_LEN);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	1cda      	adds	r2, r3, #3
 8001454:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001458:	b29b      	uxth	r3, r3
 800145a:	3305      	adds	r3, #5
 800145c:	b29b      	uxth	r3, r3
 800145e:	4619      	mov	r1, r3
 8001460:	4610      	mov	r0, r2
 8001462:	f7ff ff91 	bl	8001388 <crc_calculate>
 8001466:	4603      	mov	r3, r0
 8001468:	81fb      	strh	r3, [r7, #14]
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
 800146a:	f107 020e 	add.w	r2, r7, #14
 800146e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff47 	bl	8001308 <crc_accumulate>
#endif
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 800147a:	89f9      	ldrh	r1, [r7, #14]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3308      	adds	r3, #8
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	78d2      	ldrb	r2, [r2, #3]
 8001484:	4413      	add	r3, r2
 8001486:	b2ca      	uxtb	r2, r1
 8001488:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 800148a:	89fb      	ldrh	r3, [r7, #14]
 800148c:	0a1b      	lsrs	r3, r3, #8
 800148e:	b299      	uxth	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f103 0208 	add.w	r2, r3, #8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	3301      	adds	r3, #1
 800149c:	4413      	add	r3, r2
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]

	return length + MAVLINK_NUM_NON_PAYLOAD_BYTES;
 80014a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	3308      	adds	r3, #8
 80014aa:	b29b      	uxth	r3, r3
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd90      	pop	{r4, r7, pc}

080014b4 <mavlink_finalize_message>:
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
#if MAVLINK_CRC_EXTRA
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t length, uint8_t crc_extra)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	4608      	mov	r0, r1
 80014be:	4611      	mov	r1, r2
 80014c0:	461a      	mov	r2, r3
 80014c2:	4603      	mov	r3, r0
 80014c4:	70fb      	strb	r3, [r7, #3]
 80014c6:	460b      	mov	r3, r1
 80014c8:	70bb      	strb	r3, [r7, #2]
 80014ca:	4613      	mov	r3, r2
 80014cc:	707b      	strb	r3, [r7, #1]
	return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, length, crc_extra);
 80014ce:	78ba      	ldrb	r2, [r7, #2]
 80014d0:	78f9      	ldrb	r1, [r7, #3]
 80014d2:	7c3b      	ldrb	r3, [r7, #16]
 80014d4:	9301      	str	r3, [sp, #4]
 80014d6:	787b      	ldrb	r3, [r7, #1]
 80014d8:	9300      	str	r3, [sp, #0]
 80014da:	2300      	movs	r3, #0
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff ff87 	bl	80013f0 <mavlink_finalize_message_chan>
 80014e2:	4603      	mov	r3, r0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buffer, const mavlink_message_t *msg)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
 80014f4:	6039      	str	r1, [r7, #0]
	memcpy(buffer, (const uint8_t *)&msg->magic, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	1c99      	adds	r1, r3, #2
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	78db      	ldrb	r3, [r3, #3]
 80014fe:	3308      	adds	r3, #8
 8001500:	461a      	mov	r2, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f003 fe52 	bl	80051ac <memcpy>
	return MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)msg->len;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	78db      	ldrb	r3, [r3, #3]
 800150c:	b29b      	uxth	r3, r3
 800150e:	3308      	adds	r3, #8
 8001510:	b29b      	uxth	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <mavlink_msg_command_long_pack>:
 * @param param7 Parameter 7, as defined by MAV_CMD enum.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_command_long_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
						       uint8_t target_system, uint8_t target_component, uint16_t command, uint8_t confirmation, float param1, float param2, float param3, float param4, float param5, float param6, float param7)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b096      	sub	sp, #88	; 0x58
 800151e:	af02      	add	r7, sp, #8
 8001520:	623a      	str	r2, [r7, #32]
 8001522:	461a      	mov	r2, r3
 8001524:	ed87 0a07 	vstr	s0, [r7, #28]
 8001528:	edc7 0a06 	vstr	s1, [r7, #24]
 800152c:	ed87 1a05 	vstr	s2, [r7, #20]
 8001530:	edc7 1a04 	vstr	s3, [r7, #16]
 8001534:	ed87 2a03 	vstr	s4, [r7, #12]
 8001538:	edc7 2a02 	vstr	s5, [r7, #8]
 800153c:	ed87 3a01 	vstr	s6, [r7, #4]
 8001540:	4603      	mov	r3, r0
 8001542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001546:	460b      	mov	r3, r1
 8001548:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800154c:	4613      	mov	r3, r2
 800154e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	_mav_put_uint8_t(buf, 32, confirmation);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, 33);
#else
	mavlink_command_long_t packet;
	packet.param1 = param1;
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	62fb      	str	r3, [r7, #44]	; 0x2c
	packet.param2 = param2;
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
	packet.param3 = param3;
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
	packet.param4 = param4;
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
	packet.param5 = param5;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
	packet.param6 = param6;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	643b      	str	r3, [r7, #64]	; 0x40
	packet.param7 = param7;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	647b      	str	r3, [r7, #68]	; 0x44
	packet.command = command;
 800156e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001572:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	packet.target_system = target_system;
 8001576:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800157a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	packet.target_component = target_component;
 800157e:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001582:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	packet.confirmation = confirmation;
 8001586:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800158a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, 33);
 800158e:	6a3b      	ldr	r3, [r7, #32]
 8001590:	3308      	adds	r3, #8
 8001592:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001596:	2221      	movs	r2, #33	; 0x21
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fe07 	bl	80051ac <memcpy>
#endif

	msg->msgid = MAVLINK_MSG_ID_COMMAND_LONG;
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	224c      	movs	r2, #76	; 0x4c
 80015a2:	71da      	strb	r2, [r3, #7]
	return mavlink_finalize_message(msg, system_id, component_id, 33, 152);
 80015a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80015a8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80015ac:	2398      	movs	r3, #152	; 0x98
 80015ae:	9300      	str	r3, [sp, #0]
 80015b0:	2321      	movs	r3, #33	; 0x21
 80015b2:	6a38      	ldr	r0, [r7, #32]
 80015b4:	f7ff ff7e 	bl	80014b4 <mavlink_finalize_message>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3750      	adds	r7, #80	; 0x50
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <setAngles>:
        
  }



  void setAngles(float roll, float pitch, float yaw){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b0a4      	sub	sp, #144	; 0x90
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	ed87 0a03 	vstr	s0, [r7, #12]
 80015ce:	edc7 0a02 	vstr	s1, [r7, #8]
 80015d2:	ed87 1a01 	vstr	s2, [r7, #4]
    
    mavlink_message_t msg;
    uint8_t buf[MAVLINK_MAX_PACKET_LEN];
    mavlink_msg_command_long_pack(255, 1, &msg, 71, 67, 205, 0, pitch, roll, yaw, 0.0, 0.0, 0.0, 0.0);
 80015d6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015da:	2300      	movs	r3, #0
 80015dc:	9302      	str	r3, [sp, #8]
 80015de:	23cd      	movs	r3, #205	; 0xcd
 80015e0:	9301      	str	r3, [sp, #4]
 80015e2:	2343      	movs	r3, #67	; 0x43
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	ed9f 3a15 	vldr	s6, [pc, #84]	; 800163c <setAngles+0x78>
 80015ea:	eddf 2a14 	vldr	s5, [pc, #80]	; 800163c <setAngles+0x78>
 80015ee:	ed9f 2a13 	vldr	s4, [pc, #76]	; 800163c <setAngles+0x78>
 80015f2:	eddf 1a12 	vldr	s3, [pc, #72]	; 800163c <setAngles+0x78>
 80015f6:	ed97 1a01 	vldr	s2, [r7, #4]
 80015fa:	edd7 0a03 	vldr	s1, [r7, #12]
 80015fe:	ed97 0a02 	vldr	s0, [r7, #8]
 8001602:	2347      	movs	r3, #71	; 0x47
 8001604:	2101      	movs	r1, #1
 8001606:	20ff      	movs	r0, #255	; 0xff
 8001608:	f7ff ff87 	bl	800151a <mavlink_msg_command_long_pack>
    uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);
 800160c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001610:	f107 0310 	add.w	r3, r7, #16
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff68 	bl	80014ec <mavlink_msg_to_send_buffer>
 800161c:	4603      	mov	r3, r0
 800161e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
    HAL_UART_Transmit(&uart_gimbal, (uint8_t*)buf, len, 100);
 8001622:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8001626:	f107 0110 	add.w	r1, r7, #16
 800162a:	2364      	movs	r3, #100	; 0x64
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <setAngles+0x7c>)
 800162e:	f001 fe02 	bl	8003236 <HAL_UART_Transmit>
      
  }
 8001632:	bf00      	nop
 8001634:	3780      	adds	r7, #128	; 0x80
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	00000000 	.word	0x00000000
 8001640:	2000140c 	.word	0x2000140c

08001644 <init_gimbal>:
    
  }

#endif

void init_gimbal(void){
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  setAngles(3, -30, 20);
 8001648:	eeb3 1a04 	vmov.f32	s2, #52	; 0x41a00000  20.0
 800164c:	eefb 0a0e 	vmov.f32	s1, #190	; 0xc1f00000 -30.0
 8001650:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8001654:	f7ff ffb6 	bl	80015c4 <setAngles>
  HAL_Delay(1000); // MS
 8001658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800165c:	f000 fe70 	bl	8002340 <HAL_Delay>
  setAngles(0, 0, 0);
 8001660:	ed9f 1a10 	vldr	s2, [pc, #64]	; 80016a4 <init_gimbal+0x60>
 8001664:	eddf 0a0f 	vldr	s1, [pc, #60]	; 80016a4 <init_gimbal+0x60>
 8001668:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80016a4 <init_gimbal+0x60>
 800166c:	f7ff ffaa 	bl	80015c4 <setAngles>
  HAL_Delay(1000); // MS
 8001670:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001674:	f000 fe64 	bl	8002340 <HAL_Delay>
  setAngles(-3, 30, -20);
 8001678:	eebb 1a04 	vmov.f32	s2, #180	; 0xc1a00000 -20.0
 800167c:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8001680:	eeb8 0a08 	vmov.f32	s0, #136	; 0xc0400000 -3.0
 8001684:	f7ff ff9e 	bl	80015c4 <setAngles>
  HAL_Delay(1000); // MS
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f000 fe58 	bl	8002340 <HAL_Delay>
  setAngles(0, 0, 0);
 8001690:	ed9f 1a04 	vldr	s2, [pc, #16]	; 80016a4 <init_gimbal+0x60>
 8001694:	eddf 0a03 	vldr	s1, [pc, #12]	; 80016a4 <init_gimbal+0x60>
 8001698:	ed9f 0a02 	vldr	s0, [pc, #8]	; 80016a4 <init_gimbal+0x60>
 800169c:	f7ff ff92 	bl	80015c4 <setAngles>
  
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	00000000 	.word	0x00000000

080016a8 <actuate_gimbal>:

void actuate_gimbal(void){
 80016a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
  assert(INTERPOLATION_PTS!=0);
  gimbalHyperframeTime = 0;
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <actuate_gimbal+0x1c>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
  float_t x = 0;
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	607b      	str	r3, [r7, #4]
  curveIndex = 0;
 80016bc:	4b02      	ldr	r3, [pc, #8]	; (80016c8 <actuate_gimbal+0x20>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  // some statements are redundant .. clean later ..
  while((curveIndex <= CURVES_TO_CONSIDER_INDEX) && (gimbalHyperframeTime <= MAX_HYPERFRAME_TIME)){
 80016c2:	e210      	b.n	8001ae6 <actuate_gimbal+0x43e>
 80016c4:	20000204 	.word	0x20000204
 80016c8:	20000208 	.word	0x20000208
    //ITM_Port32(0) = 3;

    if(gimbalHyperframeTime >= scheduledTime){
 80016cc:	4bd2      	ldr	r3, [pc, #840]	; (8001a18 <actuate_gimbal+0x370>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4bd2      	ldr	r3, [pc, #840]	; (8001a1c <actuate_gimbal+0x374>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	f200 81ca 	bhi.w	8001a70 <actuate_gimbal+0x3c8>
    
    curveAngleRoll = getCurveVal(x,roll.curves[curveIndex].d,roll.curves[curveIndex].c,roll.curves[curveIndex].b,roll.curves[curveIndex].a);
 80016dc:	4bd0      	ldr	r3, [pc, #832]	; (8001a20 <actuate_gimbal+0x378>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4ad0      	ldr	r2, [pc, #832]	; (8001a24 <actuate_gimbal+0x37c>)
 80016e2:	011b      	lsls	r3, r3, #4
 80016e4:	4413      	add	r3, r2
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7fe ff35 	bl	8000558 <__aeabi_f2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7fe ff30 	bl	8000558 <__aeabi_f2d>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	ed9f 1bc2 	vldr	d1, [pc, #776]	; 8001a08 <actuate_gimbal+0x360>
 8001700:	ec43 2b10 	vmov	d0, r2, r3
 8001704:	f002 fcd0 	bl	80040a8 <pow>
 8001708:	ec53 2b10 	vmov	r2, r3, d0
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe ff7a 	bl	8000608 <__aeabi_dmul>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	4625      	mov	r5, r4
 800171a:	461c      	mov	r4, r3
 800171c:	4bc0      	ldr	r3, [pc, #768]	; (8001a20 <actuate_gimbal+0x378>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	4ac0      	ldr	r2, [pc, #768]	; (8001a24 <actuate_gimbal+0x37c>)
 8001722:	011b      	lsls	r3, r3, #4
 8001724:	4413      	add	r3, r2
 8001726:	3304      	adds	r3, #4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff14 	bl	8000558 <__aeabi_f2d>
 8001730:	4680      	mov	r8, r0
 8001732:	4689      	mov	r9, r1
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7fe ff0f 	bl	8000558 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	ed9f 1bb4 	vldr	d1, [pc, #720]	; 8001a10 <actuate_gimbal+0x368>
 8001742:	ec43 2b10 	vmov	d0, r2, r3
 8001746:	f002 fcaf 	bl	80040a8 <pow>
 800174a:	ec53 2b10 	vmov	r2, r3, d0
 800174e:	4640      	mov	r0, r8
 8001750:	4649      	mov	r1, r9
 8001752:	f7fe ff59 	bl	8000608 <__aeabi_dmul>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7fe fd9d 	bl	800029c <__adddf3>
 8001762:	4603      	mov	r3, r0
 8001764:	460c      	mov	r4, r1
 8001766:	4625      	mov	r5, r4
 8001768:	461c      	mov	r4, r3
 800176a:	4bad      	ldr	r3, [pc, #692]	; (8001a20 <actuate_gimbal+0x378>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	4aad      	ldr	r2, [pc, #692]	; (8001a24 <actuate_gimbal+0x37c>)
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	4413      	add	r3, r2
 8001774:	3308      	adds	r3, #8
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe feed 	bl	8000558 <__aeabi_f2d>
 800177e:	4680      	mov	r8, r0
 8001780:	4689      	mov	r9, r1
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe fee8 	bl	8000558 <__aeabi_f2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4640      	mov	r0, r8
 800178e:	4649      	mov	r1, r9
 8001790:	f7fe ff3a 	bl	8000608 <__aeabi_dmul>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	4620      	mov	r0, r4
 800179a:	4629      	mov	r1, r5
 800179c:	f7fe fd7e 	bl	800029c <__adddf3>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	4625      	mov	r5, r4
 80017a6:	461c      	mov	r4, r3
 80017a8:	4b9d      	ldr	r3, [pc, #628]	; (8001a20 <actuate_gimbal+0x378>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4a9d      	ldr	r2, [pc, #628]	; (8001a24 <actuate_gimbal+0x37c>)
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	4413      	add	r3, r2
 80017b2:	330c      	adds	r3, #12
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7fe fece 	bl	8000558 <__aeabi_f2d>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4620      	mov	r0, r4
 80017c2:	4629      	mov	r1, r5
 80017c4:	f7fe fd6a 	bl	800029c <__adddf3>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	4618      	mov	r0, r3
 80017ce:	4621      	mov	r1, r4
 80017d0:	f7ff fa12 	bl	8000bf8 <__aeabi_d2f>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b94      	ldr	r3, [pc, #592]	; (8001a28 <actuate_gimbal+0x380>)
 80017d8:	601a      	str	r2, [r3, #0]
    curveAnglePitch = getCurveVal(x,pitch.curves[curveIndex].d,pitch.curves[curveIndex].c,pitch.curves[curveIndex].b,pitch.curves[curveIndex].a);
 80017da:	4b91      	ldr	r3, [pc, #580]	; (8001a20 <actuate_gimbal+0x378>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	4a93      	ldr	r2, [pc, #588]	; (8001a2c <actuate_gimbal+0x384>)
 80017e0:	011b      	lsls	r3, r3, #4
 80017e2:	4413      	add	r3, r2
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7fe feb6 	bl	8000558 <__aeabi_f2d>
 80017ec:	4604      	mov	r4, r0
 80017ee:	460d      	mov	r5, r1
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7fe feb1 	bl	8000558 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	ed9f 1b83 	vldr	d1, [pc, #524]	; 8001a08 <actuate_gimbal+0x360>
 80017fe:	ec43 2b10 	vmov	d0, r2, r3
 8001802:	f002 fc51 	bl	80040a8 <pow>
 8001806:	ec53 2b10 	vmov	r2, r3, d0
 800180a:	4620      	mov	r0, r4
 800180c:	4629      	mov	r1, r5
 800180e:	f7fe fefb 	bl	8000608 <__aeabi_dmul>
 8001812:	4603      	mov	r3, r0
 8001814:	460c      	mov	r4, r1
 8001816:	4625      	mov	r5, r4
 8001818:	461c      	mov	r4, r3
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <actuate_gimbal+0x378>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	4a83      	ldr	r2, [pc, #524]	; (8001a2c <actuate_gimbal+0x384>)
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4413      	add	r3, r2
 8001824:	3304      	adds	r3, #4
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe95 	bl	8000558 <__aeabi_f2d>
 800182e:	4680      	mov	r8, r0
 8001830:	4689      	mov	r9, r1
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7fe fe90 	bl	8000558 <__aeabi_f2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8001a10 <actuate_gimbal+0x368>
 8001840:	ec43 2b10 	vmov	d0, r2, r3
 8001844:	f002 fc30 	bl	80040a8 <pow>
 8001848:	ec53 2b10 	vmov	r2, r3, d0
 800184c:	4640      	mov	r0, r8
 800184e:	4649      	mov	r1, r9
 8001850:	f7fe feda 	bl	8000608 <__aeabi_dmul>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fd1e 	bl	800029c <__adddf3>
 8001860:	4603      	mov	r3, r0
 8001862:	460c      	mov	r4, r1
 8001864:	4625      	mov	r5, r4
 8001866:	461c      	mov	r4, r3
 8001868:	4b6d      	ldr	r3, [pc, #436]	; (8001a20 <actuate_gimbal+0x378>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4a6f      	ldr	r2, [pc, #444]	; (8001a2c <actuate_gimbal+0x384>)
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	3308      	adds	r3, #8
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4618      	mov	r0, r3
 8001878:	f7fe fe6e 	bl	8000558 <__aeabi_f2d>
 800187c:	4680      	mov	r8, r0
 800187e:	4689      	mov	r9, r1
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7fe fe69 	bl	8000558 <__aeabi_f2d>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	4640      	mov	r0, r8
 800188c:	4649      	mov	r1, r9
 800188e:	f7fe febb 	bl	8000608 <__aeabi_dmul>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fcff 	bl	800029c <__adddf3>
 800189e:	4603      	mov	r3, r0
 80018a0:	460c      	mov	r4, r1
 80018a2:	4625      	mov	r5, r4
 80018a4:	461c      	mov	r4, r3
 80018a6:	4b5e      	ldr	r3, [pc, #376]	; (8001a20 <actuate_gimbal+0x378>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4a60      	ldr	r2, [pc, #384]	; (8001a2c <actuate_gimbal+0x384>)
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	4413      	add	r3, r2
 80018b0:	330c      	adds	r3, #12
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe4f 	bl	8000558 <__aeabi_f2d>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f7fe fceb 	bl	800029c <__adddf3>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	4618      	mov	r0, r3
 80018cc:	4621      	mov	r1, r4
 80018ce:	f7ff f993 	bl	8000bf8 <__aeabi_d2f>
 80018d2:	4602      	mov	r2, r0
 80018d4:	4b56      	ldr	r3, [pc, #344]	; (8001a30 <actuate_gimbal+0x388>)
 80018d6:	601a      	str	r2, [r3, #0]
    curveAngleYaw = getCurveVal(x,yaw.curves[curveIndex].d,yaw.curves[curveIndex].c,yaw.curves[curveIndex].b,yaw.curves[curveIndex].a);
 80018d8:	4b51      	ldr	r3, [pc, #324]	; (8001a20 <actuate_gimbal+0x378>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	4a55      	ldr	r2, [pc, #340]	; (8001a34 <actuate_gimbal+0x38c>)
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	4413      	add	r3, r2
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7fe fe37 	bl	8000558 <__aeabi_f2d>
 80018ea:	4604      	mov	r4, r0
 80018ec:	460d      	mov	r5, r1
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7fe fe32 	bl	8000558 <__aeabi_f2d>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001a08 <actuate_gimbal+0x360>
 80018fc:	ec43 2b10 	vmov	d0, r2, r3
 8001900:	f002 fbd2 	bl	80040a8 <pow>
 8001904:	ec53 2b10 	vmov	r2, r3, d0
 8001908:	4620      	mov	r0, r4
 800190a:	4629      	mov	r1, r5
 800190c:	f7fe fe7c 	bl	8000608 <__aeabi_dmul>
 8001910:	4603      	mov	r3, r0
 8001912:	460c      	mov	r4, r1
 8001914:	4625      	mov	r5, r4
 8001916:	461c      	mov	r4, r3
 8001918:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <actuate_gimbal+0x378>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4a45      	ldr	r2, [pc, #276]	; (8001a34 <actuate_gimbal+0x38c>)
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	4413      	add	r3, r2
 8001922:	3304      	adds	r3, #4
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe fe16 	bl	8000558 <__aeabi_f2d>
 800192c:	4680      	mov	r8, r0
 800192e:	4689      	mov	r9, r1
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7fe fe11 	bl	8000558 <__aeabi_f2d>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001a10 <actuate_gimbal+0x368>
 800193e:	ec43 2b10 	vmov	d0, r2, r3
 8001942:	f002 fbb1 	bl	80040a8 <pow>
 8001946:	ec53 2b10 	vmov	r2, r3, d0
 800194a:	4640      	mov	r0, r8
 800194c:	4649      	mov	r1, r9
 800194e:	f7fe fe5b 	bl	8000608 <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	4620      	mov	r0, r4
 8001958:	4629      	mov	r1, r5
 800195a:	f7fe fc9f 	bl	800029c <__adddf3>
 800195e:	4603      	mov	r3, r0
 8001960:	460c      	mov	r4, r1
 8001962:	4625      	mov	r5, r4
 8001964:	461c      	mov	r4, r3
 8001966:	4b2e      	ldr	r3, [pc, #184]	; (8001a20 <actuate_gimbal+0x378>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <actuate_gimbal+0x38c>)
 800196c:	011b      	lsls	r3, r3, #4
 800196e:	4413      	add	r3, r2
 8001970:	3308      	adds	r3, #8
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fdef 	bl	8000558 <__aeabi_f2d>
 800197a:	4680      	mov	r8, r0
 800197c:	4689      	mov	r9, r1
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7fe fdea 	bl	8000558 <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4640      	mov	r0, r8
 800198a:	4649      	mov	r1, r9
 800198c:	f7fe fe3c 	bl	8000608 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe fc80 	bl	800029c <__adddf3>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	4625      	mov	r5, r4
 80019a2:	461c      	mov	r4, r3
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <actuate_gimbal+0x378>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <actuate_gimbal+0x38c>)
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	4413      	add	r3, r2
 80019ae:	330c      	adds	r3, #12
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fdd0 	bl	8000558 <__aeabi_f2d>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	4620      	mov	r0, r4
 80019be:	4629      	mov	r1, r5
 80019c0:	f7fe fc6c 	bl	800029c <__adddf3>
 80019c4:	4603      	mov	r3, r0
 80019c6:	460c      	mov	r4, r1
 80019c8:	4618      	mov	r0, r3
 80019ca:	4621      	mov	r1, r4
 80019cc:	f7ff f914 	bl	8000bf8 <__aeabi_d2f>
 80019d0:	4602      	mov	r2, r0
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <actuate_gimbal+0x390>)
 80019d4:	601a      	str	r2, [r3, #0]
    
    setAngles(curveAngleRoll,curveAnglePitch,curveAngleYaw);
 80019d6:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <actuate_gimbal+0x380>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <actuate_gimbal+0x388>)
 80019de:	ed93 7a00 	vldr	s14, [r3]
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <actuate_gimbal+0x390>)
 80019e4:	edd3 6a00 	vldr	s13, [r3]
 80019e8:	eeb0 1a66 	vmov.f32	s2, s13
 80019ec:	eef0 0a47 	vmov.f32	s1, s14
 80019f0:	eeb0 0a67 	vmov.f32	s0, s15
 80019f4:	f7ff fde6 	bl	80015c4 <setAngles>
    scheduledTime += time1Curve/((float_t)(INTERPOLATION_PTS));
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <actuate_gimbal+0x370>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	e01c      	b.n	8001a3c <actuate_gimbal+0x394>
 8001a02:	bf00      	nop
 8001a04:	f3af 8000 	nop.w
 8001a08:	00000000 	.word	0x00000000
 8001a0c:	40080000 	.word	0x40080000
 8001a10:	00000000 	.word	0x00000000
 8001a14:	40000000 	.word	0x40000000
 8001a18:	2000020a 	.word	0x2000020a
 8001a1c:	20000204 	.word	0x20000204
 8001a20:	20000208 	.word	0x20000208
 8001a24:	20000440 	.word	0x20000440
 8001a28:	2000020c 	.word	0x2000020c
 8001a2c:	20000350 	.word	0x20000350
 8001a30:	20000210 	.word	0x20000210
 8001a34:	20000260 	.word	0x20000260
 8001a38:	20000214 	.word	0x20000214
 8001a3c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a40:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <actuate_gimbal+0x46c>)
 8001a42:	edd3 6a00 	vldr	s13, [r3]
 8001a46:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001a4a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001a4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a56:	ee17 3a90 	vmov	r3, s15
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <actuate_gimbal+0x470>)
 8001a5e:	801a      	strh	r2, [r3, #0]
    x += 1/(float)(INTERPOLATION_PTS);
 8001a60:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a64:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a6c:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    if(scheduledTime >= (CURVES_TO_CONSIDER_INDEX+1)*(time1Curve)){
 8001a70:	4b29      	ldr	r3, [pc, #164]	; (8001b18 <actuate_gimbal+0x470>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7c:	4b25      	ldr	r3, [pc, #148]	; (8001b14 <actuate_gimbal+0x46c>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	da33      	bge.n	8001afc <actuate_gimbal+0x454>
    	break;
    }
    if(scheduledTime >= (curveIndex+1)*(time1Curve)){
 8001a94:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <actuate_gimbal+0x470>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	ee07 3a90 	vmov	s15, r3
 8001a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <actuate_gimbal+0x474>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	ee07 3a90 	vmov	s15, r3
 8001aaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <actuate_gimbal+0x46c>)
 8001ab0:	edd3 7a00 	vldr	s15, [r3]
 8001ab4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ab8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ac0:	da00      	bge.n	8001ac4 <actuate_gimbal+0x41c>
 8001ac2:	e010      	b.n	8001ae6 <actuate_gimbal+0x43e>
    	curveIndex += (curveIndex==CURVES_TO_CONSIDER_INDEX)?(0):(1);
 8001ac4:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <actuate_gimbal+0x474>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	bf14      	ite	ne
 8001acc:	2301      	movne	r3, #1
 8001ace:	2300      	moveq	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <actuate_gimbal+0x474>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <actuate_gimbal+0x474>)
 8001ade:	701a      	strb	r2, [r3, #0]
    	x =0;
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	607b      	str	r3, [r7, #4]
  while((curveIndex <= CURVES_TO_CONSIDER_INDEX) && (gimbalHyperframeTime <= MAX_HYPERFRAME_TIME)){
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <actuate_gimbal+0x474>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d807      	bhi.n	8001afe <actuate_gimbal+0x456>
 8001aee:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <actuate_gimbal+0x478>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001af6:	f67f ade9 	bls.w	80016cc <actuate_gimbal+0x24>
 8001afa:	e000      	b.n	8001afe <actuate_gimbal+0x456>
    	break;
 8001afc:	bf00      	nop
    }
    //ITM_Port32(0) = 4;
  }
  gimbalHyperframeTime = 0;
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <actuate_gimbal+0x478>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
  scheduledTime  = 0;
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <actuate_gimbal+0x470>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	801a      	strh	r2, [r3, #0]
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	2000020a 	.word	0x2000020a
 8001b1c:	20000208 	.word	0x20000208
 8001b20:	20000204 	.word	0x20000204

08001b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b24:	b598      	push	{r3, r4, r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b28:	f000 fb98 	bl	800225c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f874 	bl	8001c18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f000 f924 	bl	8001d7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b34:	f000 f8ce 	bl	8001cd4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001b38:	f000 f8f6 	bl	8001d28 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //uint8_t debugMsg[] = "hi\n";

  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE); // flag receive
 8001b3c:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <main+0xcc>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <main+0xcc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0220 	orr.w	r2, r2, #32
 8001b4a:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC); // flat Tx_IT
 8001b4c:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <main+0xcc>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	4b27      	ldr	r3, [pc, #156]	; (8001bf0 <main+0xcc>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b5a:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  init_gimbal();
 8001b5c:	f7ff fd72 	bl	8001644 <init_gimbal>

  HAL_UART_Transmit_IT(&huart2, (uint8_t*)setupInitMsg, sizeof(setupInitMsg));
 8001b60:	2213      	movs	r2, #19
 8001b62:	4924      	ldr	r1, [pc, #144]	; (8001bf4 <main+0xd0>)
 8001b64:	4822      	ldr	r0, [pc, #136]	; (8001bf0 <main+0xcc>)
 8001b66:	f001 fbff 	bl	8003368 <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   HAL_UART_Receive_IT(&huart2, &bufferRx[0], 5);
 8001b6a:	2205      	movs	r2, #5
 8001b6c:	4922      	ldr	r1, [pc, #136]	; (8001bf8 <main+0xd4>)
 8001b6e:	4820      	ldr	r0, [pc, #128]	; (8001bf0 <main+0xcc>)
 8001b70:	f001 fc3f 	bl	80033f2 <HAL_UART_Receive_IT>
	    // Magic pixie dust
	   if (UartReady != SET) {
 8001b74:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <main+0xd8>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d00f      	beq.n	8001b9e <main+0x7a>
      /* do shit all... The Part When UART interrupt is not triggered  */
       /* Turn the LED PIN OFF */
       HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2120      	movs	r1, #32
 8001b82:	481f      	ldr	r0, [pc, #124]	; (8001c00 <main+0xdc>)
 8001b84:	f000 feb4 	bl	80028f0 <HAL_GPIO_WritePin>

      //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
      //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
      if(newData == TRUE){
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <main+0xe0>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d002      	beq.n	8001b96 <main+0x72>
        //parseData(commBuff);
        //regensplines
        //interpolate splines 
        // fire to gimbal 
        newData = FALSE;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <main+0xe0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
      }
      
      
      // Find sleep functionality later and replace this here ...
      HAL_Delay(100); // MS
 8001b96:	2064      	movs	r0, #100	; 0x64
 8001b98:	f000 fbd2 	bl	8002340 <HAL_Delay>
      continue;
 8001b9c:	e027      	b.n	8001bee <main+0xca>
	    }
	   else {
       // The part when UART was triggered. 
	        UartReady = RESET;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <main+0xd8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
	        /* Turn the LED PIN ON */
	        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	4815      	ldr	r0, [pc, #84]	; (8001c00 <main+0xdc>)
 8001baa:	f000 fea1 	bl	80028f0 <HAL_GPIO_WritePin>
	        printf("command buffer is %s", commBuff);
 8001bae:	4916      	ldr	r1, [pc, #88]	; (8001c08 <main+0xe4>)
 8001bb0:	4816      	ldr	r0, [pc, #88]	; (8001c0c <main+0xe8>)
 8001bb2:	f004 f94d 	bl	8005e50 <iprintf>
	        memset(commBuff,32,21);
 8001bb6:	2215      	movs	r2, #21
 8001bb8:	2120      	movs	r1, #32
 8001bba:	4813      	ldr	r0, [pc, #76]	; (8001c08 <main+0xe4>)
 8001bbc:	f003 fb01 	bl	80051c2 <memset>
	        parseData((byte* )commBuff);
 8001bc0:	4811      	ldr	r0, [pc, #68]	; (8001c08 <main+0xe4>)
 8001bc2:	f7ff f9e9 	bl	8000f98 <parseData>
	        actuate_gimbal();
 8001bc6:	f7ff fd6f 	bl	80016a8 <actuate_gimbal>
	        printf("area.curves[0].d = 99 should be :%f", area.curves[0].d);
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <main+0xec>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fcc2 	bl	8000558 <__aeabi_f2d>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	460c      	mov	r4, r1
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4623      	mov	r3, r4
 8001bdc:	480d      	ldr	r0, [pc, #52]	; (8001c14 <main+0xf0>)
 8001bde:	f004 f937 	bl	8005e50 <iprintf>
	        memset(commBuff,0,sizeof(commBuff));
 8001be2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001be6:	2100      	movs	r1, #0
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <main+0xe4>)
 8001bea:	f003 faea 	bl	80051c2 <memset>
	   HAL_UART_Receive_IT(&huart2, &bufferRx[0], 5);
 8001bee:	e7bc      	b.n	8001b6a <main+0x46>
 8001bf0:	20001640 	.word	0x20001640
 8001bf4:	08009658 	.word	0x08009658
 8001bf8:	20001218 	.word	0x20001218
 8001bfc:	20000248 	.word	0x20000248
 8001c00:	40020000 	.word	0x40020000
 8001c04:	20000249 	.word	0x20000249
 8001c08:	20000620 	.word	0x20000620
 8001c0c:	08009610 	.word	0x08009610
 8001c10:	20000530 	.word	0x20000530
 8001c14:	08009628 	.word	0x08009628

08001c18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b094      	sub	sp, #80	; 0x50
 8001c1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c1e:	f107 0320 	add.w	r3, r7, #32
 8001c22:	2230      	movs	r2, #48	; 0x30
 8001c24:	2100      	movs	r1, #0
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 facb 	bl	80051c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	4b22      	ldr	r3, [pc, #136]	; (8001ccc <SystemClock_Config+0xb4>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <SystemClock_Config+0xb4>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <SystemClock_Config+0xb4>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c58:	2300      	movs	r3, #0
 8001c5a:	607b      	str	r3, [r7, #4]
 8001c5c:	4b1c      	ldr	r3, [pc, #112]	; (8001cd0 <SystemClock_Config+0xb8>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <SystemClock_Config+0xb8>)
 8001c62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <SystemClock_Config+0xb8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c70:	607b      	str	r3, [r7, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c84:	f107 0320 	add.w	r3, r7, #32
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f000 fe4b 	bl	8002924 <HAL_RCC_OscConfig>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001c94:	f000 f8a4 	bl	8001de0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c98:	230f      	movs	r3, #15
 8001c9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f001 f8a6 	bl	8002e04 <HAL_RCC_ClockConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001cbe:	f000 f88f 	bl	8001de0 <Error_Handler>
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3750      	adds	r7, #80	; 0x50
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40007000 	.word	0x40007000

08001cd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <MX_USART2_UART_Init+0x50>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_USART2_UART_Init+0x4c>)
 8001d0c:	f001 fa46 	bl	800319c <HAL_UART_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d16:	f000 f863 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20001640 	.word	0x20001640
 8001d24:	40004400 	.word	0x40004400

08001d28 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <MX_USART6_UART_Init+0x50>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_USART6_UART_Init+0x4c>)
 8001d60:	f001 fa1c 	bl	800319c <HAL_UART_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001d6a:	f000 f839 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000140c 	.word	0x2000140c
 8001d78:	40011400 	.word	0x40011400

08001d7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d90:	2300      	movs	r3, #0
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <MX_GPIO_Init+0x5c>)
 8001d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <MX_GPIO_Init+0x5c>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <MX_GPIO_Init+0x5c>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	603b      	str	r3, [r7, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2120      	movs	r1, #32
 8001db0:	480a      	ldr	r0, [pc, #40]	; (8001ddc <MX_GPIO_Init+0x60>)
 8001db2:	f000 fd9d 	bl	80028f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001db6:	2320      	movs	r3, #32
 8001db8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4804      	ldr	r0, [pc, #16]	; (8001ddc <MX_GPIO_Init+0x60>)
 8001dcc:	f000 fc0e 	bl	80025ec <HAL_GPIO_Init>

}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40020000 	.word	0x40020000

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_MspInit+0x4c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a0f      	ldr	r2, [pc, #60]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	607b      	str	r3, [r7, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	4b09      	ldr	r3, [pc, #36]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	4a08      	ldr	r2, [pc, #32]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	6413      	str	r3, [r2, #64]	; 0x40
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_MspInit+0x4c>)
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800

08001e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08c      	sub	sp, #48	; 0x30
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e48:	f107 031c 	add.w	r3, r7, #28
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a36      	ldr	r2, [pc, #216]	; (8001f38 <HAL_UART_MspInit+0xf8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d134      	bne.n	8001ecc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a34      	ldr	r2, [pc, #208]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b32      	ldr	r3, [pc, #200]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eaa:	2307      	movs	r3, #7
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4822      	ldr	r0, [pc, #136]	; (8001f40 <HAL_UART_MspInit+0x100>)
 8001eb6:	f000 fb99 	bl	80025ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	2026      	movs	r0, #38	; 0x26
 8001ec0:	f000 fb3b 	bl	800253a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec4:	2026      	movs	r0, #38	; 0x26
 8001ec6:	f000 fb54 	bl	8002572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001eca:	e031      	b.n	8001f30 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART6)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_UART_MspInit+0x104>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12c      	bne.n	8001f30 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	; 0x30
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_UART_MspInit+0xfc>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f0e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f20:	2308      	movs	r3, #8
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f24:	f107 031c 	add.w	r3, r7, #28
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_UART_MspInit+0x100>)
 8001f2c:	f000 fb5e 	bl	80025ec <HAL_GPIO_Init>
}
 8001f30:	bf00      	nop
 8001f32:	3730      	adds	r7, #48	; 0x30
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40004400 	.word	0x40004400
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40011400 	.word	0x40011400

08001f48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <HardFault_Handler+0x4>

08001f5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <MemManage_Handler+0x4>

08001f62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <BusFault_Handler+0x4>

08001f68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <UsageFault_Handler+0x4>

08001f6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9c:	f000 f9b0 	bl	8002300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  gimbalHyperframeTime++;
 8001fa0:	4b03      	ldr	r3, [pc, #12]	; (8001fb0 <SysTick_Handler+0x18>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a02      	ldr	r2, [pc, #8]	; (8001fb0 <SysTick_Handler+0x18>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* USER CODE END SysTick_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000204 	.word	0x20000204

08001fb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb8:	481b      	ldr	r0, [pc, #108]	; (8002028 <USART2_IRQHandler+0x74>)
 8001fba:	f001 fa6f 	bl	800349c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*)bufferRx, 1 );
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	491a      	ldr	r1, [pc, #104]	; (800202c <USART2_IRQHandler+0x78>)
 8001fc2:	4819      	ldr	r0, [pc, #100]	; (8002028 <USART2_IRQHandler+0x74>)
 8001fc4:	f001 fa15 	bl	80033f2 <HAL_UART_Receive_IT>
   // write the bytes to our Command buffer
   commBuff[commBuff_index] = bufferRx[0];
 8001fc8:	4b19      	ldr	r3, [pc, #100]	; (8002030 <USART2_IRQHandler+0x7c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a17      	ldr	r2, [pc, #92]	; (800202c <USART2_IRQHandler+0x78>)
 8001fce:	7811      	ldrb	r1, [r2, #0]
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <USART2_IRQHandler+0x80>)
 8001fd2:	54d1      	strb	r1, [r2, r3]
   if (bufferRx[0] == '\r' || bufferRx[0] == '\n' || bufferRx[0] == 'q')
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <USART2_IRQHandler+0x78>)
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	2b0d      	cmp	r3, #13
 8001fda:	d007      	beq.n	8001fec <USART2_IRQHandler+0x38>
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <USART2_IRQHandler+0x78>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b0a      	cmp	r3, #10
 8001fe2:	d003      	beq.n	8001fec <USART2_IRQHandler+0x38>
 8001fe4:	4b11      	ldr	r3, [pc, #68]	; (800202c <USART2_IRQHandler+0x78>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b71      	cmp	r3, #113	; 0x71
 8001fea:	d116      	bne.n	800201a <USART2_IRQHandler+0x66>
   {
       UartReady = SET;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <USART2_IRQHandler+0x84>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]
       HAL_UART_Transmit(&huart2, (uint8_t*)commBuff, sizeof(commBuff), 100);
 8001ff2:	2364      	movs	r3, #100	; 0x64
 8001ff4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ff8:	490e      	ldr	r1, [pc, #56]	; (8002034 <USART2_IRQHandler+0x80>)
 8001ffa:	480b      	ldr	r0, [pc, #44]	; (8002028 <USART2_IRQHandler+0x74>)
 8001ffc:	f001 f91b 	bl	8003236 <HAL_UART_Transmit>
       sent_index=commBuff_index;
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <USART2_IRQHandler+0x7c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a0d      	ldr	r2, [pc, #52]	; (800203c <USART2_IRQHandler+0x88>)
 8002006:	6013      	str	r3, [r2, #0]
       bufferRx[0] = '\0';
 8002008:	4b08      	ldr	r3, [pc, #32]	; (800202c <USART2_IRQHandler+0x78>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
       commBuff_index = 0;
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <USART2_IRQHandler+0x7c>)
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
       newData = TRUE;  
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <USART2_IRQHandler+0x8c>)
 8002016:	2201      	movs	r2, #1
 8002018:	701a      	strb	r2, [r3, #0]
   }
   // use normal transmit (not transmit_IT) so we don't
   // get duplicates in the buffer
   // TODO - stop using this dirty hack...
   //HAL_UART_Transmit(&huart2, bufferRx, 5,100);
   commBuff_index++;
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <USART2_IRQHandler+0x7c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3301      	adds	r3, #1
 8002020:	4a03      	ldr	r2, [pc, #12]	; (8002030 <USART2_IRQHandler+0x7c>)
 8002022:	6013      	str	r3, [r2, #0]
  /* USER CODE END USART2_IRQn 1 */
}
 8002024:	bf00      	nop
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20001640 	.word	0x20001640
 800202c:	20001218 	.word	0x20001218
 8002030:	20000250 	.word	0x20000250
 8002034:	20000620 	.word	0x20000620
 8002038:	20000248 	.word	0x20000248
 800203c:	2000024c 	.word	0x2000024c
 8002040:	20000249 	.word	0x20000249

08002044 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <ITM_SendChar+0x48>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a0e      	ldr	r2, [pc, #56]	; (800208c <ITM_SendChar+0x48>)
 8002054:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002058:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800205a:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <ITM_SendChar+0x4c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <ITM_SendChar+0x4c>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002066:	bf00      	nop
 8002068:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f8      	beq.n	8002068 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002076:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800207a:	79fb      	ldrb	r3, [r7, #7]
 800207c:	6013      	str	r3, [r2, #0]
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000edfc 	.word	0xe000edfc
 8002090:	e0000e00 	.word	0xe0000e00

08002094 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	60b9      	str	r1, [r7, #8]
 800209e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	e00a      	b.n	80020bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020a6:	f3af 8000 	nop.w
 80020aa:	4601      	mov	r1, r0
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	60ba      	str	r2, [r7, #8]
 80020b2:	b2ca      	uxtb	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	dbf0      	blt.n	80020a6 <_read+0x12>
	}

return len;
 80020c4:	687b      	ldr	r3, [r7, #4]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b086      	sub	sp, #24
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	e009      	b.n	80020f4 <_write+0x26>
	{
		/*__io_putchar(*ptr++);*/
		ITM_SendChar(*ptr++);
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ffab 	bl	8002044 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	3301      	adds	r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	dbf1      	blt.n	80020e0 <_write+0x12>
	}
	return len;
 80020fc:	687b      	ldr	r3, [r7, #4]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <_close>:

int _close(int file)
{
 8002106:	b480      	push	{r7}
 8002108:	b083      	sub	sp, #12
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
	return -1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800212e:	605a      	str	r2, [r3, #4]
	return 0;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_isatty>:

int _isatty(int file)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
	return 1;
 8002146:	2301      	movs	r3, #1
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
	return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002178:	4a14      	ldr	r2, [pc, #80]	; (80021cc <_sbrk+0x5c>)
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <_sbrk+0x60>)
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002184:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d102      	bne.n	8002192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x64>)
 800218e:	4a12      	ldr	r2, [pc, #72]	; (80021d8 <_sbrk+0x68>)
 8002190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	429a      	cmp	r2, r3
 800219e:	d207      	bcs.n	80021b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021a0:	f002 ffda 	bl	8005158 <__errno>
 80021a4:	4602      	mov	r2, r0
 80021a6:	230c      	movs	r3, #12
 80021a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80021aa:	f04f 33ff 	mov.w	r3, #4294967295
 80021ae:	e009      	b.n	80021c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021b0:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <_sbrk+0x64>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b6:	4b07      	ldr	r3, [pc, #28]	; (80021d4 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sbrk+0x64>)
 80021c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	20020000 	.word	0x20020000
 80021d0:	00000400 	.word	0x00000400
 80021d4:	20000254 	.word	0x20000254
 80021d8:	20001688 	.word	0x20001688

080021dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <SystemInit+0x28>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <SystemInit+0x28>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021f0:	4b04      	ldr	r3, [pc, #16]	; (8002204 <SystemInit+0x28>)
 80021f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021f6:	609a      	str	r2, [r3, #8]
#endif
}
 80021f8:	bf00      	nop
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002240 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800220c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800220e:	e003      	b.n	8002218 <LoopCopyDataInit>

08002210 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002212:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002214:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002216:	3104      	adds	r1, #4

08002218 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002218:	480b      	ldr	r0, [pc, #44]	; (8002248 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800221c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800221e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002220:	d3f6      	bcc.n	8002210 <CopyDataInit>
  ldr  r2, =_sbss
 8002222:	4a0b      	ldr	r2, [pc, #44]	; (8002250 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002224:	e002      	b.n	800222c <LoopFillZerobss>

08002226 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002226:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002228:	f842 3b04 	str.w	r3, [r2], #4

0800222c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800222c:	4b09      	ldr	r3, [pc, #36]	; (8002254 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800222e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002230:	d3f9      	bcc.n	8002226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002232:	f7ff ffd3 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002236:	f002 ff95 	bl	8005164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800223a:	f7ff fc73 	bl	8001b24 <main>
  bx  lr    
 800223e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002240:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002244:	080099f8 	.word	0x080099f8
  ldr  r0, =_sdata
 8002248:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800224c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002250:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002254:	20001688 	.word	0x20001688

08002258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002258:	e7fe      	b.n	8002258 <ADC_IRQHandler>
	...

0800225c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002260:	4b0e      	ldr	r3, [pc, #56]	; (800229c <HAL_Init+0x40>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a0d      	ldr	r2, [pc, #52]	; (800229c <HAL_Init+0x40>)
 8002266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800226a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_Init+0x40>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0a      	ldr	r2, [pc, #40]	; (800229c <HAL_Init+0x40>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002278:	4b08      	ldr	r3, [pc, #32]	; (800229c <HAL_Init+0x40>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a07      	ldr	r2, [pc, #28]	; (800229c <HAL_Init+0x40>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002284:	2003      	movs	r0, #3
 8002286:	f000 f94d 	bl	8002524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800228a:	2000      	movs	r0, #0
 800228c:	f000 f808 	bl	80022a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002290:	f7ff fdae 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00

080022a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022a8:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_InitTick+0x54>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_InitTick+0x58>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 f965 	bl	800258e <HAL_SYSTICK_Config>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00e      	b.n	80022ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b0f      	cmp	r3, #15
 80022d2:	d80a      	bhi.n	80022ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022d4:	2200      	movs	r2, #0
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	f04f 30ff 	mov.w	r0, #4294967295
 80022dc:	f000 f92d 	bl	800253a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e0:	4a06      	ldr	r2, [pc, #24]	; (80022fc <HAL_InitTick+0x5c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	e000      	b.n	80022ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20000004 	.word	0x20000004
 80022f8:	2000000c 	.word	0x2000000c
 80022fc:	20000008 	.word	0x20000008

08002300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002304:	4b06      	ldr	r3, [pc, #24]	; (8002320 <HAL_IncTick+0x20>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_IncTick+0x24>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4413      	add	r3, r2
 8002310:	4a04      	ldr	r2, [pc, #16]	; (8002324 <HAL_IncTick+0x24>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	2000000c 	.word	0x2000000c
 8002324:	20001680 	.word	0x20001680

08002328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return uwTick;
 800232c:	4b03      	ldr	r3, [pc, #12]	; (800233c <HAL_GetTick+0x14>)
 800232e:	681b      	ldr	r3, [r3, #0]
}
 8002330:	4618      	mov	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	20001680 	.word	0x20001680

08002340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff ffee 	bl	8002328 <HAL_GetTick>
 800234c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002358:	d005      	beq.n	8002366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800235a:	4b09      	ldr	r3, [pc, #36]	; (8002380 <HAL_Delay+0x40>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4413      	add	r3, r2
 8002364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002366:	bf00      	nop
 8002368:	f7ff ffde 	bl	8002328 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	429a      	cmp	r2, r3
 8002376:	d8f7      	bhi.n	8002368 <HAL_Delay+0x28>
  {
  }
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	2000000c 	.word	0x2000000c

08002384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a0:	4013      	ands	r3, r2
 80023a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023b6:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <__NVIC_SetPriorityGrouping+0x44>)
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	60d3      	str	r3, [r2, #12]
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d0:	4b04      	ldr	r3, [pc, #16]	; (80023e4 <__NVIC_GetPriorityGrouping+0x18>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	f003 0307 	and.w	r3, r3, #7
}
 80023da:	4618      	mov	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	4603      	mov	r3, r0
 80023f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	db0b      	blt.n	8002412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	f003 021f 	and.w	r2, r3, #31
 8002400:	4907      	ldr	r1, [pc, #28]	; (8002420 <__NVIC_EnableIRQ+0x38>)
 8002402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	2001      	movs	r0, #1
 800240a:	fa00 f202 	lsl.w	r2, r0, r2
 800240e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002412:	bf00      	nop
 8002414:	370c      	adds	r7, #12
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100

08002424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	6039      	str	r1, [r7, #0]
 800242e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	db0a      	blt.n	800244e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	490c      	ldr	r1, [pc, #48]	; (8002470 <__NVIC_SetPriority+0x4c>)
 800243e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002442:	0112      	lsls	r2, r2, #4
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	440b      	add	r3, r1
 8002448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800244c:	e00a      	b.n	8002464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4908      	ldr	r1, [pc, #32]	; (8002474 <__NVIC_SetPriority+0x50>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	3b04      	subs	r3, #4
 800245c:	0112      	lsls	r2, r2, #4
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	440b      	add	r3, r1
 8002462:	761a      	strb	r2, [r3, #24]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	e000e100 	.word	0xe000e100
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002478:	b480      	push	{r7}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	f1c3 0307 	rsb	r3, r3, #7
 8002492:	2b04      	cmp	r3, #4
 8002494:	bf28      	it	cs
 8002496:	2304      	movcs	r3, #4
 8002498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3304      	adds	r3, #4
 800249e:	2b06      	cmp	r3, #6
 80024a0:	d902      	bls.n	80024a8 <NVIC_EncodePriority+0x30>
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3b03      	subs	r3, #3
 80024a6:	e000      	b.n	80024aa <NVIC_EncodePriority+0x32>
 80024a8:	2300      	movs	r3, #0
 80024aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43da      	mvns	r2, r3
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	401a      	ands	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c0:	f04f 31ff 	mov.w	r1, #4294967295
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43d9      	mvns	r1, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d0:	4313      	orrs	r3, r2
         );
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3724      	adds	r7, #36	; 0x24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f0:	d301      	bcc.n	80024f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f2:	2301      	movs	r3, #1
 80024f4:	e00f      	b.n	8002516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f6:	4a0a      	ldr	r2, [pc, #40]	; (8002520 <SysTick_Config+0x40>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3b01      	subs	r3, #1
 80024fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024fe:	210f      	movs	r1, #15
 8002500:	f04f 30ff 	mov.w	r0, #4294967295
 8002504:	f7ff ff8e 	bl	8002424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <SysTick_Config+0x40>)
 800250a:	2200      	movs	r2, #0
 800250c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800250e:	4b04      	ldr	r3, [pc, #16]	; (8002520 <SysTick_Config+0x40>)
 8002510:	2207      	movs	r2, #7
 8002512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000e010 	.word	0xe000e010

08002524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ff29 	bl	8002384 <__NVIC_SetPriorityGrouping>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253a:	b580      	push	{r7, lr}
 800253c:	b086      	sub	sp, #24
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	607a      	str	r2, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254c:	f7ff ff3e 	bl	80023cc <__NVIC_GetPriorityGrouping>
 8002550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	68b9      	ldr	r1, [r7, #8]
 8002556:	6978      	ldr	r0, [r7, #20]
 8002558:	f7ff ff8e 	bl	8002478 <NVIC_EncodePriority>
 800255c:	4602      	mov	r2, r0
 800255e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002562:	4611      	mov	r1, r2
 8002564:	4618      	mov	r0, r3
 8002566:	f7ff ff5d 	bl	8002424 <__NVIC_SetPriority>
}
 800256a:	bf00      	nop
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	4603      	mov	r3, r0
 800257a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff ff31 	bl	80023e8 <__NVIC_EnableIRQ>
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ffa2 	bl	80024e0 <SysTick_Config>
 800259c:	4603      	mov	r3, r0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d004      	beq.n	80025c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e00c      	b.n	80025de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2205      	movs	r2, #5
 80025c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0201 	bic.w	r2, r2, #1
 80025da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e159      	b.n	80028bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002608:	2201      	movs	r2, #1
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	429a      	cmp	r2, r3
 8002622:	f040 8148 	bne.w	80028b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d00b      	beq.n	8002646 <HAL_GPIO_Init+0x5a>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d007      	beq.n	8002646 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800263a:	2b11      	cmp	r3, #17
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	2b12      	cmp	r3, #18
 8002644:	d130      	bne.n	80026a8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	2203      	movs	r2, #3
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 0201 	and.w	r2, r3, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	2203      	movs	r2, #3
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0xfc>
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b12      	cmp	r3, #18
 80026e6:	d123      	bne.n	8002730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	08da      	lsrs	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3208      	adds	r2, #8
 80026f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	220f      	movs	r2, #15
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	4013      	ands	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	691a      	ldr	r2, [r3, #16]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	08da      	lsrs	r2, r3, #3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3208      	adds	r2, #8
 800272a:	69b9      	ldr	r1, [r7, #24]
 800272c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	2203      	movs	r2, #3
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	43db      	mvns	r3, r3
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4013      	ands	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0203 	and.w	r2, r3, #3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80a2 	beq.w	80028b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <HAL_GPIO_Init+0x2e4>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	4a55      	ldr	r2, [pc, #340]	; (80028d0 <HAL_GPIO_Init+0x2e4>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002780:	6453      	str	r3, [r2, #68]	; 0x44
 8002782:	4b53      	ldr	r3, [pc, #332]	; (80028d0 <HAL_GPIO_Init+0x2e4>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800278e:	4a51      	ldr	r2, [pc, #324]	; (80028d4 <HAL_GPIO_Init+0x2e8>)
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	089b      	lsrs	r3, r3, #2
 8002794:	3302      	adds	r3, #2
 8002796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0303 	and.w	r3, r3, #3
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	220f      	movs	r2, #15
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43db      	mvns	r3, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4013      	ands	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a48      	ldr	r2, [pc, #288]	; (80028d8 <HAL_GPIO_Init+0x2ec>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d019      	beq.n	80027ee <HAL_GPIO_Init+0x202>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a47      	ldr	r2, [pc, #284]	; (80028dc <HAL_GPIO_Init+0x2f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d013      	beq.n	80027ea <HAL_GPIO_Init+0x1fe>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a46      	ldr	r2, [pc, #280]	; (80028e0 <HAL_GPIO_Init+0x2f4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00d      	beq.n	80027e6 <HAL_GPIO_Init+0x1fa>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a45      	ldr	r2, [pc, #276]	; (80028e4 <HAL_GPIO_Init+0x2f8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d007      	beq.n	80027e2 <HAL_GPIO_Init+0x1f6>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a44      	ldr	r2, [pc, #272]	; (80028e8 <HAL_GPIO_Init+0x2fc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d101      	bne.n	80027de <HAL_GPIO_Init+0x1f2>
 80027da:	2304      	movs	r3, #4
 80027dc:	e008      	b.n	80027f0 <HAL_GPIO_Init+0x204>
 80027de:	2307      	movs	r3, #7
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x204>
 80027e2:	2303      	movs	r3, #3
 80027e4:	e004      	b.n	80027f0 <HAL_GPIO_Init+0x204>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e002      	b.n	80027f0 <HAL_GPIO_Init+0x204>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_GPIO_Init+0x204>
 80027ee:	2300      	movs	r3, #0
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	f002 0203 	and.w	r2, r2, #3
 80027f6:	0092      	lsls	r2, r2, #2
 80027f8:	4093      	lsls	r3, r2
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002800:	4934      	ldr	r1, [pc, #208]	; (80028d4 <HAL_GPIO_Init+0x2e8>)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	089b      	lsrs	r3, r3, #2
 8002806:	3302      	adds	r3, #2
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800280e:	4b37      	ldr	r3, [pc, #220]	; (80028ec <HAL_GPIO_Init+0x300>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	43db      	mvns	r3, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4013      	ands	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002832:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_GPIO_Init+0x300>)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002838:	4b2c      	ldr	r3, [pc, #176]	; (80028ec <HAL_GPIO_Init+0x300>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	4313      	orrs	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800285c:	4a23      	ldr	r2, [pc, #140]	; (80028ec <HAL_GPIO_Init+0x300>)
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <HAL_GPIO_Init+0x300>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d003      	beq.n	8002886 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4313      	orrs	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002886:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_GPIO_Init+0x300>)
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_GPIO_Init+0x300>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	43db      	mvns	r3, r3
 8002896:	69ba      	ldr	r2, [r7, #24]
 8002898:	4013      	ands	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d003      	beq.n	80028b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b0:	4a0e      	ldr	r2, [pc, #56]	; (80028ec <HAL_GPIO_Init+0x300>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3301      	adds	r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	2b0f      	cmp	r3, #15
 80028c0:	f67f aea2 	bls.w	8002608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	3724      	adds	r7, #36	; 0x24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	40023800 	.word	0x40023800
 80028d4:	40013800 	.word	0x40013800
 80028d8:	40020000 	.word	0x40020000
 80028dc:	40020400 	.word	0x40020400
 80028e0:	40020800 	.word	0x40020800
 80028e4:	40020c00 	.word	0x40020c00
 80028e8:	40021000 	.word	0x40021000
 80028ec:	40013c00 	.word	0x40013c00

080028f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
 80028fc:	4613      	mov	r3, r2
 80028fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002900:	787b      	ldrb	r3, [r7, #1]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d003      	beq.n	800290e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002906:	887a      	ldrh	r2, [r7, #2]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800290c:	e003      	b.n	8002916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	041a      	lsls	r2, r3, #16
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e25b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d075      	beq.n	8002a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002942:	4ba3      	ldr	r3, [pc, #652]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b04      	cmp	r3, #4
 800294c:	d00c      	beq.n	8002968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294e:	4ba0      	ldr	r3, [pc, #640]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002956:	2b08      	cmp	r3, #8
 8002958:	d112      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295a:	4b9d      	ldr	r3, [pc, #628]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002966:	d10b      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	4b99      	ldr	r3, [pc, #612]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05b      	beq.n	8002a2c <HAL_RCC_OscConfig+0x108>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d157      	bne.n	8002a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e236      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d106      	bne.n	8002998 <HAL_RCC_OscConfig+0x74>
 800298a:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a90      	ldr	r2, [pc, #576]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e01d      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a8a      	ldr	r2, [pc, #552]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a87      	ldr	r2, [pc, #540]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 80029bc:	4b84      	ldr	r3, [pc, #528]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a83      	ldr	r2, [pc, #524]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a80      	ldr	r2, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7ff fca4 	bl	8002328 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7ff fca0 	bl	8002328 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1fb      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0xc0>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7ff fc90 	bl	8002328 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7ff fc8c 	bl	8002328 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1e7      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0xe8>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3a:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a46:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d11c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a52:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1bb      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4952      	ldr	r1, [pc, #328]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	e03a      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <HAL_RCC_OscConfig+0x2b0>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7ff fc45 	bl	8002328 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7ff fc41 	bl	8002328 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e19c      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4940      	ldr	r1, [pc, #256]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <HAL_RCC_OscConfig+0x2b0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7ff fc24 	bl	8002328 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7ff fc20 	bl	8002328 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e17b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d030      	beq.n	8002b70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_OscConfig+0x2b4>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7ff fc04 	bl	8002328 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7ff fc00 	bl	8002328 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e15b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x200>
 8002b42:	e015      	b.n	8002b70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_OscConfig+0x2b4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7ff fbed 	bl	8002328 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b52:	f7ff fbe9 	bl	8002328 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e144      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a0 	beq.w	8002cbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d121      	bne.n	8002bfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7ff fbaf 	bl	8002328 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e011      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2ce>
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
 8002bd8:	42470e80 	.word	0x42470e80
 8002bdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be0:	f7ff fba2 	bl	8002328 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0fd      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
 8002c06:	4b7d      	ldr	r3, [pc, #500]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a7c      	ldr	r2, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e01c      	b.n	8002c4e <HAL_RCC_OscConfig+0x32a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x312>
 8002c1c:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a76      	ldr	r2, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	4b74      	ldr	r3, [pc, #464]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a73      	ldr	r2, [pc, #460]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	e00b      	b.n	8002c4e <HAL_RCC_OscConfig+0x32a>
 8002c36:	4b71      	ldr	r3, [pc, #452]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a70      	ldr	r2, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a6d      	ldr	r2, [pc, #436]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d015      	beq.n	8002c82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7ff fb67 	bl	8002328 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7ff fb63 	bl	8002328 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0bc      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ee      	beq.n	8002c5e <HAL_RCC_OscConfig+0x33a>
 8002c80:	e014      	b.n	8002cac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7ff fb51 	bl	8002328 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7ff fb4d 	bl	8002328 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0a6      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca0:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ee      	bne.n	8002c8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a51      	ldr	r2, [pc, #324]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8092 	beq.w	8002dec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d05c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d141      	bne.n	8002d60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7ff fb21 	bl	8002328 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cea:	f7ff fb1d 	bl	8002328 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e078      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	019b      	lsls	r3, r3, #6
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	4933      	ldr	r1, [pc, #204]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d32:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7ff faf6 	bl	8002328 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7ff faf2 	bl	8002328 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04d      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x41c>
 8002d5e:	e045      	b.n	8002dec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7ff fadf 	bl	8002328 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7ff fadb 	bl	8002328 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e036      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x44a>
 8002d8c:	e02e      	b.n	8002dec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e029      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d115      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470060 	.word	0x42470060

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cc      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d90c      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4934      	ldr	r1, [pc, #208]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7ff fa18 	bl	8002328 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7ff fa14 	bl	8002328 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20c      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4601      	mov	r1, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	5cd3      	ldrb	r3, [r2, r3]
 8002f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f978 	bl	80022a0 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	0800966c 	.word	0x0800966c
 8002fc8:	20000004 	.word	0x20000004
 8002fcc:	20000008 	.word	0x20000008

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe6:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d007      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x32>
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d008      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x38>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 808d 	bne.w	8003116 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	; (800312c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ffe:	60bb      	str	r3, [r7, #8]
       break;
 8003000:	e08c      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003004:	60bb      	str	r3, [r7, #8]
      break;
 8003006:	e089      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003008:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003010:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003012:	4b45      	ldr	r3, [pc, #276]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d023      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301e:	4b42      	ldr	r3, [pc, #264]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	099b      	lsrs	r3, r3, #6
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	f240 11ff 	movw	r1, #511	; 0x1ff
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	ea03 0501 	and.w	r5, r3, r1
 8003034:	ea04 0602 	and.w	r6, r4, r2
 8003038:	4a3d      	ldr	r2, [pc, #244]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 800303a:	fb02 f106 	mul.w	r1, r2, r6
 800303e:	2200      	movs	r2, #0
 8003040:	fb02 f205 	mul.w	r2, r2, r5
 8003044:	440a      	add	r2, r1
 8003046:	493a      	ldr	r1, [pc, #232]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003048:	fba5 0101 	umull	r0, r1, r5, r1
 800304c:	1853      	adds	r3, r2, r1
 800304e:	4619      	mov	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f04f 0400 	mov.w	r4, #0
 8003056:	461a      	mov	r2, r3
 8003058:	4623      	mov	r3, r4
 800305a:	f7fd fe1d 	bl	8000c98 <__aeabi_uldivmod>
 800305e:	4603      	mov	r3, r0
 8003060:	460c      	mov	r4, r1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e049      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	ea03 0501 	and.w	r5, r3, r1
 800307c:	ea04 0602 	and.w	r6, r4, r2
 8003080:	4629      	mov	r1, r5
 8003082:	4632      	mov	r2, r6
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	f04f 0400 	mov.w	r4, #0
 800308c:	0154      	lsls	r4, r2, #5
 800308e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003092:	014b      	lsls	r3, r1, #5
 8003094:	4619      	mov	r1, r3
 8003096:	4622      	mov	r2, r4
 8003098:	1b49      	subs	r1, r1, r5
 800309a:	eb62 0206 	sbc.w	r2, r2, r6
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f04f 0400 	mov.w	r4, #0
 80030a6:	0194      	lsls	r4, r2, #6
 80030a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030ac:	018b      	lsls	r3, r1, #6
 80030ae:	1a5b      	subs	r3, r3, r1
 80030b0:	eb64 0402 	sbc.w	r4, r4, r2
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	00e2      	lsls	r2, r4, #3
 80030be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030c2:	00d9      	lsls	r1, r3, #3
 80030c4:	460b      	mov	r3, r1
 80030c6:	4614      	mov	r4, r2
 80030c8:	195b      	adds	r3, r3, r5
 80030ca:	eb44 0406 	adc.w	r4, r4, r6
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	02a2      	lsls	r2, r4, #10
 80030d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030dc:	0299      	lsls	r1, r3, #10
 80030de:	460b      	mov	r3, r1
 80030e0:	4614      	mov	r4, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	4621      	mov	r1, r4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f04f 0400 	mov.w	r4, #0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	f7fd fdd2 	bl	8000c98 <__aeabi_uldivmod>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	3301      	adds	r3, #1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	60bb      	str	r3, [r7, #8]
      break;
 8003114:	e002      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003118:	60bb      	str	r3, [r7, #8]
      break;
 800311a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311c:	68bb      	ldr	r3, [r7, #8]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	00f42400 	.word	0x00f42400
 8003130:	017d7840 	.word	0x017d7840

08003134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_RCC_GetHCLKFreq+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	20000004 	.word	0x20000004

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003150:	f7ff fff0 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003154:	4601      	mov	r1, r0
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	0a9b      	lsrs	r3, r3, #10
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4a03      	ldr	r2, [pc, #12]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003162:	5cd3      	ldrb	r3, [r2, r3]
 8003164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003168:	4618      	mov	r0, r3
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40023800 	.word	0x40023800
 8003170:	0800967c 	.word	0x0800967c

08003174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003178:	f7ff ffdc 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 800317c:	4601      	mov	r1, r0
 800317e:	4b05      	ldr	r3, [pc, #20]	; (8003194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	0b5b      	lsrs	r3, r3, #13
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	4a03      	ldr	r2, [pc, #12]	; (8003198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800318a:	5cd3      	ldrb	r3, [r2, r3]
 800318c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003190:	4618      	mov	r0, r3
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40023800 	.word	0x40023800
 8003198:	0800967c 	.word	0x0800967c

0800319c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e03f      	b.n	800322e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7fe fe3c 	bl	8001e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68da      	ldr	r2, [r3, #12]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fbe5 	bl	80039b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	691a      	ldr	r2, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003204:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003214:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2220      	movs	r2, #32
 8003220:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b088      	sub	sp, #32
 800323a:	af02      	add	r7, sp, #8
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	603b      	str	r3, [r7, #0]
 8003242:	4613      	mov	r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b20      	cmp	r3, #32
 8003254:	f040 8083 	bne.w	800335e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_UART_Transmit+0x2e>
 800325e:	88fb      	ldrh	r3, [r7, #6]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e07b      	b.n	8003360 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_UART_Transmit+0x40>
 8003272:	2302      	movs	r3, #2
 8003274:	e074      	b.n	8003360 <HAL_UART_Transmit+0x12a>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2221      	movs	r2, #33	; 0x21
 8003288:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800328c:	f7ff f84c 	bl	8002328 <HAL_GetTick>
 8003290:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	88fa      	ldrh	r2, [r7, #6]
 8003296:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80032a6:	e042      	b.n	800332e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032be:	d122      	bne.n	8003306 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fa04 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e042      	b.n	8003360 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	881b      	ldrh	r3, [r3, #0]
 80032e2:	461a      	mov	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032ec:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d103      	bne.n	80032fe <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	3302      	adds	r3, #2
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	e017      	b.n	800332e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	60bb      	str	r3, [r7, #8]
 8003304:	e013      	b.n	800332e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2180      	movs	r1, #128	; 0x80
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f9e1 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e01f      	b.n	8003360 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	60ba      	str	r2, [r7, #8]
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1b7      	bne.n	80032a8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	2200      	movs	r2, #0
 8003340:	2140      	movs	r1, #64	; 0x40
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f9c8 	bl	80036d8 <UART_WaitOnFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e006      	b.n	8003360 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
  }
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	4613      	mov	r3, r2
 8003374:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b20      	cmp	r3, #32
 8003380:	d130      	bne.n	80033e4 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_UART_Transmit_IT+0x26>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e029      	b.n	80033e6 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Transmit_IT+0x38>
 800339c:	2302      	movs	r3, #2
 800339e:	e022      	b.n	80033e6 <HAL_UART_Transmit_IT+0x7e>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	88fa      	ldrh	r2, [r7, #6]
 80033b8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2221      	movs	r2, #33	; 0x21
 80033c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033de:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	4613      	mov	r3, r2
 80033fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	d140      	bne.n	800348e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_Receive_IT+0x26>
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e039      	b.n	8003490 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_UART_Receive_IT+0x38>
 8003426:	2302      	movs	r3, #2
 8003428:	e032      	b.n	8003490 <HAL_UART_Receive_IT+0x9e>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2222      	movs	r2, #34	; 0x22
 800344e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003468:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0201 	orr.w	r2, r2, #1
 8003478:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_UART_IRQHandler+0x52>
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f9e0 	bl	80038ac <UART_Receive_IT>
      return;
 80034ec:	e0d1      	b.n	8003692 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80b0 	beq.w	8003656 <HAL_UART_IRQHandler+0x1ba>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_UART_IRQHandler+0x70>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80a5 	beq.w	8003656 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_UART_IRQHandler+0x90>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_UART_IRQHandler+0xb0>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	f043 0202 	orr.w	r2, r3, #2
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_UART_IRQHandler+0xd0>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	f043 0204 	orr.w	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <HAL_UART_IRQHandler+0xfa>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <HAL_UART_IRQHandler+0xee>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	f043 0208 	orr.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d078      	beq.n	8003690 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_UART_IRQHandler+0x11c>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f97a 	bl	80038ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_UART_IRQHandler+0x144>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d031      	beq.n	8003644 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8c3 	bl	800376c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d123      	bne.n	800363c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003602:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003610:	4a21      	ldr	r2, [pc, #132]	; (8003698 <HAL_UART_IRQHandler+0x1fc>)
 8003612:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe ffc4 	bl	80025a6 <HAL_DMA_Abort_IT>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d016      	beq.n	8003652 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800362e:	4610      	mov	r0, r2
 8003630:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003632:	e00e      	b.n	8003652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f845 	bl	80036c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363a:	e00a      	b.n	8003652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f841 	bl	80036c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003642:	e006      	b.n	8003652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f83d 	bl	80036c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003650:	e01e      	b.n	8003690 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003652:	bf00      	nop
    return;
 8003654:	e01c      	b.n	8003690 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_UART_IRQHandler+0x1d6>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8b0 	bl	80037d0 <UART_Transmit_IT>
    return;
 8003670:	e00f      	b.n	8003692 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00a      	beq.n	8003692 <HAL_UART_IRQHandler+0x1f6>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8f8 	bl	800387c <UART_EndTransmit_IT>
    return;
 800368c:	bf00      	nop
 800368e:	e000      	b.n	8003692 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003690:	bf00      	nop
  }
}
 8003692:	3720      	adds	r7, #32
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	080037a9 	.word	0x080037a9

0800369c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	603b      	str	r3, [r7, #0]
 80036e4:	4613      	mov	r3, r2
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e8:	e02c      	b.n	8003744 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f0:	d028      	beq.n	8003744 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <UART_WaitOnFlagUntilTimeout+0x30>
 80036f8:	f7fe fe16 	bl	8002328 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d21d      	bcs.n	8003744 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003716:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0201 	bic.w	r2, r2, #1
 8003726:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e00f      	b.n	8003764 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4013      	ands	r3, r2
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	bf0c      	ite	eq
 8003754:	2301      	moveq	r3, #1
 8003756:	2300      	movne	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	461a      	mov	r2, r3
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	429a      	cmp	r2, r3
 8003760:	d0c3      	beq.n	80036ea <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003782:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	695a      	ldr	r2, [r3, #20]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f022 0201 	bic.w	r2, r2, #1
 8003792:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff ff7e 	bl	80036c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b085      	sub	sp, #20
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b21      	cmp	r3, #33	; 0x21
 80037e2:	d144      	bne.n	800386e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ec:	d11a      	bne.n	8003824 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	881b      	ldrh	r3, [r3, #0]
 80037f8:	461a      	mov	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003802:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	1c9a      	adds	r2, r3, #2
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	621a      	str	r2, [r3, #32]
 8003816:	e00e      	b.n	8003836 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	621a      	str	r2, [r3, #32]
 8003822:	e008      	b.n	8003836 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	1c59      	adds	r1, r3, #1
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6211      	str	r1, [r2, #32]
 800382e:	781a      	ldrb	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29b      	uxth	r3, r3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4619      	mov	r1, r3
 8003844:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10f      	bne.n	800386a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003858:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003868:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800386a:	2300      	movs	r3, #0
 800386c:	e000      	b.n	8003870 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800386e:	2302      	movs	r3, #2
  }
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003892:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fefd 	bl	800369c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b22      	cmp	r3, #34	; 0x22
 80038be:	d171      	bne.n	80039a4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c8:	d123      	bne.n	8003912 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ce:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10e      	bne.n	80038f6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ee:	1c9a      	adds	r2, r3, #2
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	629a      	str	r2, [r3, #40]	; 0x28
 80038f4:	e029      	b.n	800394a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	b2db      	uxtb	r3, r3
 8003900:	b29a      	uxth	r2, r3
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	1c5a      	adds	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
 8003910:	e01b      	b.n	800394a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6858      	ldr	r0, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003924:	1c59      	adds	r1, r3, #1
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6291      	str	r1, [r2, #40]	; 0x28
 800392a:	b2c2      	uxtb	r2, r0
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e00c      	b.n	800394a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800393c:	1c58      	adds	r0, r3, #1
 800393e:	6879      	ldr	r1, [r7, #4]
 8003940:	6288      	str	r0, [r1, #40]	; 0x28
 8003942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29b      	uxth	r3, r3
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	4619      	mov	r1, r3
 8003958:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800395a:	2b00      	cmp	r3, #0
 800395c:	d120      	bne.n	80039a0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0220 	bic.w	r2, r2, #32
 800396c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800397c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695a      	ldr	r2, [r3, #20]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0201 	bic.w	r2, r2, #1
 800398c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f7ff fe8a 	bl	80036b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e002      	b.n	80039a6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	e000      	b.n	80039a6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
  }
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68da      	ldr	r2, [r3, #12]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	431a      	orrs	r2, r3
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039f2:	f023 030c 	bic.w	r3, r3, #12
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6812      	ldr	r2, [r2, #0]
 80039fa:	68f9      	ldr	r1, [r7, #12]
 80039fc:	430b      	orrs	r3, r1
 80039fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1e:	f040 818b 	bne.w	8003d38 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4ac1      	ldr	r2, [pc, #772]	; (8003d2c <UART_SetConfig+0x37c>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d005      	beq.n	8003a38 <UART_SetConfig+0x88>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4abf      	ldr	r2, [pc, #764]	; (8003d30 <UART_SetConfig+0x380>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	f040 80bd 	bne.w	8003bb2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a38:	f7ff fb9c 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 8003a3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	461d      	mov	r5, r3
 8003a42:	f04f 0600 	mov.w	r6, #0
 8003a46:	46a8      	mov	r8, r5
 8003a48:	46b1      	mov	r9, r6
 8003a4a:	eb18 0308 	adds.w	r3, r8, r8
 8003a4e:	eb49 0409 	adc.w	r4, r9, r9
 8003a52:	4698      	mov	r8, r3
 8003a54:	46a1      	mov	r9, r4
 8003a56:	eb18 0805 	adds.w	r8, r8, r5
 8003a5a:	eb49 0906 	adc.w	r9, r9, r6
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	f04f 0200 	mov.w	r2, #0
 8003a66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a72:	4688      	mov	r8, r1
 8003a74:	4691      	mov	r9, r2
 8003a76:	eb18 0005 	adds.w	r0, r8, r5
 8003a7a:	eb49 0106 	adc.w	r1, r9, r6
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	461d      	mov	r5, r3
 8003a84:	f04f 0600 	mov.w	r6, #0
 8003a88:	196b      	adds	r3, r5, r5
 8003a8a:	eb46 0406 	adc.w	r4, r6, r6
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4623      	mov	r3, r4
 8003a92:	f7fd f901 	bl	8000c98 <__aeabi_uldivmod>
 8003a96:	4603      	mov	r3, r0
 8003a98:	460c      	mov	r4, r1
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	4ba5      	ldr	r3, [pc, #660]	; (8003d34 <UART_SetConfig+0x384>)
 8003a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	461d      	mov	r5, r3
 8003aac:	f04f 0600 	mov.w	r6, #0
 8003ab0:	46a9      	mov	r9, r5
 8003ab2:	46b2      	mov	sl, r6
 8003ab4:	eb19 0309 	adds.w	r3, r9, r9
 8003ab8:	eb4a 040a 	adc.w	r4, sl, sl
 8003abc:	4699      	mov	r9, r3
 8003abe:	46a2      	mov	sl, r4
 8003ac0:	eb19 0905 	adds.w	r9, r9, r5
 8003ac4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ac8:	f04f 0100 	mov.w	r1, #0
 8003acc:	f04f 0200 	mov.w	r2, #0
 8003ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ad8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003adc:	4689      	mov	r9, r1
 8003ade:	4692      	mov	sl, r2
 8003ae0:	eb19 0005 	adds.w	r0, r9, r5
 8003ae4:	eb4a 0106 	adc.w	r1, sl, r6
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	461d      	mov	r5, r3
 8003aee:	f04f 0600 	mov.w	r6, #0
 8003af2:	196b      	adds	r3, r5, r5
 8003af4:	eb46 0406 	adc.w	r4, r6, r6
 8003af8:	461a      	mov	r2, r3
 8003afa:	4623      	mov	r3, r4
 8003afc:	f7fd f8cc 	bl	8000c98 <__aeabi_uldivmod>
 8003b00:	4603      	mov	r3, r0
 8003b02:	460c      	mov	r4, r1
 8003b04:	461a      	mov	r2, r3
 8003b06:	4b8b      	ldr	r3, [pc, #556]	; (8003d34 <UART_SetConfig+0x384>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3332      	adds	r3, #50	; 0x32
 8003b1a:	4a86      	ldr	r2, [pc, #536]	; (8003d34 <UART_SetConfig+0x384>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b28:	4498      	add	r8, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	461d      	mov	r5, r3
 8003b2e:	f04f 0600 	mov.w	r6, #0
 8003b32:	46a9      	mov	r9, r5
 8003b34:	46b2      	mov	sl, r6
 8003b36:	eb19 0309 	adds.w	r3, r9, r9
 8003b3a:	eb4a 040a 	adc.w	r4, sl, sl
 8003b3e:	4699      	mov	r9, r3
 8003b40:	46a2      	mov	sl, r4
 8003b42:	eb19 0905 	adds.w	r9, r9, r5
 8003b46:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b4a:	f04f 0100 	mov.w	r1, #0
 8003b4e:	f04f 0200 	mov.w	r2, #0
 8003b52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b5e:	4689      	mov	r9, r1
 8003b60:	4692      	mov	sl, r2
 8003b62:	eb19 0005 	adds.w	r0, r9, r5
 8003b66:	eb4a 0106 	adc.w	r1, sl, r6
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	461d      	mov	r5, r3
 8003b70:	f04f 0600 	mov.w	r6, #0
 8003b74:	196b      	adds	r3, r5, r5
 8003b76:	eb46 0406 	adc.w	r4, r6, r6
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	4623      	mov	r3, r4
 8003b7e:	f7fd f88b 	bl	8000c98 <__aeabi_uldivmod>
 8003b82:	4603      	mov	r3, r0
 8003b84:	460c      	mov	r4, r1
 8003b86:	461a      	mov	r2, r3
 8003b88:	4b6a      	ldr	r3, [pc, #424]	; (8003d34 <UART_SetConfig+0x384>)
 8003b8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2164      	movs	r1, #100	; 0x64
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	3332      	adds	r3, #50	; 0x32
 8003b9c:	4a65      	ldr	r2, [pc, #404]	; (8003d34 <UART_SetConfig+0x384>)
 8003b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba2:	095b      	lsrs	r3, r3, #5
 8003ba4:	f003 0207 	and.w	r2, r3, #7
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4442      	add	r2, r8
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	e26f      	b.n	8004092 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bb2:	f7ff facb 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003bb6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	461d      	mov	r5, r3
 8003bbc:	f04f 0600 	mov.w	r6, #0
 8003bc0:	46a8      	mov	r8, r5
 8003bc2:	46b1      	mov	r9, r6
 8003bc4:	eb18 0308 	adds.w	r3, r8, r8
 8003bc8:	eb49 0409 	adc.w	r4, r9, r9
 8003bcc:	4698      	mov	r8, r3
 8003bce:	46a1      	mov	r9, r4
 8003bd0:	eb18 0805 	adds.w	r8, r8, r5
 8003bd4:	eb49 0906 	adc.w	r9, r9, r6
 8003bd8:	f04f 0100 	mov.w	r1, #0
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003be4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003be8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003bec:	4688      	mov	r8, r1
 8003bee:	4691      	mov	r9, r2
 8003bf0:	eb18 0005 	adds.w	r0, r8, r5
 8003bf4:	eb49 0106 	adc.w	r1, r9, r6
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	461d      	mov	r5, r3
 8003bfe:	f04f 0600 	mov.w	r6, #0
 8003c02:	196b      	adds	r3, r5, r5
 8003c04:	eb46 0406 	adc.w	r4, r6, r6
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4623      	mov	r3, r4
 8003c0c:	f7fd f844 	bl	8000c98 <__aeabi_uldivmod>
 8003c10:	4603      	mov	r3, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	461a      	mov	r2, r3
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <UART_SetConfig+0x384>)
 8003c18:	fba3 2302 	umull	r2, r3, r3, r2
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	461d      	mov	r5, r3
 8003c26:	f04f 0600 	mov.w	r6, #0
 8003c2a:	46a9      	mov	r9, r5
 8003c2c:	46b2      	mov	sl, r6
 8003c2e:	eb19 0309 	adds.w	r3, r9, r9
 8003c32:	eb4a 040a 	adc.w	r4, sl, sl
 8003c36:	4699      	mov	r9, r3
 8003c38:	46a2      	mov	sl, r4
 8003c3a:	eb19 0905 	adds.w	r9, r9, r5
 8003c3e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c4e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c52:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c56:	4689      	mov	r9, r1
 8003c58:	4692      	mov	sl, r2
 8003c5a:	eb19 0005 	adds.w	r0, r9, r5
 8003c5e:	eb4a 0106 	adc.w	r1, sl, r6
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	461d      	mov	r5, r3
 8003c68:	f04f 0600 	mov.w	r6, #0
 8003c6c:	196b      	adds	r3, r5, r5
 8003c6e:	eb46 0406 	adc.w	r4, r6, r6
 8003c72:	461a      	mov	r2, r3
 8003c74:	4623      	mov	r3, r4
 8003c76:	f7fd f80f 	bl	8000c98 <__aeabi_uldivmod>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	460c      	mov	r4, r1
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b2c      	ldr	r3, [pc, #176]	; (8003d34 <UART_SetConfig+0x384>)
 8003c82:	fba3 1302 	umull	r1, r3, r3, r2
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	2164      	movs	r1, #100	; 0x64
 8003c8a:	fb01 f303 	mul.w	r3, r1, r3
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	3332      	adds	r3, #50	; 0x32
 8003c94:	4a27      	ldr	r2, [pc, #156]	; (8003d34 <UART_SetConfig+0x384>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	095b      	lsrs	r3, r3, #5
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ca2:	4498      	add	r8, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	461d      	mov	r5, r3
 8003ca8:	f04f 0600 	mov.w	r6, #0
 8003cac:	46a9      	mov	r9, r5
 8003cae:	46b2      	mov	sl, r6
 8003cb0:	eb19 0309 	adds.w	r3, r9, r9
 8003cb4:	eb4a 040a 	adc.w	r4, sl, sl
 8003cb8:	4699      	mov	r9, r3
 8003cba:	46a2      	mov	sl, r4
 8003cbc:	eb19 0905 	adds.w	r9, r9, r5
 8003cc0:	eb4a 0a06 	adc.w	sl, sl, r6
 8003cc4:	f04f 0100 	mov.w	r1, #0
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cd8:	4689      	mov	r9, r1
 8003cda:	4692      	mov	sl, r2
 8003cdc:	eb19 0005 	adds.w	r0, r9, r5
 8003ce0:	eb4a 0106 	adc.w	r1, sl, r6
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	461d      	mov	r5, r3
 8003cea:	f04f 0600 	mov.w	r6, #0
 8003cee:	196b      	adds	r3, r5, r5
 8003cf0:	eb46 0406 	adc.w	r4, r6, r6
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4623      	mov	r3, r4
 8003cf8:	f7fc ffce 	bl	8000c98 <__aeabi_uldivmod>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	461a      	mov	r2, r3
 8003d02:	4b0c      	ldr	r3, [pc, #48]	; (8003d34 <UART_SetConfig+0x384>)
 8003d04:	fba3 1302 	umull	r1, r3, r3, r2
 8003d08:	095b      	lsrs	r3, r3, #5
 8003d0a:	2164      	movs	r1, #100	; 0x64
 8003d0c:	fb01 f303 	mul.w	r3, r1, r3
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	3332      	adds	r3, #50	; 0x32
 8003d16:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <UART_SetConfig+0x384>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	095b      	lsrs	r3, r3, #5
 8003d1e:	f003 0207 	and.w	r2, r3, #7
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4442      	add	r2, r8
 8003d28:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003d2a:	e1b2      	b.n	8004092 <UART_SetConfig+0x6e2>
 8003d2c:	40011000 	.word	0x40011000
 8003d30:	40011400 	.word	0x40011400
 8003d34:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4ad7      	ldr	r2, [pc, #860]	; (800409c <UART_SetConfig+0x6ec>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d005      	beq.n	8003d4e <UART_SetConfig+0x39e>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4ad6      	ldr	r2, [pc, #856]	; (80040a0 <UART_SetConfig+0x6f0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	f040 80d1 	bne.w	8003ef0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d4e:	f7ff fa11 	bl	8003174 <HAL_RCC_GetPCLK2Freq>
 8003d52:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	469a      	mov	sl, r3
 8003d58:	f04f 0b00 	mov.w	fp, #0
 8003d5c:	46d0      	mov	r8, sl
 8003d5e:	46d9      	mov	r9, fp
 8003d60:	eb18 0308 	adds.w	r3, r8, r8
 8003d64:	eb49 0409 	adc.w	r4, r9, r9
 8003d68:	4698      	mov	r8, r3
 8003d6a:	46a1      	mov	r9, r4
 8003d6c:	eb18 080a 	adds.w	r8, r8, sl
 8003d70:	eb49 090b 	adc.w	r9, r9, fp
 8003d74:	f04f 0100 	mov.w	r1, #0
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d80:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d84:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d88:	4688      	mov	r8, r1
 8003d8a:	4691      	mov	r9, r2
 8003d8c:	eb1a 0508 	adds.w	r5, sl, r8
 8003d90:	eb4b 0609 	adc.w	r6, fp, r9
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	f04f 0400 	mov.w	r4, #0
 8003da6:	0094      	lsls	r4, r2, #2
 8003da8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dac:	008b      	lsls	r3, r1, #2
 8003dae:	461a      	mov	r2, r3
 8003db0:	4623      	mov	r3, r4
 8003db2:	4628      	mov	r0, r5
 8003db4:	4631      	mov	r1, r6
 8003db6:	f7fc ff6f 	bl	8000c98 <__aeabi_uldivmod>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4bb8      	ldr	r3, [pc, #736]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc6:	095b      	lsrs	r3, r3, #5
 8003dc8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	469b      	mov	fp, r3
 8003dd0:	f04f 0c00 	mov.w	ip, #0
 8003dd4:	46d9      	mov	r9, fp
 8003dd6:	46e2      	mov	sl, ip
 8003dd8:	eb19 0309 	adds.w	r3, r9, r9
 8003ddc:	eb4a 040a 	adc.w	r4, sl, sl
 8003de0:	4699      	mov	r9, r3
 8003de2:	46a2      	mov	sl, r4
 8003de4:	eb19 090b 	adds.w	r9, r9, fp
 8003de8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003dfc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e00:	4689      	mov	r9, r1
 8003e02:	4692      	mov	sl, r2
 8003e04:	eb1b 0509 	adds.w	r5, fp, r9
 8003e08:	eb4c 060a 	adc.w	r6, ip, sl
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	f04f 0400 	mov.w	r4, #0
 8003e1e:	0094      	lsls	r4, r2, #2
 8003e20:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e24:	008b      	lsls	r3, r1, #2
 8003e26:	461a      	mov	r2, r3
 8003e28:	4623      	mov	r3, r4
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	4631      	mov	r1, r6
 8003e2e:	f7fc ff33 	bl	8000c98 <__aeabi_uldivmod>
 8003e32:	4603      	mov	r3, r0
 8003e34:	460c      	mov	r4, r1
 8003e36:	461a      	mov	r2, r3
 8003e38:	4b9a      	ldr	r3, [pc, #616]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003e3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3e:	095b      	lsrs	r3, r3, #5
 8003e40:	2164      	movs	r1, #100	; 0x64
 8003e42:	fb01 f303 	mul.w	r3, r1, r3
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	3332      	adds	r3, #50	; 0x32
 8003e4c:	4a95      	ldr	r2, [pc, #596]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	095b      	lsrs	r3, r3, #5
 8003e54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e58:	4498      	add	r8, r3
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	469b      	mov	fp, r3
 8003e5e:	f04f 0c00 	mov.w	ip, #0
 8003e62:	46d9      	mov	r9, fp
 8003e64:	46e2      	mov	sl, ip
 8003e66:	eb19 0309 	adds.w	r3, r9, r9
 8003e6a:	eb4a 040a 	adc.w	r4, sl, sl
 8003e6e:	4699      	mov	r9, r3
 8003e70:	46a2      	mov	sl, r4
 8003e72:	eb19 090b 	adds.w	r9, r9, fp
 8003e76:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e7a:	f04f 0100 	mov.w	r1, #0
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e8e:	4689      	mov	r9, r1
 8003e90:	4692      	mov	sl, r2
 8003e92:	eb1b 0509 	adds.w	r5, fp, r9
 8003e96:	eb4c 060a 	adc.w	r6, ip, sl
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f04f 0200 	mov.w	r2, #0
 8003ea4:	f04f 0300 	mov.w	r3, #0
 8003ea8:	f04f 0400 	mov.w	r4, #0
 8003eac:	0094      	lsls	r4, r2, #2
 8003eae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003eb2:	008b      	lsls	r3, r1, #2
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	4628      	mov	r0, r5
 8003eba:	4631      	mov	r1, r6
 8003ebc:	f7fc feec 	bl	8000c98 <__aeabi_uldivmod>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	460c      	mov	r4, r1
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	4b77      	ldr	r3, [pc, #476]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003ec8:	fba3 1302 	umull	r1, r3, r3, r2
 8003ecc:	095b      	lsrs	r3, r3, #5
 8003ece:	2164      	movs	r1, #100	; 0x64
 8003ed0:	fb01 f303 	mul.w	r3, r1, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	011b      	lsls	r3, r3, #4
 8003ed8:	3332      	adds	r3, #50	; 0x32
 8003eda:	4a72      	ldr	r2, [pc, #456]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003edc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee0:	095b      	lsrs	r3, r3, #5
 8003ee2:	f003 020f 	and.w	r2, r3, #15
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4442      	add	r2, r8
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	e0d0      	b.n	8004092 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef0:	f7ff f92c 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8003ef4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	469a      	mov	sl, r3
 8003efa:	f04f 0b00 	mov.w	fp, #0
 8003efe:	46d0      	mov	r8, sl
 8003f00:	46d9      	mov	r9, fp
 8003f02:	eb18 0308 	adds.w	r3, r8, r8
 8003f06:	eb49 0409 	adc.w	r4, r9, r9
 8003f0a:	4698      	mov	r8, r3
 8003f0c:	46a1      	mov	r9, r4
 8003f0e:	eb18 080a 	adds.w	r8, r8, sl
 8003f12:	eb49 090b 	adc.w	r9, r9, fp
 8003f16:	f04f 0100 	mov.w	r1, #0
 8003f1a:	f04f 0200 	mov.w	r2, #0
 8003f1e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f22:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f26:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f2a:	4688      	mov	r8, r1
 8003f2c:	4691      	mov	r9, r2
 8003f2e:	eb1a 0508 	adds.w	r5, sl, r8
 8003f32:	eb4b 0609 	adc.w	r6, fp, r9
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f04f 0200 	mov.w	r2, #0
 8003f40:	f04f 0300 	mov.w	r3, #0
 8003f44:	f04f 0400 	mov.w	r4, #0
 8003f48:	0094      	lsls	r4, r2, #2
 8003f4a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f4e:	008b      	lsls	r3, r1, #2
 8003f50:	461a      	mov	r2, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	4628      	mov	r0, r5
 8003f56:	4631      	mov	r1, r6
 8003f58:	f7fc fe9e 	bl	8000c98 <__aeabi_uldivmod>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	460c      	mov	r4, r1
 8003f60:	461a      	mov	r2, r3
 8003f62:	4b50      	ldr	r3, [pc, #320]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003f64:	fba3 2302 	umull	r2, r3, r3, r2
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	469b      	mov	fp, r3
 8003f72:	f04f 0c00 	mov.w	ip, #0
 8003f76:	46d9      	mov	r9, fp
 8003f78:	46e2      	mov	sl, ip
 8003f7a:	eb19 0309 	adds.w	r3, r9, r9
 8003f7e:	eb4a 040a 	adc.w	r4, sl, sl
 8003f82:	4699      	mov	r9, r3
 8003f84:	46a2      	mov	sl, r4
 8003f86:	eb19 090b 	adds.w	r9, r9, fp
 8003f8a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f8e:	f04f 0100 	mov.w	r1, #0
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fa2:	4689      	mov	r9, r1
 8003fa4:	4692      	mov	sl, r2
 8003fa6:	eb1b 0509 	adds.w	r5, fp, r9
 8003faa:	eb4c 060a 	adc.w	r6, ip, sl
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f04f 0200 	mov.w	r2, #0
 8003fb8:	f04f 0300 	mov.w	r3, #0
 8003fbc:	f04f 0400 	mov.w	r4, #0
 8003fc0:	0094      	lsls	r4, r2, #2
 8003fc2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003fc6:	008b      	lsls	r3, r1, #2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4623      	mov	r3, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	4631      	mov	r1, r6
 8003fd0:	f7fc fe62 	bl	8000c98 <__aeabi_uldivmod>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	460c      	mov	r4, r1
 8003fd8:	461a      	mov	r2, r3
 8003fda:	4b32      	ldr	r3, [pc, #200]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	2164      	movs	r1, #100	; 0x64
 8003fe4:	fb01 f303 	mul.w	r3, r1, r3
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	011b      	lsls	r3, r3, #4
 8003fec:	3332      	adds	r3, #50	; 0x32
 8003fee:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <UART_SetConfig+0x6f4>)
 8003ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff4:	095b      	lsrs	r3, r3, #5
 8003ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ffa:	4498      	add	r8, r3
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	469b      	mov	fp, r3
 8004000:	f04f 0c00 	mov.w	ip, #0
 8004004:	46d9      	mov	r9, fp
 8004006:	46e2      	mov	sl, ip
 8004008:	eb19 0309 	adds.w	r3, r9, r9
 800400c:	eb4a 040a 	adc.w	r4, sl, sl
 8004010:	4699      	mov	r9, r3
 8004012:	46a2      	mov	sl, r4
 8004014:	eb19 090b 	adds.w	r9, r9, fp
 8004018:	eb4a 0a0c 	adc.w	sl, sl, ip
 800401c:	f04f 0100 	mov.w	r1, #0
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004028:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800402c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004030:	4689      	mov	r9, r1
 8004032:	4692      	mov	sl, r2
 8004034:	eb1b 0509 	adds.w	r5, fp, r9
 8004038:	eb4c 060a 	adc.w	r6, ip, sl
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4619      	mov	r1, r3
 8004042:	f04f 0200 	mov.w	r2, #0
 8004046:	f04f 0300 	mov.w	r3, #0
 800404a:	f04f 0400 	mov.w	r4, #0
 800404e:	0094      	lsls	r4, r2, #2
 8004050:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004054:	008b      	lsls	r3, r1, #2
 8004056:	461a      	mov	r2, r3
 8004058:	4623      	mov	r3, r4
 800405a:	4628      	mov	r0, r5
 800405c:	4631      	mov	r1, r6
 800405e:	f7fc fe1b 	bl	8000c98 <__aeabi_uldivmod>
 8004062:	4603      	mov	r3, r0
 8004064:	460c      	mov	r4, r1
 8004066:	461a      	mov	r2, r3
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <UART_SetConfig+0x6f4>)
 800406a:	fba3 1302 	umull	r1, r3, r3, r2
 800406e:	095b      	lsrs	r3, r3, #5
 8004070:	2164      	movs	r1, #100	; 0x64
 8004072:	fb01 f303 	mul.w	r3, r1, r3
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	011b      	lsls	r3, r3, #4
 800407a:	3332      	adds	r3, #50	; 0x32
 800407c:	4a09      	ldr	r2, [pc, #36]	; (80040a4 <UART_SetConfig+0x6f4>)
 800407e:	fba2 2303 	umull	r2, r3, r2, r3
 8004082:	095b      	lsrs	r3, r3, #5
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4442      	add	r2, r8
 800408e:	609a      	str	r2, [r3, #8]
}
 8004090:	e7ff      	b.n	8004092 <UART_SetConfig+0x6e2>
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409c:	40011000 	.word	0x40011000
 80040a0:	40011400 	.word	0x40011400
 80040a4:	51eb851f 	.word	0x51eb851f

080040a8 <pow>:
 80040a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ac:	ed2d 8b04 	vpush	{d8-d9}
 80040b0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004384 <pow+0x2dc>
 80040b4:	b08d      	sub	sp, #52	; 0x34
 80040b6:	ec57 6b10 	vmov	r6, r7, d0
 80040ba:	ec55 4b11 	vmov	r4, r5, d1
 80040be:	f000 f963 	bl	8004388 <__ieee754_pow>
 80040c2:	f999 3000 	ldrsb.w	r3, [r9]
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	eeb0 8a40 	vmov.f32	s16, s0
 80040ce:	eef0 8a60 	vmov.f32	s17, s1
 80040d2:	46c8      	mov	r8, r9
 80040d4:	d05f      	beq.n	8004196 <pow+0xee>
 80040d6:	4622      	mov	r2, r4
 80040d8:	462b      	mov	r3, r5
 80040da:	4620      	mov	r0, r4
 80040dc:	4629      	mov	r1, r5
 80040de:	f7fc fd2d 	bl	8000b3c <__aeabi_dcmpun>
 80040e2:	4683      	mov	fp, r0
 80040e4:	2800      	cmp	r0, #0
 80040e6:	d156      	bne.n	8004196 <pow+0xee>
 80040e8:	4632      	mov	r2, r6
 80040ea:	463b      	mov	r3, r7
 80040ec:	4630      	mov	r0, r6
 80040ee:	4639      	mov	r1, r7
 80040f0:	f7fc fd24 	bl	8000b3c <__aeabi_dcmpun>
 80040f4:	9001      	str	r0, [sp, #4]
 80040f6:	b1e8      	cbz	r0, 8004134 <pow+0x8c>
 80040f8:	2200      	movs	r2, #0
 80040fa:	2300      	movs	r3, #0
 80040fc:	4620      	mov	r0, r4
 80040fe:	4629      	mov	r1, r5
 8004100:	f7fc fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8004104:	2800      	cmp	r0, #0
 8004106:	d046      	beq.n	8004196 <pow+0xee>
 8004108:	2301      	movs	r3, #1
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	4b96      	ldr	r3, [pc, #600]	; (8004368 <pow+0x2c0>)
 800410e:	9303      	str	r3, [sp, #12]
 8004110:	4b96      	ldr	r3, [pc, #600]	; (800436c <pow+0x2c4>)
 8004112:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004116:	2200      	movs	r2, #0
 8004118:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800411c:	9b00      	ldr	r3, [sp, #0]
 800411e:	2b02      	cmp	r3, #2
 8004120:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004124:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004128:	d033      	beq.n	8004192 <pow+0xea>
 800412a:	a802      	add	r0, sp, #8
 800412c:	f000 fefb 	bl	8004f26 <matherr>
 8004130:	bb48      	cbnz	r0, 8004186 <pow+0xde>
 8004132:	e05d      	b.n	80041f0 <pow+0x148>
 8004134:	f04f 0a00 	mov.w	sl, #0
 8004138:	f04f 0b00 	mov.w	fp, #0
 800413c:	4652      	mov	r2, sl
 800413e:	465b      	mov	r3, fp
 8004140:	4630      	mov	r0, r6
 8004142:	4639      	mov	r1, r7
 8004144:	f7fc fcc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004148:	ec4b ab19 	vmov	d9, sl, fp
 800414c:	2800      	cmp	r0, #0
 800414e:	d054      	beq.n	80041fa <pow+0x152>
 8004150:	4652      	mov	r2, sl
 8004152:	465b      	mov	r3, fp
 8004154:	4620      	mov	r0, r4
 8004156:	4629      	mov	r1, r5
 8004158:	f7fc fcbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800415c:	4680      	mov	r8, r0
 800415e:	b318      	cbz	r0, 80041a8 <pow+0x100>
 8004160:	2301      	movs	r3, #1
 8004162:	9302      	str	r3, [sp, #8]
 8004164:	4b80      	ldr	r3, [pc, #512]	; (8004368 <pow+0x2c0>)
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	9b01      	ldr	r3, [sp, #4]
 800416a:	930a      	str	r3, [sp, #40]	; 0x28
 800416c:	9b00      	ldr	r3, [sp, #0]
 800416e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004172:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004176:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d0d5      	beq.n	800412a <pow+0x82>
 800417e:	4b7b      	ldr	r3, [pc, #492]	; (800436c <pow+0x2c4>)
 8004180:	2200      	movs	r2, #0
 8004182:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004188:	b11b      	cbz	r3, 8004192 <pow+0xea>
 800418a:	f000 ffe5 	bl	8005158 <__errno>
 800418e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004190:	6003      	str	r3, [r0, #0]
 8004192:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004196:	eeb0 0a48 	vmov.f32	s0, s16
 800419a:	eef0 0a68 	vmov.f32	s1, s17
 800419e:	b00d      	add	sp, #52	; 0x34
 80041a0:	ecbd 8b04 	vpop	{d8-d9}
 80041a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041a8:	ec45 4b10 	vmov	d0, r4, r5
 80041ac:	f000 feb3 	bl	8004f16 <finite>
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d0f0      	beq.n	8004196 <pow+0xee>
 80041b4:	4652      	mov	r2, sl
 80041b6:	465b      	mov	r3, fp
 80041b8:	4620      	mov	r0, r4
 80041ba:	4629      	mov	r1, r5
 80041bc:	f7fc fc96 	bl	8000aec <__aeabi_dcmplt>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d0e8      	beq.n	8004196 <pow+0xee>
 80041c4:	2301      	movs	r3, #1
 80041c6:	9302      	str	r3, [sp, #8]
 80041c8:	4b67      	ldr	r3, [pc, #412]	; (8004368 <pow+0x2c0>)
 80041ca:	9303      	str	r3, [sp, #12]
 80041cc:	f999 3000 	ldrsb.w	r3, [r9]
 80041d0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80041d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80041d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80041dc:	b913      	cbnz	r3, 80041e4 <pow+0x13c>
 80041de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80041e2:	e7a2      	b.n	800412a <pow+0x82>
 80041e4:	4962      	ldr	r1, [pc, #392]	; (8004370 <pow+0x2c8>)
 80041e6:	2000      	movs	r0, #0
 80041e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d19c      	bne.n	800412a <pow+0x82>
 80041f0:	f000 ffb2 	bl	8005158 <__errno>
 80041f4:	2321      	movs	r3, #33	; 0x21
 80041f6:	6003      	str	r3, [r0, #0]
 80041f8:	e7c5      	b.n	8004186 <pow+0xde>
 80041fa:	eeb0 0a48 	vmov.f32	s0, s16
 80041fe:	eef0 0a68 	vmov.f32	s1, s17
 8004202:	f000 fe88 	bl	8004f16 <finite>
 8004206:	9000      	str	r0, [sp, #0]
 8004208:	2800      	cmp	r0, #0
 800420a:	f040 8081 	bne.w	8004310 <pow+0x268>
 800420e:	ec47 6b10 	vmov	d0, r6, r7
 8004212:	f000 fe80 	bl	8004f16 <finite>
 8004216:	2800      	cmp	r0, #0
 8004218:	d07a      	beq.n	8004310 <pow+0x268>
 800421a:	ec45 4b10 	vmov	d0, r4, r5
 800421e:	f000 fe7a 	bl	8004f16 <finite>
 8004222:	2800      	cmp	r0, #0
 8004224:	d074      	beq.n	8004310 <pow+0x268>
 8004226:	ec53 2b18 	vmov	r2, r3, d8
 800422a:	ee18 0a10 	vmov	r0, s16
 800422e:	4619      	mov	r1, r3
 8004230:	f7fc fc84 	bl	8000b3c <__aeabi_dcmpun>
 8004234:	f999 9000 	ldrsb.w	r9, [r9]
 8004238:	4b4b      	ldr	r3, [pc, #300]	; (8004368 <pow+0x2c0>)
 800423a:	b1b0      	cbz	r0, 800426a <pow+0x1c2>
 800423c:	2201      	movs	r2, #1
 800423e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004242:	9b00      	ldr	r3, [sp, #0]
 8004244:	930a      	str	r3, [sp, #40]	; 0x28
 8004246:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800424a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800424e:	f1b9 0f00 	cmp.w	r9, #0
 8004252:	d0c4      	beq.n	80041de <pow+0x136>
 8004254:	4652      	mov	r2, sl
 8004256:	465b      	mov	r3, fp
 8004258:	4650      	mov	r0, sl
 800425a:	4659      	mov	r1, fp
 800425c:	f7fc fafe 	bl	800085c <__aeabi_ddiv>
 8004260:	f1b9 0f02 	cmp.w	r9, #2
 8004264:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004268:	e7c1      	b.n	80041ee <pow+0x146>
 800426a:	2203      	movs	r2, #3
 800426c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004270:	900a      	str	r0, [sp, #40]	; 0x28
 8004272:	4629      	mov	r1, r5
 8004274:	4620      	mov	r0, r4
 8004276:	2200      	movs	r2, #0
 8004278:	4b3e      	ldr	r3, [pc, #248]	; (8004374 <pow+0x2cc>)
 800427a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800427e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004282:	f7fc f9c1 	bl	8000608 <__aeabi_dmul>
 8004286:	4604      	mov	r4, r0
 8004288:	460d      	mov	r5, r1
 800428a:	f1b9 0f00 	cmp.w	r9, #0
 800428e:	d124      	bne.n	80042da <pow+0x232>
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <pow+0x2d0>)
 8004292:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004296:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800429a:	4630      	mov	r0, r6
 800429c:	4652      	mov	r2, sl
 800429e:	465b      	mov	r3, fp
 80042a0:	4639      	mov	r1, r7
 80042a2:	f7fc fc23 	bl	8000aec <__aeabi_dcmplt>
 80042a6:	2800      	cmp	r0, #0
 80042a8:	d056      	beq.n	8004358 <pow+0x2b0>
 80042aa:	ec45 4b10 	vmov	d0, r4, r5
 80042ae:	f000 fe47 	bl	8004f40 <rint>
 80042b2:	4622      	mov	r2, r4
 80042b4:	462b      	mov	r3, r5
 80042b6:	ec51 0b10 	vmov	r0, r1, d0
 80042ba:	f7fc fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80042be:	b920      	cbnz	r0, 80042ca <pow+0x222>
 80042c0:	4b2e      	ldr	r3, [pc, #184]	; (800437c <pow+0x2d4>)
 80042c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80042c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042ca:	f998 3000 	ldrsb.w	r3, [r8]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d142      	bne.n	8004358 <pow+0x2b0>
 80042d2:	f000 ff41 	bl	8005158 <__errno>
 80042d6:	2322      	movs	r3, #34	; 0x22
 80042d8:	e78d      	b.n	80041f6 <pow+0x14e>
 80042da:	4b29      	ldr	r3, [pc, #164]	; (8004380 <pow+0x2d8>)
 80042dc:	2200      	movs	r2, #0
 80042de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042e2:	4630      	mov	r0, r6
 80042e4:	4652      	mov	r2, sl
 80042e6:	465b      	mov	r3, fp
 80042e8:	4639      	mov	r1, r7
 80042ea:	f7fc fbff 	bl	8000aec <__aeabi_dcmplt>
 80042ee:	2800      	cmp	r0, #0
 80042f0:	d0eb      	beq.n	80042ca <pow+0x222>
 80042f2:	ec45 4b10 	vmov	d0, r4, r5
 80042f6:	f000 fe23 	bl	8004f40 <rint>
 80042fa:	4622      	mov	r2, r4
 80042fc:	462b      	mov	r3, r5
 80042fe:	ec51 0b10 	vmov	r0, r1, d0
 8004302:	f7fc fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004306:	2800      	cmp	r0, #0
 8004308:	d1df      	bne.n	80042ca <pow+0x222>
 800430a:	2200      	movs	r2, #0
 800430c:	4b18      	ldr	r3, [pc, #96]	; (8004370 <pow+0x2c8>)
 800430e:	e7da      	b.n	80042c6 <pow+0x21e>
 8004310:	2200      	movs	r2, #0
 8004312:	2300      	movs	r3, #0
 8004314:	ec51 0b18 	vmov	r0, r1, d8
 8004318:	f7fc fbde 	bl	8000ad8 <__aeabi_dcmpeq>
 800431c:	2800      	cmp	r0, #0
 800431e:	f43f af3a 	beq.w	8004196 <pow+0xee>
 8004322:	ec47 6b10 	vmov	d0, r6, r7
 8004326:	f000 fdf6 	bl	8004f16 <finite>
 800432a:	2800      	cmp	r0, #0
 800432c:	f43f af33 	beq.w	8004196 <pow+0xee>
 8004330:	ec45 4b10 	vmov	d0, r4, r5
 8004334:	f000 fdef 	bl	8004f16 <finite>
 8004338:	2800      	cmp	r0, #0
 800433a:	f43f af2c 	beq.w	8004196 <pow+0xee>
 800433e:	2304      	movs	r3, #4
 8004340:	9302      	str	r3, [sp, #8]
 8004342:	4b09      	ldr	r3, [pc, #36]	; (8004368 <pow+0x2c0>)
 8004344:	9303      	str	r3, [sp, #12]
 8004346:	2300      	movs	r3, #0
 8004348:	930a      	str	r3, [sp, #40]	; 0x28
 800434a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800434e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004352:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004356:	e7b8      	b.n	80042ca <pow+0x222>
 8004358:	a802      	add	r0, sp, #8
 800435a:	f000 fde4 	bl	8004f26 <matherr>
 800435e:	2800      	cmp	r0, #0
 8004360:	f47f af11 	bne.w	8004186 <pow+0xde>
 8004364:	e7b5      	b.n	80042d2 <pow+0x22a>
 8004366:	bf00      	nop
 8004368:	08009684 	.word	0x08009684
 800436c:	3ff00000 	.word	0x3ff00000
 8004370:	fff00000 	.word	0xfff00000
 8004374:	3fe00000 	.word	0x3fe00000
 8004378:	47efffff 	.word	0x47efffff
 800437c:	c7efffff 	.word	0xc7efffff
 8004380:	7ff00000 	.word	0x7ff00000
 8004384:	2000000d 	.word	0x2000000d

08004388 <__ieee754_pow>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	b091      	sub	sp, #68	; 0x44
 800438e:	ed8d 1b00 	vstr	d1, [sp]
 8004392:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004396:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800439a:	ea58 0302 	orrs.w	r3, r8, r2
 800439e:	ec57 6b10 	vmov	r6, r7, d0
 80043a2:	f000 84be 	beq.w	8004d22 <__ieee754_pow+0x99a>
 80043a6:	4b7a      	ldr	r3, [pc, #488]	; (8004590 <__ieee754_pow+0x208>)
 80043a8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80043ac:	429c      	cmp	r4, r3
 80043ae:	463d      	mov	r5, r7
 80043b0:	ee10 aa10 	vmov	sl, s0
 80043b4:	dc09      	bgt.n	80043ca <__ieee754_pow+0x42>
 80043b6:	d103      	bne.n	80043c0 <__ieee754_pow+0x38>
 80043b8:	b93e      	cbnz	r6, 80043ca <__ieee754_pow+0x42>
 80043ba:	45a0      	cmp	r8, r4
 80043bc:	dc0d      	bgt.n	80043da <__ieee754_pow+0x52>
 80043be:	e001      	b.n	80043c4 <__ieee754_pow+0x3c>
 80043c0:	4598      	cmp	r8, r3
 80043c2:	dc02      	bgt.n	80043ca <__ieee754_pow+0x42>
 80043c4:	4598      	cmp	r8, r3
 80043c6:	d10e      	bne.n	80043e6 <__ieee754_pow+0x5e>
 80043c8:	b16a      	cbz	r2, 80043e6 <__ieee754_pow+0x5e>
 80043ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80043ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80043d2:	ea54 030a 	orrs.w	r3, r4, sl
 80043d6:	f000 84a4 	beq.w	8004d22 <__ieee754_pow+0x99a>
 80043da:	486e      	ldr	r0, [pc, #440]	; (8004594 <__ieee754_pow+0x20c>)
 80043dc:	b011      	add	sp, #68	; 0x44
 80043de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e2:	f000 bda5 	b.w	8004f30 <nan>
 80043e6:	2d00      	cmp	r5, #0
 80043e8:	da53      	bge.n	8004492 <__ieee754_pow+0x10a>
 80043ea:	4b6b      	ldr	r3, [pc, #428]	; (8004598 <__ieee754_pow+0x210>)
 80043ec:	4598      	cmp	r8, r3
 80043ee:	dc4d      	bgt.n	800448c <__ieee754_pow+0x104>
 80043f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80043f4:	4598      	cmp	r8, r3
 80043f6:	dd4c      	ble.n	8004492 <__ieee754_pow+0x10a>
 80043f8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80043fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004400:	2b14      	cmp	r3, #20
 8004402:	dd26      	ble.n	8004452 <__ieee754_pow+0xca>
 8004404:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004408:	fa22 f103 	lsr.w	r1, r2, r3
 800440c:	fa01 f303 	lsl.w	r3, r1, r3
 8004410:	4293      	cmp	r3, r2
 8004412:	d13e      	bne.n	8004492 <__ieee754_pow+0x10a>
 8004414:	f001 0101 	and.w	r1, r1, #1
 8004418:	f1c1 0b02 	rsb	fp, r1, #2
 800441c:	2a00      	cmp	r2, #0
 800441e:	d15b      	bne.n	80044d8 <__ieee754_pow+0x150>
 8004420:	4b5b      	ldr	r3, [pc, #364]	; (8004590 <__ieee754_pow+0x208>)
 8004422:	4598      	cmp	r8, r3
 8004424:	d124      	bne.n	8004470 <__ieee754_pow+0xe8>
 8004426:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800442a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800442e:	ea53 030a 	orrs.w	r3, r3, sl
 8004432:	f000 8476 	beq.w	8004d22 <__ieee754_pow+0x99a>
 8004436:	4b59      	ldr	r3, [pc, #356]	; (800459c <__ieee754_pow+0x214>)
 8004438:	429c      	cmp	r4, r3
 800443a:	dd2d      	ble.n	8004498 <__ieee754_pow+0x110>
 800443c:	f1b9 0f00 	cmp.w	r9, #0
 8004440:	f280 8473 	bge.w	8004d2a <__ieee754_pow+0x9a2>
 8004444:	2000      	movs	r0, #0
 8004446:	2100      	movs	r1, #0
 8004448:	ec41 0b10 	vmov	d0, r0, r1
 800444c:	b011      	add	sp, #68	; 0x44
 800444e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004452:	2a00      	cmp	r2, #0
 8004454:	d13e      	bne.n	80044d4 <__ieee754_pow+0x14c>
 8004456:	f1c3 0314 	rsb	r3, r3, #20
 800445a:	fa48 f103 	asr.w	r1, r8, r3
 800445e:	fa01 f303 	lsl.w	r3, r1, r3
 8004462:	4543      	cmp	r3, r8
 8004464:	f040 8469 	bne.w	8004d3a <__ieee754_pow+0x9b2>
 8004468:	f001 0101 	and.w	r1, r1, #1
 800446c:	f1c1 0b02 	rsb	fp, r1, #2
 8004470:	4b4b      	ldr	r3, [pc, #300]	; (80045a0 <__ieee754_pow+0x218>)
 8004472:	4598      	cmp	r8, r3
 8004474:	d118      	bne.n	80044a8 <__ieee754_pow+0x120>
 8004476:	f1b9 0f00 	cmp.w	r9, #0
 800447a:	f280 845a 	bge.w	8004d32 <__ieee754_pow+0x9aa>
 800447e:	4948      	ldr	r1, [pc, #288]	; (80045a0 <__ieee754_pow+0x218>)
 8004480:	4632      	mov	r2, r6
 8004482:	463b      	mov	r3, r7
 8004484:	2000      	movs	r0, #0
 8004486:	f7fc f9e9 	bl	800085c <__aeabi_ddiv>
 800448a:	e7dd      	b.n	8004448 <__ieee754_pow+0xc0>
 800448c:	f04f 0b02 	mov.w	fp, #2
 8004490:	e7c4      	b.n	800441c <__ieee754_pow+0x94>
 8004492:	f04f 0b00 	mov.w	fp, #0
 8004496:	e7c1      	b.n	800441c <__ieee754_pow+0x94>
 8004498:	f1b9 0f00 	cmp.w	r9, #0
 800449c:	dad2      	bge.n	8004444 <__ieee754_pow+0xbc>
 800449e:	e9dd 0300 	ldrd	r0, r3, [sp]
 80044a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80044a6:	e7cf      	b.n	8004448 <__ieee754_pow+0xc0>
 80044a8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80044ac:	d106      	bne.n	80044bc <__ieee754_pow+0x134>
 80044ae:	4632      	mov	r2, r6
 80044b0:	463b      	mov	r3, r7
 80044b2:	4610      	mov	r0, r2
 80044b4:	4619      	mov	r1, r3
 80044b6:	f7fc f8a7 	bl	8000608 <__aeabi_dmul>
 80044ba:	e7c5      	b.n	8004448 <__ieee754_pow+0xc0>
 80044bc:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <__ieee754_pow+0x21c>)
 80044be:	4599      	cmp	r9, r3
 80044c0:	d10a      	bne.n	80044d8 <__ieee754_pow+0x150>
 80044c2:	2d00      	cmp	r5, #0
 80044c4:	db08      	blt.n	80044d8 <__ieee754_pow+0x150>
 80044c6:	ec47 6b10 	vmov	d0, r6, r7
 80044ca:	b011      	add	sp, #68	; 0x44
 80044cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	f000 bc68 	b.w	8004da4 <__ieee754_sqrt>
 80044d4:	f04f 0b00 	mov.w	fp, #0
 80044d8:	ec47 6b10 	vmov	d0, r6, r7
 80044dc:	f000 fd12 	bl	8004f04 <fabs>
 80044e0:	ec51 0b10 	vmov	r0, r1, d0
 80044e4:	f1ba 0f00 	cmp.w	sl, #0
 80044e8:	d127      	bne.n	800453a <__ieee754_pow+0x1b2>
 80044ea:	b124      	cbz	r4, 80044f6 <__ieee754_pow+0x16e>
 80044ec:	4b2c      	ldr	r3, [pc, #176]	; (80045a0 <__ieee754_pow+0x218>)
 80044ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d121      	bne.n	800453a <__ieee754_pow+0x1b2>
 80044f6:	f1b9 0f00 	cmp.w	r9, #0
 80044fa:	da05      	bge.n	8004508 <__ieee754_pow+0x180>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	2000      	movs	r0, #0
 8004502:	4927      	ldr	r1, [pc, #156]	; (80045a0 <__ieee754_pow+0x218>)
 8004504:	f7fc f9aa 	bl	800085c <__aeabi_ddiv>
 8004508:	2d00      	cmp	r5, #0
 800450a:	da9d      	bge.n	8004448 <__ieee754_pow+0xc0>
 800450c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004510:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004514:	ea54 030b 	orrs.w	r3, r4, fp
 8004518:	d108      	bne.n	800452c <__ieee754_pow+0x1a4>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	f7fb feb9 	bl	8000298 <__aeabi_dsub>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	e7ac      	b.n	8004486 <__ieee754_pow+0xfe>
 800452c:	f1bb 0f01 	cmp.w	fp, #1
 8004530:	d18a      	bne.n	8004448 <__ieee754_pow+0xc0>
 8004532:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004536:	4619      	mov	r1, r3
 8004538:	e786      	b.n	8004448 <__ieee754_pow+0xc0>
 800453a:	0fed      	lsrs	r5, r5, #31
 800453c:	1e6b      	subs	r3, r5, #1
 800453e:	930d      	str	r3, [sp, #52]	; 0x34
 8004540:	ea5b 0303 	orrs.w	r3, fp, r3
 8004544:	d102      	bne.n	800454c <__ieee754_pow+0x1c4>
 8004546:	4632      	mov	r2, r6
 8004548:	463b      	mov	r3, r7
 800454a:	e7e8      	b.n	800451e <__ieee754_pow+0x196>
 800454c:	4b16      	ldr	r3, [pc, #88]	; (80045a8 <__ieee754_pow+0x220>)
 800454e:	4598      	cmp	r8, r3
 8004550:	f340 80fe 	ble.w	8004750 <__ieee754_pow+0x3c8>
 8004554:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004558:	4598      	cmp	r8, r3
 800455a:	dd0a      	ble.n	8004572 <__ieee754_pow+0x1ea>
 800455c:	4b0f      	ldr	r3, [pc, #60]	; (800459c <__ieee754_pow+0x214>)
 800455e:	429c      	cmp	r4, r3
 8004560:	dc0d      	bgt.n	800457e <__ieee754_pow+0x1f6>
 8004562:	f1b9 0f00 	cmp.w	r9, #0
 8004566:	f6bf af6d 	bge.w	8004444 <__ieee754_pow+0xbc>
 800456a:	a307      	add	r3, pc, #28	; (adr r3, 8004588 <__ieee754_pow+0x200>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	e79f      	b.n	80044b2 <__ieee754_pow+0x12a>
 8004572:	4b0e      	ldr	r3, [pc, #56]	; (80045ac <__ieee754_pow+0x224>)
 8004574:	429c      	cmp	r4, r3
 8004576:	ddf4      	ble.n	8004562 <__ieee754_pow+0x1da>
 8004578:	4b09      	ldr	r3, [pc, #36]	; (80045a0 <__ieee754_pow+0x218>)
 800457a:	429c      	cmp	r4, r3
 800457c:	dd18      	ble.n	80045b0 <__ieee754_pow+0x228>
 800457e:	f1b9 0f00 	cmp.w	r9, #0
 8004582:	dcf2      	bgt.n	800456a <__ieee754_pow+0x1e2>
 8004584:	e75e      	b.n	8004444 <__ieee754_pow+0xbc>
 8004586:	bf00      	nop
 8004588:	8800759c 	.word	0x8800759c
 800458c:	7e37e43c 	.word	0x7e37e43c
 8004590:	7ff00000 	.word	0x7ff00000
 8004594:	080098d9 	.word	0x080098d9
 8004598:	433fffff 	.word	0x433fffff
 800459c:	3fefffff 	.word	0x3fefffff
 80045a0:	3ff00000 	.word	0x3ff00000
 80045a4:	3fe00000 	.word	0x3fe00000
 80045a8:	41e00000 	.word	0x41e00000
 80045ac:	3feffffe 	.word	0x3feffffe
 80045b0:	2200      	movs	r2, #0
 80045b2:	4b63      	ldr	r3, [pc, #396]	; (8004740 <__ieee754_pow+0x3b8>)
 80045b4:	f7fb fe70 	bl	8000298 <__aeabi_dsub>
 80045b8:	a355      	add	r3, pc, #340	; (adr r3, 8004710 <__ieee754_pow+0x388>)
 80045ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045be:	4604      	mov	r4, r0
 80045c0:	460d      	mov	r5, r1
 80045c2:	f7fc f821 	bl	8000608 <__aeabi_dmul>
 80045c6:	a354      	add	r3, pc, #336	; (adr r3, 8004718 <__ieee754_pow+0x390>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	4606      	mov	r6, r0
 80045ce:	460f      	mov	r7, r1
 80045d0:	4620      	mov	r0, r4
 80045d2:	4629      	mov	r1, r5
 80045d4:	f7fc f818 	bl	8000608 <__aeabi_dmul>
 80045d8:	2200      	movs	r2, #0
 80045da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80045de:	4b59      	ldr	r3, [pc, #356]	; (8004744 <__ieee754_pow+0x3bc>)
 80045e0:	4620      	mov	r0, r4
 80045e2:	4629      	mov	r1, r5
 80045e4:	f7fc f810 	bl	8000608 <__aeabi_dmul>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	a14c      	add	r1, pc, #304	; (adr r1, 8004720 <__ieee754_pow+0x398>)
 80045ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045f2:	f7fb fe51 	bl	8000298 <__aeabi_dsub>
 80045f6:	4622      	mov	r2, r4
 80045f8:	462b      	mov	r3, r5
 80045fa:	f7fc f805 	bl	8000608 <__aeabi_dmul>
 80045fe:	4602      	mov	r2, r0
 8004600:	460b      	mov	r3, r1
 8004602:	2000      	movs	r0, #0
 8004604:	4950      	ldr	r1, [pc, #320]	; (8004748 <__ieee754_pow+0x3c0>)
 8004606:	f7fb fe47 	bl	8000298 <__aeabi_dsub>
 800460a:	4622      	mov	r2, r4
 800460c:	462b      	mov	r3, r5
 800460e:	4680      	mov	r8, r0
 8004610:	4689      	mov	r9, r1
 8004612:	4620      	mov	r0, r4
 8004614:	4629      	mov	r1, r5
 8004616:	f7fb fff7 	bl	8000608 <__aeabi_dmul>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4640      	mov	r0, r8
 8004620:	4649      	mov	r1, r9
 8004622:	f7fb fff1 	bl	8000608 <__aeabi_dmul>
 8004626:	a340      	add	r3, pc, #256	; (adr r3, 8004728 <__ieee754_pow+0x3a0>)
 8004628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462c:	f7fb ffec 	bl	8000608 <__aeabi_dmul>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004638:	f7fb fe2e 	bl	8000298 <__aeabi_dsub>
 800463c:	4602      	mov	r2, r0
 800463e:	460b      	mov	r3, r1
 8004640:	4604      	mov	r4, r0
 8004642:	460d      	mov	r5, r1
 8004644:	4630      	mov	r0, r6
 8004646:	4639      	mov	r1, r7
 8004648:	f7fb fe28 	bl	800029c <__adddf3>
 800464c:	2000      	movs	r0, #0
 800464e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004652:	4632      	mov	r2, r6
 8004654:	463b      	mov	r3, r7
 8004656:	f7fb fe1f 	bl	8000298 <__aeabi_dsub>
 800465a:	4602      	mov	r2, r0
 800465c:	460b      	mov	r3, r1
 800465e:	4620      	mov	r0, r4
 8004660:	4629      	mov	r1, r5
 8004662:	f7fb fe19 	bl	8000298 <__aeabi_dsub>
 8004666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004668:	f10b 33ff 	add.w	r3, fp, #4294967295
 800466c:	4313      	orrs	r3, r2
 800466e:	4606      	mov	r6, r0
 8004670:	460f      	mov	r7, r1
 8004672:	f040 81eb 	bne.w	8004a4c <__ieee754_pow+0x6c4>
 8004676:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004730 <__ieee754_pow+0x3a8>
 800467a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800467e:	2400      	movs	r4, #0
 8004680:	4622      	mov	r2, r4
 8004682:	462b      	mov	r3, r5
 8004684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004688:	ed8d 7b02 	vstr	d7, [sp, #8]
 800468c:	f7fb fe04 	bl	8000298 <__aeabi_dsub>
 8004690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004694:	f7fb ffb8 	bl	8000608 <__aeabi_dmul>
 8004698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	4630      	mov	r0, r6
 80046a2:	4639      	mov	r1, r7
 80046a4:	f7fb ffb0 	bl	8000608 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4640      	mov	r0, r8
 80046ae:	4649      	mov	r1, r9
 80046b0:	f7fb fdf4 	bl	800029c <__adddf3>
 80046b4:	4622      	mov	r2, r4
 80046b6:	462b      	mov	r3, r5
 80046b8:	4680      	mov	r8, r0
 80046ba:	4689      	mov	r9, r1
 80046bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046c0:	f7fb ffa2 	bl	8000608 <__aeabi_dmul>
 80046c4:	460b      	mov	r3, r1
 80046c6:	4604      	mov	r4, r0
 80046c8:	460d      	mov	r5, r1
 80046ca:	4602      	mov	r2, r0
 80046cc:	4649      	mov	r1, r9
 80046ce:	4640      	mov	r0, r8
 80046d0:	e9cd 4500 	strd	r4, r5, [sp]
 80046d4:	f7fb fde2 	bl	800029c <__adddf3>
 80046d8:	4b1c      	ldr	r3, [pc, #112]	; (800474c <__ieee754_pow+0x3c4>)
 80046da:	4299      	cmp	r1, r3
 80046dc:	4606      	mov	r6, r0
 80046de:	460f      	mov	r7, r1
 80046e0:	468b      	mov	fp, r1
 80046e2:	f340 82f7 	ble.w	8004cd4 <__ieee754_pow+0x94c>
 80046e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80046ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80046ee:	4303      	orrs	r3, r0
 80046f0:	f000 81ea 	beq.w	8004ac8 <__ieee754_pow+0x740>
 80046f4:	a310      	add	r3, pc, #64	; (adr r3, 8004738 <__ieee754_pow+0x3b0>)
 80046f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046fe:	f7fb ff83 	bl	8000608 <__aeabi_dmul>
 8004702:	a30d      	add	r3, pc, #52	; (adr r3, 8004738 <__ieee754_pow+0x3b0>)
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	e6d5      	b.n	80044b6 <__ieee754_pow+0x12e>
 800470a:	bf00      	nop
 800470c:	f3af 8000 	nop.w
 8004710:	60000000 	.word	0x60000000
 8004714:	3ff71547 	.word	0x3ff71547
 8004718:	f85ddf44 	.word	0xf85ddf44
 800471c:	3e54ae0b 	.word	0x3e54ae0b
 8004720:	55555555 	.word	0x55555555
 8004724:	3fd55555 	.word	0x3fd55555
 8004728:	652b82fe 	.word	0x652b82fe
 800472c:	3ff71547 	.word	0x3ff71547
 8004730:	00000000 	.word	0x00000000
 8004734:	bff00000 	.word	0xbff00000
 8004738:	8800759c 	.word	0x8800759c
 800473c:	7e37e43c 	.word	0x7e37e43c
 8004740:	3ff00000 	.word	0x3ff00000
 8004744:	3fd00000 	.word	0x3fd00000
 8004748:	3fe00000 	.word	0x3fe00000
 800474c:	408fffff 	.word	0x408fffff
 8004750:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	da05      	bge.n	8004766 <__ieee754_pow+0x3de>
 800475a:	4bd3      	ldr	r3, [pc, #844]	; (8004aa8 <__ieee754_pow+0x720>)
 800475c:	f7fb ff54 	bl	8000608 <__aeabi_dmul>
 8004760:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004764:	460c      	mov	r4, r1
 8004766:	1523      	asrs	r3, r4, #20
 8004768:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800476c:	4413      	add	r3, r2
 800476e:	9309      	str	r3, [sp, #36]	; 0x24
 8004770:	4bce      	ldr	r3, [pc, #824]	; (8004aac <__ieee754_pow+0x724>)
 8004772:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004776:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800477a:	429c      	cmp	r4, r3
 800477c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004780:	dd08      	ble.n	8004794 <__ieee754_pow+0x40c>
 8004782:	4bcb      	ldr	r3, [pc, #812]	; (8004ab0 <__ieee754_pow+0x728>)
 8004784:	429c      	cmp	r4, r3
 8004786:	f340 815e 	ble.w	8004a46 <__ieee754_pow+0x6be>
 800478a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800478c:	3301      	adds	r3, #1
 800478e:	9309      	str	r3, [sp, #36]	; 0x24
 8004790:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004794:	f04f 0a00 	mov.w	sl, #0
 8004798:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800479c:	930c      	str	r3, [sp, #48]	; 0x30
 800479e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80047a0:	4bc4      	ldr	r3, [pc, #784]	; (8004ab4 <__ieee754_pow+0x72c>)
 80047a2:	4413      	add	r3, r2
 80047a4:	ed93 7b00 	vldr	d7, [r3]
 80047a8:	4629      	mov	r1, r5
 80047aa:	ec53 2b17 	vmov	r2, r3, d7
 80047ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80047b2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80047b6:	f7fb fd6f 	bl	8000298 <__aeabi_dsub>
 80047ba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80047be:	4606      	mov	r6, r0
 80047c0:	460f      	mov	r7, r1
 80047c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047c6:	f7fb fd69 	bl	800029c <__adddf3>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	2000      	movs	r0, #0
 80047d0:	49b9      	ldr	r1, [pc, #740]	; (8004ab8 <__ieee754_pow+0x730>)
 80047d2:	f7fc f843 	bl	800085c <__aeabi_ddiv>
 80047d6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4630      	mov	r0, r6
 80047e0:	4639      	mov	r1, r7
 80047e2:	f7fb ff11 	bl	8000608 <__aeabi_dmul>
 80047e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047ea:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80047ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9302      	str	r3, [sp, #8]
 80047f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80047fa:	106d      	asrs	r5, r5, #1
 80047fc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004800:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004804:	2200      	movs	r2, #0
 8004806:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800480a:	4640      	mov	r0, r8
 800480c:	4649      	mov	r1, r9
 800480e:	4614      	mov	r4, r2
 8004810:	461d      	mov	r5, r3
 8004812:	f7fb fef9 	bl	8000608 <__aeabi_dmul>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	4630      	mov	r0, r6
 800481c:	4639      	mov	r1, r7
 800481e:	f7fb fd3b 	bl	8000298 <__aeabi_dsub>
 8004822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004826:	4606      	mov	r6, r0
 8004828:	460f      	mov	r7, r1
 800482a:	4620      	mov	r0, r4
 800482c:	4629      	mov	r1, r5
 800482e:	f7fb fd33 	bl	8000298 <__aeabi_dsub>
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800483a:	f7fb fd2d 	bl	8000298 <__aeabi_dsub>
 800483e:	4642      	mov	r2, r8
 8004840:	464b      	mov	r3, r9
 8004842:	f7fb fee1 	bl	8000608 <__aeabi_dmul>
 8004846:	4602      	mov	r2, r0
 8004848:	460b      	mov	r3, r1
 800484a:	4630      	mov	r0, r6
 800484c:	4639      	mov	r1, r7
 800484e:	f7fb fd23 	bl	8000298 <__aeabi_dsub>
 8004852:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004856:	f7fb fed7 	bl	8000608 <__aeabi_dmul>
 800485a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800485e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004862:	4610      	mov	r0, r2
 8004864:	4619      	mov	r1, r3
 8004866:	f7fb fecf 	bl	8000608 <__aeabi_dmul>
 800486a:	a37b      	add	r3, pc, #492	; (adr r3, 8004a58 <__ieee754_pow+0x6d0>)
 800486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004870:	4604      	mov	r4, r0
 8004872:	460d      	mov	r5, r1
 8004874:	f7fb fec8 	bl	8000608 <__aeabi_dmul>
 8004878:	a379      	add	r3, pc, #484	; (adr r3, 8004a60 <__ieee754_pow+0x6d8>)
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f7fb fd0d 	bl	800029c <__adddf3>
 8004882:	4622      	mov	r2, r4
 8004884:	462b      	mov	r3, r5
 8004886:	f7fb febf 	bl	8000608 <__aeabi_dmul>
 800488a:	a377      	add	r3, pc, #476	; (adr r3, 8004a68 <__ieee754_pow+0x6e0>)
 800488c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004890:	f7fb fd04 	bl	800029c <__adddf3>
 8004894:	4622      	mov	r2, r4
 8004896:	462b      	mov	r3, r5
 8004898:	f7fb feb6 	bl	8000608 <__aeabi_dmul>
 800489c:	a374      	add	r3, pc, #464	; (adr r3, 8004a70 <__ieee754_pow+0x6e8>)
 800489e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a2:	f7fb fcfb 	bl	800029c <__adddf3>
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	f7fb fead 	bl	8000608 <__aeabi_dmul>
 80048ae:	a372      	add	r3, pc, #456	; (adr r3, 8004a78 <__ieee754_pow+0x6f0>)
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f7fb fcf2 	bl	800029c <__adddf3>
 80048b8:	4622      	mov	r2, r4
 80048ba:	462b      	mov	r3, r5
 80048bc:	f7fb fea4 	bl	8000608 <__aeabi_dmul>
 80048c0:	a36f      	add	r3, pc, #444	; (adr r3, 8004a80 <__ieee754_pow+0x6f8>)
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f7fb fce9 	bl	800029c <__adddf3>
 80048ca:	4622      	mov	r2, r4
 80048cc:	4606      	mov	r6, r0
 80048ce:	460f      	mov	r7, r1
 80048d0:	462b      	mov	r3, r5
 80048d2:	4620      	mov	r0, r4
 80048d4:	4629      	mov	r1, r5
 80048d6:	f7fb fe97 	bl	8000608 <__aeabi_dmul>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4630      	mov	r0, r6
 80048e0:	4639      	mov	r1, r7
 80048e2:	f7fb fe91 	bl	8000608 <__aeabi_dmul>
 80048e6:	4642      	mov	r2, r8
 80048e8:	4604      	mov	r4, r0
 80048ea:	460d      	mov	r5, r1
 80048ec:	464b      	mov	r3, r9
 80048ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048f2:	f7fb fcd3 	bl	800029c <__adddf3>
 80048f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80048fa:	f7fb fe85 	bl	8000608 <__aeabi_dmul>
 80048fe:	4622      	mov	r2, r4
 8004900:	462b      	mov	r3, r5
 8004902:	f7fb fccb 	bl	800029c <__adddf3>
 8004906:	4642      	mov	r2, r8
 8004908:	4606      	mov	r6, r0
 800490a:	460f      	mov	r7, r1
 800490c:	464b      	mov	r3, r9
 800490e:	4640      	mov	r0, r8
 8004910:	4649      	mov	r1, r9
 8004912:	f7fb fe79 	bl	8000608 <__aeabi_dmul>
 8004916:	2200      	movs	r2, #0
 8004918:	4b68      	ldr	r3, [pc, #416]	; (8004abc <__ieee754_pow+0x734>)
 800491a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800491e:	f7fb fcbd 	bl	800029c <__adddf3>
 8004922:	4632      	mov	r2, r6
 8004924:	463b      	mov	r3, r7
 8004926:	f7fb fcb9 	bl	800029c <__adddf3>
 800492a:	9802      	ldr	r0, [sp, #8]
 800492c:	460d      	mov	r5, r1
 800492e:	4604      	mov	r4, r0
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4640      	mov	r0, r8
 8004936:	4649      	mov	r1, r9
 8004938:	f7fb fe66 	bl	8000608 <__aeabi_dmul>
 800493c:	2200      	movs	r2, #0
 800493e:	4680      	mov	r8, r0
 8004940:	4689      	mov	r9, r1
 8004942:	4b5e      	ldr	r3, [pc, #376]	; (8004abc <__ieee754_pow+0x734>)
 8004944:	4620      	mov	r0, r4
 8004946:	4629      	mov	r1, r5
 8004948:	f7fb fca6 	bl	8000298 <__aeabi_dsub>
 800494c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004950:	f7fb fca2 	bl	8000298 <__aeabi_dsub>
 8004954:	4602      	mov	r2, r0
 8004956:	460b      	mov	r3, r1
 8004958:	4630      	mov	r0, r6
 800495a:	4639      	mov	r1, r7
 800495c:	f7fb fc9c 	bl	8000298 <__aeabi_dsub>
 8004960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004964:	f7fb fe50 	bl	8000608 <__aeabi_dmul>
 8004968:	4622      	mov	r2, r4
 800496a:	4606      	mov	r6, r0
 800496c:	460f      	mov	r7, r1
 800496e:	462b      	mov	r3, r5
 8004970:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004974:	f7fb fe48 	bl	8000608 <__aeabi_dmul>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4630      	mov	r0, r6
 800497e:	4639      	mov	r1, r7
 8004980:	f7fb fc8c 	bl	800029c <__adddf3>
 8004984:	4606      	mov	r6, r0
 8004986:	460f      	mov	r7, r1
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4640      	mov	r0, r8
 800498e:	4649      	mov	r1, r9
 8004990:	f7fb fc84 	bl	800029c <__adddf3>
 8004994:	9802      	ldr	r0, [sp, #8]
 8004996:	a33c      	add	r3, pc, #240	; (adr r3, 8004a88 <__ieee754_pow+0x700>)
 8004998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800499c:	4604      	mov	r4, r0
 800499e:	460d      	mov	r5, r1
 80049a0:	f7fb fe32 	bl	8000608 <__aeabi_dmul>
 80049a4:	4642      	mov	r2, r8
 80049a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80049aa:	464b      	mov	r3, r9
 80049ac:	4620      	mov	r0, r4
 80049ae:	4629      	mov	r1, r5
 80049b0:	f7fb fc72 	bl	8000298 <__aeabi_dsub>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	4630      	mov	r0, r6
 80049ba:	4639      	mov	r1, r7
 80049bc:	f7fb fc6c 	bl	8000298 <__aeabi_dsub>
 80049c0:	a333      	add	r3, pc, #204	; (adr r3, 8004a90 <__ieee754_pow+0x708>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fe1f 	bl	8000608 <__aeabi_dmul>
 80049ca:	a333      	add	r3, pc, #204	; (adr r3, 8004a98 <__ieee754_pow+0x710>)
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	4606      	mov	r6, r0
 80049d2:	460f      	mov	r7, r1
 80049d4:	4620      	mov	r0, r4
 80049d6:	4629      	mov	r1, r5
 80049d8:	f7fb fe16 	bl	8000608 <__aeabi_dmul>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4630      	mov	r0, r6
 80049e2:	4639      	mov	r1, r7
 80049e4:	f7fb fc5a 	bl	800029c <__adddf3>
 80049e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049ea:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <__ieee754_pow+0x738>)
 80049ec:	4413      	add	r3, r2
 80049ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f2:	f7fb fc53 	bl	800029c <__adddf3>
 80049f6:	4604      	mov	r4, r0
 80049f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049fa:	460d      	mov	r5, r1
 80049fc:	f7fb fd9a 	bl	8000534 <__aeabi_i2d>
 8004a00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a02:	4b30      	ldr	r3, [pc, #192]	; (8004ac4 <__ieee754_pow+0x73c>)
 8004a04:	4413      	add	r3, r2
 8004a06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a0a:	4606      	mov	r6, r0
 8004a0c:	460f      	mov	r7, r1
 8004a0e:	4622      	mov	r2, r4
 8004a10:	462b      	mov	r3, r5
 8004a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a16:	f7fb fc41 	bl	800029c <__adddf3>
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	464b      	mov	r3, r9
 8004a1e:	f7fb fc3d 	bl	800029c <__adddf3>
 8004a22:	4632      	mov	r2, r6
 8004a24:	463b      	mov	r3, r7
 8004a26:	f7fb fc39 	bl	800029c <__adddf3>
 8004a2a:	9802      	ldr	r0, [sp, #8]
 8004a2c:	4632      	mov	r2, r6
 8004a2e:	463b      	mov	r3, r7
 8004a30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a34:	f7fb fc30 	bl	8000298 <__aeabi_dsub>
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	f7fb fc2c 	bl	8000298 <__aeabi_dsub>
 8004a40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a44:	e607      	b.n	8004656 <__ieee754_pow+0x2ce>
 8004a46:	f04f 0a01 	mov.w	sl, #1
 8004a4a:	e6a5      	b.n	8004798 <__ieee754_pow+0x410>
 8004a4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004aa0 <__ieee754_pow+0x718>
 8004a50:	e613      	b.n	800467a <__ieee754_pow+0x2f2>
 8004a52:	bf00      	nop
 8004a54:	f3af 8000 	nop.w
 8004a58:	4a454eef 	.word	0x4a454eef
 8004a5c:	3fca7e28 	.word	0x3fca7e28
 8004a60:	93c9db65 	.word	0x93c9db65
 8004a64:	3fcd864a 	.word	0x3fcd864a
 8004a68:	a91d4101 	.word	0xa91d4101
 8004a6c:	3fd17460 	.word	0x3fd17460
 8004a70:	518f264d 	.word	0x518f264d
 8004a74:	3fd55555 	.word	0x3fd55555
 8004a78:	db6fabff 	.word	0xdb6fabff
 8004a7c:	3fdb6db6 	.word	0x3fdb6db6
 8004a80:	33333303 	.word	0x33333303
 8004a84:	3fe33333 	.word	0x3fe33333
 8004a88:	e0000000 	.word	0xe0000000
 8004a8c:	3feec709 	.word	0x3feec709
 8004a90:	dc3a03fd 	.word	0xdc3a03fd
 8004a94:	3feec709 	.word	0x3feec709
 8004a98:	145b01f5 	.word	0x145b01f5
 8004a9c:	be3e2fe0 	.word	0xbe3e2fe0
 8004aa0:	00000000 	.word	0x00000000
 8004aa4:	3ff00000 	.word	0x3ff00000
 8004aa8:	43400000 	.word	0x43400000
 8004aac:	0003988e 	.word	0x0003988e
 8004ab0:	000bb679 	.word	0x000bb679
 8004ab4:	08009688 	.word	0x08009688
 8004ab8:	3ff00000 	.word	0x3ff00000
 8004abc:	40080000 	.word	0x40080000
 8004ac0:	080096a8 	.word	0x080096a8
 8004ac4:	08009698 	.word	0x08009698
 8004ac8:	a3b4      	add	r3, pc, #720	; (adr r3, 8004d9c <__ieee754_pow+0xa14>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	4640      	mov	r0, r8
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	f7fb fbe3 	bl	800029c <__adddf3>
 8004ad6:	4622      	mov	r2, r4
 8004ad8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004adc:	462b      	mov	r3, r5
 8004ade:	4630      	mov	r0, r6
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	f7fb fbd9 	bl	8000298 <__aeabi_dsub>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004aee:	f7fc f81b 	bl	8000b28 <__aeabi_dcmpgt>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	f47f adfe 	bne.w	80046f4 <__ieee754_pow+0x36c>
 8004af8:	4aa3      	ldr	r2, [pc, #652]	; (8004d88 <__ieee754_pow+0xa00>)
 8004afa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004afe:	4293      	cmp	r3, r2
 8004b00:	f340 810a 	ble.w	8004d18 <__ieee754_pow+0x990>
 8004b04:	151b      	asrs	r3, r3, #20
 8004b06:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004b0a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004b0e:	fa4a f303 	asr.w	r3, sl, r3
 8004b12:	445b      	add	r3, fp
 8004b14:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004b18:	4e9c      	ldr	r6, [pc, #624]	; (8004d8c <__ieee754_pow+0xa04>)
 8004b1a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004b1e:	4116      	asrs	r6, r2
 8004b20:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004b24:	2000      	movs	r0, #0
 8004b26:	ea23 0106 	bic.w	r1, r3, r6
 8004b2a:	f1c2 0214 	rsb	r2, r2, #20
 8004b2e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004b32:	fa4a fa02 	asr.w	sl, sl, r2
 8004b36:	f1bb 0f00 	cmp.w	fp, #0
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4620      	mov	r0, r4
 8004b40:	4629      	mov	r1, r5
 8004b42:	bfb8      	it	lt
 8004b44:	f1ca 0a00 	rsblt	sl, sl, #0
 8004b48:	f7fb fba6 	bl	8000298 <__aeabi_dsub>
 8004b4c:	e9cd 0100 	strd	r0, r1, [sp]
 8004b50:	4642      	mov	r2, r8
 8004b52:	464b      	mov	r3, r9
 8004b54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b58:	f7fb fba0 	bl	800029c <__adddf3>
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	a378      	add	r3, pc, #480	; (adr r3, 8004d40 <__ieee754_pow+0x9b8>)
 8004b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b64:	4604      	mov	r4, r0
 8004b66:	460d      	mov	r5, r1
 8004b68:	f7fb fd4e 	bl	8000608 <__aeabi_dmul>
 8004b6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b70:	4606      	mov	r6, r0
 8004b72:	460f      	mov	r7, r1
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb fb8e 	bl	8000298 <__aeabi_dsub>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4640      	mov	r0, r8
 8004b82:	4649      	mov	r1, r9
 8004b84:	f7fb fb88 	bl	8000298 <__aeabi_dsub>
 8004b88:	a36f      	add	r3, pc, #444	; (adr r3, 8004d48 <__ieee754_pow+0x9c0>)
 8004b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8e:	f7fb fd3b 	bl	8000608 <__aeabi_dmul>
 8004b92:	a36f      	add	r3, pc, #444	; (adr r3, 8004d50 <__ieee754_pow+0x9c8>)
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	4680      	mov	r8, r0
 8004b9a:	4689      	mov	r9, r1
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	f7fb fd32 	bl	8000608 <__aeabi_dmul>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4640      	mov	r0, r8
 8004baa:	4649      	mov	r1, r9
 8004bac:	f7fb fb76 	bl	800029c <__adddf3>
 8004bb0:	4604      	mov	r4, r0
 8004bb2:	460d      	mov	r5, r1
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4630      	mov	r0, r6
 8004bba:	4639      	mov	r1, r7
 8004bbc:	f7fb fb6e 	bl	800029c <__adddf3>
 8004bc0:	4632      	mov	r2, r6
 8004bc2:	463b      	mov	r3, r7
 8004bc4:	4680      	mov	r8, r0
 8004bc6:	4689      	mov	r9, r1
 8004bc8:	f7fb fb66 	bl	8000298 <__aeabi_dsub>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	f7fb fb60 	bl	8000298 <__aeabi_dsub>
 8004bd8:	4642      	mov	r2, r8
 8004bda:	4606      	mov	r6, r0
 8004bdc:	460f      	mov	r7, r1
 8004bde:	464b      	mov	r3, r9
 8004be0:	4640      	mov	r0, r8
 8004be2:	4649      	mov	r1, r9
 8004be4:	f7fb fd10 	bl	8000608 <__aeabi_dmul>
 8004be8:	a35b      	add	r3, pc, #364	; (adr r3, 8004d58 <__ieee754_pow+0x9d0>)
 8004bea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bee:	4604      	mov	r4, r0
 8004bf0:	460d      	mov	r5, r1
 8004bf2:	f7fb fd09 	bl	8000608 <__aeabi_dmul>
 8004bf6:	a35a      	add	r3, pc, #360	; (adr r3, 8004d60 <__ieee754_pow+0x9d8>)
 8004bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfc:	f7fb fb4c 	bl	8000298 <__aeabi_dsub>
 8004c00:	4622      	mov	r2, r4
 8004c02:	462b      	mov	r3, r5
 8004c04:	f7fb fd00 	bl	8000608 <__aeabi_dmul>
 8004c08:	a357      	add	r3, pc, #348	; (adr r3, 8004d68 <__ieee754_pow+0x9e0>)
 8004c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0e:	f7fb fb45 	bl	800029c <__adddf3>
 8004c12:	4622      	mov	r2, r4
 8004c14:	462b      	mov	r3, r5
 8004c16:	f7fb fcf7 	bl	8000608 <__aeabi_dmul>
 8004c1a:	a355      	add	r3, pc, #340	; (adr r3, 8004d70 <__ieee754_pow+0x9e8>)
 8004c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c20:	f7fb fb3a 	bl	8000298 <__aeabi_dsub>
 8004c24:	4622      	mov	r2, r4
 8004c26:	462b      	mov	r3, r5
 8004c28:	f7fb fcee 	bl	8000608 <__aeabi_dmul>
 8004c2c:	a352      	add	r3, pc, #328	; (adr r3, 8004d78 <__ieee754_pow+0x9f0>)
 8004c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c32:	f7fb fb33 	bl	800029c <__adddf3>
 8004c36:	4622      	mov	r2, r4
 8004c38:	462b      	mov	r3, r5
 8004c3a:	f7fb fce5 	bl	8000608 <__aeabi_dmul>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	460b      	mov	r3, r1
 8004c42:	4640      	mov	r0, r8
 8004c44:	4649      	mov	r1, r9
 8004c46:	f7fb fb27 	bl	8000298 <__aeabi_dsub>
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	460d      	mov	r5, r1
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	4640      	mov	r0, r8
 8004c54:	4649      	mov	r1, r9
 8004c56:	f7fb fcd7 	bl	8000608 <__aeabi_dmul>
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	e9cd 0100 	strd	r0, r1, [sp]
 8004c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c64:	4620      	mov	r0, r4
 8004c66:	4629      	mov	r1, r5
 8004c68:	f7fb fb16 	bl	8000298 <__aeabi_dsub>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	460b      	mov	r3, r1
 8004c70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c74:	f7fb fdf2 	bl	800085c <__aeabi_ddiv>
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	460d      	mov	r5, r1
 8004c7e:	463b      	mov	r3, r7
 8004c80:	4640      	mov	r0, r8
 8004c82:	4649      	mov	r1, r9
 8004c84:	f7fb fcc0 	bl	8000608 <__aeabi_dmul>
 8004c88:	4632      	mov	r2, r6
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	f7fb fb06 	bl	800029c <__adddf3>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4620      	mov	r0, r4
 8004c96:	4629      	mov	r1, r5
 8004c98:	f7fb fafe 	bl	8000298 <__aeabi_dsub>
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	f7fb fafa 	bl	8000298 <__aeabi_dsub>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	2000      	movs	r0, #0
 8004caa:	4939      	ldr	r1, [pc, #228]	; (8004d90 <__ieee754_pow+0xa08>)
 8004cac:	f7fb faf4 	bl	8000298 <__aeabi_dsub>
 8004cb0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004cb4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	da2f      	bge.n	8004d1e <__ieee754_pow+0x996>
 8004cbe:	4650      	mov	r0, sl
 8004cc0:	ec43 2b10 	vmov	d0, r2, r3
 8004cc4:	f000 f9c0 	bl	8005048 <scalbn>
 8004cc8:	ec51 0b10 	vmov	r0, r1, d0
 8004ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cd0:	f7ff bbf1 	b.w	80044b6 <__ieee754_pow+0x12e>
 8004cd4:	4b2f      	ldr	r3, [pc, #188]	; (8004d94 <__ieee754_pow+0xa0c>)
 8004cd6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004cda:	429e      	cmp	r6, r3
 8004cdc:	f77f af0c 	ble.w	8004af8 <__ieee754_pow+0x770>
 8004ce0:	4b2d      	ldr	r3, [pc, #180]	; (8004d98 <__ieee754_pow+0xa10>)
 8004ce2:	440b      	add	r3, r1
 8004ce4:	4303      	orrs	r3, r0
 8004ce6:	d00b      	beq.n	8004d00 <__ieee754_pow+0x978>
 8004ce8:	a325      	add	r3, pc, #148	; (adr r3, 8004d80 <__ieee754_pow+0x9f8>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004cf2:	f7fb fc89 	bl	8000608 <__aeabi_dmul>
 8004cf6:	a322      	add	r3, pc, #136	; (adr r3, 8004d80 <__ieee754_pow+0x9f8>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	f7ff bbdb 	b.w	80044b6 <__ieee754_pow+0x12e>
 8004d00:	4622      	mov	r2, r4
 8004d02:	462b      	mov	r3, r5
 8004d04:	f7fb fac8 	bl	8000298 <__aeabi_dsub>
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f7fb ff02 	bl	8000b14 <__aeabi_dcmpge>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	f43f aef1 	beq.w	8004af8 <__ieee754_pow+0x770>
 8004d16:	e7e7      	b.n	8004ce8 <__ieee754_pow+0x960>
 8004d18:	f04f 0a00 	mov.w	sl, #0
 8004d1c:	e718      	b.n	8004b50 <__ieee754_pow+0x7c8>
 8004d1e:	4621      	mov	r1, r4
 8004d20:	e7d4      	b.n	8004ccc <__ieee754_pow+0x944>
 8004d22:	2000      	movs	r0, #0
 8004d24:	491a      	ldr	r1, [pc, #104]	; (8004d90 <__ieee754_pow+0xa08>)
 8004d26:	f7ff bb8f 	b.w	8004448 <__ieee754_pow+0xc0>
 8004d2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d2e:	f7ff bb8b 	b.w	8004448 <__ieee754_pow+0xc0>
 8004d32:	4630      	mov	r0, r6
 8004d34:	4639      	mov	r1, r7
 8004d36:	f7ff bb87 	b.w	8004448 <__ieee754_pow+0xc0>
 8004d3a:	4693      	mov	fp, r2
 8004d3c:	f7ff bb98 	b.w	8004470 <__ieee754_pow+0xe8>
 8004d40:	00000000 	.word	0x00000000
 8004d44:	3fe62e43 	.word	0x3fe62e43
 8004d48:	fefa39ef 	.word	0xfefa39ef
 8004d4c:	3fe62e42 	.word	0x3fe62e42
 8004d50:	0ca86c39 	.word	0x0ca86c39
 8004d54:	be205c61 	.word	0xbe205c61
 8004d58:	72bea4d0 	.word	0x72bea4d0
 8004d5c:	3e663769 	.word	0x3e663769
 8004d60:	c5d26bf1 	.word	0xc5d26bf1
 8004d64:	3ebbbd41 	.word	0x3ebbbd41
 8004d68:	af25de2c 	.word	0xaf25de2c
 8004d6c:	3f11566a 	.word	0x3f11566a
 8004d70:	16bebd93 	.word	0x16bebd93
 8004d74:	3f66c16c 	.word	0x3f66c16c
 8004d78:	5555553e 	.word	0x5555553e
 8004d7c:	3fc55555 	.word	0x3fc55555
 8004d80:	c2f8f359 	.word	0xc2f8f359
 8004d84:	01a56e1f 	.word	0x01a56e1f
 8004d88:	3fe00000 	.word	0x3fe00000
 8004d8c:	000fffff 	.word	0x000fffff
 8004d90:	3ff00000 	.word	0x3ff00000
 8004d94:	4090cbff 	.word	0x4090cbff
 8004d98:	3f6f3400 	.word	0x3f6f3400
 8004d9c:	652b82fe 	.word	0x652b82fe
 8004da0:	3c971547 	.word	0x3c971547

08004da4 <__ieee754_sqrt>:
 8004da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da8:	4955      	ldr	r1, [pc, #340]	; (8004f00 <__ieee754_sqrt+0x15c>)
 8004daa:	ec55 4b10 	vmov	r4, r5, d0
 8004dae:	43a9      	bics	r1, r5
 8004db0:	462b      	mov	r3, r5
 8004db2:	462a      	mov	r2, r5
 8004db4:	d112      	bne.n	8004ddc <__ieee754_sqrt+0x38>
 8004db6:	ee10 2a10 	vmov	r2, s0
 8004dba:	ee10 0a10 	vmov	r0, s0
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	f7fb fc22 	bl	8000608 <__aeabi_dmul>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	4620      	mov	r0, r4
 8004dca:	4629      	mov	r1, r5
 8004dcc:	f7fb fa66 	bl	800029c <__adddf3>
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	460d      	mov	r5, r1
 8004dd4:	ec45 4b10 	vmov	d0, r4, r5
 8004dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ddc:	2d00      	cmp	r5, #0
 8004dde:	ee10 0a10 	vmov	r0, s0
 8004de2:	4621      	mov	r1, r4
 8004de4:	dc0f      	bgt.n	8004e06 <__ieee754_sqrt+0x62>
 8004de6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004dea:	4330      	orrs	r0, r6
 8004dec:	d0f2      	beq.n	8004dd4 <__ieee754_sqrt+0x30>
 8004dee:	b155      	cbz	r5, 8004e06 <__ieee754_sqrt+0x62>
 8004df0:	ee10 2a10 	vmov	r2, s0
 8004df4:	4620      	mov	r0, r4
 8004df6:	4629      	mov	r1, r5
 8004df8:	f7fb fa4e 	bl	8000298 <__aeabi_dsub>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	f7fb fd2c 	bl	800085c <__aeabi_ddiv>
 8004e04:	e7e4      	b.n	8004dd0 <__ieee754_sqrt+0x2c>
 8004e06:	151b      	asrs	r3, r3, #20
 8004e08:	d073      	beq.n	8004ef2 <__ieee754_sqrt+0x14e>
 8004e0a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004e0e:	07dd      	lsls	r5, r3, #31
 8004e10:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004e14:	bf48      	it	mi
 8004e16:	0fc8      	lsrmi	r0, r1, #31
 8004e18:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004e1c:	bf44      	itt	mi
 8004e1e:	0049      	lslmi	r1, r1, #1
 8004e20:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004e24:	2500      	movs	r5, #0
 8004e26:	1058      	asrs	r0, r3, #1
 8004e28:	0fcb      	lsrs	r3, r1, #31
 8004e2a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004e2e:	0049      	lsls	r1, r1, #1
 8004e30:	2316      	movs	r3, #22
 8004e32:	462c      	mov	r4, r5
 8004e34:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004e38:	19a7      	adds	r7, r4, r6
 8004e3a:	4297      	cmp	r7, r2
 8004e3c:	bfde      	ittt	le
 8004e3e:	19bc      	addle	r4, r7, r6
 8004e40:	1bd2      	suble	r2, r2, r7
 8004e42:	19ad      	addle	r5, r5, r6
 8004e44:	0fcf      	lsrs	r7, r1, #31
 8004e46:	3b01      	subs	r3, #1
 8004e48:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004e4c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004e50:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004e54:	d1f0      	bne.n	8004e38 <__ieee754_sqrt+0x94>
 8004e56:	f04f 0c20 	mov.w	ip, #32
 8004e5a:	469e      	mov	lr, r3
 8004e5c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004e60:	42a2      	cmp	r2, r4
 8004e62:	eb06 070e 	add.w	r7, r6, lr
 8004e66:	dc02      	bgt.n	8004e6e <__ieee754_sqrt+0xca>
 8004e68:	d112      	bne.n	8004e90 <__ieee754_sqrt+0xec>
 8004e6a:	428f      	cmp	r7, r1
 8004e6c:	d810      	bhi.n	8004e90 <__ieee754_sqrt+0xec>
 8004e6e:	2f00      	cmp	r7, #0
 8004e70:	eb07 0e06 	add.w	lr, r7, r6
 8004e74:	da42      	bge.n	8004efc <__ieee754_sqrt+0x158>
 8004e76:	f1be 0f00 	cmp.w	lr, #0
 8004e7a:	db3f      	blt.n	8004efc <__ieee754_sqrt+0x158>
 8004e7c:	f104 0801 	add.w	r8, r4, #1
 8004e80:	1b12      	subs	r2, r2, r4
 8004e82:	428f      	cmp	r7, r1
 8004e84:	bf88      	it	hi
 8004e86:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004e8a:	1bc9      	subs	r1, r1, r7
 8004e8c:	4433      	add	r3, r6
 8004e8e:	4644      	mov	r4, r8
 8004e90:	0052      	lsls	r2, r2, #1
 8004e92:	f1bc 0c01 	subs.w	ip, ip, #1
 8004e96:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004e9a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004e9e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004ea2:	d1dd      	bne.n	8004e60 <__ieee754_sqrt+0xbc>
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	d006      	beq.n	8004eb6 <__ieee754_sqrt+0x112>
 8004ea8:	1c5c      	adds	r4, r3, #1
 8004eaa:	bf13      	iteet	ne
 8004eac:	3301      	addne	r3, #1
 8004eae:	3501      	addeq	r5, #1
 8004eb0:	4663      	moveq	r3, ip
 8004eb2:	f023 0301 	bicne.w	r3, r3, #1
 8004eb6:	106a      	asrs	r2, r5, #1
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	07e9      	lsls	r1, r5, #31
 8004ebc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004ec0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004ec4:	bf48      	it	mi
 8004ec6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004eca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004ece:	461c      	mov	r4, r3
 8004ed0:	e780      	b.n	8004dd4 <__ieee754_sqrt+0x30>
 8004ed2:	0aca      	lsrs	r2, r1, #11
 8004ed4:	3815      	subs	r0, #21
 8004ed6:	0549      	lsls	r1, r1, #21
 8004ed8:	2a00      	cmp	r2, #0
 8004eda:	d0fa      	beq.n	8004ed2 <__ieee754_sqrt+0x12e>
 8004edc:	02d6      	lsls	r6, r2, #11
 8004ede:	d50a      	bpl.n	8004ef6 <__ieee754_sqrt+0x152>
 8004ee0:	f1c3 0420 	rsb	r4, r3, #32
 8004ee4:	fa21 f404 	lsr.w	r4, r1, r4
 8004ee8:	1e5d      	subs	r5, r3, #1
 8004eea:	4099      	lsls	r1, r3
 8004eec:	4322      	orrs	r2, r4
 8004eee:	1b43      	subs	r3, r0, r5
 8004ef0:	e78b      	b.n	8004e0a <__ieee754_sqrt+0x66>
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	e7f0      	b.n	8004ed8 <__ieee754_sqrt+0x134>
 8004ef6:	0052      	lsls	r2, r2, #1
 8004ef8:	3301      	adds	r3, #1
 8004efa:	e7ef      	b.n	8004edc <__ieee754_sqrt+0x138>
 8004efc:	46a0      	mov	r8, r4
 8004efe:	e7bf      	b.n	8004e80 <__ieee754_sqrt+0xdc>
 8004f00:	7ff00000 	.word	0x7ff00000

08004f04 <fabs>:
 8004f04:	ec51 0b10 	vmov	r0, r1, d0
 8004f08:	ee10 2a10 	vmov	r2, s0
 8004f0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f10:	ec43 2b10 	vmov	d0, r2, r3
 8004f14:	4770      	bx	lr

08004f16 <finite>:
 8004f16:	ee10 3a90 	vmov	r3, s1
 8004f1a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8004f1e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004f22:	0fc0      	lsrs	r0, r0, #31
 8004f24:	4770      	bx	lr

08004f26 <matherr>:
 8004f26:	2000      	movs	r0, #0
 8004f28:	4770      	bx	lr
 8004f2a:	0000      	movs	r0, r0
 8004f2c:	0000      	movs	r0, r0
	...

08004f30 <nan>:
 8004f30:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004f38 <nan+0x8>
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	00000000 	.word	0x00000000
 8004f3c:	7ff80000 	.word	0x7ff80000

08004f40 <rint>:
 8004f40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f42:	ec51 0b10 	vmov	r0, r1, d0
 8004f46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004f4a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8004f4e:	2e13      	cmp	r6, #19
 8004f50:	460b      	mov	r3, r1
 8004f52:	ee10 4a10 	vmov	r4, s0
 8004f56:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8004f5a:	dc56      	bgt.n	800500a <rint+0xca>
 8004f5c:	2e00      	cmp	r6, #0
 8004f5e:	da2b      	bge.n	8004fb8 <rint+0x78>
 8004f60:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004f64:	4302      	orrs	r2, r0
 8004f66:	d023      	beq.n	8004fb0 <rint+0x70>
 8004f68:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8004f6c:	4302      	orrs	r2, r0
 8004f6e:	4254      	negs	r4, r2
 8004f70:	4314      	orrs	r4, r2
 8004f72:	0c4b      	lsrs	r3, r1, #17
 8004f74:	0b24      	lsrs	r4, r4, #12
 8004f76:	045b      	lsls	r3, r3, #17
 8004f78:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8004f7c:	ea44 0103 	orr.w	r1, r4, r3
 8004f80:	460b      	mov	r3, r1
 8004f82:	492f      	ldr	r1, [pc, #188]	; (8005040 <rint+0x100>)
 8004f84:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8004f88:	e9d1 6700 	ldrd	r6, r7, [r1]
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	4639      	mov	r1, r7
 8004f90:	4630      	mov	r0, r6
 8004f92:	f7fb f983 	bl	800029c <__adddf3>
 8004f96:	e9cd 0100 	strd	r0, r1, [sp]
 8004f9a:	463b      	mov	r3, r7
 8004f9c:	4632      	mov	r2, r6
 8004f9e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fa2:	f7fb f979 	bl	8000298 <__aeabi_dsub>
 8004fa6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004faa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8004fae:	4639      	mov	r1, r7
 8004fb0:	ec41 0b10 	vmov	d0, r0, r1
 8004fb4:	b003      	add	sp, #12
 8004fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb8:	4a22      	ldr	r2, [pc, #136]	; (8005044 <rint+0x104>)
 8004fba:	4132      	asrs	r2, r6
 8004fbc:	ea01 0702 	and.w	r7, r1, r2
 8004fc0:	4307      	orrs	r7, r0
 8004fc2:	d0f5      	beq.n	8004fb0 <rint+0x70>
 8004fc4:	0852      	lsrs	r2, r2, #1
 8004fc6:	4011      	ands	r1, r2
 8004fc8:	430c      	orrs	r4, r1
 8004fca:	d00b      	beq.n	8004fe4 <rint+0xa4>
 8004fcc:	ea23 0202 	bic.w	r2, r3, r2
 8004fd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004fd4:	2e13      	cmp	r6, #19
 8004fd6:	fa43 f306 	asr.w	r3, r3, r6
 8004fda:	bf0c      	ite	eq
 8004fdc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004fe0:	2400      	movne	r4, #0
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	4916      	ldr	r1, [pc, #88]	; (8005040 <rint+0x100>)
 8004fe6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004fea:	4622      	mov	r2, r4
 8004fec:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004ff0:	4620      	mov	r0, r4
 8004ff2:	4629      	mov	r1, r5
 8004ff4:	f7fb f952 	bl	800029c <__adddf3>
 8004ff8:	e9cd 0100 	strd	r0, r1, [sp]
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	462b      	mov	r3, r5
 8005000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005004:	f7fb f948 	bl	8000298 <__aeabi_dsub>
 8005008:	e7d2      	b.n	8004fb0 <rint+0x70>
 800500a:	2e33      	cmp	r6, #51	; 0x33
 800500c:	dd07      	ble.n	800501e <rint+0xde>
 800500e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005012:	d1cd      	bne.n	8004fb0 <rint+0x70>
 8005014:	ee10 2a10 	vmov	r2, s0
 8005018:	f7fb f940 	bl	800029c <__adddf3>
 800501c:	e7c8      	b.n	8004fb0 <rint+0x70>
 800501e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8005022:	f04f 32ff 	mov.w	r2, #4294967295
 8005026:	40f2      	lsrs	r2, r6
 8005028:	4210      	tst	r0, r2
 800502a:	d0c1      	beq.n	8004fb0 <rint+0x70>
 800502c:	0852      	lsrs	r2, r2, #1
 800502e:	4210      	tst	r0, r2
 8005030:	bf1f      	itttt	ne
 8005032:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005036:	ea20 0202 	bicne.w	r2, r0, r2
 800503a:	4134      	asrne	r4, r6
 800503c:	4314      	orrne	r4, r2
 800503e:	e7d1      	b.n	8004fe4 <rint+0xa4>
 8005040:	080096b8 	.word	0x080096b8
 8005044:	000fffff 	.word	0x000fffff

08005048 <scalbn>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	ec55 4b10 	vmov	r4, r5, d0
 800504e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005052:	4606      	mov	r6, r0
 8005054:	462b      	mov	r3, r5
 8005056:	b9aa      	cbnz	r2, 8005084 <scalbn+0x3c>
 8005058:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800505c:	4323      	orrs	r3, r4
 800505e:	d03b      	beq.n	80050d8 <scalbn+0x90>
 8005060:	4b31      	ldr	r3, [pc, #196]	; (8005128 <scalbn+0xe0>)
 8005062:	4629      	mov	r1, r5
 8005064:	2200      	movs	r2, #0
 8005066:	ee10 0a10 	vmov	r0, s0
 800506a:	f7fb facd 	bl	8000608 <__aeabi_dmul>
 800506e:	4b2f      	ldr	r3, [pc, #188]	; (800512c <scalbn+0xe4>)
 8005070:	429e      	cmp	r6, r3
 8005072:	4604      	mov	r4, r0
 8005074:	460d      	mov	r5, r1
 8005076:	da12      	bge.n	800509e <scalbn+0x56>
 8005078:	a327      	add	r3, pc, #156	; (adr r3, 8005118 <scalbn+0xd0>)
 800507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507e:	f7fb fac3 	bl	8000608 <__aeabi_dmul>
 8005082:	e009      	b.n	8005098 <scalbn+0x50>
 8005084:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005088:	428a      	cmp	r2, r1
 800508a:	d10c      	bne.n	80050a6 <scalbn+0x5e>
 800508c:	ee10 2a10 	vmov	r2, s0
 8005090:	4620      	mov	r0, r4
 8005092:	4629      	mov	r1, r5
 8005094:	f7fb f902 	bl	800029c <__adddf3>
 8005098:	4604      	mov	r4, r0
 800509a:	460d      	mov	r5, r1
 800509c:	e01c      	b.n	80050d8 <scalbn+0x90>
 800509e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80050a2:	460b      	mov	r3, r1
 80050a4:	3a36      	subs	r2, #54	; 0x36
 80050a6:	4432      	add	r2, r6
 80050a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80050ac:	428a      	cmp	r2, r1
 80050ae:	dd0b      	ble.n	80050c8 <scalbn+0x80>
 80050b0:	ec45 4b11 	vmov	d1, r4, r5
 80050b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005120 <scalbn+0xd8>
 80050b8:	f000 f83c 	bl	8005134 <copysign>
 80050bc:	a318      	add	r3, pc, #96	; (adr r3, 8005120 <scalbn+0xd8>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	ec51 0b10 	vmov	r0, r1, d0
 80050c6:	e7da      	b.n	800507e <scalbn+0x36>
 80050c8:	2a00      	cmp	r2, #0
 80050ca:	dd08      	ble.n	80050de <scalbn+0x96>
 80050cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80050d8:	ec45 4b10 	vmov	d0, r4, r5
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
 80050de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80050e2:	da0d      	bge.n	8005100 <scalbn+0xb8>
 80050e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80050e8:	429e      	cmp	r6, r3
 80050ea:	ec45 4b11 	vmov	d1, r4, r5
 80050ee:	dce1      	bgt.n	80050b4 <scalbn+0x6c>
 80050f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005118 <scalbn+0xd0>
 80050f4:	f000 f81e 	bl	8005134 <copysign>
 80050f8:	a307      	add	r3, pc, #28	; (adr r3, 8005118 <scalbn+0xd0>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	e7e0      	b.n	80050c2 <scalbn+0x7a>
 8005100:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005104:	3236      	adds	r2, #54	; 0x36
 8005106:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800510a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800510e:	4620      	mov	r0, r4
 8005110:	4629      	mov	r1, r5
 8005112:	2200      	movs	r2, #0
 8005114:	4b06      	ldr	r3, [pc, #24]	; (8005130 <scalbn+0xe8>)
 8005116:	e7b2      	b.n	800507e <scalbn+0x36>
 8005118:	c2f8f359 	.word	0xc2f8f359
 800511c:	01a56e1f 	.word	0x01a56e1f
 8005120:	8800759c 	.word	0x8800759c
 8005124:	7e37e43c 	.word	0x7e37e43c
 8005128:	43500000 	.word	0x43500000
 800512c:	ffff3cb0 	.word	0xffff3cb0
 8005130:	3c900000 	.word	0x3c900000

08005134 <copysign>:
 8005134:	ec51 0b10 	vmov	r0, r1, d0
 8005138:	ee11 0a90 	vmov	r0, s3
 800513c:	ee10 2a10 	vmov	r2, s0
 8005140:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005144:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005148:	ea41 0300 	orr.w	r3, r1, r0
 800514c:	ec43 2b10 	vmov	d0, r2, r3
 8005150:	4770      	bx	lr

08005152 <atof>:
 8005152:	2100      	movs	r1, #0
 8005154:	f001 bcdc 	b.w	8006b10 <strtod>

08005158 <__errno>:
 8005158:	4b01      	ldr	r3, [pc, #4]	; (8005160 <__errno+0x8>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000010 	.word	0x20000010

08005164 <__libc_init_array>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	4e0d      	ldr	r6, [pc, #52]	; (800519c <__libc_init_array+0x38>)
 8005168:	4c0d      	ldr	r4, [pc, #52]	; (80051a0 <__libc_init_array+0x3c>)
 800516a:	1ba4      	subs	r4, r4, r6
 800516c:	10a4      	asrs	r4, r4, #2
 800516e:	2500      	movs	r5, #0
 8005170:	42a5      	cmp	r5, r4
 8005172:	d109      	bne.n	8005188 <__libc_init_array+0x24>
 8005174:	4e0b      	ldr	r6, [pc, #44]	; (80051a4 <__libc_init_array+0x40>)
 8005176:	4c0c      	ldr	r4, [pc, #48]	; (80051a8 <__libc_init_array+0x44>)
 8005178:	f004 fa3e 	bl	80095f8 <_init>
 800517c:	1ba4      	subs	r4, r4, r6
 800517e:	10a4      	asrs	r4, r4, #2
 8005180:	2500      	movs	r5, #0
 8005182:	42a5      	cmp	r5, r4
 8005184:	d105      	bne.n	8005192 <__libc_init_array+0x2e>
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800518c:	4798      	blx	r3
 800518e:	3501      	adds	r5, #1
 8005190:	e7ee      	b.n	8005170 <__libc_init_array+0xc>
 8005192:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005196:	4798      	blx	r3
 8005198:	3501      	adds	r5, #1
 800519a:	e7f2      	b.n	8005182 <__libc_init_array+0x1e>
 800519c:	080099f0 	.word	0x080099f0
 80051a0:	080099f0 	.word	0x080099f0
 80051a4:	080099f0 	.word	0x080099f0
 80051a8:	080099f4 	.word	0x080099f4

080051ac <memcpy>:
 80051ac:	b510      	push	{r4, lr}
 80051ae:	1e43      	subs	r3, r0, #1
 80051b0:	440a      	add	r2, r1
 80051b2:	4291      	cmp	r1, r2
 80051b4:	d100      	bne.n	80051b8 <memcpy+0xc>
 80051b6:	bd10      	pop	{r4, pc}
 80051b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051c0:	e7f7      	b.n	80051b2 <memcpy+0x6>

080051c2 <memset>:
 80051c2:	4402      	add	r2, r0
 80051c4:	4603      	mov	r3, r0
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d100      	bne.n	80051cc <memset+0xa>
 80051ca:	4770      	bx	lr
 80051cc:	f803 1b01 	strb.w	r1, [r3], #1
 80051d0:	e7f9      	b.n	80051c6 <memset+0x4>

080051d2 <__cvt>:
 80051d2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051d6:	ec55 4b10 	vmov	r4, r5, d0
 80051da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80051dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80051e0:	2d00      	cmp	r5, #0
 80051e2:	460e      	mov	r6, r1
 80051e4:	4691      	mov	r9, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	bfb8      	it	lt
 80051ea:	4622      	movlt	r2, r4
 80051ec:	462b      	mov	r3, r5
 80051ee:	f027 0720 	bic.w	r7, r7, #32
 80051f2:	bfbb      	ittet	lt
 80051f4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80051f8:	461d      	movlt	r5, r3
 80051fa:	2300      	movge	r3, #0
 80051fc:	232d      	movlt	r3, #45	; 0x2d
 80051fe:	bfb8      	it	lt
 8005200:	4614      	movlt	r4, r2
 8005202:	2f46      	cmp	r7, #70	; 0x46
 8005204:	700b      	strb	r3, [r1, #0]
 8005206:	d004      	beq.n	8005212 <__cvt+0x40>
 8005208:	2f45      	cmp	r7, #69	; 0x45
 800520a:	d100      	bne.n	800520e <__cvt+0x3c>
 800520c:	3601      	adds	r6, #1
 800520e:	2102      	movs	r1, #2
 8005210:	e000      	b.n	8005214 <__cvt+0x42>
 8005212:	2103      	movs	r1, #3
 8005214:	ab03      	add	r3, sp, #12
 8005216:	9301      	str	r3, [sp, #4]
 8005218:	ab02      	add	r3, sp, #8
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	4632      	mov	r2, r6
 800521e:	4653      	mov	r3, sl
 8005220:	ec45 4b10 	vmov	d0, r4, r5
 8005224:	f001 fdd0 	bl	8006dc8 <_dtoa_r>
 8005228:	2f47      	cmp	r7, #71	; 0x47
 800522a:	4680      	mov	r8, r0
 800522c:	d102      	bne.n	8005234 <__cvt+0x62>
 800522e:	f019 0f01 	tst.w	r9, #1
 8005232:	d026      	beq.n	8005282 <__cvt+0xb0>
 8005234:	2f46      	cmp	r7, #70	; 0x46
 8005236:	eb08 0906 	add.w	r9, r8, r6
 800523a:	d111      	bne.n	8005260 <__cvt+0x8e>
 800523c:	f898 3000 	ldrb.w	r3, [r8]
 8005240:	2b30      	cmp	r3, #48	; 0x30
 8005242:	d10a      	bne.n	800525a <__cvt+0x88>
 8005244:	2200      	movs	r2, #0
 8005246:	2300      	movs	r3, #0
 8005248:	4620      	mov	r0, r4
 800524a:	4629      	mov	r1, r5
 800524c:	f7fb fc44 	bl	8000ad8 <__aeabi_dcmpeq>
 8005250:	b918      	cbnz	r0, 800525a <__cvt+0x88>
 8005252:	f1c6 0601 	rsb	r6, r6, #1
 8005256:	f8ca 6000 	str.w	r6, [sl]
 800525a:	f8da 3000 	ldr.w	r3, [sl]
 800525e:	4499      	add	r9, r3
 8005260:	2200      	movs	r2, #0
 8005262:	2300      	movs	r3, #0
 8005264:	4620      	mov	r0, r4
 8005266:	4629      	mov	r1, r5
 8005268:	f7fb fc36 	bl	8000ad8 <__aeabi_dcmpeq>
 800526c:	b938      	cbnz	r0, 800527e <__cvt+0xac>
 800526e:	2230      	movs	r2, #48	; 0x30
 8005270:	9b03      	ldr	r3, [sp, #12]
 8005272:	454b      	cmp	r3, r9
 8005274:	d205      	bcs.n	8005282 <__cvt+0xb0>
 8005276:	1c59      	adds	r1, r3, #1
 8005278:	9103      	str	r1, [sp, #12]
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e7f8      	b.n	8005270 <__cvt+0x9e>
 800527e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005282:	9b03      	ldr	r3, [sp, #12]
 8005284:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005286:	eba3 0308 	sub.w	r3, r3, r8
 800528a:	4640      	mov	r0, r8
 800528c:	6013      	str	r3, [r2, #0]
 800528e:	b004      	add	sp, #16
 8005290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005294 <__exponent>:
 8005294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005296:	2900      	cmp	r1, #0
 8005298:	4604      	mov	r4, r0
 800529a:	bfba      	itte	lt
 800529c:	4249      	neglt	r1, r1
 800529e:	232d      	movlt	r3, #45	; 0x2d
 80052a0:	232b      	movge	r3, #43	; 0x2b
 80052a2:	2909      	cmp	r1, #9
 80052a4:	f804 2b02 	strb.w	r2, [r4], #2
 80052a8:	7043      	strb	r3, [r0, #1]
 80052aa:	dd20      	ble.n	80052ee <__exponent+0x5a>
 80052ac:	f10d 0307 	add.w	r3, sp, #7
 80052b0:	461f      	mov	r7, r3
 80052b2:	260a      	movs	r6, #10
 80052b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80052b8:	fb06 1115 	mls	r1, r6, r5, r1
 80052bc:	3130      	adds	r1, #48	; 0x30
 80052be:	2d09      	cmp	r5, #9
 80052c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052c4:	f103 32ff 	add.w	r2, r3, #4294967295
 80052c8:	4629      	mov	r1, r5
 80052ca:	dc09      	bgt.n	80052e0 <__exponent+0x4c>
 80052cc:	3130      	adds	r1, #48	; 0x30
 80052ce:	3b02      	subs	r3, #2
 80052d0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80052d4:	42bb      	cmp	r3, r7
 80052d6:	4622      	mov	r2, r4
 80052d8:	d304      	bcc.n	80052e4 <__exponent+0x50>
 80052da:	1a10      	subs	r0, r2, r0
 80052dc:	b003      	add	sp, #12
 80052de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e0:	4613      	mov	r3, r2
 80052e2:	e7e7      	b.n	80052b4 <__exponent+0x20>
 80052e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80052e8:	f804 2b01 	strb.w	r2, [r4], #1
 80052ec:	e7f2      	b.n	80052d4 <__exponent+0x40>
 80052ee:	2330      	movs	r3, #48	; 0x30
 80052f0:	4419      	add	r1, r3
 80052f2:	7083      	strb	r3, [r0, #2]
 80052f4:	1d02      	adds	r2, r0, #4
 80052f6:	70c1      	strb	r1, [r0, #3]
 80052f8:	e7ef      	b.n	80052da <__exponent+0x46>
	...

080052fc <_printf_float>:
 80052fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005300:	b08d      	sub	sp, #52	; 0x34
 8005302:	460c      	mov	r4, r1
 8005304:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005308:	4616      	mov	r6, r2
 800530a:	461f      	mov	r7, r3
 800530c:	4605      	mov	r5, r0
 800530e:	f002 ff09 	bl	8008124 <_localeconv_r>
 8005312:	6803      	ldr	r3, [r0, #0]
 8005314:	9304      	str	r3, [sp, #16]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fa ff62 	bl	80001e0 <strlen>
 800531c:	2300      	movs	r3, #0
 800531e:	930a      	str	r3, [sp, #40]	; 0x28
 8005320:	f8d8 3000 	ldr.w	r3, [r8]
 8005324:	9005      	str	r0, [sp, #20]
 8005326:	3307      	adds	r3, #7
 8005328:	f023 0307 	bic.w	r3, r3, #7
 800532c:	f103 0208 	add.w	r2, r3, #8
 8005330:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005334:	f8d4 b000 	ldr.w	fp, [r4]
 8005338:	f8c8 2000 	str.w	r2, [r8]
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005344:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005348:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800534c:	9307      	str	r3, [sp, #28]
 800534e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005352:	f04f 32ff 	mov.w	r2, #4294967295
 8005356:	4ba7      	ldr	r3, [pc, #668]	; (80055f4 <_printf_float+0x2f8>)
 8005358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800535c:	f7fb fbee 	bl	8000b3c <__aeabi_dcmpun>
 8005360:	bb70      	cbnz	r0, 80053c0 <_printf_float+0xc4>
 8005362:	f04f 32ff 	mov.w	r2, #4294967295
 8005366:	4ba3      	ldr	r3, [pc, #652]	; (80055f4 <_printf_float+0x2f8>)
 8005368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800536c:	f7fb fbc8 	bl	8000b00 <__aeabi_dcmple>
 8005370:	bb30      	cbnz	r0, 80053c0 <_printf_float+0xc4>
 8005372:	2200      	movs	r2, #0
 8005374:	2300      	movs	r3, #0
 8005376:	4640      	mov	r0, r8
 8005378:	4649      	mov	r1, r9
 800537a:	f7fb fbb7 	bl	8000aec <__aeabi_dcmplt>
 800537e:	b110      	cbz	r0, 8005386 <_printf_float+0x8a>
 8005380:	232d      	movs	r3, #45	; 0x2d
 8005382:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005386:	4a9c      	ldr	r2, [pc, #624]	; (80055f8 <_printf_float+0x2fc>)
 8005388:	4b9c      	ldr	r3, [pc, #624]	; (80055fc <_printf_float+0x300>)
 800538a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800538e:	bf8c      	ite	hi
 8005390:	4690      	movhi	r8, r2
 8005392:	4698      	movls	r8, r3
 8005394:	2303      	movs	r3, #3
 8005396:	f02b 0204 	bic.w	r2, fp, #4
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	6022      	str	r2, [r4, #0]
 800539e:	f04f 0900 	mov.w	r9, #0
 80053a2:	9700      	str	r7, [sp, #0]
 80053a4:	4633      	mov	r3, r6
 80053a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80053a8:	4621      	mov	r1, r4
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 f9e6 	bl	800577c <_printf_common>
 80053b0:	3001      	adds	r0, #1
 80053b2:	f040 808d 	bne.w	80054d0 <_printf_float+0x1d4>
 80053b6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ba:	b00d      	add	sp, #52	; 0x34
 80053bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053c0:	4642      	mov	r2, r8
 80053c2:	464b      	mov	r3, r9
 80053c4:	4640      	mov	r0, r8
 80053c6:	4649      	mov	r1, r9
 80053c8:	f7fb fbb8 	bl	8000b3c <__aeabi_dcmpun>
 80053cc:	b110      	cbz	r0, 80053d4 <_printf_float+0xd8>
 80053ce:	4a8c      	ldr	r2, [pc, #560]	; (8005600 <_printf_float+0x304>)
 80053d0:	4b8c      	ldr	r3, [pc, #560]	; (8005604 <_printf_float+0x308>)
 80053d2:	e7da      	b.n	800538a <_printf_float+0x8e>
 80053d4:	6861      	ldr	r1, [r4, #4]
 80053d6:	1c4b      	adds	r3, r1, #1
 80053d8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80053dc:	a80a      	add	r0, sp, #40	; 0x28
 80053de:	d13e      	bne.n	800545e <_printf_float+0x162>
 80053e0:	2306      	movs	r3, #6
 80053e2:	6063      	str	r3, [r4, #4]
 80053e4:	2300      	movs	r3, #0
 80053e6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80053ea:	ab09      	add	r3, sp, #36	; 0x24
 80053ec:	9300      	str	r3, [sp, #0]
 80053ee:	ec49 8b10 	vmov	d0, r8, r9
 80053f2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053f6:	6022      	str	r2, [r4, #0]
 80053f8:	f8cd a004 	str.w	sl, [sp, #4]
 80053fc:	6861      	ldr	r1, [r4, #4]
 80053fe:	4628      	mov	r0, r5
 8005400:	f7ff fee7 	bl	80051d2 <__cvt>
 8005404:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005408:	2b47      	cmp	r3, #71	; 0x47
 800540a:	4680      	mov	r8, r0
 800540c:	d109      	bne.n	8005422 <_printf_float+0x126>
 800540e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005410:	1cd8      	adds	r0, r3, #3
 8005412:	db02      	blt.n	800541a <_printf_float+0x11e>
 8005414:	6862      	ldr	r2, [r4, #4]
 8005416:	4293      	cmp	r3, r2
 8005418:	dd47      	ble.n	80054aa <_printf_float+0x1ae>
 800541a:	f1aa 0a02 	sub.w	sl, sl, #2
 800541e:	fa5f fa8a 	uxtb.w	sl, sl
 8005422:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005426:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005428:	d824      	bhi.n	8005474 <_printf_float+0x178>
 800542a:	3901      	subs	r1, #1
 800542c:	4652      	mov	r2, sl
 800542e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005432:	9109      	str	r1, [sp, #36]	; 0x24
 8005434:	f7ff ff2e 	bl	8005294 <__exponent>
 8005438:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800543a:	1813      	adds	r3, r2, r0
 800543c:	2a01      	cmp	r2, #1
 800543e:	4681      	mov	r9, r0
 8005440:	6123      	str	r3, [r4, #16]
 8005442:	dc02      	bgt.n	800544a <_printf_float+0x14e>
 8005444:	6822      	ldr	r2, [r4, #0]
 8005446:	07d1      	lsls	r1, r2, #31
 8005448:	d501      	bpl.n	800544e <_printf_float+0x152>
 800544a:	3301      	adds	r3, #1
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005452:	2b00      	cmp	r3, #0
 8005454:	d0a5      	beq.n	80053a2 <_printf_float+0xa6>
 8005456:	232d      	movs	r3, #45	; 0x2d
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545c:	e7a1      	b.n	80053a2 <_printf_float+0xa6>
 800545e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005462:	f000 8177 	beq.w	8005754 <_printf_float+0x458>
 8005466:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800546a:	d1bb      	bne.n	80053e4 <_printf_float+0xe8>
 800546c:	2900      	cmp	r1, #0
 800546e:	d1b9      	bne.n	80053e4 <_printf_float+0xe8>
 8005470:	2301      	movs	r3, #1
 8005472:	e7b6      	b.n	80053e2 <_printf_float+0xe6>
 8005474:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005478:	d119      	bne.n	80054ae <_printf_float+0x1b2>
 800547a:	2900      	cmp	r1, #0
 800547c:	6863      	ldr	r3, [r4, #4]
 800547e:	dd0c      	ble.n	800549a <_printf_float+0x19e>
 8005480:	6121      	str	r1, [r4, #16]
 8005482:	b913      	cbnz	r3, 800548a <_printf_float+0x18e>
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	07d2      	lsls	r2, r2, #31
 8005488:	d502      	bpl.n	8005490 <_printf_float+0x194>
 800548a:	3301      	adds	r3, #1
 800548c:	440b      	add	r3, r1
 800548e:	6123      	str	r3, [r4, #16]
 8005490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005492:	65a3      	str	r3, [r4, #88]	; 0x58
 8005494:	f04f 0900 	mov.w	r9, #0
 8005498:	e7d9      	b.n	800544e <_printf_float+0x152>
 800549a:	b913      	cbnz	r3, 80054a2 <_printf_float+0x1a6>
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	07d0      	lsls	r0, r2, #31
 80054a0:	d501      	bpl.n	80054a6 <_printf_float+0x1aa>
 80054a2:	3302      	adds	r3, #2
 80054a4:	e7f3      	b.n	800548e <_printf_float+0x192>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e7f1      	b.n	800548e <_printf_float+0x192>
 80054aa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80054ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80054b2:	4293      	cmp	r3, r2
 80054b4:	db05      	blt.n	80054c2 <_printf_float+0x1c6>
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	6123      	str	r3, [r4, #16]
 80054ba:	07d1      	lsls	r1, r2, #31
 80054bc:	d5e8      	bpl.n	8005490 <_printf_float+0x194>
 80054be:	3301      	adds	r3, #1
 80054c0:	e7e5      	b.n	800548e <_printf_float+0x192>
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bfd4      	ite	le
 80054c6:	f1c3 0302 	rsble	r3, r3, #2
 80054ca:	2301      	movgt	r3, #1
 80054cc:	4413      	add	r3, r2
 80054ce:	e7de      	b.n	800548e <_printf_float+0x192>
 80054d0:	6823      	ldr	r3, [r4, #0]
 80054d2:	055a      	lsls	r2, r3, #21
 80054d4:	d407      	bmi.n	80054e6 <_printf_float+0x1ea>
 80054d6:	6923      	ldr	r3, [r4, #16]
 80054d8:	4642      	mov	r2, r8
 80054da:	4631      	mov	r1, r6
 80054dc:	4628      	mov	r0, r5
 80054de:	47b8      	blx	r7
 80054e0:	3001      	adds	r0, #1
 80054e2:	d12b      	bne.n	800553c <_printf_float+0x240>
 80054e4:	e767      	b.n	80053b6 <_printf_float+0xba>
 80054e6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054ea:	f240 80dc 	bls.w	80056a6 <_printf_float+0x3aa>
 80054ee:	2200      	movs	r2, #0
 80054f0:	2300      	movs	r3, #0
 80054f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054f6:	f7fb faef 	bl	8000ad8 <__aeabi_dcmpeq>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d033      	beq.n	8005566 <_printf_float+0x26a>
 80054fe:	2301      	movs	r3, #1
 8005500:	4a41      	ldr	r2, [pc, #260]	; (8005608 <_printf_float+0x30c>)
 8005502:	4631      	mov	r1, r6
 8005504:	4628      	mov	r0, r5
 8005506:	47b8      	blx	r7
 8005508:	3001      	adds	r0, #1
 800550a:	f43f af54 	beq.w	80053b6 <_printf_float+0xba>
 800550e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005512:	429a      	cmp	r2, r3
 8005514:	db02      	blt.n	800551c <_printf_float+0x220>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	07d8      	lsls	r0, r3, #31
 800551a:	d50f      	bpl.n	800553c <_printf_float+0x240>
 800551c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005520:	4631      	mov	r1, r6
 8005522:	4628      	mov	r0, r5
 8005524:	47b8      	blx	r7
 8005526:	3001      	adds	r0, #1
 8005528:	f43f af45 	beq.w	80053b6 <_printf_float+0xba>
 800552c:	f04f 0800 	mov.w	r8, #0
 8005530:	f104 091a 	add.w	r9, r4, #26
 8005534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005536:	3b01      	subs	r3, #1
 8005538:	4543      	cmp	r3, r8
 800553a:	dc09      	bgt.n	8005550 <_printf_float+0x254>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	079b      	lsls	r3, r3, #30
 8005540:	f100 8103 	bmi.w	800574a <_printf_float+0x44e>
 8005544:	68e0      	ldr	r0, [r4, #12]
 8005546:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005548:	4298      	cmp	r0, r3
 800554a:	bfb8      	it	lt
 800554c:	4618      	movlt	r0, r3
 800554e:	e734      	b.n	80053ba <_printf_float+0xbe>
 8005550:	2301      	movs	r3, #1
 8005552:	464a      	mov	r2, r9
 8005554:	4631      	mov	r1, r6
 8005556:	4628      	mov	r0, r5
 8005558:	47b8      	blx	r7
 800555a:	3001      	adds	r0, #1
 800555c:	f43f af2b 	beq.w	80053b6 <_printf_float+0xba>
 8005560:	f108 0801 	add.w	r8, r8, #1
 8005564:	e7e6      	b.n	8005534 <_printf_float+0x238>
 8005566:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	dc2b      	bgt.n	80055c4 <_printf_float+0x2c8>
 800556c:	2301      	movs	r3, #1
 800556e:	4a26      	ldr	r2, [pc, #152]	; (8005608 <_printf_float+0x30c>)
 8005570:	4631      	mov	r1, r6
 8005572:	4628      	mov	r0, r5
 8005574:	47b8      	blx	r7
 8005576:	3001      	adds	r0, #1
 8005578:	f43f af1d 	beq.w	80053b6 <_printf_float+0xba>
 800557c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800557e:	b923      	cbnz	r3, 800558a <_printf_float+0x28e>
 8005580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005582:	b913      	cbnz	r3, 800558a <_printf_float+0x28e>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	07d9      	lsls	r1, r3, #31
 8005588:	d5d8      	bpl.n	800553c <_printf_float+0x240>
 800558a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800558e:	4631      	mov	r1, r6
 8005590:	4628      	mov	r0, r5
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	f43f af0e 	beq.w	80053b6 <_printf_float+0xba>
 800559a:	f04f 0900 	mov.w	r9, #0
 800559e:	f104 0a1a 	add.w	sl, r4, #26
 80055a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055a4:	425b      	negs	r3, r3
 80055a6:	454b      	cmp	r3, r9
 80055a8:	dc01      	bgt.n	80055ae <_printf_float+0x2b2>
 80055aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055ac:	e794      	b.n	80054d8 <_printf_float+0x1dc>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4652      	mov	r2, sl
 80055b2:	4631      	mov	r1, r6
 80055b4:	4628      	mov	r0, r5
 80055b6:	47b8      	blx	r7
 80055b8:	3001      	adds	r0, #1
 80055ba:	f43f aefc 	beq.w	80053b6 <_printf_float+0xba>
 80055be:	f109 0901 	add.w	r9, r9, #1
 80055c2:	e7ee      	b.n	80055a2 <_printf_float+0x2a6>
 80055c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055c8:	429a      	cmp	r2, r3
 80055ca:	bfa8      	it	ge
 80055cc:	461a      	movge	r2, r3
 80055ce:	2a00      	cmp	r2, #0
 80055d0:	4691      	mov	r9, r2
 80055d2:	dd07      	ble.n	80055e4 <_printf_float+0x2e8>
 80055d4:	4613      	mov	r3, r2
 80055d6:	4631      	mov	r1, r6
 80055d8:	4642      	mov	r2, r8
 80055da:	4628      	mov	r0, r5
 80055dc:	47b8      	blx	r7
 80055de:	3001      	adds	r0, #1
 80055e0:	f43f aee9 	beq.w	80053b6 <_printf_float+0xba>
 80055e4:	f104 031a 	add.w	r3, r4, #26
 80055e8:	f04f 0b00 	mov.w	fp, #0
 80055ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055f0:	9306      	str	r3, [sp, #24]
 80055f2:	e015      	b.n	8005620 <_printf_float+0x324>
 80055f4:	7fefffff 	.word	0x7fefffff
 80055f8:	080096d0 	.word	0x080096d0
 80055fc:	080096cc 	.word	0x080096cc
 8005600:	080096d8 	.word	0x080096d8
 8005604:	080096d4 	.word	0x080096d4
 8005608:	080096dc 	.word	0x080096dc
 800560c:	2301      	movs	r3, #1
 800560e:	9a06      	ldr	r2, [sp, #24]
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f aecd 	beq.w	80053b6 <_printf_float+0xba>
 800561c:	f10b 0b01 	add.w	fp, fp, #1
 8005620:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005624:	ebaa 0309 	sub.w	r3, sl, r9
 8005628:	455b      	cmp	r3, fp
 800562a:	dcef      	bgt.n	800560c <_printf_float+0x310>
 800562c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005630:	429a      	cmp	r2, r3
 8005632:	44d0      	add	r8, sl
 8005634:	db15      	blt.n	8005662 <_printf_float+0x366>
 8005636:	6823      	ldr	r3, [r4, #0]
 8005638:	07da      	lsls	r2, r3, #31
 800563a:	d412      	bmi.n	8005662 <_printf_float+0x366>
 800563c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800563e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005640:	eba3 020a 	sub.w	r2, r3, sl
 8005644:	eba3 0a01 	sub.w	sl, r3, r1
 8005648:	4592      	cmp	sl, r2
 800564a:	bfa8      	it	ge
 800564c:	4692      	movge	sl, r2
 800564e:	f1ba 0f00 	cmp.w	sl, #0
 8005652:	dc0e      	bgt.n	8005672 <_printf_float+0x376>
 8005654:	f04f 0800 	mov.w	r8, #0
 8005658:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800565c:	f104 091a 	add.w	r9, r4, #26
 8005660:	e019      	b.n	8005696 <_printf_float+0x39a>
 8005662:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005666:	4631      	mov	r1, r6
 8005668:	4628      	mov	r0, r5
 800566a:	47b8      	blx	r7
 800566c:	3001      	adds	r0, #1
 800566e:	d1e5      	bne.n	800563c <_printf_float+0x340>
 8005670:	e6a1      	b.n	80053b6 <_printf_float+0xba>
 8005672:	4653      	mov	r3, sl
 8005674:	4642      	mov	r2, r8
 8005676:	4631      	mov	r1, r6
 8005678:	4628      	mov	r0, r5
 800567a:	47b8      	blx	r7
 800567c:	3001      	adds	r0, #1
 800567e:	d1e9      	bne.n	8005654 <_printf_float+0x358>
 8005680:	e699      	b.n	80053b6 <_printf_float+0xba>
 8005682:	2301      	movs	r3, #1
 8005684:	464a      	mov	r2, r9
 8005686:	4631      	mov	r1, r6
 8005688:	4628      	mov	r0, r5
 800568a:	47b8      	blx	r7
 800568c:	3001      	adds	r0, #1
 800568e:	f43f ae92 	beq.w	80053b6 <_printf_float+0xba>
 8005692:	f108 0801 	add.w	r8, r8, #1
 8005696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	eba3 030a 	sub.w	r3, r3, sl
 80056a0:	4543      	cmp	r3, r8
 80056a2:	dcee      	bgt.n	8005682 <_printf_float+0x386>
 80056a4:	e74a      	b.n	800553c <_printf_float+0x240>
 80056a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056a8:	2a01      	cmp	r2, #1
 80056aa:	dc01      	bgt.n	80056b0 <_printf_float+0x3b4>
 80056ac:	07db      	lsls	r3, r3, #31
 80056ae:	d53a      	bpl.n	8005726 <_printf_float+0x42a>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4642      	mov	r2, r8
 80056b4:	4631      	mov	r1, r6
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	f43f ae7b 	beq.w	80053b6 <_printf_float+0xba>
 80056c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f108 0801 	add.w	r8, r8, #1
 80056d0:	f43f ae71 	beq.w	80053b6 <_printf_float+0xba>
 80056d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d6:	2200      	movs	r2, #0
 80056d8:	f103 3aff 	add.w	sl, r3, #4294967295
 80056dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056e0:	2300      	movs	r3, #0
 80056e2:	f7fb f9f9 	bl	8000ad8 <__aeabi_dcmpeq>
 80056e6:	b9c8      	cbnz	r0, 800571c <_printf_float+0x420>
 80056e8:	4653      	mov	r3, sl
 80056ea:	4642      	mov	r2, r8
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	d10e      	bne.n	8005714 <_printf_float+0x418>
 80056f6:	e65e      	b.n	80053b6 <_printf_float+0xba>
 80056f8:	2301      	movs	r3, #1
 80056fa:	4652      	mov	r2, sl
 80056fc:	4631      	mov	r1, r6
 80056fe:	4628      	mov	r0, r5
 8005700:	47b8      	blx	r7
 8005702:	3001      	adds	r0, #1
 8005704:	f43f ae57 	beq.w	80053b6 <_printf_float+0xba>
 8005708:	f108 0801 	add.w	r8, r8, #1
 800570c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800570e:	3b01      	subs	r3, #1
 8005710:	4543      	cmp	r3, r8
 8005712:	dcf1      	bgt.n	80056f8 <_printf_float+0x3fc>
 8005714:	464b      	mov	r3, r9
 8005716:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800571a:	e6de      	b.n	80054da <_printf_float+0x1de>
 800571c:	f04f 0800 	mov.w	r8, #0
 8005720:	f104 0a1a 	add.w	sl, r4, #26
 8005724:	e7f2      	b.n	800570c <_printf_float+0x410>
 8005726:	2301      	movs	r3, #1
 8005728:	e7df      	b.n	80056ea <_printf_float+0x3ee>
 800572a:	2301      	movs	r3, #1
 800572c:	464a      	mov	r2, r9
 800572e:	4631      	mov	r1, r6
 8005730:	4628      	mov	r0, r5
 8005732:	47b8      	blx	r7
 8005734:	3001      	adds	r0, #1
 8005736:	f43f ae3e 	beq.w	80053b6 <_printf_float+0xba>
 800573a:	f108 0801 	add.w	r8, r8, #1
 800573e:	68e3      	ldr	r3, [r4, #12]
 8005740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005742:	1a9b      	subs	r3, r3, r2
 8005744:	4543      	cmp	r3, r8
 8005746:	dcf0      	bgt.n	800572a <_printf_float+0x42e>
 8005748:	e6fc      	b.n	8005544 <_printf_float+0x248>
 800574a:	f04f 0800 	mov.w	r8, #0
 800574e:	f104 0919 	add.w	r9, r4, #25
 8005752:	e7f4      	b.n	800573e <_printf_float+0x442>
 8005754:	2900      	cmp	r1, #0
 8005756:	f43f ae8b 	beq.w	8005470 <_printf_float+0x174>
 800575a:	2300      	movs	r3, #0
 800575c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005760:	ab09      	add	r3, sp, #36	; 0x24
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	ec49 8b10 	vmov	d0, r8, r9
 8005768:	6022      	str	r2, [r4, #0]
 800576a:	f8cd a004 	str.w	sl, [sp, #4]
 800576e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005772:	4628      	mov	r0, r5
 8005774:	f7ff fd2d 	bl	80051d2 <__cvt>
 8005778:	4680      	mov	r8, r0
 800577a:	e648      	b.n	800540e <_printf_float+0x112>

0800577c <_printf_common>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	4691      	mov	r9, r2
 8005782:	461f      	mov	r7, r3
 8005784:	688a      	ldr	r2, [r1, #8]
 8005786:	690b      	ldr	r3, [r1, #16]
 8005788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800578c:	4293      	cmp	r3, r2
 800578e:	bfb8      	it	lt
 8005790:	4613      	movlt	r3, r2
 8005792:	f8c9 3000 	str.w	r3, [r9]
 8005796:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800579a:	4606      	mov	r6, r0
 800579c:	460c      	mov	r4, r1
 800579e:	b112      	cbz	r2, 80057a6 <_printf_common+0x2a>
 80057a0:	3301      	adds	r3, #1
 80057a2:	f8c9 3000 	str.w	r3, [r9]
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	0699      	lsls	r1, r3, #26
 80057aa:	bf42      	ittt	mi
 80057ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80057b0:	3302      	addmi	r3, #2
 80057b2:	f8c9 3000 	strmi.w	r3, [r9]
 80057b6:	6825      	ldr	r5, [r4, #0]
 80057b8:	f015 0506 	ands.w	r5, r5, #6
 80057bc:	d107      	bne.n	80057ce <_printf_common+0x52>
 80057be:	f104 0a19 	add.w	sl, r4, #25
 80057c2:	68e3      	ldr	r3, [r4, #12]
 80057c4:	f8d9 2000 	ldr.w	r2, [r9]
 80057c8:	1a9b      	subs	r3, r3, r2
 80057ca:	42ab      	cmp	r3, r5
 80057cc:	dc28      	bgt.n	8005820 <_printf_common+0xa4>
 80057ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80057d2:	6822      	ldr	r2, [r4, #0]
 80057d4:	3300      	adds	r3, #0
 80057d6:	bf18      	it	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	0692      	lsls	r2, r2, #26
 80057dc:	d42d      	bmi.n	800583a <_printf_common+0xbe>
 80057de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057e2:	4639      	mov	r1, r7
 80057e4:	4630      	mov	r0, r6
 80057e6:	47c0      	blx	r8
 80057e8:	3001      	adds	r0, #1
 80057ea:	d020      	beq.n	800582e <_printf_common+0xb2>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	68e5      	ldr	r5, [r4, #12]
 80057f0:	f8d9 2000 	ldr.w	r2, [r9]
 80057f4:	f003 0306 	and.w	r3, r3, #6
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	bf08      	it	eq
 80057fc:	1aad      	subeq	r5, r5, r2
 80057fe:	68a3      	ldr	r3, [r4, #8]
 8005800:	6922      	ldr	r2, [r4, #16]
 8005802:	bf0c      	ite	eq
 8005804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005808:	2500      	movne	r5, #0
 800580a:	4293      	cmp	r3, r2
 800580c:	bfc4      	itt	gt
 800580e:	1a9b      	subgt	r3, r3, r2
 8005810:	18ed      	addgt	r5, r5, r3
 8005812:	f04f 0900 	mov.w	r9, #0
 8005816:	341a      	adds	r4, #26
 8005818:	454d      	cmp	r5, r9
 800581a:	d11a      	bne.n	8005852 <_printf_common+0xd6>
 800581c:	2000      	movs	r0, #0
 800581e:	e008      	b.n	8005832 <_printf_common+0xb6>
 8005820:	2301      	movs	r3, #1
 8005822:	4652      	mov	r2, sl
 8005824:	4639      	mov	r1, r7
 8005826:	4630      	mov	r0, r6
 8005828:	47c0      	blx	r8
 800582a:	3001      	adds	r0, #1
 800582c:	d103      	bne.n	8005836 <_printf_common+0xba>
 800582e:	f04f 30ff 	mov.w	r0, #4294967295
 8005832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005836:	3501      	adds	r5, #1
 8005838:	e7c3      	b.n	80057c2 <_printf_common+0x46>
 800583a:	18e1      	adds	r1, r4, r3
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	2030      	movs	r0, #48	; 0x30
 8005840:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005844:	4422      	add	r2, r4
 8005846:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800584a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800584e:	3302      	adds	r3, #2
 8005850:	e7c5      	b.n	80057de <_printf_common+0x62>
 8005852:	2301      	movs	r3, #1
 8005854:	4622      	mov	r2, r4
 8005856:	4639      	mov	r1, r7
 8005858:	4630      	mov	r0, r6
 800585a:	47c0      	blx	r8
 800585c:	3001      	adds	r0, #1
 800585e:	d0e6      	beq.n	800582e <_printf_common+0xb2>
 8005860:	f109 0901 	add.w	r9, r9, #1
 8005864:	e7d8      	b.n	8005818 <_printf_common+0x9c>
	...

08005868 <_printf_i>:
 8005868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800586c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005870:	460c      	mov	r4, r1
 8005872:	7e09      	ldrb	r1, [r1, #24]
 8005874:	b085      	sub	sp, #20
 8005876:	296e      	cmp	r1, #110	; 0x6e
 8005878:	4617      	mov	r7, r2
 800587a:	4606      	mov	r6, r0
 800587c:	4698      	mov	r8, r3
 800587e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005880:	f000 80b3 	beq.w	80059ea <_printf_i+0x182>
 8005884:	d822      	bhi.n	80058cc <_printf_i+0x64>
 8005886:	2963      	cmp	r1, #99	; 0x63
 8005888:	d036      	beq.n	80058f8 <_printf_i+0x90>
 800588a:	d80a      	bhi.n	80058a2 <_printf_i+0x3a>
 800588c:	2900      	cmp	r1, #0
 800588e:	f000 80b9 	beq.w	8005a04 <_printf_i+0x19c>
 8005892:	2958      	cmp	r1, #88	; 0x58
 8005894:	f000 8083 	beq.w	800599e <_printf_i+0x136>
 8005898:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800589c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80058a0:	e032      	b.n	8005908 <_printf_i+0xa0>
 80058a2:	2964      	cmp	r1, #100	; 0x64
 80058a4:	d001      	beq.n	80058aa <_printf_i+0x42>
 80058a6:	2969      	cmp	r1, #105	; 0x69
 80058a8:	d1f6      	bne.n	8005898 <_printf_i+0x30>
 80058aa:	6820      	ldr	r0, [r4, #0]
 80058ac:	6813      	ldr	r3, [r2, #0]
 80058ae:	0605      	lsls	r5, r0, #24
 80058b0:	f103 0104 	add.w	r1, r3, #4
 80058b4:	d52a      	bpl.n	800590c <_printf_i+0xa4>
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6011      	str	r1, [r2, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	da03      	bge.n	80058c6 <_printf_i+0x5e>
 80058be:	222d      	movs	r2, #45	; 0x2d
 80058c0:	425b      	negs	r3, r3
 80058c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80058c6:	486f      	ldr	r0, [pc, #444]	; (8005a84 <_printf_i+0x21c>)
 80058c8:	220a      	movs	r2, #10
 80058ca:	e039      	b.n	8005940 <_printf_i+0xd8>
 80058cc:	2973      	cmp	r1, #115	; 0x73
 80058ce:	f000 809d 	beq.w	8005a0c <_printf_i+0x1a4>
 80058d2:	d808      	bhi.n	80058e6 <_printf_i+0x7e>
 80058d4:	296f      	cmp	r1, #111	; 0x6f
 80058d6:	d020      	beq.n	800591a <_printf_i+0xb2>
 80058d8:	2970      	cmp	r1, #112	; 0x70
 80058da:	d1dd      	bne.n	8005898 <_printf_i+0x30>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	f043 0320 	orr.w	r3, r3, #32
 80058e2:	6023      	str	r3, [r4, #0]
 80058e4:	e003      	b.n	80058ee <_printf_i+0x86>
 80058e6:	2975      	cmp	r1, #117	; 0x75
 80058e8:	d017      	beq.n	800591a <_printf_i+0xb2>
 80058ea:	2978      	cmp	r1, #120	; 0x78
 80058ec:	d1d4      	bne.n	8005898 <_printf_i+0x30>
 80058ee:	2378      	movs	r3, #120	; 0x78
 80058f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058f4:	4864      	ldr	r0, [pc, #400]	; (8005a88 <_printf_i+0x220>)
 80058f6:	e055      	b.n	80059a4 <_printf_i+0x13c>
 80058f8:	6813      	ldr	r3, [r2, #0]
 80058fa:	1d19      	adds	r1, r3, #4
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6011      	str	r1, [r2, #0]
 8005900:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005904:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005908:	2301      	movs	r3, #1
 800590a:	e08c      	b.n	8005a26 <_printf_i+0x1be>
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6011      	str	r1, [r2, #0]
 8005910:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005914:	bf18      	it	ne
 8005916:	b21b      	sxthne	r3, r3
 8005918:	e7cf      	b.n	80058ba <_printf_i+0x52>
 800591a:	6813      	ldr	r3, [r2, #0]
 800591c:	6825      	ldr	r5, [r4, #0]
 800591e:	1d18      	adds	r0, r3, #4
 8005920:	6010      	str	r0, [r2, #0]
 8005922:	0628      	lsls	r0, r5, #24
 8005924:	d501      	bpl.n	800592a <_printf_i+0xc2>
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	e002      	b.n	8005930 <_printf_i+0xc8>
 800592a:	0668      	lsls	r0, r5, #25
 800592c:	d5fb      	bpl.n	8005926 <_printf_i+0xbe>
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	4854      	ldr	r0, [pc, #336]	; (8005a84 <_printf_i+0x21c>)
 8005932:	296f      	cmp	r1, #111	; 0x6f
 8005934:	bf14      	ite	ne
 8005936:	220a      	movne	r2, #10
 8005938:	2208      	moveq	r2, #8
 800593a:	2100      	movs	r1, #0
 800593c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005940:	6865      	ldr	r5, [r4, #4]
 8005942:	60a5      	str	r5, [r4, #8]
 8005944:	2d00      	cmp	r5, #0
 8005946:	f2c0 8095 	blt.w	8005a74 <_printf_i+0x20c>
 800594a:	6821      	ldr	r1, [r4, #0]
 800594c:	f021 0104 	bic.w	r1, r1, #4
 8005950:	6021      	str	r1, [r4, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d13d      	bne.n	80059d2 <_printf_i+0x16a>
 8005956:	2d00      	cmp	r5, #0
 8005958:	f040 808e 	bne.w	8005a78 <_printf_i+0x210>
 800595c:	4665      	mov	r5, ip
 800595e:	2a08      	cmp	r2, #8
 8005960:	d10b      	bne.n	800597a <_printf_i+0x112>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	07db      	lsls	r3, r3, #31
 8005966:	d508      	bpl.n	800597a <_printf_i+0x112>
 8005968:	6923      	ldr	r3, [r4, #16]
 800596a:	6862      	ldr	r2, [r4, #4]
 800596c:	429a      	cmp	r2, r3
 800596e:	bfde      	ittt	le
 8005970:	2330      	movle	r3, #48	; 0x30
 8005972:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005976:	f105 35ff 	addle.w	r5, r5, #4294967295
 800597a:	ebac 0305 	sub.w	r3, ip, r5
 800597e:	6123      	str	r3, [r4, #16]
 8005980:	f8cd 8000 	str.w	r8, [sp]
 8005984:	463b      	mov	r3, r7
 8005986:	aa03      	add	r2, sp, #12
 8005988:	4621      	mov	r1, r4
 800598a:	4630      	mov	r0, r6
 800598c:	f7ff fef6 	bl	800577c <_printf_common>
 8005990:	3001      	adds	r0, #1
 8005992:	d14d      	bne.n	8005a30 <_printf_i+0x1c8>
 8005994:	f04f 30ff 	mov.w	r0, #4294967295
 8005998:	b005      	add	sp, #20
 800599a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800599e:	4839      	ldr	r0, [pc, #228]	; (8005a84 <_printf_i+0x21c>)
 80059a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80059a4:	6813      	ldr	r3, [r2, #0]
 80059a6:	6821      	ldr	r1, [r4, #0]
 80059a8:	1d1d      	adds	r5, r3, #4
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6015      	str	r5, [r2, #0]
 80059ae:	060a      	lsls	r2, r1, #24
 80059b0:	d50b      	bpl.n	80059ca <_printf_i+0x162>
 80059b2:	07ca      	lsls	r2, r1, #31
 80059b4:	bf44      	itt	mi
 80059b6:	f041 0120 	orrmi.w	r1, r1, #32
 80059ba:	6021      	strmi	r1, [r4, #0]
 80059bc:	b91b      	cbnz	r3, 80059c6 <_printf_i+0x15e>
 80059be:	6822      	ldr	r2, [r4, #0]
 80059c0:	f022 0220 	bic.w	r2, r2, #32
 80059c4:	6022      	str	r2, [r4, #0]
 80059c6:	2210      	movs	r2, #16
 80059c8:	e7b7      	b.n	800593a <_printf_i+0xd2>
 80059ca:	064d      	lsls	r5, r1, #25
 80059cc:	bf48      	it	mi
 80059ce:	b29b      	uxthmi	r3, r3
 80059d0:	e7ef      	b.n	80059b2 <_printf_i+0x14a>
 80059d2:	4665      	mov	r5, ip
 80059d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80059d8:	fb02 3311 	mls	r3, r2, r1, r3
 80059dc:	5cc3      	ldrb	r3, [r0, r3]
 80059de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80059e2:	460b      	mov	r3, r1
 80059e4:	2900      	cmp	r1, #0
 80059e6:	d1f5      	bne.n	80059d4 <_printf_i+0x16c>
 80059e8:	e7b9      	b.n	800595e <_printf_i+0xf6>
 80059ea:	6813      	ldr	r3, [r2, #0]
 80059ec:	6825      	ldr	r5, [r4, #0]
 80059ee:	6961      	ldr	r1, [r4, #20]
 80059f0:	1d18      	adds	r0, r3, #4
 80059f2:	6010      	str	r0, [r2, #0]
 80059f4:	0628      	lsls	r0, r5, #24
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	d501      	bpl.n	80059fe <_printf_i+0x196>
 80059fa:	6019      	str	r1, [r3, #0]
 80059fc:	e002      	b.n	8005a04 <_printf_i+0x19c>
 80059fe:	066a      	lsls	r2, r5, #25
 8005a00:	d5fb      	bpl.n	80059fa <_printf_i+0x192>
 8005a02:	8019      	strh	r1, [r3, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	4665      	mov	r5, ip
 8005a0a:	e7b9      	b.n	8005980 <_printf_i+0x118>
 8005a0c:	6813      	ldr	r3, [r2, #0]
 8005a0e:	1d19      	adds	r1, r3, #4
 8005a10:	6011      	str	r1, [r2, #0]
 8005a12:	681d      	ldr	r5, [r3, #0]
 8005a14:	6862      	ldr	r2, [r4, #4]
 8005a16:	2100      	movs	r1, #0
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f7fa fbe9 	bl	80001f0 <memchr>
 8005a1e:	b108      	cbz	r0, 8005a24 <_printf_i+0x1bc>
 8005a20:	1b40      	subs	r0, r0, r5
 8005a22:	6060      	str	r0, [r4, #4]
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2e:	e7a7      	b.n	8005980 <_printf_i+0x118>
 8005a30:	6923      	ldr	r3, [r4, #16]
 8005a32:	462a      	mov	r2, r5
 8005a34:	4639      	mov	r1, r7
 8005a36:	4630      	mov	r0, r6
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d0aa      	beq.n	8005994 <_printf_i+0x12c>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	079b      	lsls	r3, r3, #30
 8005a42:	d413      	bmi.n	8005a6c <_printf_i+0x204>
 8005a44:	68e0      	ldr	r0, [r4, #12]
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	4298      	cmp	r0, r3
 8005a4a:	bfb8      	it	lt
 8005a4c:	4618      	movlt	r0, r3
 8005a4e:	e7a3      	b.n	8005998 <_printf_i+0x130>
 8005a50:	2301      	movs	r3, #1
 8005a52:	464a      	mov	r2, r9
 8005a54:	4639      	mov	r1, r7
 8005a56:	4630      	mov	r0, r6
 8005a58:	47c0      	blx	r8
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d09a      	beq.n	8005994 <_printf_i+0x12c>
 8005a5e:	3501      	adds	r5, #1
 8005a60:	68e3      	ldr	r3, [r4, #12]
 8005a62:	9a03      	ldr	r2, [sp, #12]
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	42ab      	cmp	r3, r5
 8005a68:	dcf2      	bgt.n	8005a50 <_printf_i+0x1e8>
 8005a6a:	e7eb      	b.n	8005a44 <_printf_i+0x1dc>
 8005a6c:	2500      	movs	r5, #0
 8005a6e:	f104 0919 	add.w	r9, r4, #25
 8005a72:	e7f5      	b.n	8005a60 <_printf_i+0x1f8>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1ac      	bne.n	80059d2 <_printf_i+0x16a>
 8005a78:	7803      	ldrb	r3, [r0, #0]
 8005a7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a82:	e76c      	b.n	800595e <_printf_i+0xf6>
 8005a84:	080096de 	.word	0x080096de
 8005a88:	080096ef 	.word	0x080096ef

08005a8c <_scanf_float>:
 8005a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a90:	469a      	mov	sl, r3
 8005a92:	688b      	ldr	r3, [r1, #8]
 8005a94:	4616      	mov	r6, r2
 8005a96:	1e5a      	subs	r2, r3, #1
 8005a98:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a9c:	b087      	sub	sp, #28
 8005a9e:	bf83      	ittte	hi
 8005aa0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005aa4:	189b      	addhi	r3, r3, r2
 8005aa6:	9301      	strhi	r3, [sp, #4]
 8005aa8:	2300      	movls	r3, #0
 8005aaa:	bf86      	itte	hi
 8005aac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ab0:	608b      	strhi	r3, [r1, #8]
 8005ab2:	9301      	strls	r3, [sp, #4]
 8005ab4:	680b      	ldr	r3, [r1, #0]
 8005ab6:	4688      	mov	r8, r1
 8005ab8:	f04f 0b00 	mov.w	fp, #0
 8005abc:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005ac0:	f848 3b1c 	str.w	r3, [r8], #28
 8005ac4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005ac8:	4607      	mov	r7, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	4645      	mov	r5, r8
 8005ace:	465a      	mov	r2, fp
 8005ad0:	46d9      	mov	r9, fp
 8005ad2:	f8cd b008 	str.w	fp, [sp, #8]
 8005ad6:	68a1      	ldr	r1, [r4, #8]
 8005ad8:	b181      	cbz	r1, 8005afc <_scanf_float+0x70>
 8005ada:	6833      	ldr	r3, [r6, #0]
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b49      	cmp	r3, #73	; 0x49
 8005ae0:	d071      	beq.n	8005bc6 <_scanf_float+0x13a>
 8005ae2:	d84d      	bhi.n	8005b80 <_scanf_float+0xf4>
 8005ae4:	2b39      	cmp	r3, #57	; 0x39
 8005ae6:	d840      	bhi.n	8005b6a <_scanf_float+0xde>
 8005ae8:	2b31      	cmp	r3, #49	; 0x31
 8005aea:	f080 8088 	bcs.w	8005bfe <_scanf_float+0x172>
 8005aee:	2b2d      	cmp	r3, #45	; 0x2d
 8005af0:	f000 8090 	beq.w	8005c14 <_scanf_float+0x188>
 8005af4:	d815      	bhi.n	8005b22 <_scanf_float+0x96>
 8005af6:	2b2b      	cmp	r3, #43	; 0x2b
 8005af8:	f000 808c 	beq.w	8005c14 <_scanf_float+0x188>
 8005afc:	f1b9 0f00 	cmp.w	r9, #0
 8005b00:	d003      	beq.n	8005b0a <_scanf_float+0x7e>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	3a01      	subs	r2, #1
 8005b0c:	2a01      	cmp	r2, #1
 8005b0e:	f200 80ea 	bhi.w	8005ce6 <_scanf_float+0x25a>
 8005b12:	4545      	cmp	r5, r8
 8005b14:	f200 80dc 	bhi.w	8005cd0 <_scanf_float+0x244>
 8005b18:	2601      	movs	r6, #1
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	b007      	add	sp, #28
 8005b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b22:	2b2e      	cmp	r3, #46	; 0x2e
 8005b24:	f000 809f 	beq.w	8005c66 <_scanf_float+0x1da>
 8005b28:	2b30      	cmp	r3, #48	; 0x30
 8005b2a:	d1e7      	bne.n	8005afc <_scanf_float+0x70>
 8005b2c:	6820      	ldr	r0, [r4, #0]
 8005b2e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005b32:	d064      	beq.n	8005bfe <_scanf_float+0x172>
 8005b34:	9b01      	ldr	r3, [sp, #4]
 8005b36:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005b3a:	6020      	str	r0, [r4, #0]
 8005b3c:	f109 0901 	add.w	r9, r9, #1
 8005b40:	b11b      	cbz	r3, 8005b4a <_scanf_float+0xbe>
 8005b42:	3b01      	subs	r3, #1
 8005b44:	3101      	adds	r1, #1
 8005b46:	9301      	str	r3, [sp, #4]
 8005b48:	60a1      	str	r1, [r4, #8]
 8005b4a:	68a3      	ldr	r3, [r4, #8]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	60a3      	str	r3, [r4, #8]
 8005b50:	6923      	ldr	r3, [r4, #16]
 8005b52:	3301      	adds	r3, #1
 8005b54:	6123      	str	r3, [r4, #16]
 8005b56:	6873      	ldr	r3, [r6, #4]
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	6073      	str	r3, [r6, #4]
 8005b5e:	f340 80ac 	ble.w	8005cba <_scanf_float+0x22e>
 8005b62:	6833      	ldr	r3, [r6, #0]
 8005b64:	3301      	adds	r3, #1
 8005b66:	6033      	str	r3, [r6, #0]
 8005b68:	e7b5      	b.n	8005ad6 <_scanf_float+0x4a>
 8005b6a:	2b45      	cmp	r3, #69	; 0x45
 8005b6c:	f000 8085 	beq.w	8005c7a <_scanf_float+0x1ee>
 8005b70:	2b46      	cmp	r3, #70	; 0x46
 8005b72:	d06a      	beq.n	8005c4a <_scanf_float+0x1be>
 8005b74:	2b41      	cmp	r3, #65	; 0x41
 8005b76:	d1c1      	bne.n	8005afc <_scanf_float+0x70>
 8005b78:	2a01      	cmp	r2, #1
 8005b7a:	d1bf      	bne.n	8005afc <_scanf_float+0x70>
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	e046      	b.n	8005c0e <_scanf_float+0x182>
 8005b80:	2b65      	cmp	r3, #101	; 0x65
 8005b82:	d07a      	beq.n	8005c7a <_scanf_float+0x1ee>
 8005b84:	d818      	bhi.n	8005bb8 <_scanf_float+0x12c>
 8005b86:	2b54      	cmp	r3, #84	; 0x54
 8005b88:	d066      	beq.n	8005c58 <_scanf_float+0x1cc>
 8005b8a:	d811      	bhi.n	8005bb0 <_scanf_float+0x124>
 8005b8c:	2b4e      	cmp	r3, #78	; 0x4e
 8005b8e:	d1b5      	bne.n	8005afc <_scanf_float+0x70>
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	d146      	bne.n	8005c22 <_scanf_float+0x196>
 8005b94:	f1b9 0f00 	cmp.w	r9, #0
 8005b98:	d145      	bne.n	8005c26 <_scanf_float+0x19a>
 8005b9a:	6821      	ldr	r1, [r4, #0]
 8005b9c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005ba0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005ba4:	d13f      	bne.n	8005c26 <_scanf_float+0x19a>
 8005ba6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005baa:	6021      	str	r1, [r4, #0]
 8005bac:	2201      	movs	r2, #1
 8005bae:	e02e      	b.n	8005c0e <_scanf_float+0x182>
 8005bb0:	2b59      	cmp	r3, #89	; 0x59
 8005bb2:	d01e      	beq.n	8005bf2 <_scanf_float+0x166>
 8005bb4:	2b61      	cmp	r3, #97	; 0x61
 8005bb6:	e7de      	b.n	8005b76 <_scanf_float+0xea>
 8005bb8:	2b6e      	cmp	r3, #110	; 0x6e
 8005bba:	d0e9      	beq.n	8005b90 <_scanf_float+0x104>
 8005bbc:	d815      	bhi.n	8005bea <_scanf_float+0x15e>
 8005bbe:	2b66      	cmp	r3, #102	; 0x66
 8005bc0:	d043      	beq.n	8005c4a <_scanf_float+0x1be>
 8005bc2:	2b69      	cmp	r3, #105	; 0x69
 8005bc4:	d19a      	bne.n	8005afc <_scanf_float+0x70>
 8005bc6:	f1bb 0f00 	cmp.w	fp, #0
 8005bca:	d138      	bne.n	8005c3e <_scanf_float+0x1b2>
 8005bcc:	f1b9 0f00 	cmp.w	r9, #0
 8005bd0:	d197      	bne.n	8005b02 <_scanf_float+0x76>
 8005bd2:	6821      	ldr	r1, [r4, #0]
 8005bd4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005bd8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005bdc:	d195      	bne.n	8005b0a <_scanf_float+0x7e>
 8005bde:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005be2:	6021      	str	r1, [r4, #0]
 8005be4:	f04f 0b01 	mov.w	fp, #1
 8005be8:	e011      	b.n	8005c0e <_scanf_float+0x182>
 8005bea:	2b74      	cmp	r3, #116	; 0x74
 8005bec:	d034      	beq.n	8005c58 <_scanf_float+0x1cc>
 8005bee:	2b79      	cmp	r3, #121	; 0x79
 8005bf0:	d184      	bne.n	8005afc <_scanf_float+0x70>
 8005bf2:	f1bb 0f07 	cmp.w	fp, #7
 8005bf6:	d181      	bne.n	8005afc <_scanf_float+0x70>
 8005bf8:	f04f 0b08 	mov.w	fp, #8
 8005bfc:	e007      	b.n	8005c0e <_scanf_float+0x182>
 8005bfe:	eb12 0f0b 	cmn.w	r2, fp
 8005c02:	f47f af7b 	bne.w	8005afc <_scanf_float+0x70>
 8005c06:	6821      	ldr	r1, [r4, #0]
 8005c08:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005c0c:	6021      	str	r1, [r4, #0]
 8005c0e:	702b      	strb	r3, [r5, #0]
 8005c10:	3501      	adds	r5, #1
 8005c12:	e79a      	b.n	8005b4a <_scanf_float+0xbe>
 8005c14:	6821      	ldr	r1, [r4, #0]
 8005c16:	0608      	lsls	r0, r1, #24
 8005c18:	f57f af70 	bpl.w	8005afc <_scanf_float+0x70>
 8005c1c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c20:	e7f4      	b.n	8005c0c <_scanf_float+0x180>
 8005c22:	2a02      	cmp	r2, #2
 8005c24:	d047      	beq.n	8005cb6 <_scanf_float+0x22a>
 8005c26:	f1bb 0f01 	cmp.w	fp, #1
 8005c2a:	d003      	beq.n	8005c34 <_scanf_float+0x1a8>
 8005c2c:	f1bb 0f04 	cmp.w	fp, #4
 8005c30:	f47f af64 	bne.w	8005afc <_scanf_float+0x70>
 8005c34:	f10b 0b01 	add.w	fp, fp, #1
 8005c38:	fa5f fb8b 	uxtb.w	fp, fp
 8005c3c:	e7e7      	b.n	8005c0e <_scanf_float+0x182>
 8005c3e:	f1bb 0f03 	cmp.w	fp, #3
 8005c42:	d0f7      	beq.n	8005c34 <_scanf_float+0x1a8>
 8005c44:	f1bb 0f05 	cmp.w	fp, #5
 8005c48:	e7f2      	b.n	8005c30 <_scanf_float+0x1a4>
 8005c4a:	f1bb 0f02 	cmp.w	fp, #2
 8005c4e:	f47f af55 	bne.w	8005afc <_scanf_float+0x70>
 8005c52:	f04f 0b03 	mov.w	fp, #3
 8005c56:	e7da      	b.n	8005c0e <_scanf_float+0x182>
 8005c58:	f1bb 0f06 	cmp.w	fp, #6
 8005c5c:	f47f af4e 	bne.w	8005afc <_scanf_float+0x70>
 8005c60:	f04f 0b07 	mov.w	fp, #7
 8005c64:	e7d3      	b.n	8005c0e <_scanf_float+0x182>
 8005c66:	6821      	ldr	r1, [r4, #0]
 8005c68:	0588      	lsls	r0, r1, #22
 8005c6a:	f57f af47 	bpl.w	8005afc <_scanf_float+0x70>
 8005c6e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005c72:	6021      	str	r1, [r4, #0]
 8005c74:	f8cd 9008 	str.w	r9, [sp, #8]
 8005c78:	e7c9      	b.n	8005c0e <_scanf_float+0x182>
 8005c7a:	6821      	ldr	r1, [r4, #0]
 8005c7c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005c80:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005c84:	d006      	beq.n	8005c94 <_scanf_float+0x208>
 8005c86:	0548      	lsls	r0, r1, #21
 8005c88:	f57f af38 	bpl.w	8005afc <_scanf_float+0x70>
 8005c8c:	f1b9 0f00 	cmp.w	r9, #0
 8005c90:	f43f af3b 	beq.w	8005b0a <_scanf_float+0x7e>
 8005c94:	0588      	lsls	r0, r1, #22
 8005c96:	bf58      	it	pl
 8005c98:	9802      	ldrpl	r0, [sp, #8]
 8005c9a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005c9e:	bf58      	it	pl
 8005ca0:	eba9 0000 	subpl.w	r0, r9, r0
 8005ca4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005ca8:	bf58      	it	pl
 8005caa:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005cae:	6021      	str	r1, [r4, #0]
 8005cb0:	f04f 0900 	mov.w	r9, #0
 8005cb4:	e7ab      	b.n	8005c0e <_scanf_float+0x182>
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	e7a9      	b.n	8005c0e <_scanf_float+0x182>
 8005cba:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005cbe:	9205      	str	r2, [sp, #20]
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4638      	mov	r0, r7
 8005cc4:	4798      	blx	r3
 8005cc6:	9a05      	ldr	r2, [sp, #20]
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	f43f af04 	beq.w	8005ad6 <_scanf_float+0x4a>
 8005cce:	e715      	b.n	8005afc <_scanf_float+0x70>
 8005cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005cd8:	4632      	mov	r2, r6
 8005cda:	4638      	mov	r0, r7
 8005cdc:	4798      	blx	r3
 8005cde:	6923      	ldr	r3, [r4, #16]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	6123      	str	r3, [r4, #16]
 8005ce4:	e715      	b.n	8005b12 <_scanf_float+0x86>
 8005ce6:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d80a      	bhi.n	8005d04 <_scanf_float+0x278>
 8005cee:	f1bb 0f02 	cmp.w	fp, #2
 8005cf2:	d968      	bls.n	8005dc6 <_scanf_float+0x33a>
 8005cf4:	f1ab 0b03 	sub.w	fp, fp, #3
 8005cf8:	fa5f fb8b 	uxtb.w	fp, fp
 8005cfc:	eba5 0b0b 	sub.w	fp, r5, fp
 8005d00:	455d      	cmp	r5, fp
 8005d02:	d14b      	bne.n	8005d9c <_scanf_float+0x310>
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	05da      	lsls	r2, r3, #23
 8005d08:	d51f      	bpl.n	8005d4a <_scanf_float+0x2be>
 8005d0a:	055b      	lsls	r3, r3, #21
 8005d0c:	d468      	bmi.n	8005de0 <_scanf_float+0x354>
 8005d0e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	2965      	cmp	r1, #101	; 0x65
 8005d16:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d1a:	f105 3bff 	add.w	fp, r5, #4294967295
 8005d1e:	6123      	str	r3, [r4, #16]
 8005d20:	d00d      	beq.n	8005d3e <_scanf_float+0x2b2>
 8005d22:	2945      	cmp	r1, #69	; 0x45
 8005d24:	d00b      	beq.n	8005d3e <_scanf_float+0x2b2>
 8005d26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d2a:	4632      	mov	r2, r6
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	4798      	blx	r3
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	f1a5 0b02 	sub.w	fp, r5, #2
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d42:	4632      	mov	r2, r6
 8005d44:	4638      	mov	r0, r7
 8005d46:	4798      	blx	r3
 8005d48:	465d      	mov	r5, fp
 8005d4a:	6826      	ldr	r6, [r4, #0]
 8005d4c:	f016 0610 	ands.w	r6, r6, #16
 8005d50:	d17a      	bne.n	8005e48 <_scanf_float+0x3bc>
 8005d52:	702e      	strb	r6, [r5, #0]
 8005d54:	6823      	ldr	r3, [r4, #0]
 8005d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d5e:	d142      	bne.n	8005de6 <_scanf_float+0x35a>
 8005d60:	9b02      	ldr	r3, [sp, #8]
 8005d62:	eba9 0303 	sub.w	r3, r9, r3
 8005d66:	425a      	negs	r2, r3
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d149      	bne.n	8005e00 <_scanf_float+0x374>
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	4641      	mov	r1, r8
 8005d70:	4638      	mov	r0, r7
 8005d72:	f000 febd 	bl	8006af0 <_strtod_r>
 8005d76:	6825      	ldr	r5, [r4, #0]
 8005d78:	f8da 3000 	ldr.w	r3, [sl]
 8005d7c:	f015 0f02 	tst.w	r5, #2
 8005d80:	f103 0204 	add.w	r2, r3, #4
 8005d84:	ec59 8b10 	vmov	r8, r9, d0
 8005d88:	f8ca 2000 	str.w	r2, [sl]
 8005d8c:	d043      	beq.n	8005e16 <_scanf_float+0x38a>
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	e9c3 8900 	strd	r8, r9, [r3]
 8005d94:	68e3      	ldr	r3, [r4, #12]
 8005d96:	3301      	adds	r3, #1
 8005d98:	60e3      	str	r3, [r4, #12]
 8005d9a:	e6be      	b.n	8005b1a <_scanf_float+0x8e>
 8005d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005da0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005da4:	4632      	mov	r2, r6
 8005da6:	4638      	mov	r0, r7
 8005da8:	4798      	blx	r3
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	e7a6      	b.n	8005d00 <_scanf_float+0x274>
 8005db2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005db6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005dba:	4632      	mov	r2, r6
 8005dbc:	4638      	mov	r0, r7
 8005dbe:	4798      	blx	r3
 8005dc0:	6923      	ldr	r3, [r4, #16]
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	6123      	str	r3, [r4, #16]
 8005dc6:	4545      	cmp	r5, r8
 8005dc8:	d8f3      	bhi.n	8005db2 <_scanf_float+0x326>
 8005dca:	e6a5      	b.n	8005b18 <_scanf_float+0x8c>
 8005dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005dd4:	4632      	mov	r2, r6
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	4798      	blx	r3
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	6123      	str	r3, [r4, #16]
 8005de0:	4545      	cmp	r5, r8
 8005de2:	d8f3      	bhi.n	8005dcc <_scanf_float+0x340>
 8005de4:	e698      	b.n	8005b18 <_scanf_float+0x8c>
 8005de6:	9b03      	ldr	r3, [sp, #12]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0bf      	beq.n	8005d6c <_scanf_float+0x2e0>
 8005dec:	9904      	ldr	r1, [sp, #16]
 8005dee:	230a      	movs	r3, #10
 8005df0:	4632      	mov	r2, r6
 8005df2:	3101      	adds	r1, #1
 8005df4:	4638      	mov	r0, r7
 8005df6:	f000 ff47 	bl	8006c88 <_strtol_r>
 8005dfa:	9b03      	ldr	r3, [sp, #12]
 8005dfc:	9d04      	ldr	r5, [sp, #16]
 8005dfe:	1ac2      	subs	r2, r0, r3
 8005e00:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e04:	429d      	cmp	r5, r3
 8005e06:	bf28      	it	cs
 8005e08:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005e0c:	490f      	ldr	r1, [pc, #60]	; (8005e4c <_scanf_float+0x3c0>)
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f000 f83c 	bl	8005e8c <siprintf>
 8005e14:	e7aa      	b.n	8005d6c <_scanf_float+0x2e0>
 8005e16:	f015 0504 	ands.w	r5, r5, #4
 8005e1a:	d1b8      	bne.n	8005d8e <_scanf_float+0x302>
 8005e1c:	681f      	ldr	r7, [r3, #0]
 8005e1e:	ee10 2a10 	vmov	r2, s0
 8005e22:	464b      	mov	r3, r9
 8005e24:	ee10 0a10 	vmov	r0, s0
 8005e28:	4649      	mov	r1, r9
 8005e2a:	f7fa fe87 	bl	8000b3c <__aeabi_dcmpun>
 8005e2e:	b128      	cbz	r0, 8005e3c <_scanf_float+0x3b0>
 8005e30:	4628      	mov	r0, r5
 8005e32:	f000 f825 	bl	8005e80 <nanf>
 8005e36:	ed87 0a00 	vstr	s0, [r7]
 8005e3a:	e7ab      	b.n	8005d94 <_scanf_float+0x308>
 8005e3c:	4640      	mov	r0, r8
 8005e3e:	4649      	mov	r1, r9
 8005e40:	f7fa feda 	bl	8000bf8 <__aeabi_d2f>
 8005e44:	6038      	str	r0, [r7, #0]
 8005e46:	e7a5      	b.n	8005d94 <_scanf_float+0x308>
 8005e48:	2600      	movs	r6, #0
 8005e4a:	e666      	b.n	8005b1a <_scanf_float+0x8e>
 8005e4c:	08009700 	.word	0x08009700

08005e50 <iprintf>:
 8005e50:	b40f      	push	{r0, r1, r2, r3}
 8005e52:	4b0a      	ldr	r3, [pc, #40]	; (8005e7c <iprintf+0x2c>)
 8005e54:	b513      	push	{r0, r1, r4, lr}
 8005e56:	681c      	ldr	r4, [r3, #0]
 8005e58:	b124      	cbz	r4, 8005e64 <iprintf+0x14>
 8005e5a:	69a3      	ldr	r3, [r4, #24]
 8005e5c:	b913      	cbnz	r3, 8005e64 <iprintf+0x14>
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f001 fdaa 	bl	80079b8 <__sinit>
 8005e64:	ab05      	add	r3, sp, #20
 8005e66:	9a04      	ldr	r2, [sp, #16]
 8005e68:	68a1      	ldr	r1, [r4, #8]
 8005e6a:	9301      	str	r3, [sp, #4]
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f002 ffb3 	bl	8008dd8 <_vfiprintf_r>
 8005e72:	b002      	add	sp, #8
 8005e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e78:	b004      	add	sp, #16
 8005e7a:	4770      	bx	lr
 8005e7c:	20000010 	.word	0x20000010

08005e80 <nanf>:
 8005e80:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005e88 <nanf+0x8>
 8005e84:	4770      	bx	lr
 8005e86:	bf00      	nop
 8005e88:	7fc00000 	.word	0x7fc00000

08005e8c <siprintf>:
 8005e8c:	b40e      	push	{r1, r2, r3}
 8005e8e:	b500      	push	{lr}
 8005e90:	b09c      	sub	sp, #112	; 0x70
 8005e92:	ab1d      	add	r3, sp, #116	; 0x74
 8005e94:	9002      	str	r0, [sp, #8]
 8005e96:	9006      	str	r0, [sp, #24]
 8005e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e9c:	4809      	ldr	r0, [pc, #36]	; (8005ec4 <siprintf+0x38>)
 8005e9e:	9107      	str	r1, [sp, #28]
 8005ea0:	9104      	str	r1, [sp, #16]
 8005ea2:	4909      	ldr	r1, [pc, #36]	; (8005ec8 <siprintf+0x3c>)
 8005ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ea8:	9105      	str	r1, [sp, #20]
 8005eaa:	6800      	ldr	r0, [r0, #0]
 8005eac:	9301      	str	r3, [sp, #4]
 8005eae:	a902      	add	r1, sp, #8
 8005eb0:	f002 fe70 	bl	8008b94 <_svfiprintf_r>
 8005eb4:	9b02      	ldr	r3, [sp, #8]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	b01c      	add	sp, #112	; 0x70
 8005ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ec0:	b003      	add	sp, #12
 8005ec2:	4770      	bx	lr
 8005ec4:	20000010 	.word	0x20000010
 8005ec8:	ffff0208 	.word	0xffff0208

08005ecc <sulp>:
 8005ecc:	b570      	push	{r4, r5, r6, lr}
 8005ece:	4604      	mov	r4, r0
 8005ed0:	460d      	mov	r5, r1
 8005ed2:	ec45 4b10 	vmov	d0, r4, r5
 8005ed6:	4616      	mov	r6, r2
 8005ed8:	f002 fc18 	bl	800870c <__ulp>
 8005edc:	ec51 0b10 	vmov	r0, r1, d0
 8005ee0:	b17e      	cbz	r6, 8005f02 <sulp+0x36>
 8005ee2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005ee6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	dd09      	ble.n	8005f02 <sulp+0x36>
 8005eee:	051b      	lsls	r3, r3, #20
 8005ef0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005ef4:	2400      	movs	r4, #0
 8005ef6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	f7fa fb83 	bl	8000608 <__aeabi_dmul>
 8005f02:	bd70      	pop	{r4, r5, r6, pc}
 8005f04:	0000      	movs	r0, r0
	...

08005f08 <_strtod_l>:
 8005f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f0c:	461f      	mov	r7, r3
 8005f0e:	b0a1      	sub	sp, #132	; 0x84
 8005f10:	2300      	movs	r3, #0
 8005f12:	4681      	mov	r9, r0
 8005f14:	4638      	mov	r0, r7
 8005f16:	460e      	mov	r6, r1
 8005f18:	9217      	str	r2, [sp, #92]	; 0x5c
 8005f1a:	931c      	str	r3, [sp, #112]	; 0x70
 8005f1c:	f002 f8ff 	bl	800811e <__localeconv_l>
 8005f20:	4680      	mov	r8, r0
 8005f22:	6800      	ldr	r0, [r0, #0]
 8005f24:	f7fa f95c 	bl	80001e0 <strlen>
 8005f28:	f04f 0a00 	mov.w	sl, #0
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	f04f 0b00 	mov.w	fp, #0
 8005f32:	961b      	str	r6, [sp, #108]	; 0x6c
 8005f34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f36:	781a      	ldrb	r2, [r3, #0]
 8005f38:	2a0d      	cmp	r2, #13
 8005f3a:	d832      	bhi.n	8005fa2 <_strtod_l+0x9a>
 8005f3c:	2a09      	cmp	r2, #9
 8005f3e:	d236      	bcs.n	8005fae <_strtod_l+0xa6>
 8005f40:	2a00      	cmp	r2, #0
 8005f42:	d03e      	beq.n	8005fc2 <_strtod_l+0xba>
 8005f44:	2300      	movs	r3, #0
 8005f46:	930d      	str	r3, [sp, #52]	; 0x34
 8005f48:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005f4a:	782b      	ldrb	r3, [r5, #0]
 8005f4c:	2b30      	cmp	r3, #48	; 0x30
 8005f4e:	f040 80ac 	bne.w	80060aa <_strtod_l+0x1a2>
 8005f52:	786b      	ldrb	r3, [r5, #1]
 8005f54:	2b58      	cmp	r3, #88	; 0x58
 8005f56:	d001      	beq.n	8005f5c <_strtod_l+0x54>
 8005f58:	2b78      	cmp	r3, #120	; 0x78
 8005f5a:	d167      	bne.n	800602c <_strtod_l+0x124>
 8005f5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f5e:	9301      	str	r3, [sp, #4]
 8005f60:	ab1c      	add	r3, sp, #112	; 0x70
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	9702      	str	r7, [sp, #8]
 8005f66:	ab1d      	add	r3, sp, #116	; 0x74
 8005f68:	4a88      	ldr	r2, [pc, #544]	; (800618c <_strtod_l+0x284>)
 8005f6a:	a91b      	add	r1, sp, #108	; 0x6c
 8005f6c:	4648      	mov	r0, r9
 8005f6e:	f001 fdfc 	bl	8007b6a <__gethex>
 8005f72:	f010 0407 	ands.w	r4, r0, #7
 8005f76:	4606      	mov	r6, r0
 8005f78:	d005      	beq.n	8005f86 <_strtod_l+0x7e>
 8005f7a:	2c06      	cmp	r4, #6
 8005f7c:	d12b      	bne.n	8005fd6 <_strtod_l+0xce>
 8005f7e:	3501      	adds	r5, #1
 8005f80:	2300      	movs	r3, #0
 8005f82:	951b      	str	r5, [sp, #108]	; 0x6c
 8005f84:	930d      	str	r3, [sp, #52]	; 0x34
 8005f86:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f040 859a 	bne.w	8006ac2 <_strtod_l+0xbba>
 8005f8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f90:	b1e3      	cbz	r3, 8005fcc <_strtod_l+0xc4>
 8005f92:	4652      	mov	r2, sl
 8005f94:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f98:	ec43 2b10 	vmov	d0, r2, r3
 8005f9c:	b021      	add	sp, #132	; 0x84
 8005f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fa2:	2a2b      	cmp	r2, #43	; 0x2b
 8005fa4:	d015      	beq.n	8005fd2 <_strtod_l+0xca>
 8005fa6:	2a2d      	cmp	r2, #45	; 0x2d
 8005fa8:	d004      	beq.n	8005fb4 <_strtod_l+0xac>
 8005faa:	2a20      	cmp	r2, #32
 8005fac:	d1ca      	bne.n	8005f44 <_strtod_l+0x3c>
 8005fae:	3301      	adds	r3, #1
 8005fb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8005fb2:	e7bf      	b.n	8005f34 <_strtod_l+0x2c>
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	920d      	str	r2, [sp, #52]	; 0x34
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	921b      	str	r2, [sp, #108]	; 0x6c
 8005fbc:	785b      	ldrb	r3, [r3, #1]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1c2      	bne.n	8005f48 <_strtod_l+0x40>
 8005fc2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fc4:	961b      	str	r6, [sp, #108]	; 0x6c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f040 8579 	bne.w	8006abe <_strtod_l+0xbb6>
 8005fcc:	4652      	mov	r2, sl
 8005fce:	465b      	mov	r3, fp
 8005fd0:	e7e2      	b.n	8005f98 <_strtod_l+0x90>
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	e7ef      	b.n	8005fb6 <_strtod_l+0xae>
 8005fd6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005fd8:	b13a      	cbz	r2, 8005fea <_strtod_l+0xe2>
 8005fda:	2135      	movs	r1, #53	; 0x35
 8005fdc:	a81e      	add	r0, sp, #120	; 0x78
 8005fde:	f002 fc8d 	bl	80088fc <__copybits>
 8005fe2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005fe4:	4648      	mov	r0, r9
 8005fe6:	f002 f8f9 	bl	80081dc <_Bfree>
 8005fea:	3c01      	subs	r4, #1
 8005fec:	2c04      	cmp	r4, #4
 8005fee:	d806      	bhi.n	8005ffe <_strtod_l+0xf6>
 8005ff0:	e8df f004 	tbb	[pc, r4]
 8005ff4:	1714030a 	.word	0x1714030a
 8005ff8:	0a          	.byte	0x0a
 8005ff9:	00          	.byte	0x00
 8005ffa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8005ffe:	0730      	lsls	r0, r6, #28
 8006000:	d5c1      	bpl.n	8005f86 <_strtod_l+0x7e>
 8006002:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006006:	e7be      	b.n	8005f86 <_strtod_l+0x7e>
 8006008:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800600c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800600e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006012:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006016:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800601a:	e7f0      	b.n	8005ffe <_strtod_l+0xf6>
 800601c:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006190 <_strtod_l+0x288>
 8006020:	e7ed      	b.n	8005ffe <_strtod_l+0xf6>
 8006022:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006026:	f04f 3aff 	mov.w	sl, #4294967295
 800602a:	e7e8      	b.n	8005ffe <_strtod_l+0xf6>
 800602c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800602e:	1c5a      	adds	r2, r3, #1
 8006030:	921b      	str	r2, [sp, #108]	; 0x6c
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b30      	cmp	r3, #48	; 0x30
 8006036:	d0f9      	beq.n	800602c <_strtod_l+0x124>
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0a4      	beq.n	8005f86 <_strtod_l+0x7e>
 800603c:	2301      	movs	r3, #1
 800603e:	2500      	movs	r5, #0
 8006040:	9306      	str	r3, [sp, #24]
 8006042:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006044:	9308      	str	r3, [sp, #32]
 8006046:	9507      	str	r5, [sp, #28]
 8006048:	9505      	str	r5, [sp, #20]
 800604a:	220a      	movs	r2, #10
 800604c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800604e:	7807      	ldrb	r7, [r0, #0]
 8006050:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006054:	b2d9      	uxtb	r1, r3
 8006056:	2909      	cmp	r1, #9
 8006058:	d929      	bls.n	80060ae <_strtod_l+0x1a6>
 800605a:	4622      	mov	r2, r4
 800605c:	f8d8 1000 	ldr.w	r1, [r8]
 8006060:	f003 f823 	bl	80090aa <strncmp>
 8006064:	2800      	cmp	r0, #0
 8006066:	d031      	beq.n	80060cc <_strtod_l+0x1c4>
 8006068:	2000      	movs	r0, #0
 800606a:	9c05      	ldr	r4, [sp, #20]
 800606c:	9004      	str	r0, [sp, #16]
 800606e:	463b      	mov	r3, r7
 8006070:	4602      	mov	r2, r0
 8006072:	2b65      	cmp	r3, #101	; 0x65
 8006074:	d001      	beq.n	800607a <_strtod_l+0x172>
 8006076:	2b45      	cmp	r3, #69	; 0x45
 8006078:	d114      	bne.n	80060a4 <_strtod_l+0x19c>
 800607a:	b924      	cbnz	r4, 8006086 <_strtod_l+0x17e>
 800607c:	b910      	cbnz	r0, 8006084 <_strtod_l+0x17c>
 800607e:	9b06      	ldr	r3, [sp, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d09e      	beq.n	8005fc2 <_strtod_l+0xba>
 8006084:	2400      	movs	r4, #0
 8006086:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006088:	1c73      	adds	r3, r6, #1
 800608a:	931b      	str	r3, [sp, #108]	; 0x6c
 800608c:	7873      	ldrb	r3, [r6, #1]
 800608e:	2b2b      	cmp	r3, #43	; 0x2b
 8006090:	d078      	beq.n	8006184 <_strtod_l+0x27c>
 8006092:	2b2d      	cmp	r3, #45	; 0x2d
 8006094:	d070      	beq.n	8006178 <_strtod_l+0x270>
 8006096:	f04f 0c00 	mov.w	ip, #0
 800609a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800609e:	2f09      	cmp	r7, #9
 80060a0:	d97c      	bls.n	800619c <_strtod_l+0x294>
 80060a2:	961b      	str	r6, [sp, #108]	; 0x6c
 80060a4:	f04f 0e00 	mov.w	lr, #0
 80060a8:	e09a      	b.n	80061e0 <_strtod_l+0x2d8>
 80060aa:	2300      	movs	r3, #0
 80060ac:	e7c7      	b.n	800603e <_strtod_l+0x136>
 80060ae:	9905      	ldr	r1, [sp, #20]
 80060b0:	2908      	cmp	r1, #8
 80060b2:	bfdd      	ittte	le
 80060b4:	9907      	ldrle	r1, [sp, #28]
 80060b6:	fb02 3301 	mlale	r3, r2, r1, r3
 80060ba:	9307      	strle	r3, [sp, #28]
 80060bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 80060c0:	9b05      	ldr	r3, [sp, #20]
 80060c2:	3001      	adds	r0, #1
 80060c4:	3301      	adds	r3, #1
 80060c6:	9305      	str	r3, [sp, #20]
 80060c8:	901b      	str	r0, [sp, #108]	; 0x6c
 80060ca:	e7bf      	b.n	800604c <_strtod_l+0x144>
 80060cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060ce:	191a      	adds	r2, r3, r4
 80060d0:	921b      	str	r2, [sp, #108]	; 0x6c
 80060d2:	9a05      	ldr	r2, [sp, #20]
 80060d4:	5d1b      	ldrb	r3, [r3, r4]
 80060d6:	2a00      	cmp	r2, #0
 80060d8:	d037      	beq.n	800614a <_strtod_l+0x242>
 80060da:	9c05      	ldr	r4, [sp, #20]
 80060dc:	4602      	mov	r2, r0
 80060de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80060e2:	2909      	cmp	r1, #9
 80060e4:	d913      	bls.n	800610e <_strtod_l+0x206>
 80060e6:	2101      	movs	r1, #1
 80060e8:	9104      	str	r1, [sp, #16]
 80060ea:	e7c2      	b.n	8006072 <_strtod_l+0x16a>
 80060ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80060f2:	785b      	ldrb	r3, [r3, #1]
 80060f4:	3001      	adds	r0, #1
 80060f6:	2b30      	cmp	r3, #48	; 0x30
 80060f8:	d0f8      	beq.n	80060ec <_strtod_l+0x1e4>
 80060fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80060fe:	2a08      	cmp	r2, #8
 8006100:	f200 84e4 	bhi.w	8006acc <_strtod_l+0xbc4>
 8006104:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006106:	9208      	str	r2, [sp, #32]
 8006108:	4602      	mov	r2, r0
 800610a:	2000      	movs	r0, #0
 800610c:	4604      	mov	r4, r0
 800610e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006112:	f100 0101 	add.w	r1, r0, #1
 8006116:	d012      	beq.n	800613e <_strtod_l+0x236>
 8006118:	440a      	add	r2, r1
 800611a:	eb00 0c04 	add.w	ip, r0, r4
 800611e:	4621      	mov	r1, r4
 8006120:	270a      	movs	r7, #10
 8006122:	458c      	cmp	ip, r1
 8006124:	d113      	bne.n	800614e <_strtod_l+0x246>
 8006126:	1821      	adds	r1, r4, r0
 8006128:	2908      	cmp	r1, #8
 800612a:	f104 0401 	add.w	r4, r4, #1
 800612e:	4404      	add	r4, r0
 8006130:	dc19      	bgt.n	8006166 <_strtod_l+0x25e>
 8006132:	9b07      	ldr	r3, [sp, #28]
 8006134:	210a      	movs	r1, #10
 8006136:	fb01 e303 	mla	r3, r1, r3, lr
 800613a:	9307      	str	r3, [sp, #28]
 800613c:	2100      	movs	r1, #0
 800613e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006140:	1c58      	adds	r0, r3, #1
 8006142:	901b      	str	r0, [sp, #108]	; 0x6c
 8006144:	785b      	ldrb	r3, [r3, #1]
 8006146:	4608      	mov	r0, r1
 8006148:	e7c9      	b.n	80060de <_strtod_l+0x1d6>
 800614a:	9805      	ldr	r0, [sp, #20]
 800614c:	e7d3      	b.n	80060f6 <_strtod_l+0x1ee>
 800614e:	2908      	cmp	r1, #8
 8006150:	f101 0101 	add.w	r1, r1, #1
 8006154:	dc03      	bgt.n	800615e <_strtod_l+0x256>
 8006156:	9b07      	ldr	r3, [sp, #28]
 8006158:	437b      	muls	r3, r7
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	e7e1      	b.n	8006122 <_strtod_l+0x21a>
 800615e:	2910      	cmp	r1, #16
 8006160:	bfd8      	it	le
 8006162:	437d      	mulle	r5, r7
 8006164:	e7dd      	b.n	8006122 <_strtod_l+0x21a>
 8006166:	2c10      	cmp	r4, #16
 8006168:	bfdc      	itt	le
 800616a:	210a      	movle	r1, #10
 800616c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006170:	e7e4      	b.n	800613c <_strtod_l+0x234>
 8006172:	2301      	movs	r3, #1
 8006174:	9304      	str	r3, [sp, #16]
 8006176:	e781      	b.n	800607c <_strtod_l+0x174>
 8006178:	f04f 0c01 	mov.w	ip, #1
 800617c:	1cb3      	adds	r3, r6, #2
 800617e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006180:	78b3      	ldrb	r3, [r6, #2]
 8006182:	e78a      	b.n	800609a <_strtod_l+0x192>
 8006184:	f04f 0c00 	mov.w	ip, #0
 8006188:	e7f8      	b.n	800617c <_strtod_l+0x274>
 800618a:	bf00      	nop
 800618c:	08009708 	.word	0x08009708
 8006190:	7ff00000 	.word	0x7ff00000
 8006194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006196:	1c5f      	adds	r7, r3, #1
 8006198:	971b      	str	r7, [sp, #108]	; 0x6c
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	2b30      	cmp	r3, #48	; 0x30
 800619e:	d0f9      	beq.n	8006194 <_strtod_l+0x28c>
 80061a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80061a4:	2f08      	cmp	r7, #8
 80061a6:	f63f af7d 	bhi.w	80060a4 <_strtod_l+0x19c>
 80061aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80061ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061b0:	930a      	str	r3, [sp, #40]	; 0x28
 80061b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061b4:	1c5f      	adds	r7, r3, #1
 80061b6:	971b      	str	r7, [sp, #108]	; 0x6c
 80061b8:	785b      	ldrb	r3, [r3, #1]
 80061ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80061be:	f1b8 0f09 	cmp.w	r8, #9
 80061c2:	d937      	bls.n	8006234 <_strtod_l+0x32c>
 80061c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80061c6:	1a7f      	subs	r7, r7, r1
 80061c8:	2f08      	cmp	r7, #8
 80061ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80061ce:	dc37      	bgt.n	8006240 <_strtod_l+0x338>
 80061d0:	45be      	cmp	lr, r7
 80061d2:	bfa8      	it	ge
 80061d4:	46be      	movge	lr, r7
 80061d6:	f1bc 0f00 	cmp.w	ip, #0
 80061da:	d001      	beq.n	80061e0 <_strtod_l+0x2d8>
 80061dc:	f1ce 0e00 	rsb	lr, lr, #0
 80061e0:	2c00      	cmp	r4, #0
 80061e2:	d151      	bne.n	8006288 <_strtod_l+0x380>
 80061e4:	2800      	cmp	r0, #0
 80061e6:	f47f aece 	bne.w	8005f86 <_strtod_l+0x7e>
 80061ea:	9a06      	ldr	r2, [sp, #24]
 80061ec:	2a00      	cmp	r2, #0
 80061ee:	f47f aeca 	bne.w	8005f86 <_strtod_l+0x7e>
 80061f2:	9a04      	ldr	r2, [sp, #16]
 80061f4:	2a00      	cmp	r2, #0
 80061f6:	f47f aee4 	bne.w	8005fc2 <_strtod_l+0xba>
 80061fa:	2b4e      	cmp	r3, #78	; 0x4e
 80061fc:	d027      	beq.n	800624e <_strtod_l+0x346>
 80061fe:	dc21      	bgt.n	8006244 <_strtod_l+0x33c>
 8006200:	2b49      	cmp	r3, #73	; 0x49
 8006202:	f47f aede 	bne.w	8005fc2 <_strtod_l+0xba>
 8006206:	49a0      	ldr	r1, [pc, #640]	; (8006488 <_strtod_l+0x580>)
 8006208:	a81b      	add	r0, sp, #108	; 0x6c
 800620a:	f001 fee1 	bl	8007fd0 <__match>
 800620e:	2800      	cmp	r0, #0
 8006210:	f43f aed7 	beq.w	8005fc2 <_strtod_l+0xba>
 8006214:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006216:	499d      	ldr	r1, [pc, #628]	; (800648c <_strtod_l+0x584>)
 8006218:	3b01      	subs	r3, #1
 800621a:	a81b      	add	r0, sp, #108	; 0x6c
 800621c:	931b      	str	r3, [sp, #108]	; 0x6c
 800621e:	f001 fed7 	bl	8007fd0 <__match>
 8006222:	b910      	cbnz	r0, 800622a <_strtod_l+0x322>
 8006224:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006226:	3301      	adds	r3, #1
 8006228:	931b      	str	r3, [sp, #108]	; 0x6c
 800622a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80064a0 <_strtod_l+0x598>
 800622e:	f04f 0a00 	mov.w	sl, #0
 8006232:	e6a8      	b.n	8005f86 <_strtod_l+0x7e>
 8006234:	210a      	movs	r1, #10
 8006236:	fb01 3e0e 	mla	lr, r1, lr, r3
 800623a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800623e:	e7b8      	b.n	80061b2 <_strtod_l+0x2aa>
 8006240:	46be      	mov	lr, r7
 8006242:	e7c8      	b.n	80061d6 <_strtod_l+0x2ce>
 8006244:	2b69      	cmp	r3, #105	; 0x69
 8006246:	d0de      	beq.n	8006206 <_strtod_l+0x2fe>
 8006248:	2b6e      	cmp	r3, #110	; 0x6e
 800624a:	f47f aeba 	bne.w	8005fc2 <_strtod_l+0xba>
 800624e:	4990      	ldr	r1, [pc, #576]	; (8006490 <_strtod_l+0x588>)
 8006250:	a81b      	add	r0, sp, #108	; 0x6c
 8006252:	f001 febd 	bl	8007fd0 <__match>
 8006256:	2800      	cmp	r0, #0
 8006258:	f43f aeb3 	beq.w	8005fc2 <_strtod_l+0xba>
 800625c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	2b28      	cmp	r3, #40	; 0x28
 8006262:	d10e      	bne.n	8006282 <_strtod_l+0x37a>
 8006264:	aa1e      	add	r2, sp, #120	; 0x78
 8006266:	498b      	ldr	r1, [pc, #556]	; (8006494 <_strtod_l+0x58c>)
 8006268:	a81b      	add	r0, sp, #108	; 0x6c
 800626a:	f001 fec5 	bl	8007ff8 <__hexnan>
 800626e:	2805      	cmp	r0, #5
 8006270:	d107      	bne.n	8006282 <_strtod_l+0x37a>
 8006272:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006274:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006278:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800627c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006280:	e681      	b.n	8005f86 <_strtod_l+0x7e>
 8006282:	f8df b224 	ldr.w	fp, [pc, #548]	; 80064a8 <_strtod_l+0x5a0>
 8006286:	e7d2      	b.n	800622e <_strtod_l+0x326>
 8006288:	ebae 0302 	sub.w	r3, lr, r2
 800628c:	9306      	str	r3, [sp, #24]
 800628e:	9b05      	ldr	r3, [sp, #20]
 8006290:	9807      	ldr	r0, [sp, #28]
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf08      	it	eq
 8006296:	4623      	moveq	r3, r4
 8006298:	2c10      	cmp	r4, #16
 800629a:	9305      	str	r3, [sp, #20]
 800629c:	46a0      	mov	r8, r4
 800629e:	bfa8      	it	ge
 80062a0:	f04f 0810 	movge.w	r8, #16
 80062a4:	f7fa f936 	bl	8000514 <__aeabi_ui2d>
 80062a8:	2c09      	cmp	r4, #9
 80062aa:	4682      	mov	sl, r0
 80062ac:	468b      	mov	fp, r1
 80062ae:	dc13      	bgt.n	80062d8 <_strtod_l+0x3d0>
 80062b0:	9b06      	ldr	r3, [sp, #24]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f43f ae67 	beq.w	8005f86 <_strtod_l+0x7e>
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	dd7a      	ble.n	80063b2 <_strtod_l+0x4aa>
 80062bc:	2b16      	cmp	r3, #22
 80062be:	dc61      	bgt.n	8006384 <_strtod_l+0x47c>
 80062c0:	4a75      	ldr	r2, [pc, #468]	; (8006498 <_strtod_l+0x590>)
 80062c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80062c6:	e9de 0100 	ldrd	r0, r1, [lr]
 80062ca:	4652      	mov	r2, sl
 80062cc:	465b      	mov	r3, fp
 80062ce:	f7fa f99b 	bl	8000608 <__aeabi_dmul>
 80062d2:	4682      	mov	sl, r0
 80062d4:	468b      	mov	fp, r1
 80062d6:	e656      	b.n	8005f86 <_strtod_l+0x7e>
 80062d8:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <_strtod_l+0x590>)
 80062da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80062de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80062e2:	f7fa f991 	bl	8000608 <__aeabi_dmul>
 80062e6:	4606      	mov	r6, r0
 80062e8:	4628      	mov	r0, r5
 80062ea:	460f      	mov	r7, r1
 80062ec:	f7fa f912 	bl	8000514 <__aeabi_ui2d>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4630      	mov	r0, r6
 80062f6:	4639      	mov	r1, r7
 80062f8:	f7f9 ffd0 	bl	800029c <__adddf3>
 80062fc:	2c0f      	cmp	r4, #15
 80062fe:	4682      	mov	sl, r0
 8006300:	468b      	mov	fp, r1
 8006302:	ddd5      	ble.n	80062b0 <_strtod_l+0x3a8>
 8006304:	9b06      	ldr	r3, [sp, #24]
 8006306:	eba4 0808 	sub.w	r8, r4, r8
 800630a:	4498      	add	r8, r3
 800630c:	f1b8 0f00 	cmp.w	r8, #0
 8006310:	f340 8096 	ble.w	8006440 <_strtod_l+0x538>
 8006314:	f018 030f 	ands.w	r3, r8, #15
 8006318:	d00a      	beq.n	8006330 <_strtod_l+0x428>
 800631a:	495f      	ldr	r1, [pc, #380]	; (8006498 <_strtod_l+0x590>)
 800631c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006320:	4652      	mov	r2, sl
 8006322:	465b      	mov	r3, fp
 8006324:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006328:	f7fa f96e 	bl	8000608 <__aeabi_dmul>
 800632c:	4682      	mov	sl, r0
 800632e:	468b      	mov	fp, r1
 8006330:	f038 080f 	bics.w	r8, r8, #15
 8006334:	d073      	beq.n	800641e <_strtod_l+0x516>
 8006336:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800633a:	dd47      	ble.n	80063cc <_strtod_l+0x4c4>
 800633c:	2400      	movs	r4, #0
 800633e:	46a0      	mov	r8, r4
 8006340:	9407      	str	r4, [sp, #28]
 8006342:	9405      	str	r4, [sp, #20]
 8006344:	2322      	movs	r3, #34	; 0x22
 8006346:	f8df b158 	ldr.w	fp, [pc, #344]	; 80064a0 <_strtod_l+0x598>
 800634a:	f8c9 3000 	str.w	r3, [r9]
 800634e:	f04f 0a00 	mov.w	sl, #0
 8006352:	9b07      	ldr	r3, [sp, #28]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f43f ae16 	beq.w	8005f86 <_strtod_l+0x7e>
 800635a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800635c:	4648      	mov	r0, r9
 800635e:	f001 ff3d 	bl	80081dc <_Bfree>
 8006362:	9905      	ldr	r1, [sp, #20]
 8006364:	4648      	mov	r0, r9
 8006366:	f001 ff39 	bl	80081dc <_Bfree>
 800636a:	4641      	mov	r1, r8
 800636c:	4648      	mov	r0, r9
 800636e:	f001 ff35 	bl	80081dc <_Bfree>
 8006372:	9907      	ldr	r1, [sp, #28]
 8006374:	4648      	mov	r0, r9
 8006376:	f001 ff31 	bl	80081dc <_Bfree>
 800637a:	4621      	mov	r1, r4
 800637c:	4648      	mov	r0, r9
 800637e:	f001 ff2d 	bl	80081dc <_Bfree>
 8006382:	e600      	b.n	8005f86 <_strtod_l+0x7e>
 8006384:	9a06      	ldr	r2, [sp, #24]
 8006386:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800638a:	4293      	cmp	r3, r2
 800638c:	dbba      	blt.n	8006304 <_strtod_l+0x3fc>
 800638e:	4d42      	ldr	r5, [pc, #264]	; (8006498 <_strtod_l+0x590>)
 8006390:	f1c4 040f 	rsb	r4, r4, #15
 8006394:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006398:	4652      	mov	r2, sl
 800639a:	465b      	mov	r3, fp
 800639c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063a0:	f7fa f932 	bl	8000608 <__aeabi_dmul>
 80063a4:	9b06      	ldr	r3, [sp, #24]
 80063a6:	1b1c      	subs	r4, r3, r4
 80063a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80063ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 80063b0:	e78d      	b.n	80062ce <_strtod_l+0x3c6>
 80063b2:	f113 0f16 	cmn.w	r3, #22
 80063b6:	dba5      	blt.n	8006304 <_strtod_l+0x3fc>
 80063b8:	4a37      	ldr	r2, [pc, #220]	; (8006498 <_strtod_l+0x590>)
 80063ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80063be:	e9d2 2300 	ldrd	r2, r3, [r2]
 80063c2:	4650      	mov	r0, sl
 80063c4:	4659      	mov	r1, fp
 80063c6:	f7fa fa49 	bl	800085c <__aeabi_ddiv>
 80063ca:	e782      	b.n	80062d2 <_strtod_l+0x3ca>
 80063cc:	2300      	movs	r3, #0
 80063ce:	4e33      	ldr	r6, [pc, #204]	; (800649c <_strtod_l+0x594>)
 80063d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 80063d4:	4650      	mov	r0, sl
 80063d6:	4659      	mov	r1, fp
 80063d8:	461d      	mov	r5, r3
 80063da:	f1b8 0f01 	cmp.w	r8, #1
 80063de:	dc21      	bgt.n	8006424 <_strtod_l+0x51c>
 80063e0:	b10b      	cbz	r3, 80063e6 <_strtod_l+0x4de>
 80063e2:	4682      	mov	sl, r0
 80063e4:	468b      	mov	fp, r1
 80063e6:	4b2d      	ldr	r3, [pc, #180]	; (800649c <_strtod_l+0x594>)
 80063e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80063ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80063f0:	4652      	mov	r2, sl
 80063f2:	465b      	mov	r3, fp
 80063f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 80063f8:	f7fa f906 	bl	8000608 <__aeabi_dmul>
 80063fc:	4b28      	ldr	r3, [pc, #160]	; (80064a0 <_strtod_l+0x598>)
 80063fe:	460a      	mov	r2, r1
 8006400:	400b      	ands	r3, r1
 8006402:	4928      	ldr	r1, [pc, #160]	; (80064a4 <_strtod_l+0x59c>)
 8006404:	428b      	cmp	r3, r1
 8006406:	4682      	mov	sl, r0
 8006408:	d898      	bhi.n	800633c <_strtod_l+0x434>
 800640a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800640e:	428b      	cmp	r3, r1
 8006410:	bf86      	itte	hi
 8006412:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80064ac <_strtod_l+0x5a4>
 8006416:	f04f 3aff 	movhi.w	sl, #4294967295
 800641a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800641e:	2300      	movs	r3, #0
 8006420:	9304      	str	r3, [sp, #16]
 8006422:	e077      	b.n	8006514 <_strtod_l+0x60c>
 8006424:	f018 0f01 	tst.w	r8, #1
 8006428:	d006      	beq.n	8006438 <_strtod_l+0x530>
 800642a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f7fa f8e9 	bl	8000608 <__aeabi_dmul>
 8006436:	2301      	movs	r3, #1
 8006438:	3501      	adds	r5, #1
 800643a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800643e:	e7cc      	b.n	80063da <_strtod_l+0x4d2>
 8006440:	d0ed      	beq.n	800641e <_strtod_l+0x516>
 8006442:	f1c8 0800 	rsb	r8, r8, #0
 8006446:	f018 020f 	ands.w	r2, r8, #15
 800644a:	d00a      	beq.n	8006462 <_strtod_l+0x55a>
 800644c:	4b12      	ldr	r3, [pc, #72]	; (8006498 <_strtod_l+0x590>)
 800644e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006452:	4650      	mov	r0, sl
 8006454:	4659      	mov	r1, fp
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7fa f9ff 	bl	800085c <__aeabi_ddiv>
 800645e:	4682      	mov	sl, r0
 8006460:	468b      	mov	fp, r1
 8006462:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006466:	d0da      	beq.n	800641e <_strtod_l+0x516>
 8006468:	f1b8 0f1f 	cmp.w	r8, #31
 800646c:	dd20      	ble.n	80064b0 <_strtod_l+0x5a8>
 800646e:	2400      	movs	r4, #0
 8006470:	46a0      	mov	r8, r4
 8006472:	9407      	str	r4, [sp, #28]
 8006474:	9405      	str	r4, [sp, #20]
 8006476:	2322      	movs	r3, #34	; 0x22
 8006478:	f04f 0a00 	mov.w	sl, #0
 800647c:	f04f 0b00 	mov.w	fp, #0
 8006480:	f8c9 3000 	str.w	r3, [r9]
 8006484:	e765      	b.n	8006352 <_strtod_l+0x44a>
 8006486:	bf00      	nop
 8006488:	080096d1 	.word	0x080096d1
 800648c:	0800975b 	.word	0x0800975b
 8006490:	080096d9 	.word	0x080096d9
 8006494:	0800971c 	.word	0x0800971c
 8006498:	08009800 	.word	0x08009800
 800649c:	080097d8 	.word	0x080097d8
 80064a0:	7ff00000 	.word	0x7ff00000
 80064a4:	7ca00000 	.word	0x7ca00000
 80064a8:	fff80000 	.word	0xfff80000
 80064ac:	7fefffff 	.word	0x7fefffff
 80064b0:	f018 0310 	ands.w	r3, r8, #16
 80064b4:	bf18      	it	ne
 80064b6:	236a      	movne	r3, #106	; 0x6a
 80064b8:	4da0      	ldr	r5, [pc, #640]	; (800673c <_strtod_l+0x834>)
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	4650      	mov	r0, sl
 80064be:	4659      	mov	r1, fp
 80064c0:	2300      	movs	r3, #0
 80064c2:	f1b8 0f00 	cmp.w	r8, #0
 80064c6:	f300 810a 	bgt.w	80066de <_strtod_l+0x7d6>
 80064ca:	b10b      	cbz	r3, 80064d0 <_strtod_l+0x5c8>
 80064cc:	4682      	mov	sl, r0
 80064ce:	468b      	mov	fp, r1
 80064d0:	9b04      	ldr	r3, [sp, #16]
 80064d2:	b1bb      	cbz	r3, 8006504 <_strtod_l+0x5fc>
 80064d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80064d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80064dc:	2b00      	cmp	r3, #0
 80064de:	4659      	mov	r1, fp
 80064e0:	dd10      	ble.n	8006504 <_strtod_l+0x5fc>
 80064e2:	2b1f      	cmp	r3, #31
 80064e4:	f340 8107 	ble.w	80066f6 <_strtod_l+0x7ee>
 80064e8:	2b34      	cmp	r3, #52	; 0x34
 80064ea:	bfde      	ittt	le
 80064ec:	3b20      	suble	r3, #32
 80064ee:	f04f 32ff 	movle.w	r2, #4294967295
 80064f2:	fa02 f303 	lslle.w	r3, r2, r3
 80064f6:	f04f 0a00 	mov.w	sl, #0
 80064fa:	bfcc      	ite	gt
 80064fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006500:	ea03 0b01 	andle.w	fp, r3, r1
 8006504:	2200      	movs	r2, #0
 8006506:	2300      	movs	r3, #0
 8006508:	4650      	mov	r0, sl
 800650a:	4659      	mov	r1, fp
 800650c:	f7fa fae4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006510:	2800      	cmp	r0, #0
 8006512:	d1ac      	bne.n	800646e <_strtod_l+0x566>
 8006514:	9b07      	ldr	r3, [sp, #28]
 8006516:	9300      	str	r3, [sp, #0]
 8006518:	9a05      	ldr	r2, [sp, #20]
 800651a:	9908      	ldr	r1, [sp, #32]
 800651c:	4623      	mov	r3, r4
 800651e:	4648      	mov	r0, r9
 8006520:	f001 feae 	bl	8008280 <__s2b>
 8006524:	9007      	str	r0, [sp, #28]
 8006526:	2800      	cmp	r0, #0
 8006528:	f43f af08 	beq.w	800633c <_strtod_l+0x434>
 800652c:	9a06      	ldr	r2, [sp, #24]
 800652e:	9b06      	ldr	r3, [sp, #24]
 8006530:	2a00      	cmp	r2, #0
 8006532:	f1c3 0300 	rsb	r3, r3, #0
 8006536:	bfa8      	it	ge
 8006538:	2300      	movge	r3, #0
 800653a:	930e      	str	r3, [sp, #56]	; 0x38
 800653c:	2400      	movs	r4, #0
 800653e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006542:	9316      	str	r3, [sp, #88]	; 0x58
 8006544:	46a0      	mov	r8, r4
 8006546:	9b07      	ldr	r3, [sp, #28]
 8006548:	4648      	mov	r0, r9
 800654a:	6859      	ldr	r1, [r3, #4]
 800654c:	f001 fe12 	bl	8008174 <_Balloc>
 8006550:	9005      	str	r0, [sp, #20]
 8006552:	2800      	cmp	r0, #0
 8006554:	f43f aef6 	beq.w	8006344 <_strtod_l+0x43c>
 8006558:	9b07      	ldr	r3, [sp, #28]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	3202      	adds	r2, #2
 800655e:	f103 010c 	add.w	r1, r3, #12
 8006562:	0092      	lsls	r2, r2, #2
 8006564:	300c      	adds	r0, #12
 8006566:	f7fe fe21 	bl	80051ac <memcpy>
 800656a:	aa1e      	add	r2, sp, #120	; 0x78
 800656c:	a91d      	add	r1, sp, #116	; 0x74
 800656e:	ec4b ab10 	vmov	d0, sl, fp
 8006572:	4648      	mov	r0, r9
 8006574:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006578:	f002 f93e 	bl	80087f8 <__d2b>
 800657c:	901c      	str	r0, [sp, #112]	; 0x70
 800657e:	2800      	cmp	r0, #0
 8006580:	f43f aee0 	beq.w	8006344 <_strtod_l+0x43c>
 8006584:	2101      	movs	r1, #1
 8006586:	4648      	mov	r0, r9
 8006588:	f001 ff06 	bl	8008398 <__i2b>
 800658c:	4680      	mov	r8, r0
 800658e:	2800      	cmp	r0, #0
 8006590:	f43f aed8 	beq.w	8006344 <_strtod_l+0x43c>
 8006594:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006596:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006598:	2e00      	cmp	r6, #0
 800659a:	bfab      	itete	ge
 800659c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800659e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80065a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80065a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80065a4:	bfac      	ite	ge
 80065a6:	18f7      	addge	r7, r6, r3
 80065a8:	1b9d      	sublt	r5, r3, r6
 80065aa:	9b04      	ldr	r3, [sp, #16]
 80065ac:	1af6      	subs	r6, r6, r3
 80065ae:	4416      	add	r6, r2
 80065b0:	4b63      	ldr	r3, [pc, #396]	; (8006740 <_strtod_l+0x838>)
 80065b2:	3e01      	subs	r6, #1
 80065b4:	429e      	cmp	r6, r3
 80065b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80065ba:	f280 80af 	bge.w	800671c <_strtod_l+0x814>
 80065be:	1b9b      	subs	r3, r3, r6
 80065c0:	2b1f      	cmp	r3, #31
 80065c2:	eba2 0203 	sub.w	r2, r2, r3
 80065c6:	f04f 0101 	mov.w	r1, #1
 80065ca:	f300 809b 	bgt.w	8006704 <_strtod_l+0x7fc>
 80065ce:	fa01 f303 	lsl.w	r3, r1, r3
 80065d2:	930f      	str	r3, [sp, #60]	; 0x3c
 80065d4:	2300      	movs	r3, #0
 80065d6:	930a      	str	r3, [sp, #40]	; 0x28
 80065d8:	18be      	adds	r6, r7, r2
 80065da:	9b04      	ldr	r3, [sp, #16]
 80065dc:	42b7      	cmp	r7, r6
 80065de:	4415      	add	r5, r2
 80065e0:	441d      	add	r5, r3
 80065e2:	463b      	mov	r3, r7
 80065e4:	bfa8      	it	ge
 80065e6:	4633      	movge	r3, r6
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	bfa8      	it	ge
 80065ec:	462b      	movge	r3, r5
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	bfc2      	ittt	gt
 80065f2:	1af6      	subgt	r6, r6, r3
 80065f4:	1aed      	subgt	r5, r5, r3
 80065f6:	1aff      	subgt	r7, r7, r3
 80065f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065fa:	b1bb      	cbz	r3, 800662c <_strtod_l+0x724>
 80065fc:	4641      	mov	r1, r8
 80065fe:	461a      	mov	r2, r3
 8006600:	4648      	mov	r0, r9
 8006602:	f001 ff69 	bl	80084d8 <__pow5mult>
 8006606:	4680      	mov	r8, r0
 8006608:	2800      	cmp	r0, #0
 800660a:	f43f ae9b 	beq.w	8006344 <_strtod_l+0x43c>
 800660e:	4601      	mov	r1, r0
 8006610:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006612:	4648      	mov	r0, r9
 8006614:	f001 fec9 	bl	80083aa <__multiply>
 8006618:	900c      	str	r0, [sp, #48]	; 0x30
 800661a:	2800      	cmp	r0, #0
 800661c:	f43f ae92 	beq.w	8006344 <_strtod_l+0x43c>
 8006620:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006622:	4648      	mov	r0, r9
 8006624:	f001 fdda 	bl	80081dc <_Bfree>
 8006628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800662a:	931c      	str	r3, [sp, #112]	; 0x70
 800662c:	2e00      	cmp	r6, #0
 800662e:	dc7a      	bgt.n	8006726 <_strtod_l+0x81e>
 8006630:	9b06      	ldr	r3, [sp, #24]
 8006632:	2b00      	cmp	r3, #0
 8006634:	dd08      	ble.n	8006648 <_strtod_l+0x740>
 8006636:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006638:	9905      	ldr	r1, [sp, #20]
 800663a:	4648      	mov	r0, r9
 800663c:	f001 ff4c 	bl	80084d8 <__pow5mult>
 8006640:	9005      	str	r0, [sp, #20]
 8006642:	2800      	cmp	r0, #0
 8006644:	f43f ae7e 	beq.w	8006344 <_strtod_l+0x43c>
 8006648:	2d00      	cmp	r5, #0
 800664a:	dd08      	ble.n	800665e <_strtod_l+0x756>
 800664c:	462a      	mov	r2, r5
 800664e:	9905      	ldr	r1, [sp, #20]
 8006650:	4648      	mov	r0, r9
 8006652:	f001 ff8f 	bl	8008574 <__lshift>
 8006656:	9005      	str	r0, [sp, #20]
 8006658:	2800      	cmp	r0, #0
 800665a:	f43f ae73 	beq.w	8006344 <_strtod_l+0x43c>
 800665e:	2f00      	cmp	r7, #0
 8006660:	dd08      	ble.n	8006674 <_strtod_l+0x76c>
 8006662:	4641      	mov	r1, r8
 8006664:	463a      	mov	r2, r7
 8006666:	4648      	mov	r0, r9
 8006668:	f001 ff84 	bl	8008574 <__lshift>
 800666c:	4680      	mov	r8, r0
 800666e:	2800      	cmp	r0, #0
 8006670:	f43f ae68 	beq.w	8006344 <_strtod_l+0x43c>
 8006674:	9a05      	ldr	r2, [sp, #20]
 8006676:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006678:	4648      	mov	r0, r9
 800667a:	f001 ffe9 	bl	8008650 <__mdiff>
 800667e:	4604      	mov	r4, r0
 8006680:	2800      	cmp	r0, #0
 8006682:	f43f ae5f 	beq.w	8006344 <_strtod_l+0x43c>
 8006686:	68c3      	ldr	r3, [r0, #12]
 8006688:	930c      	str	r3, [sp, #48]	; 0x30
 800668a:	2300      	movs	r3, #0
 800668c:	60c3      	str	r3, [r0, #12]
 800668e:	4641      	mov	r1, r8
 8006690:	f001 ffc4 	bl	800861c <__mcmp>
 8006694:	2800      	cmp	r0, #0
 8006696:	da55      	bge.n	8006744 <_strtod_l+0x83c>
 8006698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800669a:	b9e3      	cbnz	r3, 80066d6 <_strtod_l+0x7ce>
 800669c:	f1ba 0f00 	cmp.w	sl, #0
 80066a0:	d119      	bne.n	80066d6 <_strtod_l+0x7ce>
 80066a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80066a6:	b9b3      	cbnz	r3, 80066d6 <_strtod_l+0x7ce>
 80066a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80066ac:	0d1b      	lsrs	r3, r3, #20
 80066ae:	051b      	lsls	r3, r3, #20
 80066b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80066b4:	d90f      	bls.n	80066d6 <_strtod_l+0x7ce>
 80066b6:	6963      	ldr	r3, [r4, #20]
 80066b8:	b913      	cbnz	r3, 80066c0 <_strtod_l+0x7b8>
 80066ba:	6923      	ldr	r3, [r4, #16]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	dd0a      	ble.n	80066d6 <_strtod_l+0x7ce>
 80066c0:	4621      	mov	r1, r4
 80066c2:	2201      	movs	r2, #1
 80066c4:	4648      	mov	r0, r9
 80066c6:	f001 ff55 	bl	8008574 <__lshift>
 80066ca:	4641      	mov	r1, r8
 80066cc:	4604      	mov	r4, r0
 80066ce:	f001 ffa5 	bl	800861c <__mcmp>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	dc67      	bgt.n	80067a6 <_strtod_l+0x89e>
 80066d6:	9b04      	ldr	r3, [sp, #16]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d171      	bne.n	80067c0 <_strtod_l+0x8b8>
 80066dc:	e63d      	b.n	800635a <_strtod_l+0x452>
 80066de:	f018 0f01 	tst.w	r8, #1
 80066e2:	d004      	beq.n	80066ee <_strtod_l+0x7e6>
 80066e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80066e8:	f7f9 ff8e 	bl	8000608 <__aeabi_dmul>
 80066ec:	2301      	movs	r3, #1
 80066ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066f2:	3508      	adds	r5, #8
 80066f4:	e6e5      	b.n	80064c2 <_strtod_l+0x5ba>
 80066f6:	f04f 32ff 	mov.w	r2, #4294967295
 80066fa:	fa02 f303 	lsl.w	r3, r2, r3
 80066fe:	ea03 0a0a 	and.w	sl, r3, sl
 8006702:	e6ff      	b.n	8006504 <_strtod_l+0x5fc>
 8006704:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006708:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800670c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006710:	36e2      	adds	r6, #226	; 0xe2
 8006712:	fa01 f306 	lsl.w	r3, r1, r6
 8006716:	930a      	str	r3, [sp, #40]	; 0x28
 8006718:	910f      	str	r1, [sp, #60]	; 0x3c
 800671a:	e75d      	b.n	80065d8 <_strtod_l+0x6d0>
 800671c:	2300      	movs	r3, #0
 800671e:	930a      	str	r3, [sp, #40]	; 0x28
 8006720:	2301      	movs	r3, #1
 8006722:	930f      	str	r3, [sp, #60]	; 0x3c
 8006724:	e758      	b.n	80065d8 <_strtod_l+0x6d0>
 8006726:	4632      	mov	r2, r6
 8006728:	991c      	ldr	r1, [sp, #112]	; 0x70
 800672a:	4648      	mov	r0, r9
 800672c:	f001 ff22 	bl	8008574 <__lshift>
 8006730:	901c      	str	r0, [sp, #112]	; 0x70
 8006732:	2800      	cmp	r0, #0
 8006734:	f47f af7c 	bne.w	8006630 <_strtod_l+0x728>
 8006738:	e604      	b.n	8006344 <_strtod_l+0x43c>
 800673a:	bf00      	nop
 800673c:	08009730 	.word	0x08009730
 8006740:	fffffc02 	.word	0xfffffc02
 8006744:	465d      	mov	r5, fp
 8006746:	f040 8086 	bne.w	8006856 <_strtod_l+0x94e>
 800674a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800674c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006750:	b32a      	cbz	r2, 800679e <_strtod_l+0x896>
 8006752:	4aaf      	ldr	r2, [pc, #700]	; (8006a10 <_strtod_l+0xb08>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d153      	bne.n	8006800 <_strtod_l+0x8f8>
 8006758:	9b04      	ldr	r3, [sp, #16]
 800675a:	4650      	mov	r0, sl
 800675c:	b1d3      	cbz	r3, 8006794 <_strtod_l+0x88c>
 800675e:	4aad      	ldr	r2, [pc, #692]	; (8006a14 <_strtod_l+0xb0c>)
 8006760:	402a      	ands	r2, r5
 8006762:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006766:	f04f 31ff 	mov.w	r1, #4294967295
 800676a:	d816      	bhi.n	800679a <_strtod_l+0x892>
 800676c:	0d12      	lsrs	r2, r2, #20
 800676e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006772:	fa01 f303 	lsl.w	r3, r1, r3
 8006776:	4298      	cmp	r0, r3
 8006778:	d142      	bne.n	8006800 <_strtod_l+0x8f8>
 800677a:	4ba7      	ldr	r3, [pc, #668]	; (8006a18 <_strtod_l+0xb10>)
 800677c:	429d      	cmp	r5, r3
 800677e:	d102      	bne.n	8006786 <_strtod_l+0x87e>
 8006780:	3001      	adds	r0, #1
 8006782:	f43f addf 	beq.w	8006344 <_strtod_l+0x43c>
 8006786:	4ba3      	ldr	r3, [pc, #652]	; (8006a14 <_strtod_l+0xb0c>)
 8006788:	402b      	ands	r3, r5
 800678a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800678e:	f04f 0a00 	mov.w	sl, #0
 8006792:	e7a0      	b.n	80066d6 <_strtod_l+0x7ce>
 8006794:	f04f 33ff 	mov.w	r3, #4294967295
 8006798:	e7ed      	b.n	8006776 <_strtod_l+0x86e>
 800679a:	460b      	mov	r3, r1
 800679c:	e7eb      	b.n	8006776 <_strtod_l+0x86e>
 800679e:	bb7b      	cbnz	r3, 8006800 <_strtod_l+0x8f8>
 80067a0:	f1ba 0f00 	cmp.w	sl, #0
 80067a4:	d12c      	bne.n	8006800 <_strtod_l+0x8f8>
 80067a6:	9904      	ldr	r1, [sp, #16]
 80067a8:	4a9a      	ldr	r2, [pc, #616]	; (8006a14 <_strtod_l+0xb0c>)
 80067aa:	465b      	mov	r3, fp
 80067ac:	b1f1      	cbz	r1, 80067ec <_strtod_l+0x8e4>
 80067ae:	ea02 010b 	and.w	r1, r2, fp
 80067b2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80067b6:	dc19      	bgt.n	80067ec <_strtod_l+0x8e4>
 80067b8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80067bc:	f77f ae5b 	ble.w	8006476 <_strtod_l+0x56e>
 80067c0:	4a96      	ldr	r2, [pc, #600]	; (8006a1c <_strtod_l+0xb14>)
 80067c2:	2300      	movs	r3, #0
 80067c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80067c8:	4650      	mov	r0, sl
 80067ca:	4659      	mov	r1, fp
 80067cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80067d0:	f7f9 ff1a 	bl	8000608 <__aeabi_dmul>
 80067d4:	4682      	mov	sl, r0
 80067d6:	468b      	mov	fp, r1
 80067d8:	2900      	cmp	r1, #0
 80067da:	f47f adbe 	bne.w	800635a <_strtod_l+0x452>
 80067de:	2800      	cmp	r0, #0
 80067e0:	f47f adbb 	bne.w	800635a <_strtod_l+0x452>
 80067e4:	2322      	movs	r3, #34	; 0x22
 80067e6:	f8c9 3000 	str.w	r3, [r9]
 80067ea:	e5b6      	b.n	800635a <_strtod_l+0x452>
 80067ec:	4013      	ands	r3, r2
 80067ee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80067f2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80067f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80067fa:	f04f 3aff 	mov.w	sl, #4294967295
 80067fe:	e76a      	b.n	80066d6 <_strtod_l+0x7ce>
 8006800:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006802:	b193      	cbz	r3, 800682a <_strtod_l+0x922>
 8006804:	422b      	tst	r3, r5
 8006806:	f43f af66 	beq.w	80066d6 <_strtod_l+0x7ce>
 800680a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800680c:	9a04      	ldr	r2, [sp, #16]
 800680e:	4650      	mov	r0, sl
 8006810:	4659      	mov	r1, fp
 8006812:	b173      	cbz	r3, 8006832 <_strtod_l+0x92a>
 8006814:	f7ff fb5a 	bl	8005ecc <sulp>
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006820:	f7f9 fd3c 	bl	800029c <__adddf3>
 8006824:	4682      	mov	sl, r0
 8006826:	468b      	mov	fp, r1
 8006828:	e755      	b.n	80066d6 <_strtod_l+0x7ce>
 800682a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800682c:	ea13 0f0a 	tst.w	r3, sl
 8006830:	e7e9      	b.n	8006806 <_strtod_l+0x8fe>
 8006832:	f7ff fb4b 	bl	8005ecc <sulp>
 8006836:	4602      	mov	r2, r0
 8006838:	460b      	mov	r3, r1
 800683a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800683e:	f7f9 fd2b 	bl	8000298 <__aeabi_dsub>
 8006842:	2200      	movs	r2, #0
 8006844:	2300      	movs	r3, #0
 8006846:	4682      	mov	sl, r0
 8006848:	468b      	mov	fp, r1
 800684a:	f7fa f945 	bl	8000ad8 <__aeabi_dcmpeq>
 800684e:	2800      	cmp	r0, #0
 8006850:	f47f ae11 	bne.w	8006476 <_strtod_l+0x56e>
 8006854:	e73f      	b.n	80066d6 <_strtod_l+0x7ce>
 8006856:	4641      	mov	r1, r8
 8006858:	4620      	mov	r0, r4
 800685a:	f002 f81c 	bl	8008896 <__ratio>
 800685e:	ec57 6b10 	vmov	r6, r7, d0
 8006862:	2200      	movs	r2, #0
 8006864:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006868:	ee10 0a10 	vmov	r0, s0
 800686c:	4639      	mov	r1, r7
 800686e:	f7fa f947 	bl	8000b00 <__aeabi_dcmple>
 8006872:	2800      	cmp	r0, #0
 8006874:	d077      	beq.n	8006966 <_strtod_l+0xa5e>
 8006876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006878:	2b00      	cmp	r3, #0
 800687a:	d04a      	beq.n	8006912 <_strtod_l+0xa0a>
 800687c:	4b68      	ldr	r3, [pc, #416]	; (8006a20 <_strtod_l+0xb18>)
 800687e:	2200      	movs	r2, #0
 8006880:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006884:	4f66      	ldr	r7, [pc, #408]	; (8006a20 <_strtod_l+0xb18>)
 8006886:	2600      	movs	r6, #0
 8006888:	4b62      	ldr	r3, [pc, #392]	; (8006a14 <_strtod_l+0xb0c>)
 800688a:	402b      	ands	r3, r5
 800688c:	930f      	str	r3, [sp, #60]	; 0x3c
 800688e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006890:	4b64      	ldr	r3, [pc, #400]	; (8006a24 <_strtod_l+0xb1c>)
 8006892:	429a      	cmp	r2, r3
 8006894:	f040 80ce 	bne.w	8006a34 <_strtod_l+0xb2c>
 8006898:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800689c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068a0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80068a4:	ec4b ab10 	vmov	d0, sl, fp
 80068a8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80068ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80068b0:	f001 ff2c 	bl	800870c <__ulp>
 80068b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80068b8:	ec53 2b10 	vmov	r2, r3, d0
 80068bc:	f7f9 fea4 	bl	8000608 <__aeabi_dmul>
 80068c0:	4652      	mov	r2, sl
 80068c2:	465b      	mov	r3, fp
 80068c4:	f7f9 fcea 	bl	800029c <__adddf3>
 80068c8:	460b      	mov	r3, r1
 80068ca:	4952      	ldr	r1, [pc, #328]	; (8006a14 <_strtod_l+0xb0c>)
 80068cc:	4a56      	ldr	r2, [pc, #344]	; (8006a28 <_strtod_l+0xb20>)
 80068ce:	4019      	ands	r1, r3
 80068d0:	4291      	cmp	r1, r2
 80068d2:	4682      	mov	sl, r0
 80068d4:	d95b      	bls.n	800698e <_strtod_l+0xa86>
 80068d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80068dc:	4293      	cmp	r3, r2
 80068de:	d103      	bne.n	80068e8 <_strtod_l+0x9e0>
 80068e0:	9b08      	ldr	r3, [sp, #32]
 80068e2:	3301      	adds	r3, #1
 80068e4:	f43f ad2e 	beq.w	8006344 <_strtod_l+0x43c>
 80068e8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006a18 <_strtod_l+0xb10>
 80068ec:	f04f 3aff 	mov.w	sl, #4294967295
 80068f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80068f2:	4648      	mov	r0, r9
 80068f4:	f001 fc72 	bl	80081dc <_Bfree>
 80068f8:	9905      	ldr	r1, [sp, #20]
 80068fa:	4648      	mov	r0, r9
 80068fc:	f001 fc6e 	bl	80081dc <_Bfree>
 8006900:	4641      	mov	r1, r8
 8006902:	4648      	mov	r0, r9
 8006904:	f001 fc6a 	bl	80081dc <_Bfree>
 8006908:	4621      	mov	r1, r4
 800690a:	4648      	mov	r0, r9
 800690c:	f001 fc66 	bl	80081dc <_Bfree>
 8006910:	e619      	b.n	8006546 <_strtod_l+0x63e>
 8006912:	f1ba 0f00 	cmp.w	sl, #0
 8006916:	d11a      	bne.n	800694e <_strtod_l+0xa46>
 8006918:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800691c:	b9eb      	cbnz	r3, 800695a <_strtod_l+0xa52>
 800691e:	2200      	movs	r2, #0
 8006920:	4b3f      	ldr	r3, [pc, #252]	; (8006a20 <_strtod_l+0xb18>)
 8006922:	4630      	mov	r0, r6
 8006924:	4639      	mov	r1, r7
 8006926:	f7fa f8e1 	bl	8000aec <__aeabi_dcmplt>
 800692a:	b9c8      	cbnz	r0, 8006960 <_strtod_l+0xa58>
 800692c:	4630      	mov	r0, r6
 800692e:	4639      	mov	r1, r7
 8006930:	2200      	movs	r2, #0
 8006932:	4b3e      	ldr	r3, [pc, #248]	; (8006a2c <_strtod_l+0xb24>)
 8006934:	f7f9 fe68 	bl	8000608 <__aeabi_dmul>
 8006938:	4606      	mov	r6, r0
 800693a:	460f      	mov	r7, r1
 800693c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006940:	9618      	str	r6, [sp, #96]	; 0x60
 8006942:	9319      	str	r3, [sp, #100]	; 0x64
 8006944:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006948:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800694c:	e79c      	b.n	8006888 <_strtod_l+0x980>
 800694e:	f1ba 0f01 	cmp.w	sl, #1
 8006952:	d102      	bne.n	800695a <_strtod_l+0xa52>
 8006954:	2d00      	cmp	r5, #0
 8006956:	f43f ad8e 	beq.w	8006476 <_strtod_l+0x56e>
 800695a:	2200      	movs	r2, #0
 800695c:	4b34      	ldr	r3, [pc, #208]	; (8006a30 <_strtod_l+0xb28>)
 800695e:	e78f      	b.n	8006880 <_strtod_l+0x978>
 8006960:	2600      	movs	r6, #0
 8006962:	4f32      	ldr	r7, [pc, #200]	; (8006a2c <_strtod_l+0xb24>)
 8006964:	e7ea      	b.n	800693c <_strtod_l+0xa34>
 8006966:	4b31      	ldr	r3, [pc, #196]	; (8006a2c <_strtod_l+0xb24>)
 8006968:	4630      	mov	r0, r6
 800696a:	4639      	mov	r1, r7
 800696c:	2200      	movs	r2, #0
 800696e:	f7f9 fe4b 	bl	8000608 <__aeabi_dmul>
 8006972:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006974:	4606      	mov	r6, r0
 8006976:	460f      	mov	r7, r1
 8006978:	b933      	cbnz	r3, 8006988 <_strtod_l+0xa80>
 800697a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800697e:	9010      	str	r0, [sp, #64]	; 0x40
 8006980:	9311      	str	r3, [sp, #68]	; 0x44
 8006982:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006986:	e7df      	b.n	8006948 <_strtod_l+0xa40>
 8006988:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800698c:	e7f9      	b.n	8006982 <_strtod_l+0xa7a>
 800698e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006992:	9b04      	ldr	r3, [sp, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d1ab      	bne.n	80068f0 <_strtod_l+0x9e8>
 8006998:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800699c:	0d1b      	lsrs	r3, r3, #20
 800699e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069a0:	051b      	lsls	r3, r3, #20
 80069a2:	429a      	cmp	r2, r3
 80069a4:	465d      	mov	r5, fp
 80069a6:	d1a3      	bne.n	80068f0 <_strtod_l+0x9e8>
 80069a8:	4639      	mov	r1, r7
 80069aa:	4630      	mov	r0, r6
 80069ac:	f7fa f8dc 	bl	8000b68 <__aeabi_d2iz>
 80069b0:	f7f9 fdc0 	bl	8000534 <__aeabi_i2d>
 80069b4:	460b      	mov	r3, r1
 80069b6:	4602      	mov	r2, r0
 80069b8:	4639      	mov	r1, r7
 80069ba:	4630      	mov	r0, r6
 80069bc:	f7f9 fc6c 	bl	8000298 <__aeabi_dsub>
 80069c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069c2:	4606      	mov	r6, r0
 80069c4:	460f      	mov	r7, r1
 80069c6:	b933      	cbnz	r3, 80069d6 <_strtod_l+0xace>
 80069c8:	f1ba 0f00 	cmp.w	sl, #0
 80069cc:	d103      	bne.n	80069d6 <_strtod_l+0xace>
 80069ce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80069d2:	2d00      	cmp	r5, #0
 80069d4:	d06d      	beq.n	8006ab2 <_strtod_l+0xbaa>
 80069d6:	a30a      	add	r3, pc, #40	; (adr r3, 8006a00 <_strtod_l+0xaf8>)
 80069d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069dc:	4630      	mov	r0, r6
 80069de:	4639      	mov	r1, r7
 80069e0:	f7fa f884 	bl	8000aec <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f47f acb8 	bne.w	800635a <_strtod_l+0x452>
 80069ea:	a307      	add	r3, pc, #28	; (adr r3, 8006a08 <_strtod_l+0xb00>)
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	4630      	mov	r0, r6
 80069f2:	4639      	mov	r1, r7
 80069f4:	f7fa f898 	bl	8000b28 <__aeabi_dcmpgt>
 80069f8:	2800      	cmp	r0, #0
 80069fa:	f43f af79 	beq.w	80068f0 <_strtod_l+0x9e8>
 80069fe:	e4ac      	b.n	800635a <_strtod_l+0x452>
 8006a00:	94a03595 	.word	0x94a03595
 8006a04:	3fdfffff 	.word	0x3fdfffff
 8006a08:	35afe535 	.word	0x35afe535
 8006a0c:	3fe00000 	.word	0x3fe00000
 8006a10:	000fffff 	.word	0x000fffff
 8006a14:	7ff00000 	.word	0x7ff00000
 8006a18:	7fefffff 	.word	0x7fefffff
 8006a1c:	39500000 	.word	0x39500000
 8006a20:	3ff00000 	.word	0x3ff00000
 8006a24:	7fe00000 	.word	0x7fe00000
 8006a28:	7c9fffff 	.word	0x7c9fffff
 8006a2c:	3fe00000 	.word	0x3fe00000
 8006a30:	bff00000 	.word	0xbff00000
 8006a34:	9b04      	ldr	r3, [sp, #16]
 8006a36:	b333      	cbz	r3, 8006a86 <_strtod_l+0xb7e>
 8006a38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a3e:	d822      	bhi.n	8006a86 <_strtod_l+0xb7e>
 8006a40:	a327      	add	r3, pc, #156	; (adr r3, 8006ae0 <_strtod_l+0xbd8>)
 8006a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a46:	4630      	mov	r0, r6
 8006a48:	4639      	mov	r1, r7
 8006a4a:	f7fa f859 	bl	8000b00 <__aeabi_dcmple>
 8006a4e:	b1a0      	cbz	r0, 8006a7a <_strtod_l+0xb72>
 8006a50:	4639      	mov	r1, r7
 8006a52:	4630      	mov	r0, r6
 8006a54:	f7fa f8b0 	bl	8000bb8 <__aeabi_d2uiz>
 8006a58:	2800      	cmp	r0, #0
 8006a5a:	bf08      	it	eq
 8006a5c:	2001      	moveq	r0, #1
 8006a5e:	f7f9 fd59 	bl	8000514 <__aeabi_ui2d>
 8006a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a64:	4606      	mov	r6, r0
 8006a66:	460f      	mov	r7, r1
 8006a68:	bb03      	cbnz	r3, 8006aac <_strtod_l+0xba4>
 8006a6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a6e:	9012      	str	r0, [sp, #72]	; 0x48
 8006a70:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006a76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a7e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a86:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006a8a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006a8e:	f001 fe3d 	bl	800870c <__ulp>
 8006a92:	4650      	mov	r0, sl
 8006a94:	ec53 2b10 	vmov	r2, r3, d0
 8006a98:	4659      	mov	r1, fp
 8006a9a:	f7f9 fdb5 	bl	8000608 <__aeabi_dmul>
 8006a9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006aa2:	f7f9 fbfb 	bl	800029c <__adddf3>
 8006aa6:	4682      	mov	sl, r0
 8006aa8:	468b      	mov	fp, r1
 8006aaa:	e772      	b.n	8006992 <_strtod_l+0xa8a>
 8006aac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006ab0:	e7df      	b.n	8006a72 <_strtod_l+0xb6a>
 8006ab2:	a30d      	add	r3, pc, #52	; (adr r3, 8006ae8 <_strtod_l+0xbe0>)
 8006ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab8:	f7fa f818 	bl	8000aec <__aeabi_dcmplt>
 8006abc:	e79c      	b.n	80069f8 <_strtod_l+0xaf0>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	930d      	str	r3, [sp, #52]	; 0x34
 8006ac2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006ac4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	f7ff ba61 	b.w	8005f8e <_strtod_l+0x86>
 8006acc:	2b65      	cmp	r3, #101	; 0x65
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f43f ab4e 	beq.w	8006172 <_strtod_l+0x26a>
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	4614      	mov	r4, r2
 8006ada:	9104      	str	r1, [sp, #16]
 8006adc:	f7ff bacb 	b.w	8006076 <_strtod_l+0x16e>
 8006ae0:	ffc00000 	.word	0xffc00000
 8006ae4:	41dfffff 	.word	0x41dfffff
 8006ae8:	94a03595 	.word	0x94a03595
 8006aec:	3fcfffff 	.word	0x3fcfffff

08006af0 <_strtod_r>:
 8006af0:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <_strtod_r+0x18>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	b410      	push	{r4}
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	4c04      	ldr	r4, [pc, #16]	; (8006b0c <_strtod_r+0x1c>)
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	bf08      	it	eq
 8006afe:	4623      	moveq	r3, r4
 8006b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b04:	f7ff ba00 	b.w	8005f08 <_strtod_l>
 8006b08:	20000010 	.word	0x20000010
 8006b0c:	20000074 	.word	0x20000074

08006b10 <strtod>:
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <strtod+0x20>)
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <strtod+0x24>)
 8006b14:	b410      	push	{r4}
 8006b16:	681c      	ldr	r4, [r3, #0]
 8006b18:	6a23      	ldr	r3, [r4, #32]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	bf08      	it	eq
 8006b1e:	4613      	moveq	r3, r2
 8006b20:	460a      	mov	r2, r1
 8006b22:	4601      	mov	r1, r0
 8006b24:	4620      	mov	r0, r4
 8006b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b2a:	f7ff b9ed 	b.w	8005f08 <_strtod_l>
 8006b2e:	bf00      	nop
 8006b30:	20000010 	.word	0x20000010
 8006b34:	20000074 	.word	0x20000074

08006b38 <__strtok_r>:
 8006b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b3a:	b918      	cbnz	r0, 8006b44 <__strtok_r+0xc>
 8006b3c:	6810      	ldr	r0, [r2, #0]
 8006b3e:	b908      	cbnz	r0, 8006b44 <__strtok_r+0xc>
 8006b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b42:	4620      	mov	r0, r4
 8006b44:	4604      	mov	r4, r0
 8006b46:	460f      	mov	r7, r1
 8006b48:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006b4c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006b50:	b91e      	cbnz	r6, 8006b5a <__strtok_r+0x22>
 8006b52:	b96d      	cbnz	r5, 8006b70 <__strtok_r+0x38>
 8006b54:	6015      	str	r5, [r2, #0]
 8006b56:	4628      	mov	r0, r5
 8006b58:	e7f2      	b.n	8006b40 <__strtok_r+0x8>
 8006b5a:	42b5      	cmp	r5, r6
 8006b5c:	d1f6      	bne.n	8006b4c <__strtok_r+0x14>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1ef      	bne.n	8006b42 <__strtok_r+0xa>
 8006b62:	6014      	str	r4, [r2, #0]
 8006b64:	7003      	strb	r3, [r0, #0]
 8006b66:	e7eb      	b.n	8006b40 <__strtok_r+0x8>
 8006b68:	462b      	mov	r3, r5
 8006b6a:	e00d      	b.n	8006b88 <__strtok_r+0x50>
 8006b6c:	b926      	cbnz	r6, 8006b78 <__strtok_r+0x40>
 8006b6e:	461c      	mov	r4, r3
 8006b70:	4623      	mov	r3, r4
 8006b72:	460f      	mov	r7, r1
 8006b74:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006b78:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006b7c:	42b5      	cmp	r5, r6
 8006b7e:	d1f5      	bne.n	8006b6c <__strtok_r+0x34>
 8006b80:	2d00      	cmp	r5, #0
 8006b82:	d0f1      	beq.n	8006b68 <__strtok_r+0x30>
 8006b84:	2100      	movs	r1, #0
 8006b86:	7021      	strb	r1, [r4, #0]
 8006b88:	6013      	str	r3, [r2, #0]
 8006b8a:	e7d9      	b.n	8006b40 <__strtok_r+0x8>

08006b8c <strtok_r>:
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	f7ff bfd3 	b.w	8006b38 <__strtok_r>

08006b92 <_strtol_l.isra.0>:
 8006b92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b96:	4680      	mov	r8, r0
 8006b98:	4689      	mov	r9, r1
 8006b9a:	4692      	mov	sl, r2
 8006b9c:	461e      	mov	r6, r3
 8006b9e:	460f      	mov	r7, r1
 8006ba0:	463d      	mov	r5, r7
 8006ba2:	9808      	ldr	r0, [sp, #32]
 8006ba4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006ba8:	f001 fab6 	bl	8008118 <__locale_ctype_ptr_l>
 8006bac:	4420      	add	r0, r4
 8006bae:	7843      	ldrb	r3, [r0, #1]
 8006bb0:	f013 0308 	ands.w	r3, r3, #8
 8006bb4:	d132      	bne.n	8006c1c <_strtol_l.isra.0+0x8a>
 8006bb6:	2c2d      	cmp	r4, #45	; 0x2d
 8006bb8:	d132      	bne.n	8006c20 <_strtol_l.isra.0+0x8e>
 8006bba:	787c      	ldrb	r4, [r7, #1]
 8006bbc:	1cbd      	adds	r5, r7, #2
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	d05d      	beq.n	8006c80 <_strtol_l.isra.0+0xee>
 8006bc4:	2e10      	cmp	r6, #16
 8006bc6:	d109      	bne.n	8006bdc <_strtol_l.isra.0+0x4a>
 8006bc8:	2c30      	cmp	r4, #48	; 0x30
 8006bca:	d107      	bne.n	8006bdc <_strtol_l.isra.0+0x4a>
 8006bcc:	782b      	ldrb	r3, [r5, #0]
 8006bce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006bd2:	2b58      	cmp	r3, #88	; 0x58
 8006bd4:	d14f      	bne.n	8006c76 <_strtol_l.isra.0+0xe4>
 8006bd6:	786c      	ldrb	r4, [r5, #1]
 8006bd8:	2610      	movs	r6, #16
 8006bda:	3502      	adds	r5, #2
 8006bdc:	2a00      	cmp	r2, #0
 8006bde:	bf14      	ite	ne
 8006be0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006be4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006be8:	2700      	movs	r7, #0
 8006bea:	fbb1 fcf6 	udiv	ip, r1, r6
 8006bee:	4638      	mov	r0, r7
 8006bf0:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006bf4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006bf8:	2b09      	cmp	r3, #9
 8006bfa:	d817      	bhi.n	8006c2c <_strtol_l.isra.0+0x9a>
 8006bfc:	461c      	mov	r4, r3
 8006bfe:	42a6      	cmp	r6, r4
 8006c00:	dd23      	ble.n	8006c4a <_strtol_l.isra.0+0xb8>
 8006c02:	1c7b      	adds	r3, r7, #1
 8006c04:	d007      	beq.n	8006c16 <_strtol_l.isra.0+0x84>
 8006c06:	4584      	cmp	ip, r0
 8006c08:	d31c      	bcc.n	8006c44 <_strtol_l.isra.0+0xb2>
 8006c0a:	d101      	bne.n	8006c10 <_strtol_l.isra.0+0x7e>
 8006c0c:	45a6      	cmp	lr, r4
 8006c0e:	db19      	blt.n	8006c44 <_strtol_l.isra.0+0xb2>
 8006c10:	fb00 4006 	mla	r0, r0, r6, r4
 8006c14:	2701      	movs	r7, #1
 8006c16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c1a:	e7eb      	b.n	8006bf4 <_strtol_l.isra.0+0x62>
 8006c1c:	462f      	mov	r7, r5
 8006c1e:	e7bf      	b.n	8006ba0 <_strtol_l.isra.0+0xe>
 8006c20:	2c2b      	cmp	r4, #43	; 0x2b
 8006c22:	bf04      	itt	eq
 8006c24:	1cbd      	addeq	r5, r7, #2
 8006c26:	787c      	ldrbeq	r4, [r7, #1]
 8006c28:	461a      	mov	r2, r3
 8006c2a:	e7c9      	b.n	8006bc0 <_strtol_l.isra.0+0x2e>
 8006c2c:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006c30:	2b19      	cmp	r3, #25
 8006c32:	d801      	bhi.n	8006c38 <_strtol_l.isra.0+0xa6>
 8006c34:	3c37      	subs	r4, #55	; 0x37
 8006c36:	e7e2      	b.n	8006bfe <_strtol_l.isra.0+0x6c>
 8006c38:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006c3c:	2b19      	cmp	r3, #25
 8006c3e:	d804      	bhi.n	8006c4a <_strtol_l.isra.0+0xb8>
 8006c40:	3c57      	subs	r4, #87	; 0x57
 8006c42:	e7dc      	b.n	8006bfe <_strtol_l.isra.0+0x6c>
 8006c44:	f04f 37ff 	mov.w	r7, #4294967295
 8006c48:	e7e5      	b.n	8006c16 <_strtol_l.isra.0+0x84>
 8006c4a:	1c7b      	adds	r3, r7, #1
 8006c4c:	d108      	bne.n	8006c60 <_strtol_l.isra.0+0xce>
 8006c4e:	2322      	movs	r3, #34	; 0x22
 8006c50:	f8c8 3000 	str.w	r3, [r8]
 8006c54:	4608      	mov	r0, r1
 8006c56:	f1ba 0f00 	cmp.w	sl, #0
 8006c5a:	d107      	bne.n	8006c6c <_strtol_l.isra.0+0xda>
 8006c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c60:	b102      	cbz	r2, 8006c64 <_strtol_l.isra.0+0xd2>
 8006c62:	4240      	negs	r0, r0
 8006c64:	f1ba 0f00 	cmp.w	sl, #0
 8006c68:	d0f8      	beq.n	8006c5c <_strtol_l.isra.0+0xca>
 8006c6a:	b10f      	cbz	r7, 8006c70 <_strtol_l.isra.0+0xde>
 8006c6c:	f105 39ff 	add.w	r9, r5, #4294967295
 8006c70:	f8ca 9000 	str.w	r9, [sl]
 8006c74:	e7f2      	b.n	8006c5c <_strtol_l.isra.0+0xca>
 8006c76:	2430      	movs	r4, #48	; 0x30
 8006c78:	2e00      	cmp	r6, #0
 8006c7a:	d1af      	bne.n	8006bdc <_strtol_l.isra.0+0x4a>
 8006c7c:	2608      	movs	r6, #8
 8006c7e:	e7ad      	b.n	8006bdc <_strtol_l.isra.0+0x4a>
 8006c80:	2c30      	cmp	r4, #48	; 0x30
 8006c82:	d0a3      	beq.n	8006bcc <_strtol_l.isra.0+0x3a>
 8006c84:	260a      	movs	r6, #10
 8006c86:	e7a9      	b.n	8006bdc <_strtol_l.isra.0+0x4a>

08006c88 <_strtol_r>:
 8006c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c8a:	4c06      	ldr	r4, [pc, #24]	; (8006ca4 <_strtol_r+0x1c>)
 8006c8c:	4d06      	ldr	r5, [pc, #24]	; (8006ca8 <_strtol_r+0x20>)
 8006c8e:	6824      	ldr	r4, [r4, #0]
 8006c90:	6a24      	ldr	r4, [r4, #32]
 8006c92:	2c00      	cmp	r4, #0
 8006c94:	bf08      	it	eq
 8006c96:	462c      	moveq	r4, r5
 8006c98:	9400      	str	r4, [sp, #0]
 8006c9a:	f7ff ff7a 	bl	8006b92 <_strtol_l.isra.0>
 8006c9e:	b003      	add	sp, #12
 8006ca0:	bd30      	pop	{r4, r5, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20000010 	.word	0x20000010
 8006ca8:	20000074 	.word	0x20000074

08006cac <quorem>:
 8006cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb0:	6903      	ldr	r3, [r0, #16]
 8006cb2:	690c      	ldr	r4, [r1, #16]
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	4680      	mov	r8, r0
 8006cb8:	f2c0 8082 	blt.w	8006dc0 <quorem+0x114>
 8006cbc:	3c01      	subs	r4, #1
 8006cbe:	f101 0714 	add.w	r7, r1, #20
 8006cc2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006cc6:	f100 0614 	add.w	r6, r0, #20
 8006cca:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006cce:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006cd2:	eb06 030c 	add.w	r3, r6, ip
 8006cd6:	3501      	adds	r5, #1
 8006cd8:	eb07 090c 	add.w	r9, r7, ip
 8006cdc:	9301      	str	r3, [sp, #4]
 8006cde:	fbb0 f5f5 	udiv	r5, r0, r5
 8006ce2:	b395      	cbz	r5, 8006d4a <quorem+0x9e>
 8006ce4:	f04f 0a00 	mov.w	sl, #0
 8006ce8:	4638      	mov	r0, r7
 8006cea:	46b6      	mov	lr, r6
 8006cec:	46d3      	mov	fp, sl
 8006cee:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cf2:	b293      	uxth	r3, r2
 8006cf4:	fb05 a303 	mla	r3, r5, r3, sl
 8006cf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	ebab 0303 	sub.w	r3, fp, r3
 8006d02:	0c12      	lsrs	r2, r2, #16
 8006d04:	f8de b000 	ldr.w	fp, [lr]
 8006d08:	fb05 a202 	mla	r2, r5, r2, sl
 8006d0c:	fa13 f38b 	uxtah	r3, r3, fp
 8006d10:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006d14:	fa1f fb82 	uxth.w	fp, r2
 8006d18:	f8de 2000 	ldr.w	r2, [lr]
 8006d1c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006d20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d2a:	4581      	cmp	r9, r0
 8006d2c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006d30:	f84e 3b04 	str.w	r3, [lr], #4
 8006d34:	d2db      	bcs.n	8006cee <quorem+0x42>
 8006d36:	f856 300c 	ldr.w	r3, [r6, ip]
 8006d3a:	b933      	cbnz	r3, 8006d4a <quorem+0x9e>
 8006d3c:	9b01      	ldr	r3, [sp, #4]
 8006d3e:	3b04      	subs	r3, #4
 8006d40:	429e      	cmp	r6, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	d330      	bcc.n	8006da8 <quorem+0xfc>
 8006d46:	f8c8 4010 	str.w	r4, [r8, #16]
 8006d4a:	4640      	mov	r0, r8
 8006d4c:	f001 fc66 	bl	800861c <__mcmp>
 8006d50:	2800      	cmp	r0, #0
 8006d52:	db25      	blt.n	8006da0 <quorem+0xf4>
 8006d54:	3501      	adds	r5, #1
 8006d56:	4630      	mov	r0, r6
 8006d58:	f04f 0c00 	mov.w	ip, #0
 8006d5c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006d60:	f8d0 e000 	ldr.w	lr, [r0]
 8006d64:	b293      	uxth	r3, r2
 8006d66:	ebac 0303 	sub.w	r3, ip, r3
 8006d6a:	0c12      	lsrs	r2, r2, #16
 8006d6c:	fa13 f38e 	uxtah	r3, r3, lr
 8006d70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d7e:	45b9      	cmp	r9, r7
 8006d80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d84:	f840 3b04 	str.w	r3, [r0], #4
 8006d88:	d2e8      	bcs.n	8006d5c <quorem+0xb0>
 8006d8a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006d8e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006d92:	b92a      	cbnz	r2, 8006da0 <quorem+0xf4>
 8006d94:	3b04      	subs	r3, #4
 8006d96:	429e      	cmp	r6, r3
 8006d98:	461a      	mov	r2, r3
 8006d9a:	d30b      	bcc.n	8006db4 <quorem+0x108>
 8006d9c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006da0:	4628      	mov	r0, r5
 8006da2:	b003      	add	sp, #12
 8006da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da8:	6812      	ldr	r2, [r2, #0]
 8006daa:	3b04      	subs	r3, #4
 8006dac:	2a00      	cmp	r2, #0
 8006dae:	d1ca      	bne.n	8006d46 <quorem+0x9a>
 8006db0:	3c01      	subs	r4, #1
 8006db2:	e7c5      	b.n	8006d40 <quorem+0x94>
 8006db4:	6812      	ldr	r2, [r2, #0]
 8006db6:	3b04      	subs	r3, #4
 8006db8:	2a00      	cmp	r2, #0
 8006dba:	d1ef      	bne.n	8006d9c <quorem+0xf0>
 8006dbc:	3c01      	subs	r4, #1
 8006dbe:	e7ea      	b.n	8006d96 <quorem+0xea>
 8006dc0:	2000      	movs	r0, #0
 8006dc2:	e7ee      	b.n	8006da2 <quorem+0xf6>
 8006dc4:	0000      	movs	r0, r0
	...

08006dc8 <_dtoa_r>:
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	ec57 6b10 	vmov	r6, r7, d0
 8006dd0:	b097      	sub	sp, #92	; 0x5c
 8006dd2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006dd4:	9106      	str	r1, [sp, #24]
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	920b      	str	r2, [sp, #44]	; 0x2c
 8006dda:	9312      	str	r3, [sp, #72]	; 0x48
 8006ddc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006de0:	e9cd 6700 	strd	r6, r7, [sp]
 8006de4:	b93d      	cbnz	r5, 8006df6 <_dtoa_r+0x2e>
 8006de6:	2010      	movs	r0, #16
 8006de8:	f001 f9aa 	bl	8008140 <malloc>
 8006dec:	6260      	str	r0, [r4, #36]	; 0x24
 8006dee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006df2:	6005      	str	r5, [r0, #0]
 8006df4:	60c5      	str	r5, [r0, #12]
 8006df6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df8:	6819      	ldr	r1, [r3, #0]
 8006dfa:	b151      	cbz	r1, 8006e12 <_dtoa_r+0x4a>
 8006dfc:	685a      	ldr	r2, [r3, #4]
 8006dfe:	604a      	str	r2, [r1, #4]
 8006e00:	2301      	movs	r3, #1
 8006e02:	4093      	lsls	r3, r2
 8006e04:	608b      	str	r3, [r1, #8]
 8006e06:	4620      	mov	r0, r4
 8006e08:	f001 f9e8 	bl	80081dc <_Bfree>
 8006e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e0e:	2200      	movs	r2, #0
 8006e10:	601a      	str	r2, [r3, #0]
 8006e12:	1e3b      	subs	r3, r7, #0
 8006e14:	bfbb      	ittet	lt
 8006e16:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006e1a:	9301      	strlt	r3, [sp, #4]
 8006e1c:	2300      	movge	r3, #0
 8006e1e:	2201      	movlt	r2, #1
 8006e20:	bfac      	ite	ge
 8006e22:	f8c8 3000 	strge.w	r3, [r8]
 8006e26:	f8c8 2000 	strlt.w	r2, [r8]
 8006e2a:	4baf      	ldr	r3, [pc, #700]	; (80070e8 <_dtoa_r+0x320>)
 8006e2c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006e30:	ea33 0308 	bics.w	r3, r3, r8
 8006e34:	d114      	bne.n	8006e60 <_dtoa_r+0x98>
 8006e36:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e38:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e3c:	6013      	str	r3, [r2, #0]
 8006e3e:	9b00      	ldr	r3, [sp, #0]
 8006e40:	b923      	cbnz	r3, 8006e4c <_dtoa_r+0x84>
 8006e42:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f000 8542 	beq.w	80078d0 <_dtoa_r+0xb08>
 8006e4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e4e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80070fc <_dtoa_r+0x334>
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 8544 	beq.w	80078e0 <_dtoa_r+0xb18>
 8006e58:	f10b 0303 	add.w	r3, fp, #3
 8006e5c:	f000 bd3e 	b.w	80078dc <_dtoa_r+0xb14>
 8006e60:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006e64:	2200      	movs	r2, #0
 8006e66:	2300      	movs	r3, #0
 8006e68:	4630      	mov	r0, r6
 8006e6a:	4639      	mov	r1, r7
 8006e6c:	f7f9 fe34 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e70:	4681      	mov	r9, r0
 8006e72:	b168      	cbz	r0, 8006e90 <_dtoa_r+0xc8>
 8006e74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006e76:	2301      	movs	r3, #1
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8524 	beq.w	80078ca <_dtoa_r+0xb02>
 8006e82:	4b9a      	ldr	r3, [pc, #616]	; (80070ec <_dtoa_r+0x324>)
 8006e84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e86:	f103 3bff 	add.w	fp, r3, #4294967295
 8006e8a:	6013      	str	r3, [r2, #0]
 8006e8c:	f000 bd28 	b.w	80078e0 <_dtoa_r+0xb18>
 8006e90:	aa14      	add	r2, sp, #80	; 0x50
 8006e92:	a915      	add	r1, sp, #84	; 0x54
 8006e94:	ec47 6b10 	vmov	d0, r6, r7
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f001 fcad 	bl	80087f8 <__d2b>
 8006e9e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006ea2:	9004      	str	r0, [sp, #16]
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	d07c      	beq.n	8006fa2 <_dtoa_r+0x1da>
 8006ea8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006eac:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006eb0:	46b2      	mov	sl, r6
 8006eb2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006eba:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	4b8b      	ldr	r3, [pc, #556]	; (80070f0 <_dtoa_r+0x328>)
 8006ec2:	4650      	mov	r0, sl
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	f7f9 f9e7 	bl	8000298 <__aeabi_dsub>
 8006eca:	a381      	add	r3, pc, #516	; (adr r3, 80070d0 <_dtoa_r+0x308>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f7f9 fb9a 	bl	8000608 <__aeabi_dmul>
 8006ed4:	a380      	add	r3, pc, #512	; (adr r3, 80070d8 <_dtoa_r+0x310>)
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	f7f9 f9df 	bl	800029c <__adddf3>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	460f      	mov	r7, r1
 8006ee4:	f7f9 fb26 	bl	8000534 <__aeabi_i2d>
 8006ee8:	a37d      	add	r3, pc, #500	; (adr r3, 80070e0 <_dtoa_r+0x318>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f7f9 fb8b 	bl	8000608 <__aeabi_dmul>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4639      	mov	r1, r7
 8006efa:	f7f9 f9cf 	bl	800029c <__adddf3>
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	f7f9 fe31 	bl	8000b68 <__aeabi_d2iz>
 8006f06:	2200      	movs	r2, #0
 8006f08:	4682      	mov	sl, r0
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	4639      	mov	r1, r7
 8006f10:	f7f9 fdec 	bl	8000aec <__aeabi_dcmplt>
 8006f14:	b148      	cbz	r0, 8006f2a <_dtoa_r+0x162>
 8006f16:	4650      	mov	r0, sl
 8006f18:	f7f9 fb0c 	bl	8000534 <__aeabi_i2d>
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	463b      	mov	r3, r7
 8006f20:	f7f9 fdda 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f24:	b908      	cbnz	r0, 8006f2a <_dtoa_r+0x162>
 8006f26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f2a:	f1ba 0f16 	cmp.w	sl, #22
 8006f2e:	d859      	bhi.n	8006fe4 <_dtoa_r+0x21c>
 8006f30:	4970      	ldr	r1, [pc, #448]	; (80070f4 <_dtoa_r+0x32c>)
 8006f32:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006f3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f3e:	f7f9 fdf3 	bl	8000b28 <__aeabi_dcmpgt>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	d050      	beq.n	8006fe8 <_dtoa_r+0x220>
 8006f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006f50:	1b5d      	subs	r5, r3, r5
 8006f52:	f1b5 0801 	subs.w	r8, r5, #1
 8006f56:	bf49      	itett	mi
 8006f58:	f1c5 0301 	rsbmi	r3, r5, #1
 8006f5c:	2300      	movpl	r3, #0
 8006f5e:	9305      	strmi	r3, [sp, #20]
 8006f60:	f04f 0800 	movmi.w	r8, #0
 8006f64:	bf58      	it	pl
 8006f66:	9305      	strpl	r3, [sp, #20]
 8006f68:	f1ba 0f00 	cmp.w	sl, #0
 8006f6c:	db3e      	blt.n	8006fec <_dtoa_r+0x224>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	44d0      	add	r8, sl
 8006f72:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006f76:	9307      	str	r3, [sp, #28]
 8006f78:	9b06      	ldr	r3, [sp, #24]
 8006f7a:	2b09      	cmp	r3, #9
 8006f7c:	f200 8090 	bhi.w	80070a0 <_dtoa_r+0x2d8>
 8006f80:	2b05      	cmp	r3, #5
 8006f82:	bfc4      	itt	gt
 8006f84:	3b04      	subgt	r3, #4
 8006f86:	9306      	strgt	r3, [sp, #24]
 8006f88:	9b06      	ldr	r3, [sp, #24]
 8006f8a:	f1a3 0302 	sub.w	r3, r3, #2
 8006f8e:	bfcc      	ite	gt
 8006f90:	2500      	movgt	r5, #0
 8006f92:	2501      	movle	r5, #1
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	f200 808f 	bhi.w	80070b8 <_dtoa_r+0x2f0>
 8006f9a:	e8df f003 	tbb	[pc, r3]
 8006f9e:	7f7d      	.short	0x7f7d
 8006fa0:	7131      	.short	0x7131
 8006fa2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006fa6:	441d      	add	r5, r3
 8006fa8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006fac:	2820      	cmp	r0, #32
 8006fae:	dd13      	ble.n	8006fd8 <_dtoa_r+0x210>
 8006fb0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006fb4:	9b00      	ldr	r3, [sp, #0]
 8006fb6:	fa08 f800 	lsl.w	r8, r8, r0
 8006fba:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006fbe:	fa23 f000 	lsr.w	r0, r3, r0
 8006fc2:	ea48 0000 	orr.w	r0, r8, r0
 8006fc6:	f7f9 faa5 	bl	8000514 <__aeabi_ui2d>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4682      	mov	sl, r0
 8006fce:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006fd2:	3d01      	subs	r5, #1
 8006fd4:	9313      	str	r3, [sp, #76]	; 0x4c
 8006fd6:	e772      	b.n	8006ebe <_dtoa_r+0xf6>
 8006fd8:	9b00      	ldr	r3, [sp, #0]
 8006fda:	f1c0 0020 	rsb	r0, r0, #32
 8006fde:	fa03 f000 	lsl.w	r0, r3, r0
 8006fe2:	e7f0      	b.n	8006fc6 <_dtoa_r+0x1fe>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e7b1      	b.n	8006f4c <_dtoa_r+0x184>
 8006fe8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006fea:	e7b0      	b.n	8006f4e <_dtoa_r+0x186>
 8006fec:	9b05      	ldr	r3, [sp, #20]
 8006fee:	eba3 030a 	sub.w	r3, r3, sl
 8006ff2:	9305      	str	r3, [sp, #20]
 8006ff4:	f1ca 0300 	rsb	r3, sl, #0
 8006ff8:	9307      	str	r3, [sp, #28]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	930e      	str	r3, [sp, #56]	; 0x38
 8006ffe:	e7bb      	b.n	8006f78 <_dtoa_r+0x1b0>
 8007000:	2301      	movs	r3, #1
 8007002:	930a      	str	r3, [sp, #40]	; 0x28
 8007004:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007006:	2b00      	cmp	r3, #0
 8007008:	dd59      	ble.n	80070be <_dtoa_r+0x2f6>
 800700a:	9302      	str	r3, [sp, #8]
 800700c:	4699      	mov	r9, r3
 800700e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007010:	2200      	movs	r2, #0
 8007012:	6072      	str	r2, [r6, #4]
 8007014:	2204      	movs	r2, #4
 8007016:	f102 0014 	add.w	r0, r2, #20
 800701a:	4298      	cmp	r0, r3
 800701c:	6871      	ldr	r1, [r6, #4]
 800701e:	d953      	bls.n	80070c8 <_dtoa_r+0x300>
 8007020:	4620      	mov	r0, r4
 8007022:	f001 f8a7 	bl	8008174 <_Balloc>
 8007026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007028:	6030      	str	r0, [r6, #0]
 800702a:	f1b9 0f0e 	cmp.w	r9, #14
 800702e:	f8d3 b000 	ldr.w	fp, [r3]
 8007032:	f200 80e6 	bhi.w	8007202 <_dtoa_r+0x43a>
 8007036:	2d00      	cmp	r5, #0
 8007038:	f000 80e3 	beq.w	8007202 <_dtoa_r+0x43a>
 800703c:	ed9d 7b00 	vldr	d7, [sp]
 8007040:	f1ba 0f00 	cmp.w	sl, #0
 8007044:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007048:	dd74      	ble.n	8007134 <_dtoa_r+0x36c>
 800704a:	4a2a      	ldr	r2, [pc, #168]	; (80070f4 <_dtoa_r+0x32c>)
 800704c:	f00a 030f 	and.w	r3, sl, #15
 8007050:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007054:	ed93 7b00 	vldr	d7, [r3]
 8007058:	ea4f 162a 	mov.w	r6, sl, asr #4
 800705c:	06f0      	lsls	r0, r6, #27
 800705e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007062:	d565      	bpl.n	8007130 <_dtoa_r+0x368>
 8007064:	4b24      	ldr	r3, [pc, #144]	; (80070f8 <_dtoa_r+0x330>)
 8007066:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800706a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800706e:	f7f9 fbf5 	bl	800085c <__aeabi_ddiv>
 8007072:	e9cd 0100 	strd	r0, r1, [sp]
 8007076:	f006 060f 	and.w	r6, r6, #15
 800707a:	2503      	movs	r5, #3
 800707c:	4f1e      	ldr	r7, [pc, #120]	; (80070f8 <_dtoa_r+0x330>)
 800707e:	e04c      	b.n	800711a <_dtoa_r+0x352>
 8007080:	2301      	movs	r3, #1
 8007082:	930a      	str	r3, [sp, #40]	; 0x28
 8007084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007086:	4453      	add	r3, sl
 8007088:	f103 0901 	add.w	r9, r3, #1
 800708c:	9302      	str	r3, [sp, #8]
 800708e:	464b      	mov	r3, r9
 8007090:	2b01      	cmp	r3, #1
 8007092:	bfb8      	it	lt
 8007094:	2301      	movlt	r3, #1
 8007096:	e7ba      	b.n	800700e <_dtoa_r+0x246>
 8007098:	2300      	movs	r3, #0
 800709a:	e7b2      	b.n	8007002 <_dtoa_r+0x23a>
 800709c:	2300      	movs	r3, #0
 800709e:	e7f0      	b.n	8007082 <_dtoa_r+0x2ba>
 80070a0:	2501      	movs	r5, #1
 80070a2:	2300      	movs	r3, #0
 80070a4:	9306      	str	r3, [sp, #24]
 80070a6:	950a      	str	r5, [sp, #40]	; 0x28
 80070a8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ac:	9302      	str	r3, [sp, #8]
 80070ae:	4699      	mov	r9, r3
 80070b0:	2200      	movs	r2, #0
 80070b2:	2312      	movs	r3, #18
 80070b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80070b6:	e7aa      	b.n	800700e <_dtoa_r+0x246>
 80070b8:	2301      	movs	r3, #1
 80070ba:	930a      	str	r3, [sp, #40]	; 0x28
 80070bc:	e7f4      	b.n	80070a8 <_dtoa_r+0x2e0>
 80070be:	2301      	movs	r3, #1
 80070c0:	9302      	str	r3, [sp, #8]
 80070c2:	4699      	mov	r9, r3
 80070c4:	461a      	mov	r2, r3
 80070c6:	e7f5      	b.n	80070b4 <_dtoa_r+0x2ec>
 80070c8:	3101      	adds	r1, #1
 80070ca:	6071      	str	r1, [r6, #4]
 80070cc:	0052      	lsls	r2, r2, #1
 80070ce:	e7a2      	b.n	8007016 <_dtoa_r+0x24e>
 80070d0:	636f4361 	.word	0x636f4361
 80070d4:	3fd287a7 	.word	0x3fd287a7
 80070d8:	8b60c8b3 	.word	0x8b60c8b3
 80070dc:	3fc68a28 	.word	0x3fc68a28
 80070e0:	509f79fb 	.word	0x509f79fb
 80070e4:	3fd34413 	.word	0x3fd34413
 80070e8:	7ff00000 	.word	0x7ff00000
 80070ec:	080096dd 	.word	0x080096dd
 80070f0:	3ff80000 	.word	0x3ff80000
 80070f4:	08009800 	.word	0x08009800
 80070f8:	080097d8 	.word	0x080097d8
 80070fc:	08009761 	.word	0x08009761
 8007100:	07f1      	lsls	r1, r6, #31
 8007102:	d508      	bpl.n	8007116 <_dtoa_r+0x34e>
 8007104:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800710c:	f7f9 fa7c 	bl	8000608 <__aeabi_dmul>
 8007110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007114:	3501      	adds	r5, #1
 8007116:	1076      	asrs	r6, r6, #1
 8007118:	3708      	adds	r7, #8
 800711a:	2e00      	cmp	r6, #0
 800711c:	d1f0      	bne.n	8007100 <_dtoa_r+0x338>
 800711e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007122:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007126:	f7f9 fb99 	bl	800085c <__aeabi_ddiv>
 800712a:	e9cd 0100 	strd	r0, r1, [sp]
 800712e:	e01a      	b.n	8007166 <_dtoa_r+0x39e>
 8007130:	2502      	movs	r5, #2
 8007132:	e7a3      	b.n	800707c <_dtoa_r+0x2b4>
 8007134:	f000 80a0 	beq.w	8007278 <_dtoa_r+0x4b0>
 8007138:	f1ca 0600 	rsb	r6, sl, #0
 800713c:	4b9f      	ldr	r3, [pc, #636]	; (80073bc <_dtoa_r+0x5f4>)
 800713e:	4fa0      	ldr	r7, [pc, #640]	; (80073c0 <_dtoa_r+0x5f8>)
 8007140:	f006 020f 	and.w	r2, r6, #15
 8007144:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007150:	f7f9 fa5a 	bl	8000608 <__aeabi_dmul>
 8007154:	e9cd 0100 	strd	r0, r1, [sp]
 8007158:	1136      	asrs	r6, r6, #4
 800715a:	2300      	movs	r3, #0
 800715c:	2502      	movs	r5, #2
 800715e:	2e00      	cmp	r6, #0
 8007160:	d17f      	bne.n	8007262 <_dtoa_r+0x49a>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1e1      	bne.n	800712a <_dtoa_r+0x362>
 8007166:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 8087 	beq.w	800727c <_dtoa_r+0x4b4>
 800716e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007172:	2200      	movs	r2, #0
 8007174:	4b93      	ldr	r3, [pc, #588]	; (80073c4 <_dtoa_r+0x5fc>)
 8007176:	4630      	mov	r0, r6
 8007178:	4639      	mov	r1, r7
 800717a:	f7f9 fcb7 	bl	8000aec <__aeabi_dcmplt>
 800717e:	2800      	cmp	r0, #0
 8007180:	d07c      	beq.n	800727c <_dtoa_r+0x4b4>
 8007182:	f1b9 0f00 	cmp.w	r9, #0
 8007186:	d079      	beq.n	800727c <_dtoa_r+0x4b4>
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	dd35      	ble.n	80071fa <_dtoa_r+0x432>
 800718e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007192:	9308      	str	r3, [sp, #32]
 8007194:	4639      	mov	r1, r7
 8007196:	2200      	movs	r2, #0
 8007198:	4b8b      	ldr	r3, [pc, #556]	; (80073c8 <_dtoa_r+0x600>)
 800719a:	4630      	mov	r0, r6
 800719c:	f7f9 fa34 	bl	8000608 <__aeabi_dmul>
 80071a0:	e9cd 0100 	strd	r0, r1, [sp]
 80071a4:	9f02      	ldr	r7, [sp, #8]
 80071a6:	3501      	adds	r5, #1
 80071a8:	4628      	mov	r0, r5
 80071aa:	f7f9 f9c3 	bl	8000534 <__aeabi_i2d>
 80071ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071b2:	f7f9 fa29 	bl	8000608 <__aeabi_dmul>
 80071b6:	2200      	movs	r2, #0
 80071b8:	4b84      	ldr	r3, [pc, #528]	; (80073cc <_dtoa_r+0x604>)
 80071ba:	f7f9 f86f 	bl	800029c <__adddf3>
 80071be:	4605      	mov	r5, r0
 80071c0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80071c4:	2f00      	cmp	r7, #0
 80071c6:	d15d      	bne.n	8007284 <_dtoa_r+0x4bc>
 80071c8:	2200      	movs	r2, #0
 80071ca:	4b81      	ldr	r3, [pc, #516]	; (80073d0 <_dtoa_r+0x608>)
 80071cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071d0:	f7f9 f862 	bl	8000298 <__aeabi_dsub>
 80071d4:	462a      	mov	r2, r5
 80071d6:	4633      	mov	r3, r6
 80071d8:	e9cd 0100 	strd	r0, r1, [sp]
 80071dc:	f7f9 fca4 	bl	8000b28 <__aeabi_dcmpgt>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f040 8288 	bne.w	80076f6 <_dtoa_r+0x92e>
 80071e6:	462a      	mov	r2, r5
 80071e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80071ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071f0:	f7f9 fc7c 	bl	8000aec <__aeabi_dcmplt>
 80071f4:	2800      	cmp	r0, #0
 80071f6:	f040 827c 	bne.w	80076f2 <_dtoa_r+0x92a>
 80071fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071fe:	e9cd 2300 	strd	r2, r3, [sp]
 8007202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007204:	2b00      	cmp	r3, #0
 8007206:	f2c0 8150 	blt.w	80074aa <_dtoa_r+0x6e2>
 800720a:	f1ba 0f0e 	cmp.w	sl, #14
 800720e:	f300 814c 	bgt.w	80074aa <_dtoa_r+0x6e2>
 8007212:	4b6a      	ldr	r3, [pc, #424]	; (80073bc <_dtoa_r+0x5f4>)
 8007214:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007218:	ed93 7b00 	vldr	d7, [r3]
 800721c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007224:	f280 80d8 	bge.w	80073d8 <_dtoa_r+0x610>
 8007228:	f1b9 0f00 	cmp.w	r9, #0
 800722c:	f300 80d4 	bgt.w	80073d8 <_dtoa_r+0x610>
 8007230:	f040 825e 	bne.w	80076f0 <_dtoa_r+0x928>
 8007234:	2200      	movs	r2, #0
 8007236:	4b66      	ldr	r3, [pc, #408]	; (80073d0 <_dtoa_r+0x608>)
 8007238:	ec51 0b17 	vmov	r0, r1, d7
 800723c:	f7f9 f9e4 	bl	8000608 <__aeabi_dmul>
 8007240:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007244:	f7f9 fc66 	bl	8000b14 <__aeabi_dcmpge>
 8007248:	464f      	mov	r7, r9
 800724a:	464e      	mov	r6, r9
 800724c:	2800      	cmp	r0, #0
 800724e:	f040 8234 	bne.w	80076ba <_dtoa_r+0x8f2>
 8007252:	2331      	movs	r3, #49	; 0x31
 8007254:	f10b 0501 	add.w	r5, fp, #1
 8007258:	f88b 3000 	strb.w	r3, [fp]
 800725c:	f10a 0a01 	add.w	sl, sl, #1
 8007260:	e22f      	b.n	80076c2 <_dtoa_r+0x8fa>
 8007262:	07f2      	lsls	r2, r6, #31
 8007264:	d505      	bpl.n	8007272 <_dtoa_r+0x4aa>
 8007266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800726a:	f7f9 f9cd 	bl	8000608 <__aeabi_dmul>
 800726e:	3501      	adds	r5, #1
 8007270:	2301      	movs	r3, #1
 8007272:	1076      	asrs	r6, r6, #1
 8007274:	3708      	adds	r7, #8
 8007276:	e772      	b.n	800715e <_dtoa_r+0x396>
 8007278:	2502      	movs	r5, #2
 800727a:	e774      	b.n	8007166 <_dtoa_r+0x39e>
 800727c:	f8cd a020 	str.w	sl, [sp, #32]
 8007280:	464f      	mov	r7, r9
 8007282:	e791      	b.n	80071a8 <_dtoa_r+0x3e0>
 8007284:	4b4d      	ldr	r3, [pc, #308]	; (80073bc <_dtoa_r+0x5f4>)
 8007286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800728a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800728e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007290:	2b00      	cmp	r3, #0
 8007292:	d047      	beq.n	8007324 <_dtoa_r+0x55c>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
 8007298:	2000      	movs	r0, #0
 800729a:	494e      	ldr	r1, [pc, #312]	; (80073d4 <_dtoa_r+0x60c>)
 800729c:	f7f9 fade 	bl	800085c <__aeabi_ddiv>
 80072a0:	462a      	mov	r2, r5
 80072a2:	4633      	mov	r3, r6
 80072a4:	f7f8 fff8 	bl	8000298 <__aeabi_dsub>
 80072a8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80072ac:	465d      	mov	r5, fp
 80072ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072b2:	f7f9 fc59 	bl	8000b68 <__aeabi_d2iz>
 80072b6:	4606      	mov	r6, r0
 80072b8:	f7f9 f93c 	bl	8000534 <__aeabi_i2d>
 80072bc:	4602      	mov	r2, r0
 80072be:	460b      	mov	r3, r1
 80072c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072c4:	f7f8 ffe8 	bl	8000298 <__aeabi_dsub>
 80072c8:	3630      	adds	r6, #48	; 0x30
 80072ca:	f805 6b01 	strb.w	r6, [r5], #1
 80072ce:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80072d2:	e9cd 0100 	strd	r0, r1, [sp]
 80072d6:	f7f9 fc09 	bl	8000aec <__aeabi_dcmplt>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d163      	bne.n	80073a6 <_dtoa_r+0x5de>
 80072de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072e2:	2000      	movs	r0, #0
 80072e4:	4937      	ldr	r1, [pc, #220]	; (80073c4 <_dtoa_r+0x5fc>)
 80072e6:	f7f8 ffd7 	bl	8000298 <__aeabi_dsub>
 80072ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80072ee:	f7f9 fbfd 	bl	8000aec <__aeabi_dcmplt>
 80072f2:	2800      	cmp	r0, #0
 80072f4:	f040 80b7 	bne.w	8007466 <_dtoa_r+0x69e>
 80072f8:	eba5 030b 	sub.w	r3, r5, fp
 80072fc:	429f      	cmp	r7, r3
 80072fe:	f77f af7c 	ble.w	80071fa <_dtoa_r+0x432>
 8007302:	2200      	movs	r2, #0
 8007304:	4b30      	ldr	r3, [pc, #192]	; (80073c8 <_dtoa_r+0x600>)
 8007306:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800730a:	f7f9 f97d 	bl	8000608 <__aeabi_dmul>
 800730e:	2200      	movs	r2, #0
 8007310:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007314:	4b2c      	ldr	r3, [pc, #176]	; (80073c8 <_dtoa_r+0x600>)
 8007316:	e9dd 0100 	ldrd	r0, r1, [sp]
 800731a:	f7f9 f975 	bl	8000608 <__aeabi_dmul>
 800731e:	e9cd 0100 	strd	r0, r1, [sp]
 8007322:	e7c4      	b.n	80072ae <_dtoa_r+0x4e6>
 8007324:	462a      	mov	r2, r5
 8007326:	4633      	mov	r3, r6
 8007328:	f7f9 f96e 	bl	8000608 <__aeabi_dmul>
 800732c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007330:	eb0b 0507 	add.w	r5, fp, r7
 8007334:	465e      	mov	r6, fp
 8007336:	e9dd 0100 	ldrd	r0, r1, [sp]
 800733a:	f7f9 fc15 	bl	8000b68 <__aeabi_d2iz>
 800733e:	4607      	mov	r7, r0
 8007340:	f7f9 f8f8 	bl	8000534 <__aeabi_i2d>
 8007344:	3730      	adds	r7, #48	; 0x30
 8007346:	4602      	mov	r2, r0
 8007348:	460b      	mov	r3, r1
 800734a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800734e:	f7f8 ffa3 	bl	8000298 <__aeabi_dsub>
 8007352:	f806 7b01 	strb.w	r7, [r6], #1
 8007356:	42ae      	cmp	r6, r5
 8007358:	e9cd 0100 	strd	r0, r1, [sp]
 800735c:	f04f 0200 	mov.w	r2, #0
 8007360:	d126      	bne.n	80073b0 <_dtoa_r+0x5e8>
 8007362:	4b1c      	ldr	r3, [pc, #112]	; (80073d4 <_dtoa_r+0x60c>)
 8007364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007368:	f7f8 ff98 	bl	800029c <__adddf3>
 800736c:	4602      	mov	r2, r0
 800736e:	460b      	mov	r3, r1
 8007370:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007374:	f7f9 fbd8 	bl	8000b28 <__aeabi_dcmpgt>
 8007378:	2800      	cmp	r0, #0
 800737a:	d174      	bne.n	8007466 <_dtoa_r+0x69e>
 800737c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007380:	2000      	movs	r0, #0
 8007382:	4914      	ldr	r1, [pc, #80]	; (80073d4 <_dtoa_r+0x60c>)
 8007384:	f7f8 ff88 	bl	8000298 <__aeabi_dsub>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007390:	f7f9 fbac 	bl	8000aec <__aeabi_dcmplt>
 8007394:	2800      	cmp	r0, #0
 8007396:	f43f af30 	beq.w	80071fa <_dtoa_r+0x432>
 800739a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800739e:	2b30      	cmp	r3, #48	; 0x30
 80073a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80073a4:	d002      	beq.n	80073ac <_dtoa_r+0x5e4>
 80073a6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80073aa:	e04a      	b.n	8007442 <_dtoa_r+0x67a>
 80073ac:	4615      	mov	r5, r2
 80073ae:	e7f4      	b.n	800739a <_dtoa_r+0x5d2>
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <_dtoa_r+0x600>)
 80073b2:	f7f9 f929 	bl	8000608 <__aeabi_dmul>
 80073b6:	e9cd 0100 	strd	r0, r1, [sp]
 80073ba:	e7bc      	b.n	8007336 <_dtoa_r+0x56e>
 80073bc:	08009800 	.word	0x08009800
 80073c0:	080097d8 	.word	0x080097d8
 80073c4:	3ff00000 	.word	0x3ff00000
 80073c8:	40240000 	.word	0x40240000
 80073cc:	401c0000 	.word	0x401c0000
 80073d0:	40140000 	.word	0x40140000
 80073d4:	3fe00000 	.word	0x3fe00000
 80073d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80073dc:	465d      	mov	r5, fp
 80073de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073e2:	4630      	mov	r0, r6
 80073e4:	4639      	mov	r1, r7
 80073e6:	f7f9 fa39 	bl	800085c <__aeabi_ddiv>
 80073ea:	f7f9 fbbd 	bl	8000b68 <__aeabi_d2iz>
 80073ee:	4680      	mov	r8, r0
 80073f0:	f7f9 f8a0 	bl	8000534 <__aeabi_i2d>
 80073f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073f8:	f7f9 f906 	bl	8000608 <__aeabi_dmul>
 80073fc:	4602      	mov	r2, r0
 80073fe:	460b      	mov	r3, r1
 8007400:	4630      	mov	r0, r6
 8007402:	4639      	mov	r1, r7
 8007404:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007408:	f7f8 ff46 	bl	8000298 <__aeabi_dsub>
 800740c:	f805 6b01 	strb.w	r6, [r5], #1
 8007410:	eba5 060b 	sub.w	r6, r5, fp
 8007414:	45b1      	cmp	r9, r6
 8007416:	4602      	mov	r2, r0
 8007418:	460b      	mov	r3, r1
 800741a:	d139      	bne.n	8007490 <_dtoa_r+0x6c8>
 800741c:	f7f8 ff3e 	bl	800029c <__adddf3>
 8007420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007424:	4606      	mov	r6, r0
 8007426:	460f      	mov	r7, r1
 8007428:	f7f9 fb7e 	bl	8000b28 <__aeabi_dcmpgt>
 800742c:	b9c8      	cbnz	r0, 8007462 <_dtoa_r+0x69a>
 800742e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007432:	4630      	mov	r0, r6
 8007434:	4639      	mov	r1, r7
 8007436:	f7f9 fb4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800743a:	b110      	cbz	r0, 8007442 <_dtoa_r+0x67a>
 800743c:	f018 0f01 	tst.w	r8, #1
 8007440:	d10f      	bne.n	8007462 <_dtoa_r+0x69a>
 8007442:	9904      	ldr	r1, [sp, #16]
 8007444:	4620      	mov	r0, r4
 8007446:	f000 fec9 	bl	80081dc <_Bfree>
 800744a:	2300      	movs	r3, #0
 800744c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800744e:	702b      	strb	r3, [r5, #0]
 8007450:	f10a 0301 	add.w	r3, sl, #1
 8007454:	6013      	str	r3, [r2, #0]
 8007456:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 8241 	beq.w	80078e0 <_dtoa_r+0xb18>
 800745e:	601d      	str	r5, [r3, #0]
 8007460:	e23e      	b.n	80078e0 <_dtoa_r+0xb18>
 8007462:	f8cd a020 	str.w	sl, [sp, #32]
 8007466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800746a:	2a39      	cmp	r2, #57	; 0x39
 800746c:	f105 33ff 	add.w	r3, r5, #4294967295
 8007470:	d108      	bne.n	8007484 <_dtoa_r+0x6bc>
 8007472:	459b      	cmp	fp, r3
 8007474:	d10a      	bne.n	800748c <_dtoa_r+0x6c4>
 8007476:	9b08      	ldr	r3, [sp, #32]
 8007478:	3301      	adds	r3, #1
 800747a:	9308      	str	r3, [sp, #32]
 800747c:	2330      	movs	r3, #48	; 0x30
 800747e:	f88b 3000 	strb.w	r3, [fp]
 8007482:	465b      	mov	r3, fp
 8007484:	781a      	ldrb	r2, [r3, #0]
 8007486:	3201      	adds	r2, #1
 8007488:	701a      	strb	r2, [r3, #0]
 800748a:	e78c      	b.n	80073a6 <_dtoa_r+0x5de>
 800748c:	461d      	mov	r5, r3
 800748e:	e7ea      	b.n	8007466 <_dtoa_r+0x69e>
 8007490:	2200      	movs	r2, #0
 8007492:	4b9b      	ldr	r3, [pc, #620]	; (8007700 <_dtoa_r+0x938>)
 8007494:	f7f9 f8b8 	bl	8000608 <__aeabi_dmul>
 8007498:	2200      	movs	r2, #0
 800749a:	2300      	movs	r3, #0
 800749c:	4606      	mov	r6, r0
 800749e:	460f      	mov	r7, r1
 80074a0:	f7f9 fb1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	d09a      	beq.n	80073de <_dtoa_r+0x616>
 80074a8:	e7cb      	b.n	8007442 <_dtoa_r+0x67a>
 80074aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	f000 808b 	beq.w	80075c8 <_dtoa_r+0x800>
 80074b2:	9a06      	ldr	r2, [sp, #24]
 80074b4:	2a01      	cmp	r2, #1
 80074b6:	dc6e      	bgt.n	8007596 <_dtoa_r+0x7ce>
 80074b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	d067      	beq.n	800758e <_dtoa_r+0x7c6>
 80074be:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074c2:	9f07      	ldr	r7, [sp, #28]
 80074c4:	9d05      	ldr	r5, [sp, #20]
 80074c6:	9a05      	ldr	r2, [sp, #20]
 80074c8:	2101      	movs	r1, #1
 80074ca:	441a      	add	r2, r3
 80074cc:	4620      	mov	r0, r4
 80074ce:	9205      	str	r2, [sp, #20]
 80074d0:	4498      	add	r8, r3
 80074d2:	f000 ff61 	bl	8008398 <__i2b>
 80074d6:	4606      	mov	r6, r0
 80074d8:	2d00      	cmp	r5, #0
 80074da:	dd0c      	ble.n	80074f6 <_dtoa_r+0x72e>
 80074dc:	f1b8 0f00 	cmp.w	r8, #0
 80074e0:	dd09      	ble.n	80074f6 <_dtoa_r+0x72e>
 80074e2:	4545      	cmp	r5, r8
 80074e4:	9a05      	ldr	r2, [sp, #20]
 80074e6:	462b      	mov	r3, r5
 80074e8:	bfa8      	it	ge
 80074ea:	4643      	movge	r3, r8
 80074ec:	1ad2      	subs	r2, r2, r3
 80074ee:	9205      	str	r2, [sp, #20]
 80074f0:	1aed      	subs	r5, r5, r3
 80074f2:	eba8 0803 	sub.w	r8, r8, r3
 80074f6:	9b07      	ldr	r3, [sp, #28]
 80074f8:	b1eb      	cbz	r3, 8007536 <_dtoa_r+0x76e>
 80074fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d067      	beq.n	80075d0 <_dtoa_r+0x808>
 8007500:	b18f      	cbz	r7, 8007526 <_dtoa_r+0x75e>
 8007502:	4631      	mov	r1, r6
 8007504:	463a      	mov	r2, r7
 8007506:	4620      	mov	r0, r4
 8007508:	f000 ffe6 	bl	80084d8 <__pow5mult>
 800750c:	9a04      	ldr	r2, [sp, #16]
 800750e:	4601      	mov	r1, r0
 8007510:	4606      	mov	r6, r0
 8007512:	4620      	mov	r0, r4
 8007514:	f000 ff49 	bl	80083aa <__multiply>
 8007518:	9904      	ldr	r1, [sp, #16]
 800751a:	9008      	str	r0, [sp, #32]
 800751c:	4620      	mov	r0, r4
 800751e:	f000 fe5d 	bl	80081dc <_Bfree>
 8007522:	9b08      	ldr	r3, [sp, #32]
 8007524:	9304      	str	r3, [sp, #16]
 8007526:	9b07      	ldr	r3, [sp, #28]
 8007528:	1bda      	subs	r2, r3, r7
 800752a:	d004      	beq.n	8007536 <_dtoa_r+0x76e>
 800752c:	9904      	ldr	r1, [sp, #16]
 800752e:	4620      	mov	r0, r4
 8007530:	f000 ffd2 	bl	80084d8 <__pow5mult>
 8007534:	9004      	str	r0, [sp, #16]
 8007536:	2101      	movs	r1, #1
 8007538:	4620      	mov	r0, r4
 800753a:	f000 ff2d 	bl	8008398 <__i2b>
 800753e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007540:	4607      	mov	r7, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 81d0 	beq.w	80078e8 <_dtoa_r+0xb20>
 8007548:	461a      	mov	r2, r3
 800754a:	4601      	mov	r1, r0
 800754c:	4620      	mov	r0, r4
 800754e:	f000 ffc3 	bl	80084d8 <__pow5mult>
 8007552:	9b06      	ldr	r3, [sp, #24]
 8007554:	2b01      	cmp	r3, #1
 8007556:	4607      	mov	r7, r0
 8007558:	dc40      	bgt.n	80075dc <_dtoa_r+0x814>
 800755a:	9b00      	ldr	r3, [sp, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d139      	bne.n	80075d4 <_dtoa_r+0x80c>
 8007560:	9b01      	ldr	r3, [sp, #4]
 8007562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007566:	2b00      	cmp	r3, #0
 8007568:	d136      	bne.n	80075d8 <_dtoa_r+0x810>
 800756a:	9b01      	ldr	r3, [sp, #4]
 800756c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007570:	0d1b      	lsrs	r3, r3, #20
 8007572:	051b      	lsls	r3, r3, #20
 8007574:	b12b      	cbz	r3, 8007582 <_dtoa_r+0x7ba>
 8007576:	9b05      	ldr	r3, [sp, #20]
 8007578:	3301      	adds	r3, #1
 800757a:	9305      	str	r3, [sp, #20]
 800757c:	f108 0801 	add.w	r8, r8, #1
 8007580:	2301      	movs	r3, #1
 8007582:	9307      	str	r3, [sp, #28]
 8007584:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007586:	2b00      	cmp	r3, #0
 8007588:	d12a      	bne.n	80075e0 <_dtoa_r+0x818>
 800758a:	2001      	movs	r0, #1
 800758c:	e030      	b.n	80075f0 <_dtoa_r+0x828>
 800758e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007590:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007594:	e795      	b.n	80074c2 <_dtoa_r+0x6fa>
 8007596:	9b07      	ldr	r3, [sp, #28]
 8007598:	f109 37ff 	add.w	r7, r9, #4294967295
 800759c:	42bb      	cmp	r3, r7
 800759e:	bfbf      	itttt	lt
 80075a0:	9b07      	ldrlt	r3, [sp, #28]
 80075a2:	9707      	strlt	r7, [sp, #28]
 80075a4:	1afa      	sublt	r2, r7, r3
 80075a6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80075a8:	bfbb      	ittet	lt
 80075aa:	189b      	addlt	r3, r3, r2
 80075ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80075ae:	1bdf      	subge	r7, r3, r7
 80075b0:	2700      	movlt	r7, #0
 80075b2:	f1b9 0f00 	cmp.w	r9, #0
 80075b6:	bfb5      	itete	lt
 80075b8:	9b05      	ldrlt	r3, [sp, #20]
 80075ba:	9d05      	ldrge	r5, [sp, #20]
 80075bc:	eba3 0509 	sublt.w	r5, r3, r9
 80075c0:	464b      	movge	r3, r9
 80075c2:	bfb8      	it	lt
 80075c4:	2300      	movlt	r3, #0
 80075c6:	e77e      	b.n	80074c6 <_dtoa_r+0x6fe>
 80075c8:	9f07      	ldr	r7, [sp, #28]
 80075ca:	9d05      	ldr	r5, [sp, #20]
 80075cc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80075ce:	e783      	b.n	80074d8 <_dtoa_r+0x710>
 80075d0:	9a07      	ldr	r2, [sp, #28]
 80075d2:	e7ab      	b.n	800752c <_dtoa_r+0x764>
 80075d4:	2300      	movs	r3, #0
 80075d6:	e7d4      	b.n	8007582 <_dtoa_r+0x7ba>
 80075d8:	9b00      	ldr	r3, [sp, #0]
 80075da:	e7d2      	b.n	8007582 <_dtoa_r+0x7ba>
 80075dc:	2300      	movs	r3, #0
 80075de:	9307      	str	r3, [sp, #28]
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80075e6:	6918      	ldr	r0, [r3, #16]
 80075e8:	f000 fe88 	bl	80082fc <__hi0bits>
 80075ec:	f1c0 0020 	rsb	r0, r0, #32
 80075f0:	4440      	add	r0, r8
 80075f2:	f010 001f 	ands.w	r0, r0, #31
 80075f6:	d047      	beq.n	8007688 <_dtoa_r+0x8c0>
 80075f8:	f1c0 0320 	rsb	r3, r0, #32
 80075fc:	2b04      	cmp	r3, #4
 80075fe:	dd3b      	ble.n	8007678 <_dtoa_r+0x8b0>
 8007600:	9b05      	ldr	r3, [sp, #20]
 8007602:	f1c0 001c 	rsb	r0, r0, #28
 8007606:	4403      	add	r3, r0
 8007608:	9305      	str	r3, [sp, #20]
 800760a:	4405      	add	r5, r0
 800760c:	4480      	add	r8, r0
 800760e:	9b05      	ldr	r3, [sp, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	dd05      	ble.n	8007620 <_dtoa_r+0x858>
 8007614:	461a      	mov	r2, r3
 8007616:	9904      	ldr	r1, [sp, #16]
 8007618:	4620      	mov	r0, r4
 800761a:	f000 ffab 	bl	8008574 <__lshift>
 800761e:	9004      	str	r0, [sp, #16]
 8007620:	f1b8 0f00 	cmp.w	r8, #0
 8007624:	dd05      	ble.n	8007632 <_dtoa_r+0x86a>
 8007626:	4639      	mov	r1, r7
 8007628:	4642      	mov	r2, r8
 800762a:	4620      	mov	r0, r4
 800762c:	f000 ffa2 	bl	8008574 <__lshift>
 8007630:	4607      	mov	r7, r0
 8007632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007634:	b353      	cbz	r3, 800768c <_dtoa_r+0x8c4>
 8007636:	4639      	mov	r1, r7
 8007638:	9804      	ldr	r0, [sp, #16]
 800763a:	f000 ffef 	bl	800861c <__mcmp>
 800763e:	2800      	cmp	r0, #0
 8007640:	da24      	bge.n	800768c <_dtoa_r+0x8c4>
 8007642:	2300      	movs	r3, #0
 8007644:	220a      	movs	r2, #10
 8007646:	9904      	ldr	r1, [sp, #16]
 8007648:	4620      	mov	r0, r4
 800764a:	f000 fdde 	bl	800820a <__multadd>
 800764e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007650:	9004      	str	r0, [sp, #16]
 8007652:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 814d 	beq.w	80078f6 <_dtoa_r+0xb2e>
 800765c:	2300      	movs	r3, #0
 800765e:	4631      	mov	r1, r6
 8007660:	220a      	movs	r2, #10
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fdd1 	bl	800820a <__multadd>
 8007668:	9b02      	ldr	r3, [sp, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	4606      	mov	r6, r0
 800766e:	dc4f      	bgt.n	8007710 <_dtoa_r+0x948>
 8007670:	9b06      	ldr	r3, [sp, #24]
 8007672:	2b02      	cmp	r3, #2
 8007674:	dd4c      	ble.n	8007710 <_dtoa_r+0x948>
 8007676:	e011      	b.n	800769c <_dtoa_r+0x8d4>
 8007678:	d0c9      	beq.n	800760e <_dtoa_r+0x846>
 800767a:	9a05      	ldr	r2, [sp, #20]
 800767c:	331c      	adds	r3, #28
 800767e:	441a      	add	r2, r3
 8007680:	9205      	str	r2, [sp, #20]
 8007682:	441d      	add	r5, r3
 8007684:	4498      	add	r8, r3
 8007686:	e7c2      	b.n	800760e <_dtoa_r+0x846>
 8007688:	4603      	mov	r3, r0
 800768a:	e7f6      	b.n	800767a <_dtoa_r+0x8b2>
 800768c:	f1b9 0f00 	cmp.w	r9, #0
 8007690:	dc38      	bgt.n	8007704 <_dtoa_r+0x93c>
 8007692:	9b06      	ldr	r3, [sp, #24]
 8007694:	2b02      	cmp	r3, #2
 8007696:	dd35      	ble.n	8007704 <_dtoa_r+0x93c>
 8007698:	f8cd 9008 	str.w	r9, [sp, #8]
 800769c:	9b02      	ldr	r3, [sp, #8]
 800769e:	b963      	cbnz	r3, 80076ba <_dtoa_r+0x8f2>
 80076a0:	4639      	mov	r1, r7
 80076a2:	2205      	movs	r2, #5
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 fdb0 	bl	800820a <__multadd>
 80076aa:	4601      	mov	r1, r0
 80076ac:	4607      	mov	r7, r0
 80076ae:	9804      	ldr	r0, [sp, #16]
 80076b0:	f000 ffb4 	bl	800861c <__mcmp>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f73f adcc 	bgt.w	8007252 <_dtoa_r+0x48a>
 80076ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076bc:	465d      	mov	r5, fp
 80076be:	ea6f 0a03 	mvn.w	sl, r3
 80076c2:	f04f 0900 	mov.w	r9, #0
 80076c6:	4639      	mov	r1, r7
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 fd87 	bl	80081dc <_Bfree>
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	f43f aeb7 	beq.w	8007442 <_dtoa_r+0x67a>
 80076d4:	f1b9 0f00 	cmp.w	r9, #0
 80076d8:	d005      	beq.n	80076e6 <_dtoa_r+0x91e>
 80076da:	45b1      	cmp	r9, r6
 80076dc:	d003      	beq.n	80076e6 <_dtoa_r+0x91e>
 80076de:	4649      	mov	r1, r9
 80076e0:	4620      	mov	r0, r4
 80076e2:	f000 fd7b 	bl	80081dc <_Bfree>
 80076e6:	4631      	mov	r1, r6
 80076e8:	4620      	mov	r0, r4
 80076ea:	f000 fd77 	bl	80081dc <_Bfree>
 80076ee:	e6a8      	b.n	8007442 <_dtoa_r+0x67a>
 80076f0:	2700      	movs	r7, #0
 80076f2:	463e      	mov	r6, r7
 80076f4:	e7e1      	b.n	80076ba <_dtoa_r+0x8f2>
 80076f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80076fa:	463e      	mov	r6, r7
 80076fc:	e5a9      	b.n	8007252 <_dtoa_r+0x48a>
 80076fe:	bf00      	nop
 8007700:	40240000 	.word	0x40240000
 8007704:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007706:	f8cd 9008 	str.w	r9, [sp, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 80fa 	beq.w	8007904 <_dtoa_r+0xb3c>
 8007710:	2d00      	cmp	r5, #0
 8007712:	dd05      	ble.n	8007720 <_dtoa_r+0x958>
 8007714:	4631      	mov	r1, r6
 8007716:	462a      	mov	r2, r5
 8007718:	4620      	mov	r0, r4
 800771a:	f000 ff2b 	bl	8008574 <__lshift>
 800771e:	4606      	mov	r6, r0
 8007720:	9b07      	ldr	r3, [sp, #28]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d04c      	beq.n	80077c0 <_dtoa_r+0x9f8>
 8007726:	6871      	ldr	r1, [r6, #4]
 8007728:	4620      	mov	r0, r4
 800772a:	f000 fd23 	bl	8008174 <_Balloc>
 800772e:	6932      	ldr	r2, [r6, #16]
 8007730:	3202      	adds	r2, #2
 8007732:	4605      	mov	r5, r0
 8007734:	0092      	lsls	r2, r2, #2
 8007736:	f106 010c 	add.w	r1, r6, #12
 800773a:	300c      	adds	r0, #12
 800773c:	f7fd fd36 	bl	80051ac <memcpy>
 8007740:	2201      	movs	r2, #1
 8007742:	4629      	mov	r1, r5
 8007744:	4620      	mov	r0, r4
 8007746:	f000 ff15 	bl	8008574 <__lshift>
 800774a:	9b00      	ldr	r3, [sp, #0]
 800774c:	f8cd b014 	str.w	fp, [sp, #20]
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	46b1      	mov	r9, r6
 8007756:	9307      	str	r3, [sp, #28]
 8007758:	4606      	mov	r6, r0
 800775a:	4639      	mov	r1, r7
 800775c:	9804      	ldr	r0, [sp, #16]
 800775e:	f7ff faa5 	bl	8006cac <quorem>
 8007762:	4649      	mov	r1, r9
 8007764:	4605      	mov	r5, r0
 8007766:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800776a:	9804      	ldr	r0, [sp, #16]
 800776c:	f000 ff56 	bl	800861c <__mcmp>
 8007770:	4632      	mov	r2, r6
 8007772:	9000      	str	r0, [sp, #0]
 8007774:	4639      	mov	r1, r7
 8007776:	4620      	mov	r0, r4
 8007778:	f000 ff6a 	bl	8008650 <__mdiff>
 800777c:	68c3      	ldr	r3, [r0, #12]
 800777e:	4602      	mov	r2, r0
 8007780:	bb03      	cbnz	r3, 80077c4 <_dtoa_r+0x9fc>
 8007782:	4601      	mov	r1, r0
 8007784:	9008      	str	r0, [sp, #32]
 8007786:	9804      	ldr	r0, [sp, #16]
 8007788:	f000 ff48 	bl	800861c <__mcmp>
 800778c:	9a08      	ldr	r2, [sp, #32]
 800778e:	4603      	mov	r3, r0
 8007790:	4611      	mov	r1, r2
 8007792:	4620      	mov	r0, r4
 8007794:	9308      	str	r3, [sp, #32]
 8007796:	f000 fd21 	bl	80081dc <_Bfree>
 800779a:	9b08      	ldr	r3, [sp, #32]
 800779c:	b9a3      	cbnz	r3, 80077c8 <_dtoa_r+0xa00>
 800779e:	9a06      	ldr	r2, [sp, #24]
 80077a0:	b992      	cbnz	r2, 80077c8 <_dtoa_r+0xa00>
 80077a2:	9a07      	ldr	r2, [sp, #28]
 80077a4:	b982      	cbnz	r2, 80077c8 <_dtoa_r+0xa00>
 80077a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80077aa:	d029      	beq.n	8007800 <_dtoa_r+0xa38>
 80077ac:	9b00      	ldr	r3, [sp, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dd01      	ble.n	80077b6 <_dtoa_r+0x9ee>
 80077b2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80077b6:	9b05      	ldr	r3, [sp, #20]
 80077b8:	1c5d      	adds	r5, r3, #1
 80077ba:	f883 8000 	strb.w	r8, [r3]
 80077be:	e782      	b.n	80076c6 <_dtoa_r+0x8fe>
 80077c0:	4630      	mov	r0, r6
 80077c2:	e7c2      	b.n	800774a <_dtoa_r+0x982>
 80077c4:	2301      	movs	r3, #1
 80077c6:	e7e3      	b.n	8007790 <_dtoa_r+0x9c8>
 80077c8:	9a00      	ldr	r2, [sp, #0]
 80077ca:	2a00      	cmp	r2, #0
 80077cc:	db04      	blt.n	80077d8 <_dtoa_r+0xa10>
 80077ce:	d125      	bne.n	800781c <_dtoa_r+0xa54>
 80077d0:	9a06      	ldr	r2, [sp, #24]
 80077d2:	bb1a      	cbnz	r2, 800781c <_dtoa_r+0xa54>
 80077d4:	9a07      	ldr	r2, [sp, #28]
 80077d6:	bb0a      	cbnz	r2, 800781c <_dtoa_r+0xa54>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	ddec      	ble.n	80077b6 <_dtoa_r+0x9ee>
 80077dc:	2201      	movs	r2, #1
 80077de:	9904      	ldr	r1, [sp, #16]
 80077e0:	4620      	mov	r0, r4
 80077e2:	f000 fec7 	bl	8008574 <__lshift>
 80077e6:	4639      	mov	r1, r7
 80077e8:	9004      	str	r0, [sp, #16]
 80077ea:	f000 ff17 	bl	800861c <__mcmp>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	dc03      	bgt.n	80077fa <_dtoa_r+0xa32>
 80077f2:	d1e0      	bne.n	80077b6 <_dtoa_r+0x9ee>
 80077f4:	f018 0f01 	tst.w	r8, #1
 80077f8:	d0dd      	beq.n	80077b6 <_dtoa_r+0x9ee>
 80077fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80077fe:	d1d8      	bne.n	80077b2 <_dtoa_r+0x9ea>
 8007800:	9b05      	ldr	r3, [sp, #20]
 8007802:	9a05      	ldr	r2, [sp, #20]
 8007804:	1c5d      	adds	r5, r3, #1
 8007806:	2339      	movs	r3, #57	; 0x39
 8007808:	7013      	strb	r3, [r2, #0]
 800780a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800780e:	2b39      	cmp	r3, #57	; 0x39
 8007810:	f105 32ff 	add.w	r2, r5, #4294967295
 8007814:	d04f      	beq.n	80078b6 <_dtoa_r+0xaee>
 8007816:	3301      	adds	r3, #1
 8007818:	7013      	strb	r3, [r2, #0]
 800781a:	e754      	b.n	80076c6 <_dtoa_r+0x8fe>
 800781c:	9a05      	ldr	r2, [sp, #20]
 800781e:	2b00      	cmp	r3, #0
 8007820:	f102 0501 	add.w	r5, r2, #1
 8007824:	dd06      	ble.n	8007834 <_dtoa_r+0xa6c>
 8007826:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800782a:	d0e9      	beq.n	8007800 <_dtoa_r+0xa38>
 800782c:	f108 0801 	add.w	r8, r8, #1
 8007830:	9b05      	ldr	r3, [sp, #20]
 8007832:	e7c2      	b.n	80077ba <_dtoa_r+0x9f2>
 8007834:	9a02      	ldr	r2, [sp, #8]
 8007836:	f805 8c01 	strb.w	r8, [r5, #-1]
 800783a:	eba5 030b 	sub.w	r3, r5, fp
 800783e:	4293      	cmp	r3, r2
 8007840:	d021      	beq.n	8007886 <_dtoa_r+0xabe>
 8007842:	2300      	movs	r3, #0
 8007844:	220a      	movs	r2, #10
 8007846:	9904      	ldr	r1, [sp, #16]
 8007848:	4620      	mov	r0, r4
 800784a:	f000 fcde 	bl	800820a <__multadd>
 800784e:	45b1      	cmp	r9, r6
 8007850:	9004      	str	r0, [sp, #16]
 8007852:	f04f 0300 	mov.w	r3, #0
 8007856:	f04f 020a 	mov.w	r2, #10
 800785a:	4649      	mov	r1, r9
 800785c:	4620      	mov	r0, r4
 800785e:	d105      	bne.n	800786c <_dtoa_r+0xaa4>
 8007860:	f000 fcd3 	bl	800820a <__multadd>
 8007864:	4681      	mov	r9, r0
 8007866:	4606      	mov	r6, r0
 8007868:	9505      	str	r5, [sp, #20]
 800786a:	e776      	b.n	800775a <_dtoa_r+0x992>
 800786c:	f000 fccd 	bl	800820a <__multadd>
 8007870:	4631      	mov	r1, r6
 8007872:	4681      	mov	r9, r0
 8007874:	2300      	movs	r3, #0
 8007876:	220a      	movs	r2, #10
 8007878:	4620      	mov	r0, r4
 800787a:	f000 fcc6 	bl	800820a <__multadd>
 800787e:	4606      	mov	r6, r0
 8007880:	e7f2      	b.n	8007868 <_dtoa_r+0xaa0>
 8007882:	f04f 0900 	mov.w	r9, #0
 8007886:	2201      	movs	r2, #1
 8007888:	9904      	ldr	r1, [sp, #16]
 800788a:	4620      	mov	r0, r4
 800788c:	f000 fe72 	bl	8008574 <__lshift>
 8007890:	4639      	mov	r1, r7
 8007892:	9004      	str	r0, [sp, #16]
 8007894:	f000 fec2 	bl	800861c <__mcmp>
 8007898:	2800      	cmp	r0, #0
 800789a:	dcb6      	bgt.n	800780a <_dtoa_r+0xa42>
 800789c:	d102      	bne.n	80078a4 <_dtoa_r+0xadc>
 800789e:	f018 0f01 	tst.w	r8, #1
 80078a2:	d1b2      	bne.n	800780a <_dtoa_r+0xa42>
 80078a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80078a8:	2b30      	cmp	r3, #48	; 0x30
 80078aa:	f105 32ff 	add.w	r2, r5, #4294967295
 80078ae:	f47f af0a 	bne.w	80076c6 <_dtoa_r+0x8fe>
 80078b2:	4615      	mov	r5, r2
 80078b4:	e7f6      	b.n	80078a4 <_dtoa_r+0xadc>
 80078b6:	4593      	cmp	fp, r2
 80078b8:	d105      	bne.n	80078c6 <_dtoa_r+0xafe>
 80078ba:	2331      	movs	r3, #49	; 0x31
 80078bc:	f10a 0a01 	add.w	sl, sl, #1
 80078c0:	f88b 3000 	strb.w	r3, [fp]
 80078c4:	e6ff      	b.n	80076c6 <_dtoa_r+0x8fe>
 80078c6:	4615      	mov	r5, r2
 80078c8:	e79f      	b.n	800780a <_dtoa_r+0xa42>
 80078ca:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007930 <_dtoa_r+0xb68>
 80078ce:	e007      	b.n	80078e0 <_dtoa_r+0xb18>
 80078d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078d2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007934 <_dtoa_r+0xb6c>
 80078d6:	b11b      	cbz	r3, 80078e0 <_dtoa_r+0xb18>
 80078d8:	f10b 0308 	add.w	r3, fp, #8
 80078dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80078de:	6013      	str	r3, [r2, #0]
 80078e0:	4658      	mov	r0, fp
 80078e2:	b017      	add	sp, #92	; 0x5c
 80078e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e8:	9b06      	ldr	r3, [sp, #24]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	f77f ae35 	ble.w	800755a <_dtoa_r+0x792>
 80078f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f2:	9307      	str	r3, [sp, #28]
 80078f4:	e649      	b.n	800758a <_dtoa_r+0x7c2>
 80078f6:	9b02      	ldr	r3, [sp, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	dc03      	bgt.n	8007904 <_dtoa_r+0xb3c>
 80078fc:	9b06      	ldr	r3, [sp, #24]
 80078fe:	2b02      	cmp	r3, #2
 8007900:	f73f aecc 	bgt.w	800769c <_dtoa_r+0x8d4>
 8007904:	465d      	mov	r5, fp
 8007906:	4639      	mov	r1, r7
 8007908:	9804      	ldr	r0, [sp, #16]
 800790a:	f7ff f9cf 	bl	8006cac <quorem>
 800790e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007912:	f805 8b01 	strb.w	r8, [r5], #1
 8007916:	9a02      	ldr	r2, [sp, #8]
 8007918:	eba5 030b 	sub.w	r3, r5, fp
 800791c:	429a      	cmp	r2, r3
 800791e:	ddb0      	ble.n	8007882 <_dtoa_r+0xaba>
 8007920:	2300      	movs	r3, #0
 8007922:	220a      	movs	r2, #10
 8007924:	9904      	ldr	r1, [sp, #16]
 8007926:	4620      	mov	r0, r4
 8007928:	f000 fc6f 	bl	800820a <__multadd>
 800792c:	9004      	str	r0, [sp, #16]
 800792e:	e7ea      	b.n	8007906 <_dtoa_r+0xb3e>
 8007930:	080096dc 	.word	0x080096dc
 8007934:	08009758 	.word	0x08009758

08007938 <std>:
 8007938:	2300      	movs	r3, #0
 800793a:	b510      	push	{r4, lr}
 800793c:	4604      	mov	r4, r0
 800793e:	e9c0 3300 	strd	r3, r3, [r0]
 8007942:	6083      	str	r3, [r0, #8]
 8007944:	8181      	strh	r1, [r0, #12]
 8007946:	6643      	str	r3, [r0, #100]	; 0x64
 8007948:	81c2      	strh	r2, [r0, #14]
 800794a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800794e:	6183      	str	r3, [r0, #24]
 8007950:	4619      	mov	r1, r3
 8007952:	2208      	movs	r2, #8
 8007954:	305c      	adds	r0, #92	; 0x5c
 8007956:	f7fd fc34 	bl	80051c2 <memset>
 800795a:	4b05      	ldr	r3, [pc, #20]	; (8007970 <std+0x38>)
 800795c:	6263      	str	r3, [r4, #36]	; 0x24
 800795e:	4b05      	ldr	r3, [pc, #20]	; (8007974 <std+0x3c>)
 8007960:	62a3      	str	r3, [r4, #40]	; 0x28
 8007962:	4b05      	ldr	r3, [pc, #20]	; (8007978 <std+0x40>)
 8007964:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007966:	4b05      	ldr	r3, [pc, #20]	; (800797c <std+0x44>)
 8007968:	6224      	str	r4, [r4, #32]
 800796a:	6323      	str	r3, [r4, #48]	; 0x30
 800796c:	bd10      	pop	{r4, pc}
 800796e:	bf00      	nop
 8007970:	08009025 	.word	0x08009025
 8007974:	08009047 	.word	0x08009047
 8007978:	0800907f 	.word	0x0800907f
 800797c:	080090a3 	.word	0x080090a3

08007980 <_cleanup_r>:
 8007980:	4901      	ldr	r1, [pc, #4]	; (8007988 <_cleanup_r+0x8>)
 8007982:	f000 b885 	b.w	8007a90 <_fwalk_reent>
 8007986:	bf00      	nop
 8007988:	080093bd 	.word	0x080093bd

0800798c <__sfmoreglue>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	1e4a      	subs	r2, r1, #1
 8007990:	2568      	movs	r5, #104	; 0x68
 8007992:	4355      	muls	r5, r2
 8007994:	460e      	mov	r6, r1
 8007996:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800799a:	f001 f847 	bl	8008a2c <_malloc_r>
 800799e:	4604      	mov	r4, r0
 80079a0:	b140      	cbz	r0, 80079b4 <__sfmoreglue+0x28>
 80079a2:	2100      	movs	r1, #0
 80079a4:	e9c0 1600 	strd	r1, r6, [r0]
 80079a8:	300c      	adds	r0, #12
 80079aa:	60a0      	str	r0, [r4, #8]
 80079ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80079b0:	f7fd fc07 	bl	80051c2 <memset>
 80079b4:	4620      	mov	r0, r4
 80079b6:	bd70      	pop	{r4, r5, r6, pc}

080079b8 <__sinit>:
 80079b8:	6983      	ldr	r3, [r0, #24]
 80079ba:	b510      	push	{r4, lr}
 80079bc:	4604      	mov	r4, r0
 80079be:	bb33      	cbnz	r3, 8007a0e <__sinit+0x56>
 80079c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80079c4:	6503      	str	r3, [r0, #80]	; 0x50
 80079c6:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <__sinit+0x58>)
 80079c8:	4a12      	ldr	r2, [pc, #72]	; (8007a14 <__sinit+0x5c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	6282      	str	r2, [r0, #40]	; 0x28
 80079ce:	4298      	cmp	r0, r3
 80079d0:	bf04      	itt	eq
 80079d2:	2301      	moveq	r3, #1
 80079d4:	6183      	streq	r3, [r0, #24]
 80079d6:	f000 f81f 	bl	8007a18 <__sfp>
 80079da:	6060      	str	r0, [r4, #4]
 80079dc:	4620      	mov	r0, r4
 80079de:	f000 f81b 	bl	8007a18 <__sfp>
 80079e2:	60a0      	str	r0, [r4, #8]
 80079e4:	4620      	mov	r0, r4
 80079e6:	f000 f817 	bl	8007a18 <__sfp>
 80079ea:	2200      	movs	r2, #0
 80079ec:	60e0      	str	r0, [r4, #12]
 80079ee:	2104      	movs	r1, #4
 80079f0:	6860      	ldr	r0, [r4, #4]
 80079f2:	f7ff ffa1 	bl	8007938 <std>
 80079f6:	2201      	movs	r2, #1
 80079f8:	2109      	movs	r1, #9
 80079fa:	68a0      	ldr	r0, [r4, #8]
 80079fc:	f7ff ff9c 	bl	8007938 <std>
 8007a00:	2202      	movs	r2, #2
 8007a02:	2112      	movs	r1, #18
 8007a04:	68e0      	ldr	r0, [r4, #12]
 8007a06:	f7ff ff97 	bl	8007938 <std>
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	61a3      	str	r3, [r4, #24]
 8007a0e:	bd10      	pop	{r4, pc}
 8007a10:	080096c8 	.word	0x080096c8
 8007a14:	08007981 	.word	0x08007981

08007a18 <__sfp>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <__sfp+0x70>)
 8007a1c:	681e      	ldr	r6, [r3, #0]
 8007a1e:	69b3      	ldr	r3, [r6, #24]
 8007a20:	4607      	mov	r7, r0
 8007a22:	b913      	cbnz	r3, 8007a2a <__sfp+0x12>
 8007a24:	4630      	mov	r0, r6
 8007a26:	f7ff ffc7 	bl	80079b8 <__sinit>
 8007a2a:	3648      	adds	r6, #72	; 0x48
 8007a2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	d503      	bpl.n	8007a3c <__sfp+0x24>
 8007a34:	6833      	ldr	r3, [r6, #0]
 8007a36:	b133      	cbz	r3, 8007a46 <__sfp+0x2e>
 8007a38:	6836      	ldr	r6, [r6, #0]
 8007a3a:	e7f7      	b.n	8007a2c <__sfp+0x14>
 8007a3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007a40:	b16d      	cbz	r5, 8007a5e <__sfp+0x46>
 8007a42:	3468      	adds	r4, #104	; 0x68
 8007a44:	e7f4      	b.n	8007a30 <__sfp+0x18>
 8007a46:	2104      	movs	r1, #4
 8007a48:	4638      	mov	r0, r7
 8007a4a:	f7ff ff9f 	bl	800798c <__sfmoreglue>
 8007a4e:	6030      	str	r0, [r6, #0]
 8007a50:	2800      	cmp	r0, #0
 8007a52:	d1f1      	bne.n	8007a38 <__sfp+0x20>
 8007a54:	230c      	movs	r3, #12
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	4604      	mov	r4, r0
 8007a5a:	4620      	mov	r0, r4
 8007a5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a5e:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <__sfp+0x74>)
 8007a60:	6665      	str	r5, [r4, #100]	; 0x64
 8007a62:	e9c4 5500 	strd	r5, r5, [r4]
 8007a66:	60a5      	str	r5, [r4, #8]
 8007a68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007a6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007a70:	2208      	movs	r2, #8
 8007a72:	4629      	mov	r1, r5
 8007a74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007a78:	f7fd fba3 	bl	80051c2 <memset>
 8007a7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007a80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007a84:	e7e9      	b.n	8007a5a <__sfp+0x42>
 8007a86:	bf00      	nop
 8007a88:	080096c8 	.word	0x080096c8
 8007a8c:	ffff0001 	.word	0xffff0001

08007a90 <_fwalk_reent>:
 8007a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a94:	4680      	mov	r8, r0
 8007a96:	4689      	mov	r9, r1
 8007a98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a9c:	2600      	movs	r6, #0
 8007a9e:	b914      	cbnz	r4, 8007aa6 <_fwalk_reent+0x16>
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007aa6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007aaa:	3f01      	subs	r7, #1
 8007aac:	d501      	bpl.n	8007ab2 <_fwalk_reent+0x22>
 8007aae:	6824      	ldr	r4, [r4, #0]
 8007ab0:	e7f5      	b.n	8007a9e <_fwalk_reent+0xe>
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d907      	bls.n	8007ac8 <_fwalk_reent+0x38>
 8007ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007abc:	3301      	adds	r3, #1
 8007abe:	d003      	beq.n	8007ac8 <_fwalk_reent+0x38>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4640      	mov	r0, r8
 8007ac4:	47c8      	blx	r9
 8007ac6:	4306      	orrs	r6, r0
 8007ac8:	3568      	adds	r5, #104	; 0x68
 8007aca:	e7ee      	b.n	8007aaa <_fwalk_reent+0x1a>

08007acc <rshift>:
 8007acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ace:	6906      	ldr	r6, [r0, #16]
 8007ad0:	114b      	asrs	r3, r1, #5
 8007ad2:	429e      	cmp	r6, r3
 8007ad4:	f100 0414 	add.w	r4, r0, #20
 8007ad8:	dd30      	ble.n	8007b3c <rshift+0x70>
 8007ada:	f011 011f 	ands.w	r1, r1, #31
 8007ade:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007ae2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007ae6:	d108      	bne.n	8007afa <rshift+0x2e>
 8007ae8:	4621      	mov	r1, r4
 8007aea:	42b2      	cmp	r2, r6
 8007aec:	460b      	mov	r3, r1
 8007aee:	d211      	bcs.n	8007b14 <rshift+0x48>
 8007af0:	f852 3b04 	ldr.w	r3, [r2], #4
 8007af4:	f841 3b04 	str.w	r3, [r1], #4
 8007af8:	e7f7      	b.n	8007aea <rshift+0x1e>
 8007afa:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007afe:	f1c1 0c20 	rsb	ip, r1, #32
 8007b02:	40cd      	lsrs	r5, r1
 8007b04:	3204      	adds	r2, #4
 8007b06:	4623      	mov	r3, r4
 8007b08:	42b2      	cmp	r2, r6
 8007b0a:	4617      	mov	r7, r2
 8007b0c:	d30c      	bcc.n	8007b28 <rshift+0x5c>
 8007b0e:	601d      	str	r5, [r3, #0]
 8007b10:	b105      	cbz	r5, 8007b14 <rshift+0x48>
 8007b12:	3304      	adds	r3, #4
 8007b14:	1b1a      	subs	r2, r3, r4
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b1c:	bf08      	it	eq
 8007b1e:	2300      	moveq	r3, #0
 8007b20:	6102      	str	r2, [r0, #16]
 8007b22:	bf08      	it	eq
 8007b24:	6143      	streq	r3, [r0, #20]
 8007b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b28:	683f      	ldr	r7, [r7, #0]
 8007b2a:	fa07 f70c 	lsl.w	r7, r7, ip
 8007b2e:	433d      	orrs	r5, r7
 8007b30:	f843 5b04 	str.w	r5, [r3], #4
 8007b34:	f852 5b04 	ldr.w	r5, [r2], #4
 8007b38:	40cd      	lsrs	r5, r1
 8007b3a:	e7e5      	b.n	8007b08 <rshift+0x3c>
 8007b3c:	4623      	mov	r3, r4
 8007b3e:	e7e9      	b.n	8007b14 <rshift+0x48>

08007b40 <__hexdig_fun>:
 8007b40:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b44:	2b09      	cmp	r3, #9
 8007b46:	d802      	bhi.n	8007b4e <__hexdig_fun+0xe>
 8007b48:	3820      	subs	r0, #32
 8007b4a:	b2c0      	uxtb	r0, r0
 8007b4c:	4770      	bx	lr
 8007b4e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b52:	2b05      	cmp	r3, #5
 8007b54:	d801      	bhi.n	8007b5a <__hexdig_fun+0x1a>
 8007b56:	3847      	subs	r0, #71	; 0x47
 8007b58:	e7f7      	b.n	8007b4a <__hexdig_fun+0xa>
 8007b5a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007b5e:	2b05      	cmp	r3, #5
 8007b60:	d801      	bhi.n	8007b66 <__hexdig_fun+0x26>
 8007b62:	3827      	subs	r0, #39	; 0x27
 8007b64:	e7f1      	b.n	8007b4a <__hexdig_fun+0xa>
 8007b66:	2000      	movs	r0, #0
 8007b68:	4770      	bx	lr

08007b6a <__gethex>:
 8007b6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6e:	b08b      	sub	sp, #44	; 0x2c
 8007b70:	468a      	mov	sl, r1
 8007b72:	9002      	str	r0, [sp, #8]
 8007b74:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007b76:	9306      	str	r3, [sp, #24]
 8007b78:	4690      	mov	r8, r2
 8007b7a:	f000 fad0 	bl	800811e <__localeconv_l>
 8007b7e:	6803      	ldr	r3, [r0, #0]
 8007b80:	9303      	str	r3, [sp, #12]
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7f8 fb2c 	bl	80001e0 <strlen>
 8007b88:	9b03      	ldr	r3, [sp, #12]
 8007b8a:	9001      	str	r0, [sp, #4]
 8007b8c:	4403      	add	r3, r0
 8007b8e:	f04f 0b00 	mov.w	fp, #0
 8007b92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007b96:	9307      	str	r3, [sp, #28]
 8007b98:	f8da 3000 	ldr.w	r3, [sl]
 8007b9c:	3302      	adds	r3, #2
 8007b9e:	461f      	mov	r7, r3
 8007ba0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007ba4:	2830      	cmp	r0, #48	; 0x30
 8007ba6:	d06c      	beq.n	8007c82 <__gethex+0x118>
 8007ba8:	f7ff ffca 	bl	8007b40 <__hexdig_fun>
 8007bac:	4604      	mov	r4, r0
 8007bae:	2800      	cmp	r0, #0
 8007bb0:	d16a      	bne.n	8007c88 <__gethex+0x11e>
 8007bb2:	9a01      	ldr	r2, [sp, #4]
 8007bb4:	9903      	ldr	r1, [sp, #12]
 8007bb6:	4638      	mov	r0, r7
 8007bb8:	f001 fa77 	bl	80090aa <strncmp>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d166      	bne.n	8007c8e <__gethex+0x124>
 8007bc0:	9b01      	ldr	r3, [sp, #4]
 8007bc2:	5cf8      	ldrb	r0, [r7, r3]
 8007bc4:	18fe      	adds	r6, r7, r3
 8007bc6:	f7ff ffbb 	bl	8007b40 <__hexdig_fun>
 8007bca:	2800      	cmp	r0, #0
 8007bcc:	d062      	beq.n	8007c94 <__gethex+0x12a>
 8007bce:	4633      	mov	r3, r6
 8007bd0:	7818      	ldrb	r0, [r3, #0]
 8007bd2:	2830      	cmp	r0, #48	; 0x30
 8007bd4:	461f      	mov	r7, r3
 8007bd6:	f103 0301 	add.w	r3, r3, #1
 8007bda:	d0f9      	beq.n	8007bd0 <__gethex+0x66>
 8007bdc:	f7ff ffb0 	bl	8007b40 <__hexdig_fun>
 8007be0:	fab0 f580 	clz	r5, r0
 8007be4:	096d      	lsrs	r5, r5, #5
 8007be6:	4634      	mov	r4, r6
 8007be8:	f04f 0b01 	mov.w	fp, #1
 8007bec:	463a      	mov	r2, r7
 8007bee:	4616      	mov	r6, r2
 8007bf0:	3201      	adds	r2, #1
 8007bf2:	7830      	ldrb	r0, [r6, #0]
 8007bf4:	f7ff ffa4 	bl	8007b40 <__hexdig_fun>
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d1f8      	bne.n	8007bee <__gethex+0x84>
 8007bfc:	9a01      	ldr	r2, [sp, #4]
 8007bfe:	9903      	ldr	r1, [sp, #12]
 8007c00:	4630      	mov	r0, r6
 8007c02:	f001 fa52 	bl	80090aa <strncmp>
 8007c06:	b950      	cbnz	r0, 8007c1e <__gethex+0xb4>
 8007c08:	b954      	cbnz	r4, 8007c20 <__gethex+0xb6>
 8007c0a:	9b01      	ldr	r3, [sp, #4]
 8007c0c:	18f4      	adds	r4, r6, r3
 8007c0e:	4622      	mov	r2, r4
 8007c10:	4616      	mov	r6, r2
 8007c12:	3201      	adds	r2, #1
 8007c14:	7830      	ldrb	r0, [r6, #0]
 8007c16:	f7ff ff93 	bl	8007b40 <__hexdig_fun>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d1f8      	bne.n	8007c10 <__gethex+0xa6>
 8007c1e:	b10c      	cbz	r4, 8007c24 <__gethex+0xba>
 8007c20:	1ba4      	subs	r4, r4, r6
 8007c22:	00a4      	lsls	r4, r4, #2
 8007c24:	7833      	ldrb	r3, [r6, #0]
 8007c26:	2b50      	cmp	r3, #80	; 0x50
 8007c28:	d001      	beq.n	8007c2e <__gethex+0xc4>
 8007c2a:	2b70      	cmp	r3, #112	; 0x70
 8007c2c:	d140      	bne.n	8007cb0 <__gethex+0x146>
 8007c2e:	7873      	ldrb	r3, [r6, #1]
 8007c30:	2b2b      	cmp	r3, #43	; 0x2b
 8007c32:	d031      	beq.n	8007c98 <__gethex+0x12e>
 8007c34:	2b2d      	cmp	r3, #45	; 0x2d
 8007c36:	d033      	beq.n	8007ca0 <__gethex+0x136>
 8007c38:	1c71      	adds	r1, r6, #1
 8007c3a:	f04f 0900 	mov.w	r9, #0
 8007c3e:	7808      	ldrb	r0, [r1, #0]
 8007c40:	f7ff ff7e 	bl	8007b40 <__hexdig_fun>
 8007c44:	1e43      	subs	r3, r0, #1
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b18      	cmp	r3, #24
 8007c4a:	d831      	bhi.n	8007cb0 <__gethex+0x146>
 8007c4c:	f1a0 0210 	sub.w	r2, r0, #16
 8007c50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c54:	f7ff ff74 	bl	8007b40 <__hexdig_fun>
 8007c58:	1e43      	subs	r3, r0, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b18      	cmp	r3, #24
 8007c5e:	d922      	bls.n	8007ca6 <__gethex+0x13c>
 8007c60:	f1b9 0f00 	cmp.w	r9, #0
 8007c64:	d000      	beq.n	8007c68 <__gethex+0xfe>
 8007c66:	4252      	negs	r2, r2
 8007c68:	4414      	add	r4, r2
 8007c6a:	f8ca 1000 	str.w	r1, [sl]
 8007c6e:	b30d      	cbz	r5, 8007cb4 <__gethex+0x14a>
 8007c70:	f1bb 0f00 	cmp.w	fp, #0
 8007c74:	bf0c      	ite	eq
 8007c76:	2706      	moveq	r7, #6
 8007c78:	2700      	movne	r7, #0
 8007c7a:	4638      	mov	r0, r7
 8007c7c:	b00b      	add	sp, #44	; 0x2c
 8007c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c82:	f10b 0b01 	add.w	fp, fp, #1
 8007c86:	e78a      	b.n	8007b9e <__gethex+0x34>
 8007c88:	2500      	movs	r5, #0
 8007c8a:	462c      	mov	r4, r5
 8007c8c:	e7ae      	b.n	8007bec <__gethex+0x82>
 8007c8e:	463e      	mov	r6, r7
 8007c90:	2501      	movs	r5, #1
 8007c92:	e7c7      	b.n	8007c24 <__gethex+0xba>
 8007c94:	4604      	mov	r4, r0
 8007c96:	e7fb      	b.n	8007c90 <__gethex+0x126>
 8007c98:	f04f 0900 	mov.w	r9, #0
 8007c9c:	1cb1      	adds	r1, r6, #2
 8007c9e:	e7ce      	b.n	8007c3e <__gethex+0xd4>
 8007ca0:	f04f 0901 	mov.w	r9, #1
 8007ca4:	e7fa      	b.n	8007c9c <__gethex+0x132>
 8007ca6:	230a      	movs	r3, #10
 8007ca8:	fb03 0202 	mla	r2, r3, r2, r0
 8007cac:	3a10      	subs	r2, #16
 8007cae:	e7cf      	b.n	8007c50 <__gethex+0xe6>
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	e7da      	b.n	8007c6a <__gethex+0x100>
 8007cb4:	1bf3      	subs	r3, r6, r7
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	4629      	mov	r1, r5
 8007cba:	2b07      	cmp	r3, #7
 8007cbc:	dc49      	bgt.n	8007d52 <__gethex+0x1e8>
 8007cbe:	9802      	ldr	r0, [sp, #8]
 8007cc0:	f000 fa58 	bl	8008174 <_Balloc>
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	f100 0914 	add.w	r9, r0, #20
 8007cca:	f04f 0b00 	mov.w	fp, #0
 8007cce:	f1c3 0301 	rsb	r3, r3, #1
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	f8cd 9010 	str.w	r9, [sp, #16]
 8007cd8:	46da      	mov	sl, fp
 8007cda:	9308      	str	r3, [sp, #32]
 8007cdc:	42b7      	cmp	r7, r6
 8007cde:	d33b      	bcc.n	8007d58 <__gethex+0x1ee>
 8007ce0:	9804      	ldr	r0, [sp, #16]
 8007ce2:	f840 ab04 	str.w	sl, [r0], #4
 8007ce6:	eba0 0009 	sub.w	r0, r0, r9
 8007cea:	1080      	asrs	r0, r0, #2
 8007cec:	6128      	str	r0, [r5, #16]
 8007cee:	0147      	lsls	r7, r0, #5
 8007cf0:	4650      	mov	r0, sl
 8007cf2:	f000 fb03 	bl	80082fc <__hi0bits>
 8007cf6:	f8d8 6000 	ldr.w	r6, [r8]
 8007cfa:	1a3f      	subs	r7, r7, r0
 8007cfc:	42b7      	cmp	r7, r6
 8007cfe:	dd64      	ble.n	8007dca <__gethex+0x260>
 8007d00:	1bbf      	subs	r7, r7, r6
 8007d02:	4639      	mov	r1, r7
 8007d04:	4628      	mov	r0, r5
 8007d06:	f000 fe13 	bl	8008930 <__any_on>
 8007d0a:	4682      	mov	sl, r0
 8007d0c:	b178      	cbz	r0, 8007d2e <__gethex+0x1c4>
 8007d0e:	1e7b      	subs	r3, r7, #1
 8007d10:	1159      	asrs	r1, r3, #5
 8007d12:	f003 021f 	and.w	r2, r3, #31
 8007d16:	f04f 0a01 	mov.w	sl, #1
 8007d1a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007d1e:	fa0a f202 	lsl.w	r2, sl, r2
 8007d22:	420a      	tst	r2, r1
 8007d24:	d003      	beq.n	8007d2e <__gethex+0x1c4>
 8007d26:	4553      	cmp	r3, sl
 8007d28:	dc46      	bgt.n	8007db8 <__gethex+0x24e>
 8007d2a:	f04f 0a02 	mov.w	sl, #2
 8007d2e:	4639      	mov	r1, r7
 8007d30:	4628      	mov	r0, r5
 8007d32:	f7ff fecb 	bl	8007acc <rshift>
 8007d36:	443c      	add	r4, r7
 8007d38:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d3c:	42a3      	cmp	r3, r4
 8007d3e:	da52      	bge.n	8007de6 <__gethex+0x27c>
 8007d40:	4629      	mov	r1, r5
 8007d42:	9802      	ldr	r0, [sp, #8]
 8007d44:	f000 fa4a 	bl	80081dc <_Bfree>
 8007d48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	27a3      	movs	r7, #163	; 0xa3
 8007d50:	e793      	b.n	8007c7a <__gethex+0x110>
 8007d52:	3101      	adds	r1, #1
 8007d54:	105b      	asrs	r3, r3, #1
 8007d56:	e7b0      	b.n	8007cba <__gethex+0x150>
 8007d58:	1e73      	subs	r3, r6, #1
 8007d5a:	9305      	str	r3, [sp, #20]
 8007d5c:	9a07      	ldr	r2, [sp, #28]
 8007d5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d018      	beq.n	8007d98 <__gethex+0x22e>
 8007d66:	f1bb 0f20 	cmp.w	fp, #32
 8007d6a:	d107      	bne.n	8007d7c <__gethex+0x212>
 8007d6c:	9b04      	ldr	r3, [sp, #16]
 8007d6e:	f8c3 a000 	str.w	sl, [r3]
 8007d72:	3304      	adds	r3, #4
 8007d74:	f04f 0a00 	mov.w	sl, #0
 8007d78:	9304      	str	r3, [sp, #16]
 8007d7a:	46d3      	mov	fp, sl
 8007d7c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007d80:	f7ff fede 	bl	8007b40 <__hexdig_fun>
 8007d84:	f000 000f 	and.w	r0, r0, #15
 8007d88:	fa00 f00b 	lsl.w	r0, r0, fp
 8007d8c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007d90:	f10b 0b04 	add.w	fp, fp, #4
 8007d94:	9b05      	ldr	r3, [sp, #20]
 8007d96:	e00d      	b.n	8007db4 <__gethex+0x24a>
 8007d98:	9b05      	ldr	r3, [sp, #20]
 8007d9a:	9a08      	ldr	r2, [sp, #32]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	42bb      	cmp	r3, r7
 8007da0:	d3e1      	bcc.n	8007d66 <__gethex+0x1fc>
 8007da2:	4618      	mov	r0, r3
 8007da4:	9a01      	ldr	r2, [sp, #4]
 8007da6:	9903      	ldr	r1, [sp, #12]
 8007da8:	9309      	str	r3, [sp, #36]	; 0x24
 8007daa:	f001 f97e 	bl	80090aa <strncmp>
 8007dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007db0:	2800      	cmp	r0, #0
 8007db2:	d1d8      	bne.n	8007d66 <__gethex+0x1fc>
 8007db4:	461e      	mov	r6, r3
 8007db6:	e791      	b.n	8007cdc <__gethex+0x172>
 8007db8:	1eb9      	subs	r1, r7, #2
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 fdb8 	bl	8008930 <__any_on>
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d0b2      	beq.n	8007d2a <__gethex+0x1c0>
 8007dc4:	f04f 0a03 	mov.w	sl, #3
 8007dc8:	e7b1      	b.n	8007d2e <__gethex+0x1c4>
 8007dca:	da09      	bge.n	8007de0 <__gethex+0x276>
 8007dcc:	1bf7      	subs	r7, r6, r7
 8007dce:	4629      	mov	r1, r5
 8007dd0:	463a      	mov	r2, r7
 8007dd2:	9802      	ldr	r0, [sp, #8]
 8007dd4:	f000 fbce 	bl	8008574 <__lshift>
 8007dd8:	1be4      	subs	r4, r4, r7
 8007dda:	4605      	mov	r5, r0
 8007ddc:	f100 0914 	add.w	r9, r0, #20
 8007de0:	f04f 0a00 	mov.w	sl, #0
 8007de4:	e7a8      	b.n	8007d38 <__gethex+0x1ce>
 8007de6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007dea:	42a0      	cmp	r0, r4
 8007dec:	dd6a      	ble.n	8007ec4 <__gethex+0x35a>
 8007dee:	1b04      	subs	r4, r0, r4
 8007df0:	42a6      	cmp	r6, r4
 8007df2:	dc2e      	bgt.n	8007e52 <__gethex+0x2e8>
 8007df4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d022      	beq.n	8007e42 <__gethex+0x2d8>
 8007dfc:	2b03      	cmp	r3, #3
 8007dfe:	d024      	beq.n	8007e4a <__gethex+0x2e0>
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d115      	bne.n	8007e30 <__gethex+0x2c6>
 8007e04:	42a6      	cmp	r6, r4
 8007e06:	d113      	bne.n	8007e30 <__gethex+0x2c6>
 8007e08:	2e01      	cmp	r6, #1
 8007e0a:	dc0b      	bgt.n	8007e24 <__gethex+0x2ba>
 8007e0c:	9a06      	ldr	r2, [sp, #24]
 8007e0e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	2301      	movs	r3, #1
 8007e16:	612b      	str	r3, [r5, #16]
 8007e18:	f8c9 3000 	str.w	r3, [r9]
 8007e1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e1e:	2762      	movs	r7, #98	; 0x62
 8007e20:	601d      	str	r5, [r3, #0]
 8007e22:	e72a      	b.n	8007c7a <__gethex+0x110>
 8007e24:	1e71      	subs	r1, r6, #1
 8007e26:	4628      	mov	r0, r5
 8007e28:	f000 fd82 	bl	8008930 <__any_on>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d1ed      	bne.n	8007e0c <__gethex+0x2a2>
 8007e30:	4629      	mov	r1, r5
 8007e32:	9802      	ldr	r0, [sp, #8]
 8007e34:	f000 f9d2 	bl	80081dc <_Bfree>
 8007e38:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6013      	str	r3, [r2, #0]
 8007e3e:	2750      	movs	r7, #80	; 0x50
 8007e40:	e71b      	b.n	8007c7a <__gethex+0x110>
 8007e42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d0e1      	beq.n	8007e0c <__gethex+0x2a2>
 8007e48:	e7f2      	b.n	8007e30 <__gethex+0x2c6>
 8007e4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1dd      	bne.n	8007e0c <__gethex+0x2a2>
 8007e50:	e7ee      	b.n	8007e30 <__gethex+0x2c6>
 8007e52:	1e67      	subs	r7, r4, #1
 8007e54:	f1ba 0f00 	cmp.w	sl, #0
 8007e58:	d131      	bne.n	8007ebe <__gethex+0x354>
 8007e5a:	b127      	cbz	r7, 8007e66 <__gethex+0x2fc>
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4628      	mov	r0, r5
 8007e60:	f000 fd66 	bl	8008930 <__any_on>
 8007e64:	4682      	mov	sl, r0
 8007e66:	117a      	asrs	r2, r7, #5
 8007e68:	2301      	movs	r3, #1
 8007e6a:	f007 071f 	and.w	r7, r7, #31
 8007e6e:	fa03 f707 	lsl.w	r7, r3, r7
 8007e72:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8007e76:	4621      	mov	r1, r4
 8007e78:	421f      	tst	r7, r3
 8007e7a:	4628      	mov	r0, r5
 8007e7c:	bf18      	it	ne
 8007e7e:	f04a 0a02 	orrne.w	sl, sl, #2
 8007e82:	1b36      	subs	r6, r6, r4
 8007e84:	f7ff fe22 	bl	8007acc <rshift>
 8007e88:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8007e8c:	2702      	movs	r7, #2
 8007e8e:	f1ba 0f00 	cmp.w	sl, #0
 8007e92:	d048      	beq.n	8007f26 <__gethex+0x3bc>
 8007e94:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d015      	beq.n	8007ec8 <__gethex+0x35e>
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d017      	beq.n	8007ed0 <__gethex+0x366>
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d109      	bne.n	8007eb8 <__gethex+0x34e>
 8007ea4:	f01a 0f02 	tst.w	sl, #2
 8007ea8:	d006      	beq.n	8007eb8 <__gethex+0x34e>
 8007eaa:	f8d9 3000 	ldr.w	r3, [r9]
 8007eae:	ea4a 0a03 	orr.w	sl, sl, r3
 8007eb2:	f01a 0f01 	tst.w	sl, #1
 8007eb6:	d10e      	bne.n	8007ed6 <__gethex+0x36c>
 8007eb8:	f047 0710 	orr.w	r7, r7, #16
 8007ebc:	e033      	b.n	8007f26 <__gethex+0x3bc>
 8007ebe:	f04f 0a01 	mov.w	sl, #1
 8007ec2:	e7d0      	b.n	8007e66 <__gethex+0x2fc>
 8007ec4:	2701      	movs	r7, #1
 8007ec6:	e7e2      	b.n	8007e8e <__gethex+0x324>
 8007ec8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007eca:	f1c3 0301 	rsb	r3, r3, #1
 8007ece:	9315      	str	r3, [sp, #84]	; 0x54
 8007ed0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <__gethex+0x34e>
 8007ed6:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8007eda:	f105 0314 	add.w	r3, r5, #20
 8007ede:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007ee2:	eb03 010a 	add.w	r1, r3, sl
 8007ee6:	f04f 0c00 	mov.w	ip, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef0:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007ef4:	d01c      	beq.n	8007f30 <__gethex+0x3c6>
 8007ef6:	3201      	adds	r2, #1
 8007ef8:	6002      	str	r2, [r0, #0]
 8007efa:	2f02      	cmp	r7, #2
 8007efc:	f105 0314 	add.w	r3, r5, #20
 8007f00:	d138      	bne.n	8007f74 <__gethex+0x40a>
 8007f02:	f8d8 2000 	ldr.w	r2, [r8]
 8007f06:	3a01      	subs	r2, #1
 8007f08:	42b2      	cmp	r2, r6
 8007f0a:	d10a      	bne.n	8007f22 <__gethex+0x3b8>
 8007f0c:	1171      	asrs	r1, r6, #5
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f006 061f 	and.w	r6, r6, #31
 8007f14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f18:	fa02 f606 	lsl.w	r6, r2, r6
 8007f1c:	421e      	tst	r6, r3
 8007f1e:	bf18      	it	ne
 8007f20:	4617      	movne	r7, r2
 8007f22:	f047 0720 	orr.w	r7, r7, #32
 8007f26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f28:	601d      	str	r5, [r3, #0]
 8007f2a:	9b06      	ldr	r3, [sp, #24]
 8007f2c:	601c      	str	r4, [r3, #0]
 8007f2e:	e6a4      	b.n	8007c7a <__gethex+0x110>
 8007f30:	4299      	cmp	r1, r3
 8007f32:	f843 cc04 	str.w	ip, [r3, #-4]
 8007f36:	d8d8      	bhi.n	8007eea <__gethex+0x380>
 8007f38:	68ab      	ldr	r3, [r5, #8]
 8007f3a:	4599      	cmp	r9, r3
 8007f3c:	db12      	blt.n	8007f64 <__gethex+0x3fa>
 8007f3e:	6869      	ldr	r1, [r5, #4]
 8007f40:	9802      	ldr	r0, [sp, #8]
 8007f42:	3101      	adds	r1, #1
 8007f44:	f000 f916 	bl	8008174 <_Balloc>
 8007f48:	692a      	ldr	r2, [r5, #16]
 8007f4a:	3202      	adds	r2, #2
 8007f4c:	f105 010c 	add.w	r1, r5, #12
 8007f50:	4683      	mov	fp, r0
 8007f52:	0092      	lsls	r2, r2, #2
 8007f54:	300c      	adds	r0, #12
 8007f56:	f7fd f929 	bl	80051ac <memcpy>
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	9802      	ldr	r0, [sp, #8]
 8007f5e:	f000 f93d 	bl	80081dc <_Bfree>
 8007f62:	465d      	mov	r5, fp
 8007f64:	692b      	ldr	r3, [r5, #16]
 8007f66:	1c5a      	adds	r2, r3, #1
 8007f68:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007f6c:	612a      	str	r2, [r5, #16]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	615a      	str	r2, [r3, #20]
 8007f72:	e7c2      	b.n	8007efa <__gethex+0x390>
 8007f74:	692a      	ldr	r2, [r5, #16]
 8007f76:	454a      	cmp	r2, r9
 8007f78:	dd0b      	ble.n	8007f92 <__gethex+0x428>
 8007f7a:	2101      	movs	r1, #1
 8007f7c:	4628      	mov	r0, r5
 8007f7e:	f7ff fda5 	bl	8007acc <rshift>
 8007f82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f86:	3401      	adds	r4, #1
 8007f88:	42a3      	cmp	r3, r4
 8007f8a:	f6ff aed9 	blt.w	8007d40 <__gethex+0x1d6>
 8007f8e:	2701      	movs	r7, #1
 8007f90:	e7c7      	b.n	8007f22 <__gethex+0x3b8>
 8007f92:	f016 061f 	ands.w	r6, r6, #31
 8007f96:	d0fa      	beq.n	8007f8e <__gethex+0x424>
 8007f98:	449a      	add	sl, r3
 8007f9a:	f1c6 0620 	rsb	r6, r6, #32
 8007f9e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007fa2:	f000 f9ab 	bl	80082fc <__hi0bits>
 8007fa6:	42b0      	cmp	r0, r6
 8007fa8:	dbe7      	blt.n	8007f7a <__gethex+0x410>
 8007faa:	e7f0      	b.n	8007f8e <__gethex+0x424>

08007fac <L_shift>:
 8007fac:	f1c2 0208 	rsb	r2, r2, #8
 8007fb0:	0092      	lsls	r2, r2, #2
 8007fb2:	b570      	push	{r4, r5, r6, lr}
 8007fb4:	f1c2 0620 	rsb	r6, r2, #32
 8007fb8:	6843      	ldr	r3, [r0, #4]
 8007fba:	6804      	ldr	r4, [r0, #0]
 8007fbc:	fa03 f506 	lsl.w	r5, r3, r6
 8007fc0:	432c      	orrs	r4, r5
 8007fc2:	40d3      	lsrs	r3, r2
 8007fc4:	6004      	str	r4, [r0, #0]
 8007fc6:	f840 3f04 	str.w	r3, [r0, #4]!
 8007fca:	4288      	cmp	r0, r1
 8007fcc:	d3f4      	bcc.n	8007fb8 <L_shift+0xc>
 8007fce:	bd70      	pop	{r4, r5, r6, pc}

08007fd0 <__match>:
 8007fd0:	b530      	push	{r4, r5, lr}
 8007fd2:	6803      	ldr	r3, [r0, #0]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fda:	b914      	cbnz	r4, 8007fe2 <__match+0x12>
 8007fdc:	6003      	str	r3, [r0, #0]
 8007fde:	2001      	movs	r0, #1
 8007fe0:	bd30      	pop	{r4, r5, pc}
 8007fe2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fe6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007fea:	2d19      	cmp	r5, #25
 8007fec:	bf98      	it	ls
 8007fee:	3220      	addls	r2, #32
 8007ff0:	42a2      	cmp	r2, r4
 8007ff2:	d0f0      	beq.n	8007fd6 <__match+0x6>
 8007ff4:	2000      	movs	r0, #0
 8007ff6:	e7f3      	b.n	8007fe0 <__match+0x10>

08007ff8 <__hexnan>:
 8007ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffc:	680b      	ldr	r3, [r1, #0]
 8007ffe:	6801      	ldr	r1, [r0, #0]
 8008000:	115f      	asrs	r7, r3, #5
 8008002:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008006:	f013 031f 	ands.w	r3, r3, #31
 800800a:	b087      	sub	sp, #28
 800800c:	bf18      	it	ne
 800800e:	3704      	addne	r7, #4
 8008010:	2500      	movs	r5, #0
 8008012:	1f3e      	subs	r6, r7, #4
 8008014:	4682      	mov	sl, r0
 8008016:	4690      	mov	r8, r2
 8008018:	9301      	str	r3, [sp, #4]
 800801a:	f847 5c04 	str.w	r5, [r7, #-4]
 800801e:	46b1      	mov	r9, r6
 8008020:	4634      	mov	r4, r6
 8008022:	9502      	str	r5, [sp, #8]
 8008024:	46ab      	mov	fp, r5
 8008026:	784a      	ldrb	r2, [r1, #1]
 8008028:	1c4b      	adds	r3, r1, #1
 800802a:	9303      	str	r3, [sp, #12]
 800802c:	b342      	cbz	r2, 8008080 <__hexnan+0x88>
 800802e:	4610      	mov	r0, r2
 8008030:	9105      	str	r1, [sp, #20]
 8008032:	9204      	str	r2, [sp, #16]
 8008034:	f7ff fd84 	bl	8007b40 <__hexdig_fun>
 8008038:	2800      	cmp	r0, #0
 800803a:	d143      	bne.n	80080c4 <__hexnan+0xcc>
 800803c:	9a04      	ldr	r2, [sp, #16]
 800803e:	9905      	ldr	r1, [sp, #20]
 8008040:	2a20      	cmp	r2, #32
 8008042:	d818      	bhi.n	8008076 <__hexnan+0x7e>
 8008044:	9b02      	ldr	r3, [sp, #8]
 8008046:	459b      	cmp	fp, r3
 8008048:	dd13      	ble.n	8008072 <__hexnan+0x7a>
 800804a:	454c      	cmp	r4, r9
 800804c:	d206      	bcs.n	800805c <__hexnan+0x64>
 800804e:	2d07      	cmp	r5, #7
 8008050:	dc04      	bgt.n	800805c <__hexnan+0x64>
 8008052:	462a      	mov	r2, r5
 8008054:	4649      	mov	r1, r9
 8008056:	4620      	mov	r0, r4
 8008058:	f7ff ffa8 	bl	8007fac <L_shift>
 800805c:	4544      	cmp	r4, r8
 800805e:	d944      	bls.n	80080ea <__hexnan+0xf2>
 8008060:	2300      	movs	r3, #0
 8008062:	f1a4 0904 	sub.w	r9, r4, #4
 8008066:	f844 3c04 	str.w	r3, [r4, #-4]
 800806a:	f8cd b008 	str.w	fp, [sp, #8]
 800806e:	464c      	mov	r4, r9
 8008070:	461d      	mov	r5, r3
 8008072:	9903      	ldr	r1, [sp, #12]
 8008074:	e7d7      	b.n	8008026 <__hexnan+0x2e>
 8008076:	2a29      	cmp	r2, #41	; 0x29
 8008078:	d14a      	bne.n	8008110 <__hexnan+0x118>
 800807a:	3102      	adds	r1, #2
 800807c:	f8ca 1000 	str.w	r1, [sl]
 8008080:	f1bb 0f00 	cmp.w	fp, #0
 8008084:	d044      	beq.n	8008110 <__hexnan+0x118>
 8008086:	454c      	cmp	r4, r9
 8008088:	d206      	bcs.n	8008098 <__hexnan+0xa0>
 800808a:	2d07      	cmp	r5, #7
 800808c:	dc04      	bgt.n	8008098 <__hexnan+0xa0>
 800808e:	462a      	mov	r2, r5
 8008090:	4649      	mov	r1, r9
 8008092:	4620      	mov	r0, r4
 8008094:	f7ff ff8a 	bl	8007fac <L_shift>
 8008098:	4544      	cmp	r4, r8
 800809a:	d928      	bls.n	80080ee <__hexnan+0xf6>
 800809c:	4643      	mov	r3, r8
 800809e:	f854 2b04 	ldr.w	r2, [r4], #4
 80080a2:	f843 2b04 	str.w	r2, [r3], #4
 80080a6:	42a6      	cmp	r6, r4
 80080a8:	d2f9      	bcs.n	800809e <__hexnan+0xa6>
 80080aa:	2200      	movs	r2, #0
 80080ac:	f843 2b04 	str.w	r2, [r3], #4
 80080b0:	429e      	cmp	r6, r3
 80080b2:	d2fb      	bcs.n	80080ac <__hexnan+0xb4>
 80080b4:	6833      	ldr	r3, [r6, #0]
 80080b6:	b91b      	cbnz	r3, 80080c0 <__hexnan+0xc8>
 80080b8:	4546      	cmp	r6, r8
 80080ba:	d127      	bne.n	800810c <__hexnan+0x114>
 80080bc:	2301      	movs	r3, #1
 80080be:	6033      	str	r3, [r6, #0]
 80080c0:	2005      	movs	r0, #5
 80080c2:	e026      	b.n	8008112 <__hexnan+0x11a>
 80080c4:	3501      	adds	r5, #1
 80080c6:	2d08      	cmp	r5, #8
 80080c8:	f10b 0b01 	add.w	fp, fp, #1
 80080cc:	dd06      	ble.n	80080dc <__hexnan+0xe4>
 80080ce:	4544      	cmp	r4, r8
 80080d0:	d9cf      	bls.n	8008072 <__hexnan+0x7a>
 80080d2:	2300      	movs	r3, #0
 80080d4:	f844 3c04 	str.w	r3, [r4, #-4]
 80080d8:	2501      	movs	r5, #1
 80080da:	3c04      	subs	r4, #4
 80080dc:	6822      	ldr	r2, [r4, #0]
 80080de:	f000 000f 	and.w	r0, r0, #15
 80080e2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80080e6:	6020      	str	r0, [r4, #0]
 80080e8:	e7c3      	b.n	8008072 <__hexnan+0x7a>
 80080ea:	2508      	movs	r5, #8
 80080ec:	e7c1      	b.n	8008072 <__hexnan+0x7a>
 80080ee:	9b01      	ldr	r3, [sp, #4]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0df      	beq.n	80080b4 <__hexnan+0xbc>
 80080f4:	f04f 32ff 	mov.w	r2, #4294967295
 80080f8:	f1c3 0320 	rsb	r3, r3, #32
 80080fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008100:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008104:	401a      	ands	r2, r3
 8008106:	f847 2c04 	str.w	r2, [r7, #-4]
 800810a:	e7d3      	b.n	80080b4 <__hexnan+0xbc>
 800810c:	3e04      	subs	r6, #4
 800810e:	e7d1      	b.n	80080b4 <__hexnan+0xbc>
 8008110:	2004      	movs	r0, #4
 8008112:	b007      	add	sp, #28
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008118 <__locale_ctype_ptr_l>:
 8008118:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800811c:	4770      	bx	lr

0800811e <__localeconv_l>:
 800811e:	30f0      	adds	r0, #240	; 0xf0
 8008120:	4770      	bx	lr
	...

08008124 <_localeconv_r>:
 8008124:	4b04      	ldr	r3, [pc, #16]	; (8008138 <_localeconv_r+0x14>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6a18      	ldr	r0, [r3, #32]
 800812a:	4b04      	ldr	r3, [pc, #16]	; (800813c <_localeconv_r+0x18>)
 800812c:	2800      	cmp	r0, #0
 800812e:	bf08      	it	eq
 8008130:	4618      	moveq	r0, r3
 8008132:	30f0      	adds	r0, #240	; 0xf0
 8008134:	4770      	bx	lr
 8008136:	bf00      	nop
 8008138:	20000010 	.word	0x20000010
 800813c:	20000074 	.word	0x20000074

08008140 <malloc>:
 8008140:	4b02      	ldr	r3, [pc, #8]	; (800814c <malloc+0xc>)
 8008142:	4601      	mov	r1, r0
 8008144:	6818      	ldr	r0, [r3, #0]
 8008146:	f000 bc71 	b.w	8008a2c <_malloc_r>
 800814a:	bf00      	nop
 800814c:	20000010 	.word	0x20000010

08008150 <__ascii_mbtowc>:
 8008150:	b082      	sub	sp, #8
 8008152:	b901      	cbnz	r1, 8008156 <__ascii_mbtowc+0x6>
 8008154:	a901      	add	r1, sp, #4
 8008156:	b142      	cbz	r2, 800816a <__ascii_mbtowc+0x1a>
 8008158:	b14b      	cbz	r3, 800816e <__ascii_mbtowc+0x1e>
 800815a:	7813      	ldrb	r3, [r2, #0]
 800815c:	600b      	str	r3, [r1, #0]
 800815e:	7812      	ldrb	r2, [r2, #0]
 8008160:	1c10      	adds	r0, r2, #0
 8008162:	bf18      	it	ne
 8008164:	2001      	movne	r0, #1
 8008166:	b002      	add	sp, #8
 8008168:	4770      	bx	lr
 800816a:	4610      	mov	r0, r2
 800816c:	e7fb      	b.n	8008166 <__ascii_mbtowc+0x16>
 800816e:	f06f 0001 	mvn.w	r0, #1
 8008172:	e7f8      	b.n	8008166 <__ascii_mbtowc+0x16>

08008174 <_Balloc>:
 8008174:	b570      	push	{r4, r5, r6, lr}
 8008176:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008178:	4604      	mov	r4, r0
 800817a:	460e      	mov	r6, r1
 800817c:	b93d      	cbnz	r5, 800818e <_Balloc+0x1a>
 800817e:	2010      	movs	r0, #16
 8008180:	f7ff ffde 	bl	8008140 <malloc>
 8008184:	6260      	str	r0, [r4, #36]	; 0x24
 8008186:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800818a:	6005      	str	r5, [r0, #0]
 800818c:	60c5      	str	r5, [r0, #12]
 800818e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8008190:	68eb      	ldr	r3, [r5, #12]
 8008192:	b183      	cbz	r3, 80081b6 <_Balloc+0x42>
 8008194:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800819c:	b9b8      	cbnz	r0, 80081ce <_Balloc+0x5a>
 800819e:	2101      	movs	r1, #1
 80081a0:	fa01 f506 	lsl.w	r5, r1, r6
 80081a4:	1d6a      	adds	r2, r5, #5
 80081a6:	0092      	lsls	r2, r2, #2
 80081a8:	4620      	mov	r0, r4
 80081aa:	f000 fbe2 	bl	8008972 <_calloc_r>
 80081ae:	b160      	cbz	r0, 80081ca <_Balloc+0x56>
 80081b0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80081b4:	e00e      	b.n	80081d4 <_Balloc+0x60>
 80081b6:	2221      	movs	r2, #33	; 0x21
 80081b8:	2104      	movs	r1, #4
 80081ba:	4620      	mov	r0, r4
 80081bc:	f000 fbd9 	bl	8008972 <_calloc_r>
 80081c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081c2:	60e8      	str	r0, [r5, #12]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e4      	bne.n	8008194 <_Balloc+0x20>
 80081ca:	2000      	movs	r0, #0
 80081cc:	bd70      	pop	{r4, r5, r6, pc}
 80081ce:	6802      	ldr	r2, [r0, #0]
 80081d0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80081d4:	2300      	movs	r3, #0
 80081d6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80081da:	e7f7      	b.n	80081cc <_Balloc+0x58>

080081dc <_Bfree>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80081e0:	4606      	mov	r6, r0
 80081e2:	460d      	mov	r5, r1
 80081e4:	b93c      	cbnz	r4, 80081f6 <_Bfree+0x1a>
 80081e6:	2010      	movs	r0, #16
 80081e8:	f7ff ffaa 	bl	8008140 <malloc>
 80081ec:	6270      	str	r0, [r6, #36]	; 0x24
 80081ee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081f2:	6004      	str	r4, [r0, #0]
 80081f4:	60c4      	str	r4, [r0, #12]
 80081f6:	b13d      	cbz	r5, 8008208 <_Bfree+0x2c>
 80081f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081fa:	686a      	ldr	r2, [r5, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008202:	6029      	str	r1, [r5, #0]
 8008204:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8008208:	bd70      	pop	{r4, r5, r6, pc}

0800820a <__multadd>:
 800820a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800820e:	690d      	ldr	r5, [r1, #16]
 8008210:	461f      	mov	r7, r3
 8008212:	4606      	mov	r6, r0
 8008214:	460c      	mov	r4, r1
 8008216:	f101 0c14 	add.w	ip, r1, #20
 800821a:	2300      	movs	r3, #0
 800821c:	f8dc 0000 	ldr.w	r0, [ip]
 8008220:	b281      	uxth	r1, r0
 8008222:	fb02 7101 	mla	r1, r2, r1, r7
 8008226:	0c0f      	lsrs	r7, r1, #16
 8008228:	0c00      	lsrs	r0, r0, #16
 800822a:	fb02 7000 	mla	r0, r2, r0, r7
 800822e:	b289      	uxth	r1, r1
 8008230:	3301      	adds	r3, #1
 8008232:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8008236:	429d      	cmp	r5, r3
 8008238:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800823c:	f84c 1b04 	str.w	r1, [ip], #4
 8008240:	dcec      	bgt.n	800821c <__multadd+0x12>
 8008242:	b1d7      	cbz	r7, 800827a <__multadd+0x70>
 8008244:	68a3      	ldr	r3, [r4, #8]
 8008246:	42ab      	cmp	r3, r5
 8008248:	dc12      	bgt.n	8008270 <__multadd+0x66>
 800824a:	6861      	ldr	r1, [r4, #4]
 800824c:	4630      	mov	r0, r6
 800824e:	3101      	adds	r1, #1
 8008250:	f7ff ff90 	bl	8008174 <_Balloc>
 8008254:	6922      	ldr	r2, [r4, #16]
 8008256:	3202      	adds	r2, #2
 8008258:	f104 010c 	add.w	r1, r4, #12
 800825c:	4680      	mov	r8, r0
 800825e:	0092      	lsls	r2, r2, #2
 8008260:	300c      	adds	r0, #12
 8008262:	f7fc ffa3 	bl	80051ac <memcpy>
 8008266:	4621      	mov	r1, r4
 8008268:	4630      	mov	r0, r6
 800826a:	f7ff ffb7 	bl	80081dc <_Bfree>
 800826e:	4644      	mov	r4, r8
 8008270:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008274:	3501      	adds	r5, #1
 8008276:	615f      	str	r7, [r3, #20]
 8008278:	6125      	str	r5, [r4, #16]
 800827a:	4620      	mov	r0, r4
 800827c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008280 <__s2b>:
 8008280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008284:	460c      	mov	r4, r1
 8008286:	4615      	mov	r5, r2
 8008288:	461f      	mov	r7, r3
 800828a:	2209      	movs	r2, #9
 800828c:	3308      	adds	r3, #8
 800828e:	4606      	mov	r6, r0
 8008290:	fb93 f3f2 	sdiv	r3, r3, r2
 8008294:	2100      	movs	r1, #0
 8008296:	2201      	movs	r2, #1
 8008298:	429a      	cmp	r2, r3
 800829a:	db20      	blt.n	80082de <__s2b+0x5e>
 800829c:	4630      	mov	r0, r6
 800829e:	f7ff ff69 	bl	8008174 <_Balloc>
 80082a2:	9b08      	ldr	r3, [sp, #32]
 80082a4:	6143      	str	r3, [r0, #20]
 80082a6:	2d09      	cmp	r5, #9
 80082a8:	f04f 0301 	mov.w	r3, #1
 80082ac:	6103      	str	r3, [r0, #16]
 80082ae:	dd19      	ble.n	80082e4 <__s2b+0x64>
 80082b0:	f104 0809 	add.w	r8, r4, #9
 80082b4:	46c1      	mov	r9, r8
 80082b6:	442c      	add	r4, r5
 80082b8:	f819 3b01 	ldrb.w	r3, [r9], #1
 80082bc:	4601      	mov	r1, r0
 80082be:	3b30      	subs	r3, #48	; 0x30
 80082c0:	220a      	movs	r2, #10
 80082c2:	4630      	mov	r0, r6
 80082c4:	f7ff ffa1 	bl	800820a <__multadd>
 80082c8:	45a1      	cmp	r9, r4
 80082ca:	d1f5      	bne.n	80082b8 <__s2b+0x38>
 80082cc:	eb08 0405 	add.w	r4, r8, r5
 80082d0:	3c08      	subs	r4, #8
 80082d2:	1b2d      	subs	r5, r5, r4
 80082d4:	1963      	adds	r3, r4, r5
 80082d6:	42bb      	cmp	r3, r7
 80082d8:	db07      	blt.n	80082ea <__s2b+0x6a>
 80082da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082de:	0052      	lsls	r2, r2, #1
 80082e0:	3101      	adds	r1, #1
 80082e2:	e7d9      	b.n	8008298 <__s2b+0x18>
 80082e4:	340a      	adds	r4, #10
 80082e6:	2509      	movs	r5, #9
 80082e8:	e7f3      	b.n	80082d2 <__s2b+0x52>
 80082ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80082ee:	4601      	mov	r1, r0
 80082f0:	3b30      	subs	r3, #48	; 0x30
 80082f2:	220a      	movs	r2, #10
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7ff ff88 	bl	800820a <__multadd>
 80082fa:	e7eb      	b.n	80082d4 <__s2b+0x54>

080082fc <__hi0bits>:
 80082fc:	0c02      	lsrs	r2, r0, #16
 80082fe:	0412      	lsls	r2, r2, #16
 8008300:	4603      	mov	r3, r0
 8008302:	b9b2      	cbnz	r2, 8008332 <__hi0bits+0x36>
 8008304:	0403      	lsls	r3, r0, #16
 8008306:	2010      	movs	r0, #16
 8008308:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800830c:	bf04      	itt	eq
 800830e:	021b      	lsleq	r3, r3, #8
 8008310:	3008      	addeq	r0, #8
 8008312:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008316:	bf04      	itt	eq
 8008318:	011b      	lsleq	r3, r3, #4
 800831a:	3004      	addeq	r0, #4
 800831c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008320:	bf04      	itt	eq
 8008322:	009b      	lsleq	r3, r3, #2
 8008324:	3002      	addeq	r0, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	db06      	blt.n	8008338 <__hi0bits+0x3c>
 800832a:	005b      	lsls	r3, r3, #1
 800832c:	d503      	bpl.n	8008336 <__hi0bits+0x3a>
 800832e:	3001      	adds	r0, #1
 8008330:	4770      	bx	lr
 8008332:	2000      	movs	r0, #0
 8008334:	e7e8      	b.n	8008308 <__hi0bits+0xc>
 8008336:	2020      	movs	r0, #32
 8008338:	4770      	bx	lr

0800833a <__lo0bits>:
 800833a:	6803      	ldr	r3, [r0, #0]
 800833c:	f013 0207 	ands.w	r2, r3, #7
 8008340:	4601      	mov	r1, r0
 8008342:	d00b      	beq.n	800835c <__lo0bits+0x22>
 8008344:	07da      	lsls	r2, r3, #31
 8008346:	d423      	bmi.n	8008390 <__lo0bits+0x56>
 8008348:	0798      	lsls	r0, r3, #30
 800834a:	bf49      	itett	mi
 800834c:	085b      	lsrmi	r3, r3, #1
 800834e:	089b      	lsrpl	r3, r3, #2
 8008350:	2001      	movmi	r0, #1
 8008352:	600b      	strmi	r3, [r1, #0]
 8008354:	bf5c      	itt	pl
 8008356:	600b      	strpl	r3, [r1, #0]
 8008358:	2002      	movpl	r0, #2
 800835a:	4770      	bx	lr
 800835c:	b298      	uxth	r0, r3
 800835e:	b9a8      	cbnz	r0, 800838c <__lo0bits+0x52>
 8008360:	0c1b      	lsrs	r3, r3, #16
 8008362:	2010      	movs	r0, #16
 8008364:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008368:	bf04      	itt	eq
 800836a:	0a1b      	lsreq	r3, r3, #8
 800836c:	3008      	addeq	r0, #8
 800836e:	071a      	lsls	r2, r3, #28
 8008370:	bf04      	itt	eq
 8008372:	091b      	lsreq	r3, r3, #4
 8008374:	3004      	addeq	r0, #4
 8008376:	079a      	lsls	r2, r3, #30
 8008378:	bf04      	itt	eq
 800837a:	089b      	lsreq	r3, r3, #2
 800837c:	3002      	addeq	r0, #2
 800837e:	07da      	lsls	r2, r3, #31
 8008380:	d402      	bmi.n	8008388 <__lo0bits+0x4e>
 8008382:	085b      	lsrs	r3, r3, #1
 8008384:	d006      	beq.n	8008394 <__lo0bits+0x5a>
 8008386:	3001      	adds	r0, #1
 8008388:	600b      	str	r3, [r1, #0]
 800838a:	4770      	bx	lr
 800838c:	4610      	mov	r0, r2
 800838e:	e7e9      	b.n	8008364 <__lo0bits+0x2a>
 8008390:	2000      	movs	r0, #0
 8008392:	4770      	bx	lr
 8008394:	2020      	movs	r0, #32
 8008396:	4770      	bx	lr

08008398 <__i2b>:
 8008398:	b510      	push	{r4, lr}
 800839a:	460c      	mov	r4, r1
 800839c:	2101      	movs	r1, #1
 800839e:	f7ff fee9 	bl	8008174 <_Balloc>
 80083a2:	2201      	movs	r2, #1
 80083a4:	6144      	str	r4, [r0, #20]
 80083a6:	6102      	str	r2, [r0, #16]
 80083a8:	bd10      	pop	{r4, pc}

080083aa <__multiply>:
 80083aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ae:	4614      	mov	r4, r2
 80083b0:	690a      	ldr	r2, [r1, #16]
 80083b2:	6923      	ldr	r3, [r4, #16]
 80083b4:	429a      	cmp	r2, r3
 80083b6:	bfb8      	it	lt
 80083b8:	460b      	movlt	r3, r1
 80083ba:	4688      	mov	r8, r1
 80083bc:	bfbc      	itt	lt
 80083be:	46a0      	movlt	r8, r4
 80083c0:	461c      	movlt	r4, r3
 80083c2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80083c6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80083ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80083d2:	eb07 0609 	add.w	r6, r7, r9
 80083d6:	42b3      	cmp	r3, r6
 80083d8:	bfb8      	it	lt
 80083da:	3101      	addlt	r1, #1
 80083dc:	f7ff feca 	bl	8008174 <_Balloc>
 80083e0:	f100 0514 	add.w	r5, r0, #20
 80083e4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80083e8:	462b      	mov	r3, r5
 80083ea:	2200      	movs	r2, #0
 80083ec:	4573      	cmp	r3, lr
 80083ee:	d316      	bcc.n	800841e <__multiply+0x74>
 80083f0:	f104 0214 	add.w	r2, r4, #20
 80083f4:	f108 0114 	add.w	r1, r8, #20
 80083f8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80083fc:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	9b00      	ldr	r3, [sp, #0]
 8008404:	9201      	str	r2, [sp, #4]
 8008406:	4293      	cmp	r3, r2
 8008408:	d80c      	bhi.n	8008424 <__multiply+0x7a>
 800840a:	2e00      	cmp	r6, #0
 800840c:	dd03      	ble.n	8008416 <__multiply+0x6c>
 800840e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008412:	2b00      	cmp	r3, #0
 8008414:	d05d      	beq.n	80084d2 <__multiply+0x128>
 8008416:	6106      	str	r6, [r0, #16]
 8008418:	b003      	add	sp, #12
 800841a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841e:	f843 2b04 	str.w	r2, [r3], #4
 8008422:	e7e3      	b.n	80083ec <__multiply+0x42>
 8008424:	f8b2 b000 	ldrh.w	fp, [r2]
 8008428:	f1bb 0f00 	cmp.w	fp, #0
 800842c:	d023      	beq.n	8008476 <__multiply+0xcc>
 800842e:	4689      	mov	r9, r1
 8008430:	46ac      	mov	ip, r5
 8008432:	f04f 0800 	mov.w	r8, #0
 8008436:	f859 4b04 	ldr.w	r4, [r9], #4
 800843a:	f8dc a000 	ldr.w	sl, [ip]
 800843e:	b2a3      	uxth	r3, r4
 8008440:	fa1f fa8a 	uxth.w	sl, sl
 8008444:	fb0b a303 	mla	r3, fp, r3, sl
 8008448:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800844c:	f8dc 4000 	ldr.w	r4, [ip]
 8008450:	4443      	add	r3, r8
 8008452:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008456:	fb0b 840a 	mla	r4, fp, sl, r8
 800845a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800845e:	46e2      	mov	sl, ip
 8008460:	b29b      	uxth	r3, r3
 8008462:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008466:	454f      	cmp	r7, r9
 8008468:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800846c:	f84a 3b04 	str.w	r3, [sl], #4
 8008470:	d82b      	bhi.n	80084ca <__multiply+0x120>
 8008472:	f8cc 8004 	str.w	r8, [ip, #4]
 8008476:	9b01      	ldr	r3, [sp, #4]
 8008478:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800847c:	3204      	adds	r2, #4
 800847e:	f1ba 0f00 	cmp.w	sl, #0
 8008482:	d020      	beq.n	80084c6 <__multiply+0x11c>
 8008484:	682b      	ldr	r3, [r5, #0]
 8008486:	4689      	mov	r9, r1
 8008488:	46a8      	mov	r8, r5
 800848a:	f04f 0b00 	mov.w	fp, #0
 800848e:	f8b9 c000 	ldrh.w	ip, [r9]
 8008492:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008496:	fb0a 440c 	mla	r4, sl, ip, r4
 800849a:	445c      	add	r4, fp
 800849c:	46c4      	mov	ip, r8
 800849e:	b29b      	uxth	r3, r3
 80084a0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80084a4:	f84c 3b04 	str.w	r3, [ip], #4
 80084a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80084ac:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80084b0:	0c1b      	lsrs	r3, r3, #16
 80084b2:	fb0a b303 	mla	r3, sl, r3, fp
 80084b6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80084ba:	454f      	cmp	r7, r9
 80084bc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80084c0:	d805      	bhi.n	80084ce <__multiply+0x124>
 80084c2:	f8c8 3004 	str.w	r3, [r8, #4]
 80084c6:	3504      	adds	r5, #4
 80084c8:	e79b      	b.n	8008402 <__multiply+0x58>
 80084ca:	46d4      	mov	ip, sl
 80084cc:	e7b3      	b.n	8008436 <__multiply+0x8c>
 80084ce:	46e0      	mov	r8, ip
 80084d0:	e7dd      	b.n	800848e <__multiply+0xe4>
 80084d2:	3e01      	subs	r6, #1
 80084d4:	e799      	b.n	800840a <__multiply+0x60>
	...

080084d8 <__pow5mult>:
 80084d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084dc:	4615      	mov	r5, r2
 80084de:	f012 0203 	ands.w	r2, r2, #3
 80084e2:	4606      	mov	r6, r0
 80084e4:	460f      	mov	r7, r1
 80084e6:	d007      	beq.n	80084f8 <__pow5mult+0x20>
 80084e8:	3a01      	subs	r2, #1
 80084ea:	4c21      	ldr	r4, [pc, #132]	; (8008570 <__pow5mult+0x98>)
 80084ec:	2300      	movs	r3, #0
 80084ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084f2:	f7ff fe8a 	bl	800820a <__multadd>
 80084f6:	4607      	mov	r7, r0
 80084f8:	10ad      	asrs	r5, r5, #2
 80084fa:	d035      	beq.n	8008568 <__pow5mult+0x90>
 80084fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084fe:	b93c      	cbnz	r4, 8008510 <__pow5mult+0x38>
 8008500:	2010      	movs	r0, #16
 8008502:	f7ff fe1d 	bl	8008140 <malloc>
 8008506:	6270      	str	r0, [r6, #36]	; 0x24
 8008508:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800850c:	6004      	str	r4, [r0, #0]
 800850e:	60c4      	str	r4, [r0, #12]
 8008510:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008514:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008518:	b94c      	cbnz	r4, 800852e <__pow5mult+0x56>
 800851a:	f240 2171 	movw	r1, #625	; 0x271
 800851e:	4630      	mov	r0, r6
 8008520:	f7ff ff3a 	bl	8008398 <__i2b>
 8008524:	2300      	movs	r3, #0
 8008526:	f8c8 0008 	str.w	r0, [r8, #8]
 800852a:	4604      	mov	r4, r0
 800852c:	6003      	str	r3, [r0, #0]
 800852e:	f04f 0800 	mov.w	r8, #0
 8008532:	07eb      	lsls	r3, r5, #31
 8008534:	d50a      	bpl.n	800854c <__pow5mult+0x74>
 8008536:	4639      	mov	r1, r7
 8008538:	4622      	mov	r2, r4
 800853a:	4630      	mov	r0, r6
 800853c:	f7ff ff35 	bl	80083aa <__multiply>
 8008540:	4639      	mov	r1, r7
 8008542:	4681      	mov	r9, r0
 8008544:	4630      	mov	r0, r6
 8008546:	f7ff fe49 	bl	80081dc <_Bfree>
 800854a:	464f      	mov	r7, r9
 800854c:	106d      	asrs	r5, r5, #1
 800854e:	d00b      	beq.n	8008568 <__pow5mult+0x90>
 8008550:	6820      	ldr	r0, [r4, #0]
 8008552:	b938      	cbnz	r0, 8008564 <__pow5mult+0x8c>
 8008554:	4622      	mov	r2, r4
 8008556:	4621      	mov	r1, r4
 8008558:	4630      	mov	r0, r6
 800855a:	f7ff ff26 	bl	80083aa <__multiply>
 800855e:	6020      	str	r0, [r4, #0]
 8008560:	f8c0 8000 	str.w	r8, [r0]
 8008564:	4604      	mov	r4, r0
 8008566:	e7e4      	b.n	8008532 <__pow5mult+0x5a>
 8008568:	4638      	mov	r0, r7
 800856a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800856e:	bf00      	nop
 8008570:	080098c8 	.word	0x080098c8

08008574 <__lshift>:
 8008574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	460c      	mov	r4, r1
 800857a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800857e:	6923      	ldr	r3, [r4, #16]
 8008580:	6849      	ldr	r1, [r1, #4]
 8008582:	eb0a 0903 	add.w	r9, sl, r3
 8008586:	68a3      	ldr	r3, [r4, #8]
 8008588:	4607      	mov	r7, r0
 800858a:	4616      	mov	r6, r2
 800858c:	f109 0501 	add.w	r5, r9, #1
 8008590:	42ab      	cmp	r3, r5
 8008592:	db32      	blt.n	80085fa <__lshift+0x86>
 8008594:	4638      	mov	r0, r7
 8008596:	f7ff fded 	bl	8008174 <_Balloc>
 800859a:	2300      	movs	r3, #0
 800859c:	4680      	mov	r8, r0
 800859e:	f100 0114 	add.w	r1, r0, #20
 80085a2:	461a      	mov	r2, r3
 80085a4:	4553      	cmp	r3, sl
 80085a6:	db2b      	blt.n	8008600 <__lshift+0x8c>
 80085a8:	6920      	ldr	r0, [r4, #16]
 80085aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085ae:	f104 0314 	add.w	r3, r4, #20
 80085b2:	f016 021f 	ands.w	r2, r6, #31
 80085b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80085be:	d025      	beq.n	800860c <__lshift+0x98>
 80085c0:	f1c2 0e20 	rsb	lr, r2, #32
 80085c4:	2000      	movs	r0, #0
 80085c6:	681e      	ldr	r6, [r3, #0]
 80085c8:	468a      	mov	sl, r1
 80085ca:	4096      	lsls	r6, r2
 80085cc:	4330      	orrs	r0, r6
 80085ce:	f84a 0b04 	str.w	r0, [sl], #4
 80085d2:	f853 0b04 	ldr.w	r0, [r3], #4
 80085d6:	459c      	cmp	ip, r3
 80085d8:	fa20 f00e 	lsr.w	r0, r0, lr
 80085dc:	d814      	bhi.n	8008608 <__lshift+0x94>
 80085de:	6048      	str	r0, [r1, #4]
 80085e0:	b108      	cbz	r0, 80085e6 <__lshift+0x72>
 80085e2:	f109 0502 	add.w	r5, r9, #2
 80085e6:	3d01      	subs	r5, #1
 80085e8:	4638      	mov	r0, r7
 80085ea:	f8c8 5010 	str.w	r5, [r8, #16]
 80085ee:	4621      	mov	r1, r4
 80085f0:	f7ff fdf4 	bl	80081dc <_Bfree>
 80085f4:	4640      	mov	r0, r8
 80085f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085fa:	3101      	adds	r1, #1
 80085fc:	005b      	lsls	r3, r3, #1
 80085fe:	e7c7      	b.n	8008590 <__lshift+0x1c>
 8008600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008604:	3301      	adds	r3, #1
 8008606:	e7cd      	b.n	80085a4 <__lshift+0x30>
 8008608:	4651      	mov	r1, sl
 800860a:	e7dc      	b.n	80085c6 <__lshift+0x52>
 800860c:	3904      	subs	r1, #4
 800860e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008612:	f841 2f04 	str.w	r2, [r1, #4]!
 8008616:	459c      	cmp	ip, r3
 8008618:	d8f9      	bhi.n	800860e <__lshift+0x9a>
 800861a:	e7e4      	b.n	80085e6 <__lshift+0x72>

0800861c <__mcmp>:
 800861c:	6903      	ldr	r3, [r0, #16]
 800861e:	690a      	ldr	r2, [r1, #16]
 8008620:	1a9b      	subs	r3, r3, r2
 8008622:	b530      	push	{r4, r5, lr}
 8008624:	d10c      	bne.n	8008640 <__mcmp+0x24>
 8008626:	0092      	lsls	r2, r2, #2
 8008628:	3014      	adds	r0, #20
 800862a:	3114      	adds	r1, #20
 800862c:	1884      	adds	r4, r0, r2
 800862e:	4411      	add	r1, r2
 8008630:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008634:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008638:	4295      	cmp	r5, r2
 800863a:	d003      	beq.n	8008644 <__mcmp+0x28>
 800863c:	d305      	bcc.n	800864a <__mcmp+0x2e>
 800863e:	2301      	movs	r3, #1
 8008640:	4618      	mov	r0, r3
 8008642:	bd30      	pop	{r4, r5, pc}
 8008644:	42a0      	cmp	r0, r4
 8008646:	d3f3      	bcc.n	8008630 <__mcmp+0x14>
 8008648:	e7fa      	b.n	8008640 <__mcmp+0x24>
 800864a:	f04f 33ff 	mov.w	r3, #4294967295
 800864e:	e7f7      	b.n	8008640 <__mcmp+0x24>

08008650 <__mdiff>:
 8008650:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008654:	460d      	mov	r5, r1
 8008656:	4607      	mov	r7, r0
 8008658:	4611      	mov	r1, r2
 800865a:	4628      	mov	r0, r5
 800865c:	4614      	mov	r4, r2
 800865e:	f7ff ffdd 	bl	800861c <__mcmp>
 8008662:	1e06      	subs	r6, r0, #0
 8008664:	d108      	bne.n	8008678 <__mdiff+0x28>
 8008666:	4631      	mov	r1, r6
 8008668:	4638      	mov	r0, r7
 800866a:	f7ff fd83 	bl	8008174 <_Balloc>
 800866e:	2301      	movs	r3, #1
 8008670:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008678:	bfa4      	itt	ge
 800867a:	4623      	movge	r3, r4
 800867c:	462c      	movge	r4, r5
 800867e:	4638      	mov	r0, r7
 8008680:	6861      	ldr	r1, [r4, #4]
 8008682:	bfa6      	itte	ge
 8008684:	461d      	movge	r5, r3
 8008686:	2600      	movge	r6, #0
 8008688:	2601      	movlt	r6, #1
 800868a:	f7ff fd73 	bl	8008174 <_Balloc>
 800868e:	692b      	ldr	r3, [r5, #16]
 8008690:	60c6      	str	r6, [r0, #12]
 8008692:	6926      	ldr	r6, [r4, #16]
 8008694:	f105 0914 	add.w	r9, r5, #20
 8008698:	f104 0214 	add.w	r2, r4, #20
 800869c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80086a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80086a4:	f100 0514 	add.w	r5, r0, #20
 80086a8:	f04f 0e00 	mov.w	lr, #0
 80086ac:	f852 ab04 	ldr.w	sl, [r2], #4
 80086b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80086b4:	fa1e f18a 	uxtah	r1, lr, sl
 80086b8:	b2a3      	uxth	r3, r4
 80086ba:	1ac9      	subs	r1, r1, r3
 80086bc:	0c23      	lsrs	r3, r4, #16
 80086be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80086c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80086c6:	b289      	uxth	r1, r1
 80086c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80086cc:	45c8      	cmp	r8, r9
 80086ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80086d2:	4694      	mov	ip, r2
 80086d4:	f845 3b04 	str.w	r3, [r5], #4
 80086d8:	d8e8      	bhi.n	80086ac <__mdiff+0x5c>
 80086da:	45bc      	cmp	ip, r7
 80086dc:	d304      	bcc.n	80086e8 <__mdiff+0x98>
 80086de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80086e2:	b183      	cbz	r3, 8008706 <__mdiff+0xb6>
 80086e4:	6106      	str	r6, [r0, #16]
 80086e6:	e7c5      	b.n	8008674 <__mdiff+0x24>
 80086e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80086ec:	fa1e f381 	uxtah	r3, lr, r1
 80086f0:	141a      	asrs	r2, r3, #16
 80086f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008700:	f845 3b04 	str.w	r3, [r5], #4
 8008704:	e7e9      	b.n	80086da <__mdiff+0x8a>
 8008706:	3e01      	subs	r6, #1
 8008708:	e7e9      	b.n	80086de <__mdiff+0x8e>
	...

0800870c <__ulp>:
 800870c:	4b12      	ldr	r3, [pc, #72]	; (8008758 <__ulp+0x4c>)
 800870e:	ee10 2a90 	vmov	r2, s1
 8008712:	401a      	ands	r2, r3
 8008714:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008718:	2b00      	cmp	r3, #0
 800871a:	dd04      	ble.n	8008726 <__ulp+0x1a>
 800871c:	2000      	movs	r0, #0
 800871e:	4619      	mov	r1, r3
 8008720:	ec41 0b10 	vmov	d0, r0, r1
 8008724:	4770      	bx	lr
 8008726:	425b      	negs	r3, r3
 8008728:	151b      	asrs	r3, r3, #20
 800872a:	2b13      	cmp	r3, #19
 800872c:	f04f 0000 	mov.w	r0, #0
 8008730:	f04f 0100 	mov.w	r1, #0
 8008734:	dc04      	bgt.n	8008740 <__ulp+0x34>
 8008736:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800873a:	fa42 f103 	asr.w	r1, r2, r3
 800873e:	e7ef      	b.n	8008720 <__ulp+0x14>
 8008740:	3b14      	subs	r3, #20
 8008742:	2b1e      	cmp	r3, #30
 8008744:	f04f 0201 	mov.w	r2, #1
 8008748:	bfda      	itte	le
 800874a:	f1c3 031f 	rsble	r3, r3, #31
 800874e:	fa02 f303 	lslle.w	r3, r2, r3
 8008752:	4613      	movgt	r3, r2
 8008754:	4618      	mov	r0, r3
 8008756:	e7e3      	b.n	8008720 <__ulp+0x14>
 8008758:	7ff00000 	.word	0x7ff00000

0800875c <__b2d>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	6905      	ldr	r5, [r0, #16]
 8008760:	f100 0714 	add.w	r7, r0, #20
 8008764:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008768:	1f2e      	subs	r6, r5, #4
 800876a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff fdc4 	bl	80082fc <__hi0bits>
 8008774:	f1c0 0320 	rsb	r3, r0, #32
 8008778:	280a      	cmp	r0, #10
 800877a:	600b      	str	r3, [r1, #0]
 800877c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80087f4 <__b2d+0x98>
 8008780:	dc14      	bgt.n	80087ac <__b2d+0x50>
 8008782:	f1c0 0e0b 	rsb	lr, r0, #11
 8008786:	fa24 f10e 	lsr.w	r1, r4, lr
 800878a:	42b7      	cmp	r7, r6
 800878c:	ea41 030c 	orr.w	r3, r1, ip
 8008790:	bf34      	ite	cc
 8008792:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008796:	2100      	movcs	r1, #0
 8008798:	3015      	adds	r0, #21
 800879a:	fa04 f000 	lsl.w	r0, r4, r0
 800879e:	fa21 f10e 	lsr.w	r1, r1, lr
 80087a2:	ea40 0201 	orr.w	r2, r0, r1
 80087a6:	ec43 2b10 	vmov	d0, r2, r3
 80087aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ac:	42b7      	cmp	r7, r6
 80087ae:	bf3a      	itte	cc
 80087b0:	f1a5 0608 	subcc.w	r6, r5, #8
 80087b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80087b8:	2100      	movcs	r1, #0
 80087ba:	380b      	subs	r0, #11
 80087bc:	d015      	beq.n	80087ea <__b2d+0x8e>
 80087be:	4084      	lsls	r4, r0
 80087c0:	f1c0 0520 	rsb	r5, r0, #32
 80087c4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80087c8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80087cc:	42be      	cmp	r6, r7
 80087ce:	fa21 fc05 	lsr.w	ip, r1, r5
 80087d2:	ea44 030c 	orr.w	r3, r4, ip
 80087d6:	bf8c      	ite	hi
 80087d8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80087dc:	2400      	movls	r4, #0
 80087de:	fa01 f000 	lsl.w	r0, r1, r0
 80087e2:	40ec      	lsrs	r4, r5
 80087e4:	ea40 0204 	orr.w	r2, r0, r4
 80087e8:	e7dd      	b.n	80087a6 <__b2d+0x4a>
 80087ea:	ea44 030c 	orr.w	r3, r4, ip
 80087ee:	460a      	mov	r2, r1
 80087f0:	e7d9      	b.n	80087a6 <__b2d+0x4a>
 80087f2:	bf00      	nop
 80087f4:	3ff00000 	.word	0x3ff00000

080087f8 <__d2b>:
 80087f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	460e      	mov	r6, r1
 80087fe:	2101      	movs	r1, #1
 8008800:	ec59 8b10 	vmov	r8, r9, d0
 8008804:	4615      	mov	r5, r2
 8008806:	f7ff fcb5 	bl	8008174 <_Balloc>
 800880a:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800880e:	4607      	mov	r7, r0
 8008810:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008814:	bb34      	cbnz	r4, 8008864 <__d2b+0x6c>
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	f1b8 0300 	subs.w	r3, r8, #0
 800881c:	d027      	beq.n	800886e <__d2b+0x76>
 800881e:	a802      	add	r0, sp, #8
 8008820:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008824:	f7ff fd89 	bl	800833a <__lo0bits>
 8008828:	9900      	ldr	r1, [sp, #0]
 800882a:	b1f0      	cbz	r0, 800886a <__d2b+0x72>
 800882c:	9a01      	ldr	r2, [sp, #4]
 800882e:	f1c0 0320 	rsb	r3, r0, #32
 8008832:	fa02 f303 	lsl.w	r3, r2, r3
 8008836:	430b      	orrs	r3, r1
 8008838:	40c2      	lsrs	r2, r0
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	9201      	str	r2, [sp, #4]
 800883e:	9b01      	ldr	r3, [sp, #4]
 8008840:	61bb      	str	r3, [r7, #24]
 8008842:	2b00      	cmp	r3, #0
 8008844:	bf14      	ite	ne
 8008846:	2102      	movne	r1, #2
 8008848:	2101      	moveq	r1, #1
 800884a:	6139      	str	r1, [r7, #16]
 800884c:	b1c4      	cbz	r4, 8008880 <__d2b+0x88>
 800884e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008852:	4404      	add	r4, r0
 8008854:	6034      	str	r4, [r6, #0]
 8008856:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800885a:	6028      	str	r0, [r5, #0]
 800885c:	4638      	mov	r0, r7
 800885e:	b003      	add	sp, #12
 8008860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008868:	e7d5      	b.n	8008816 <__d2b+0x1e>
 800886a:	6179      	str	r1, [r7, #20]
 800886c:	e7e7      	b.n	800883e <__d2b+0x46>
 800886e:	a801      	add	r0, sp, #4
 8008870:	f7ff fd63 	bl	800833a <__lo0bits>
 8008874:	9b01      	ldr	r3, [sp, #4]
 8008876:	617b      	str	r3, [r7, #20]
 8008878:	2101      	movs	r1, #1
 800887a:	6139      	str	r1, [r7, #16]
 800887c:	3020      	adds	r0, #32
 800887e:	e7e5      	b.n	800884c <__d2b+0x54>
 8008880:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008884:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008888:	6030      	str	r0, [r6, #0]
 800888a:	6918      	ldr	r0, [r3, #16]
 800888c:	f7ff fd36 	bl	80082fc <__hi0bits>
 8008890:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008894:	e7e1      	b.n	800885a <__d2b+0x62>

08008896 <__ratio>:
 8008896:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800889a:	4688      	mov	r8, r1
 800889c:	4669      	mov	r1, sp
 800889e:	4681      	mov	r9, r0
 80088a0:	f7ff ff5c 	bl	800875c <__b2d>
 80088a4:	a901      	add	r1, sp, #4
 80088a6:	4640      	mov	r0, r8
 80088a8:	ec57 6b10 	vmov	r6, r7, d0
 80088ac:	f7ff ff56 	bl	800875c <__b2d>
 80088b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80088b4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80088b8:	eba3 0c02 	sub.w	ip, r3, r2
 80088bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80088c0:	1a9b      	subs	r3, r3, r2
 80088c2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80088c6:	ec5b ab10 	vmov	sl, fp, d0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfce      	itee	gt
 80088ce:	463a      	movgt	r2, r7
 80088d0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80088d4:	465a      	movle	r2, fp
 80088d6:	4659      	mov	r1, fp
 80088d8:	463d      	mov	r5, r7
 80088da:	bfd4      	ite	le
 80088dc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80088e0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80088e4:	4630      	mov	r0, r6
 80088e6:	ee10 2a10 	vmov	r2, s0
 80088ea:	460b      	mov	r3, r1
 80088ec:	4629      	mov	r1, r5
 80088ee:	f7f7 ffb5 	bl	800085c <__aeabi_ddiv>
 80088f2:	ec41 0b10 	vmov	d0, r0, r1
 80088f6:	b003      	add	sp, #12
 80088f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080088fc <__copybits>:
 80088fc:	3901      	subs	r1, #1
 80088fe:	b510      	push	{r4, lr}
 8008900:	1149      	asrs	r1, r1, #5
 8008902:	6914      	ldr	r4, [r2, #16]
 8008904:	3101      	adds	r1, #1
 8008906:	f102 0314 	add.w	r3, r2, #20
 800890a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800890e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008912:	42a3      	cmp	r3, r4
 8008914:	4602      	mov	r2, r0
 8008916:	d303      	bcc.n	8008920 <__copybits+0x24>
 8008918:	2300      	movs	r3, #0
 800891a:	428a      	cmp	r2, r1
 800891c:	d305      	bcc.n	800892a <__copybits+0x2e>
 800891e:	bd10      	pop	{r4, pc}
 8008920:	f853 2b04 	ldr.w	r2, [r3], #4
 8008924:	f840 2b04 	str.w	r2, [r0], #4
 8008928:	e7f3      	b.n	8008912 <__copybits+0x16>
 800892a:	f842 3b04 	str.w	r3, [r2], #4
 800892e:	e7f4      	b.n	800891a <__copybits+0x1e>

08008930 <__any_on>:
 8008930:	f100 0214 	add.w	r2, r0, #20
 8008934:	6900      	ldr	r0, [r0, #16]
 8008936:	114b      	asrs	r3, r1, #5
 8008938:	4298      	cmp	r0, r3
 800893a:	b510      	push	{r4, lr}
 800893c:	db11      	blt.n	8008962 <__any_on+0x32>
 800893e:	dd0a      	ble.n	8008956 <__any_on+0x26>
 8008940:	f011 011f 	ands.w	r1, r1, #31
 8008944:	d007      	beq.n	8008956 <__any_on+0x26>
 8008946:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800894a:	fa24 f001 	lsr.w	r0, r4, r1
 800894e:	fa00 f101 	lsl.w	r1, r0, r1
 8008952:	428c      	cmp	r4, r1
 8008954:	d10b      	bne.n	800896e <__any_on+0x3e>
 8008956:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800895a:	4293      	cmp	r3, r2
 800895c:	d803      	bhi.n	8008966 <__any_on+0x36>
 800895e:	2000      	movs	r0, #0
 8008960:	bd10      	pop	{r4, pc}
 8008962:	4603      	mov	r3, r0
 8008964:	e7f7      	b.n	8008956 <__any_on+0x26>
 8008966:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800896a:	2900      	cmp	r1, #0
 800896c:	d0f5      	beq.n	800895a <__any_on+0x2a>
 800896e:	2001      	movs	r0, #1
 8008970:	e7f6      	b.n	8008960 <__any_on+0x30>

08008972 <_calloc_r>:
 8008972:	b538      	push	{r3, r4, r5, lr}
 8008974:	fb02 f401 	mul.w	r4, r2, r1
 8008978:	4621      	mov	r1, r4
 800897a:	f000 f857 	bl	8008a2c <_malloc_r>
 800897e:	4605      	mov	r5, r0
 8008980:	b118      	cbz	r0, 800898a <_calloc_r+0x18>
 8008982:	4622      	mov	r2, r4
 8008984:	2100      	movs	r1, #0
 8008986:	f7fc fc1c 	bl	80051c2 <memset>
 800898a:	4628      	mov	r0, r5
 800898c:	bd38      	pop	{r3, r4, r5, pc}
	...

08008990 <_free_r>:
 8008990:	b538      	push	{r3, r4, r5, lr}
 8008992:	4605      	mov	r5, r0
 8008994:	2900      	cmp	r1, #0
 8008996:	d045      	beq.n	8008a24 <_free_r+0x94>
 8008998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800899c:	1f0c      	subs	r4, r1, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	bfb8      	it	lt
 80089a2:	18e4      	addlt	r4, r4, r3
 80089a4:	f000 fdc3 	bl	800952e <__malloc_lock>
 80089a8:	4a1f      	ldr	r2, [pc, #124]	; (8008a28 <_free_r+0x98>)
 80089aa:	6813      	ldr	r3, [r2, #0]
 80089ac:	4610      	mov	r0, r2
 80089ae:	b933      	cbnz	r3, 80089be <_free_r+0x2e>
 80089b0:	6063      	str	r3, [r4, #4]
 80089b2:	6014      	str	r4, [r2, #0]
 80089b4:	4628      	mov	r0, r5
 80089b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089ba:	f000 bdb9 	b.w	8009530 <__malloc_unlock>
 80089be:	42a3      	cmp	r3, r4
 80089c0:	d90c      	bls.n	80089dc <_free_r+0x4c>
 80089c2:	6821      	ldr	r1, [r4, #0]
 80089c4:	1862      	adds	r2, r4, r1
 80089c6:	4293      	cmp	r3, r2
 80089c8:	bf04      	itt	eq
 80089ca:	681a      	ldreq	r2, [r3, #0]
 80089cc:	685b      	ldreq	r3, [r3, #4]
 80089ce:	6063      	str	r3, [r4, #4]
 80089d0:	bf04      	itt	eq
 80089d2:	1852      	addeq	r2, r2, r1
 80089d4:	6022      	streq	r2, [r4, #0]
 80089d6:	6004      	str	r4, [r0, #0]
 80089d8:	e7ec      	b.n	80089b4 <_free_r+0x24>
 80089da:	4613      	mov	r3, r2
 80089dc:	685a      	ldr	r2, [r3, #4]
 80089de:	b10a      	cbz	r2, 80089e4 <_free_r+0x54>
 80089e0:	42a2      	cmp	r2, r4
 80089e2:	d9fa      	bls.n	80089da <_free_r+0x4a>
 80089e4:	6819      	ldr	r1, [r3, #0]
 80089e6:	1858      	adds	r0, r3, r1
 80089e8:	42a0      	cmp	r0, r4
 80089ea:	d10b      	bne.n	8008a04 <_free_r+0x74>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	4401      	add	r1, r0
 80089f0:	1858      	adds	r0, r3, r1
 80089f2:	4282      	cmp	r2, r0
 80089f4:	6019      	str	r1, [r3, #0]
 80089f6:	d1dd      	bne.n	80089b4 <_free_r+0x24>
 80089f8:	6810      	ldr	r0, [r2, #0]
 80089fa:	6852      	ldr	r2, [r2, #4]
 80089fc:	605a      	str	r2, [r3, #4]
 80089fe:	4401      	add	r1, r0
 8008a00:	6019      	str	r1, [r3, #0]
 8008a02:	e7d7      	b.n	80089b4 <_free_r+0x24>
 8008a04:	d902      	bls.n	8008a0c <_free_r+0x7c>
 8008a06:	230c      	movs	r3, #12
 8008a08:	602b      	str	r3, [r5, #0]
 8008a0a:	e7d3      	b.n	80089b4 <_free_r+0x24>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	1821      	adds	r1, r4, r0
 8008a10:	428a      	cmp	r2, r1
 8008a12:	bf04      	itt	eq
 8008a14:	6811      	ldreq	r1, [r2, #0]
 8008a16:	6852      	ldreq	r2, [r2, #4]
 8008a18:	6062      	str	r2, [r4, #4]
 8008a1a:	bf04      	itt	eq
 8008a1c:	1809      	addeq	r1, r1, r0
 8008a1e:	6021      	streq	r1, [r4, #0]
 8008a20:	605c      	str	r4, [r3, #4]
 8008a22:	e7c7      	b.n	80089b4 <_free_r+0x24>
 8008a24:	bd38      	pop	{r3, r4, r5, pc}
 8008a26:	bf00      	nop
 8008a28:	20000258 	.word	0x20000258

08008a2c <_malloc_r>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	1ccd      	adds	r5, r1, #3
 8008a30:	f025 0503 	bic.w	r5, r5, #3
 8008a34:	3508      	adds	r5, #8
 8008a36:	2d0c      	cmp	r5, #12
 8008a38:	bf38      	it	cc
 8008a3a:	250c      	movcc	r5, #12
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	4606      	mov	r6, r0
 8008a40:	db01      	blt.n	8008a46 <_malloc_r+0x1a>
 8008a42:	42a9      	cmp	r1, r5
 8008a44:	d903      	bls.n	8008a4e <_malloc_r+0x22>
 8008a46:	230c      	movs	r3, #12
 8008a48:	6033      	str	r3, [r6, #0]
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
 8008a4e:	f000 fd6e 	bl	800952e <__malloc_lock>
 8008a52:	4a21      	ldr	r2, [pc, #132]	; (8008ad8 <_malloc_r+0xac>)
 8008a54:	6814      	ldr	r4, [r2, #0]
 8008a56:	4621      	mov	r1, r4
 8008a58:	b991      	cbnz	r1, 8008a80 <_malloc_r+0x54>
 8008a5a:	4c20      	ldr	r4, [pc, #128]	; (8008adc <_malloc_r+0xb0>)
 8008a5c:	6823      	ldr	r3, [r4, #0]
 8008a5e:	b91b      	cbnz	r3, 8008a68 <_malloc_r+0x3c>
 8008a60:	4630      	mov	r0, r6
 8008a62:	f000 facf 	bl	8009004 <_sbrk_r>
 8008a66:	6020      	str	r0, [r4, #0]
 8008a68:	4629      	mov	r1, r5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f000 faca 	bl	8009004 <_sbrk_r>
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d124      	bne.n	8008abe <_malloc_r+0x92>
 8008a74:	230c      	movs	r3, #12
 8008a76:	6033      	str	r3, [r6, #0]
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 fd59 	bl	8009530 <__malloc_unlock>
 8008a7e:	e7e4      	b.n	8008a4a <_malloc_r+0x1e>
 8008a80:	680b      	ldr	r3, [r1, #0]
 8008a82:	1b5b      	subs	r3, r3, r5
 8008a84:	d418      	bmi.n	8008ab8 <_malloc_r+0x8c>
 8008a86:	2b0b      	cmp	r3, #11
 8008a88:	d90f      	bls.n	8008aaa <_malloc_r+0x7e>
 8008a8a:	600b      	str	r3, [r1, #0]
 8008a8c:	50cd      	str	r5, [r1, r3]
 8008a8e:	18cc      	adds	r4, r1, r3
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 fd4d 	bl	8009530 <__malloc_unlock>
 8008a96:	f104 000b 	add.w	r0, r4, #11
 8008a9a:	1d23      	adds	r3, r4, #4
 8008a9c:	f020 0007 	bic.w	r0, r0, #7
 8008aa0:	1ac3      	subs	r3, r0, r3
 8008aa2:	d0d3      	beq.n	8008a4c <_malloc_r+0x20>
 8008aa4:	425a      	negs	r2, r3
 8008aa6:	50e2      	str	r2, [r4, r3]
 8008aa8:	e7d0      	b.n	8008a4c <_malloc_r+0x20>
 8008aaa:	428c      	cmp	r4, r1
 8008aac:	684b      	ldr	r3, [r1, #4]
 8008aae:	bf16      	itet	ne
 8008ab0:	6063      	strne	r3, [r4, #4]
 8008ab2:	6013      	streq	r3, [r2, #0]
 8008ab4:	460c      	movne	r4, r1
 8008ab6:	e7eb      	b.n	8008a90 <_malloc_r+0x64>
 8008ab8:	460c      	mov	r4, r1
 8008aba:	6849      	ldr	r1, [r1, #4]
 8008abc:	e7cc      	b.n	8008a58 <_malloc_r+0x2c>
 8008abe:	1cc4      	adds	r4, r0, #3
 8008ac0:	f024 0403 	bic.w	r4, r4, #3
 8008ac4:	42a0      	cmp	r0, r4
 8008ac6:	d005      	beq.n	8008ad4 <_malloc_r+0xa8>
 8008ac8:	1a21      	subs	r1, r4, r0
 8008aca:	4630      	mov	r0, r6
 8008acc:	f000 fa9a 	bl	8009004 <_sbrk_r>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d0cf      	beq.n	8008a74 <_malloc_r+0x48>
 8008ad4:	6025      	str	r5, [r4, #0]
 8008ad6:	e7db      	b.n	8008a90 <_malloc_r+0x64>
 8008ad8:	20000258 	.word	0x20000258
 8008adc:	2000025c 	.word	0x2000025c

08008ae0 <__ssputs_r>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	688e      	ldr	r6, [r1, #8]
 8008ae6:	429e      	cmp	r6, r3
 8008ae8:	4682      	mov	sl, r0
 8008aea:	460c      	mov	r4, r1
 8008aec:	4690      	mov	r8, r2
 8008aee:	4699      	mov	r9, r3
 8008af0:	d837      	bhi.n	8008b62 <__ssputs_r+0x82>
 8008af2:	898a      	ldrh	r2, [r1, #12]
 8008af4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008af8:	d031      	beq.n	8008b5e <__ssputs_r+0x7e>
 8008afa:	6825      	ldr	r5, [r4, #0]
 8008afc:	6909      	ldr	r1, [r1, #16]
 8008afe:	1a6f      	subs	r7, r5, r1
 8008b00:	6965      	ldr	r5, [r4, #20]
 8008b02:	2302      	movs	r3, #2
 8008b04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b08:	fb95 f5f3 	sdiv	r5, r5, r3
 8008b0c:	f109 0301 	add.w	r3, r9, #1
 8008b10:	443b      	add	r3, r7
 8008b12:	429d      	cmp	r5, r3
 8008b14:	bf38      	it	cc
 8008b16:	461d      	movcc	r5, r3
 8008b18:	0553      	lsls	r3, r2, #21
 8008b1a:	d530      	bpl.n	8008b7e <__ssputs_r+0x9e>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	f7ff ff85 	bl	8008a2c <_malloc_r>
 8008b22:	4606      	mov	r6, r0
 8008b24:	b950      	cbnz	r0, 8008b3c <__ssputs_r+0x5c>
 8008b26:	230c      	movs	r3, #12
 8008b28:	f8ca 3000 	str.w	r3, [sl]
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b32:	81a3      	strh	r3, [r4, #12]
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	463a      	mov	r2, r7
 8008b3e:	6921      	ldr	r1, [r4, #16]
 8008b40:	f7fc fb34 	bl	80051ac <memcpy>
 8008b44:	89a3      	ldrh	r3, [r4, #12]
 8008b46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4e:	81a3      	strh	r3, [r4, #12]
 8008b50:	6126      	str	r6, [r4, #16]
 8008b52:	6165      	str	r5, [r4, #20]
 8008b54:	443e      	add	r6, r7
 8008b56:	1bed      	subs	r5, r5, r7
 8008b58:	6026      	str	r6, [r4, #0]
 8008b5a:	60a5      	str	r5, [r4, #8]
 8008b5c:	464e      	mov	r6, r9
 8008b5e:	454e      	cmp	r6, r9
 8008b60:	d900      	bls.n	8008b64 <__ssputs_r+0x84>
 8008b62:	464e      	mov	r6, r9
 8008b64:	4632      	mov	r2, r6
 8008b66:	4641      	mov	r1, r8
 8008b68:	6820      	ldr	r0, [r4, #0]
 8008b6a:	f000 fcc7 	bl	80094fc <memmove>
 8008b6e:	68a3      	ldr	r3, [r4, #8]
 8008b70:	1b9b      	subs	r3, r3, r6
 8008b72:	60a3      	str	r3, [r4, #8]
 8008b74:	6823      	ldr	r3, [r4, #0]
 8008b76:	441e      	add	r6, r3
 8008b78:	6026      	str	r6, [r4, #0]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	e7dc      	b.n	8008b38 <__ssputs_r+0x58>
 8008b7e:	462a      	mov	r2, r5
 8008b80:	f000 fcd7 	bl	8009532 <_realloc_r>
 8008b84:	4606      	mov	r6, r0
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d1e2      	bne.n	8008b50 <__ssputs_r+0x70>
 8008b8a:	6921      	ldr	r1, [r4, #16]
 8008b8c:	4650      	mov	r0, sl
 8008b8e:	f7ff feff 	bl	8008990 <_free_r>
 8008b92:	e7c8      	b.n	8008b26 <__ssputs_r+0x46>

08008b94 <_svfiprintf_r>:
 8008b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b98:	461d      	mov	r5, r3
 8008b9a:	898b      	ldrh	r3, [r1, #12]
 8008b9c:	061f      	lsls	r7, r3, #24
 8008b9e:	b09d      	sub	sp, #116	; 0x74
 8008ba0:	4680      	mov	r8, r0
 8008ba2:	460c      	mov	r4, r1
 8008ba4:	4616      	mov	r6, r2
 8008ba6:	d50f      	bpl.n	8008bc8 <_svfiprintf_r+0x34>
 8008ba8:	690b      	ldr	r3, [r1, #16]
 8008baa:	b96b      	cbnz	r3, 8008bc8 <_svfiprintf_r+0x34>
 8008bac:	2140      	movs	r1, #64	; 0x40
 8008bae:	f7ff ff3d 	bl	8008a2c <_malloc_r>
 8008bb2:	6020      	str	r0, [r4, #0]
 8008bb4:	6120      	str	r0, [r4, #16]
 8008bb6:	b928      	cbnz	r0, 8008bc4 <_svfiprintf_r+0x30>
 8008bb8:	230c      	movs	r3, #12
 8008bba:	f8c8 3000 	str.w	r3, [r8]
 8008bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc2:	e0c8      	b.n	8008d56 <_svfiprintf_r+0x1c2>
 8008bc4:	2340      	movs	r3, #64	; 0x40
 8008bc6:	6163      	str	r3, [r4, #20]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9309      	str	r3, [sp, #36]	; 0x24
 8008bcc:	2320      	movs	r3, #32
 8008bce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bd2:	2330      	movs	r3, #48	; 0x30
 8008bd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008bd8:	9503      	str	r5, [sp, #12]
 8008bda:	f04f 0b01 	mov.w	fp, #1
 8008bde:	4637      	mov	r7, r6
 8008be0:	463d      	mov	r5, r7
 8008be2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008be6:	b10b      	cbz	r3, 8008bec <_svfiprintf_r+0x58>
 8008be8:	2b25      	cmp	r3, #37	; 0x25
 8008bea:	d13e      	bne.n	8008c6a <_svfiprintf_r+0xd6>
 8008bec:	ebb7 0a06 	subs.w	sl, r7, r6
 8008bf0:	d00b      	beq.n	8008c0a <_svfiprintf_r+0x76>
 8008bf2:	4653      	mov	r3, sl
 8008bf4:	4632      	mov	r2, r6
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	4640      	mov	r0, r8
 8008bfa:	f7ff ff71 	bl	8008ae0 <__ssputs_r>
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f000 80a4 	beq.w	8008d4c <_svfiprintf_r+0x1b8>
 8008c04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c06:	4453      	add	r3, sl
 8008c08:	9309      	str	r3, [sp, #36]	; 0x24
 8008c0a:	783b      	ldrb	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 809d 	beq.w	8008d4c <_svfiprintf_r+0x1b8>
 8008c12:	2300      	movs	r3, #0
 8008c14:	f04f 32ff 	mov.w	r2, #4294967295
 8008c18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	9307      	str	r3, [sp, #28]
 8008c20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c24:	931a      	str	r3, [sp, #104]	; 0x68
 8008c26:	462f      	mov	r7, r5
 8008c28:	2205      	movs	r2, #5
 8008c2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008c2e:	4850      	ldr	r0, [pc, #320]	; (8008d70 <_svfiprintf_r+0x1dc>)
 8008c30:	f7f7 fade 	bl	80001f0 <memchr>
 8008c34:	9b04      	ldr	r3, [sp, #16]
 8008c36:	b9d0      	cbnz	r0, 8008c6e <_svfiprintf_r+0xda>
 8008c38:	06d9      	lsls	r1, r3, #27
 8008c3a:	bf44      	itt	mi
 8008c3c:	2220      	movmi	r2, #32
 8008c3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c42:	071a      	lsls	r2, r3, #28
 8008c44:	bf44      	itt	mi
 8008c46:	222b      	movmi	r2, #43	; 0x2b
 8008c48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008c4c:	782a      	ldrb	r2, [r5, #0]
 8008c4e:	2a2a      	cmp	r2, #42	; 0x2a
 8008c50:	d015      	beq.n	8008c7e <_svfiprintf_r+0xea>
 8008c52:	9a07      	ldr	r2, [sp, #28]
 8008c54:	462f      	mov	r7, r5
 8008c56:	2000      	movs	r0, #0
 8008c58:	250a      	movs	r5, #10
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c60:	3b30      	subs	r3, #48	; 0x30
 8008c62:	2b09      	cmp	r3, #9
 8008c64:	d94d      	bls.n	8008d02 <_svfiprintf_r+0x16e>
 8008c66:	b1b8      	cbz	r0, 8008c98 <_svfiprintf_r+0x104>
 8008c68:	e00f      	b.n	8008c8a <_svfiprintf_r+0xf6>
 8008c6a:	462f      	mov	r7, r5
 8008c6c:	e7b8      	b.n	8008be0 <_svfiprintf_r+0x4c>
 8008c6e:	4a40      	ldr	r2, [pc, #256]	; (8008d70 <_svfiprintf_r+0x1dc>)
 8008c70:	1a80      	subs	r0, r0, r2
 8008c72:	fa0b f000 	lsl.w	r0, fp, r0
 8008c76:	4318      	orrs	r0, r3
 8008c78:	9004      	str	r0, [sp, #16]
 8008c7a:	463d      	mov	r5, r7
 8008c7c:	e7d3      	b.n	8008c26 <_svfiprintf_r+0x92>
 8008c7e:	9a03      	ldr	r2, [sp, #12]
 8008c80:	1d11      	adds	r1, r2, #4
 8008c82:	6812      	ldr	r2, [r2, #0]
 8008c84:	9103      	str	r1, [sp, #12]
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	db01      	blt.n	8008c8e <_svfiprintf_r+0xfa>
 8008c8a:	9207      	str	r2, [sp, #28]
 8008c8c:	e004      	b.n	8008c98 <_svfiprintf_r+0x104>
 8008c8e:	4252      	negs	r2, r2
 8008c90:	f043 0302 	orr.w	r3, r3, #2
 8008c94:	9207      	str	r2, [sp, #28]
 8008c96:	9304      	str	r3, [sp, #16]
 8008c98:	783b      	ldrb	r3, [r7, #0]
 8008c9a:	2b2e      	cmp	r3, #46	; 0x2e
 8008c9c:	d10c      	bne.n	8008cb8 <_svfiprintf_r+0x124>
 8008c9e:	787b      	ldrb	r3, [r7, #1]
 8008ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8008ca2:	d133      	bne.n	8008d0c <_svfiprintf_r+0x178>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	1d1a      	adds	r2, r3, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	9203      	str	r2, [sp, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	bfb8      	it	lt
 8008cb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cb4:	3702      	adds	r7, #2
 8008cb6:	9305      	str	r3, [sp, #20]
 8008cb8:	4d2e      	ldr	r5, [pc, #184]	; (8008d74 <_svfiprintf_r+0x1e0>)
 8008cba:	7839      	ldrb	r1, [r7, #0]
 8008cbc:	2203      	movs	r2, #3
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	f7f7 fa96 	bl	80001f0 <memchr>
 8008cc4:	b138      	cbz	r0, 8008cd6 <_svfiprintf_r+0x142>
 8008cc6:	2340      	movs	r3, #64	; 0x40
 8008cc8:	1b40      	subs	r0, r0, r5
 8008cca:	fa03 f000 	lsl.w	r0, r3, r0
 8008cce:	9b04      	ldr	r3, [sp, #16]
 8008cd0:	4303      	orrs	r3, r0
 8008cd2:	3701      	adds	r7, #1
 8008cd4:	9304      	str	r3, [sp, #16]
 8008cd6:	7839      	ldrb	r1, [r7, #0]
 8008cd8:	4827      	ldr	r0, [pc, #156]	; (8008d78 <_svfiprintf_r+0x1e4>)
 8008cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008cde:	2206      	movs	r2, #6
 8008ce0:	1c7e      	adds	r6, r7, #1
 8008ce2:	f7f7 fa85 	bl	80001f0 <memchr>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d038      	beq.n	8008d5c <_svfiprintf_r+0x1c8>
 8008cea:	4b24      	ldr	r3, [pc, #144]	; (8008d7c <_svfiprintf_r+0x1e8>)
 8008cec:	bb13      	cbnz	r3, 8008d34 <_svfiprintf_r+0x1a0>
 8008cee:	9b03      	ldr	r3, [sp, #12]
 8008cf0:	3307      	adds	r3, #7
 8008cf2:	f023 0307 	bic.w	r3, r3, #7
 8008cf6:	3308      	adds	r3, #8
 8008cf8:	9303      	str	r3, [sp, #12]
 8008cfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfc:	444b      	add	r3, r9
 8008cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8008d00:	e76d      	b.n	8008bde <_svfiprintf_r+0x4a>
 8008d02:	fb05 3202 	mla	r2, r5, r2, r3
 8008d06:	2001      	movs	r0, #1
 8008d08:	460f      	mov	r7, r1
 8008d0a:	e7a6      	b.n	8008c5a <_svfiprintf_r+0xc6>
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	3701      	adds	r7, #1
 8008d10:	9305      	str	r3, [sp, #20]
 8008d12:	4619      	mov	r1, r3
 8008d14:	250a      	movs	r5, #10
 8008d16:	4638      	mov	r0, r7
 8008d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d1c:	3a30      	subs	r2, #48	; 0x30
 8008d1e:	2a09      	cmp	r2, #9
 8008d20:	d903      	bls.n	8008d2a <_svfiprintf_r+0x196>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d0c8      	beq.n	8008cb8 <_svfiprintf_r+0x124>
 8008d26:	9105      	str	r1, [sp, #20]
 8008d28:	e7c6      	b.n	8008cb8 <_svfiprintf_r+0x124>
 8008d2a:	fb05 2101 	mla	r1, r5, r1, r2
 8008d2e:	2301      	movs	r3, #1
 8008d30:	4607      	mov	r7, r0
 8008d32:	e7f0      	b.n	8008d16 <_svfiprintf_r+0x182>
 8008d34:	ab03      	add	r3, sp, #12
 8008d36:	9300      	str	r3, [sp, #0]
 8008d38:	4622      	mov	r2, r4
 8008d3a:	4b11      	ldr	r3, [pc, #68]	; (8008d80 <_svfiprintf_r+0x1ec>)
 8008d3c:	a904      	add	r1, sp, #16
 8008d3e:	4640      	mov	r0, r8
 8008d40:	f7fc fadc 	bl	80052fc <_printf_float>
 8008d44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008d48:	4681      	mov	r9, r0
 8008d4a:	d1d6      	bne.n	8008cfa <_svfiprintf_r+0x166>
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	065b      	lsls	r3, r3, #25
 8008d50:	f53f af35 	bmi.w	8008bbe <_svfiprintf_r+0x2a>
 8008d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d56:	b01d      	add	sp, #116	; 0x74
 8008d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	ab03      	add	r3, sp, #12
 8008d5e:	9300      	str	r3, [sp, #0]
 8008d60:	4622      	mov	r2, r4
 8008d62:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <_svfiprintf_r+0x1ec>)
 8008d64:	a904      	add	r1, sp, #16
 8008d66:	4640      	mov	r0, r8
 8008d68:	f7fc fd7e 	bl	8005868 <_printf_i>
 8008d6c:	e7ea      	b.n	8008d44 <_svfiprintf_r+0x1b0>
 8008d6e:	bf00      	nop
 8008d70:	080098d4 	.word	0x080098d4
 8008d74:	080098da 	.word	0x080098da
 8008d78:	080098de 	.word	0x080098de
 8008d7c:	080052fd 	.word	0x080052fd
 8008d80:	08008ae1 	.word	0x08008ae1

08008d84 <__sfputc_r>:
 8008d84:	6893      	ldr	r3, [r2, #8]
 8008d86:	3b01      	subs	r3, #1
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	b410      	push	{r4}
 8008d8c:	6093      	str	r3, [r2, #8]
 8008d8e:	da08      	bge.n	8008da2 <__sfputc_r+0x1e>
 8008d90:	6994      	ldr	r4, [r2, #24]
 8008d92:	42a3      	cmp	r3, r4
 8008d94:	db01      	blt.n	8008d9a <__sfputc_r+0x16>
 8008d96:	290a      	cmp	r1, #10
 8008d98:	d103      	bne.n	8008da2 <__sfputc_r+0x1e>
 8008d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d9e:	f000 b997 	b.w	80090d0 <__swbuf_r>
 8008da2:	6813      	ldr	r3, [r2, #0]
 8008da4:	1c58      	adds	r0, r3, #1
 8008da6:	6010      	str	r0, [r2, #0]
 8008da8:	7019      	strb	r1, [r3, #0]
 8008daa:	4608      	mov	r0, r1
 8008dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db0:	4770      	bx	lr

08008db2 <__sfputs_r>:
 8008db2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	4614      	mov	r4, r2
 8008dba:	18d5      	adds	r5, r2, r3
 8008dbc:	42ac      	cmp	r4, r5
 8008dbe:	d101      	bne.n	8008dc4 <__sfputs_r+0x12>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e007      	b.n	8008dd4 <__sfputs_r+0x22>
 8008dc4:	463a      	mov	r2, r7
 8008dc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dca:	4630      	mov	r0, r6
 8008dcc:	f7ff ffda 	bl	8008d84 <__sfputc_r>
 8008dd0:	1c43      	adds	r3, r0, #1
 8008dd2:	d1f3      	bne.n	8008dbc <__sfputs_r+0xa>
 8008dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008dd8 <_vfiprintf_r>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	b09d      	sub	sp, #116	; 0x74
 8008de0:	4617      	mov	r7, r2
 8008de2:	461d      	mov	r5, r3
 8008de4:	4606      	mov	r6, r0
 8008de6:	b118      	cbz	r0, 8008df0 <_vfiprintf_r+0x18>
 8008de8:	6983      	ldr	r3, [r0, #24]
 8008dea:	b90b      	cbnz	r3, 8008df0 <_vfiprintf_r+0x18>
 8008dec:	f7fe fde4 	bl	80079b8 <__sinit>
 8008df0:	4b7c      	ldr	r3, [pc, #496]	; (8008fe4 <_vfiprintf_r+0x20c>)
 8008df2:	429c      	cmp	r4, r3
 8008df4:	d158      	bne.n	8008ea8 <_vfiprintf_r+0xd0>
 8008df6:	6874      	ldr	r4, [r6, #4]
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	0718      	lsls	r0, r3, #28
 8008dfc:	d55e      	bpl.n	8008ebc <_vfiprintf_r+0xe4>
 8008dfe:	6923      	ldr	r3, [r4, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d05b      	beq.n	8008ebc <_vfiprintf_r+0xe4>
 8008e04:	2300      	movs	r3, #0
 8008e06:	9309      	str	r3, [sp, #36]	; 0x24
 8008e08:	2320      	movs	r3, #32
 8008e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e0e:	2330      	movs	r3, #48	; 0x30
 8008e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e14:	9503      	str	r5, [sp, #12]
 8008e16:	f04f 0b01 	mov.w	fp, #1
 8008e1a:	46b8      	mov	r8, r7
 8008e1c:	4645      	mov	r5, r8
 8008e1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008e22:	b10b      	cbz	r3, 8008e28 <_vfiprintf_r+0x50>
 8008e24:	2b25      	cmp	r3, #37	; 0x25
 8008e26:	d154      	bne.n	8008ed2 <_vfiprintf_r+0xfa>
 8008e28:	ebb8 0a07 	subs.w	sl, r8, r7
 8008e2c:	d00b      	beq.n	8008e46 <_vfiprintf_r+0x6e>
 8008e2e:	4653      	mov	r3, sl
 8008e30:	463a      	mov	r2, r7
 8008e32:	4621      	mov	r1, r4
 8008e34:	4630      	mov	r0, r6
 8008e36:	f7ff ffbc 	bl	8008db2 <__sfputs_r>
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	f000 80c2 	beq.w	8008fc4 <_vfiprintf_r+0x1ec>
 8008e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e42:	4453      	add	r3, sl
 8008e44:	9309      	str	r3, [sp, #36]	; 0x24
 8008e46:	f898 3000 	ldrb.w	r3, [r8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	f000 80ba 	beq.w	8008fc4 <_vfiprintf_r+0x1ec>
 8008e50:	2300      	movs	r3, #0
 8008e52:	f04f 32ff 	mov.w	r2, #4294967295
 8008e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	9307      	str	r3, [sp, #28]
 8008e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008e62:	931a      	str	r3, [sp, #104]	; 0x68
 8008e64:	46a8      	mov	r8, r5
 8008e66:	2205      	movs	r2, #5
 8008e68:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008e6c:	485e      	ldr	r0, [pc, #376]	; (8008fe8 <_vfiprintf_r+0x210>)
 8008e6e:	f7f7 f9bf 	bl	80001f0 <memchr>
 8008e72:	9b04      	ldr	r3, [sp, #16]
 8008e74:	bb78      	cbnz	r0, 8008ed6 <_vfiprintf_r+0xfe>
 8008e76:	06d9      	lsls	r1, r3, #27
 8008e78:	bf44      	itt	mi
 8008e7a:	2220      	movmi	r2, #32
 8008e7c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e80:	071a      	lsls	r2, r3, #28
 8008e82:	bf44      	itt	mi
 8008e84:	222b      	movmi	r2, #43	; 0x2b
 8008e86:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e8a:	782a      	ldrb	r2, [r5, #0]
 8008e8c:	2a2a      	cmp	r2, #42	; 0x2a
 8008e8e:	d02a      	beq.n	8008ee6 <_vfiprintf_r+0x10e>
 8008e90:	9a07      	ldr	r2, [sp, #28]
 8008e92:	46a8      	mov	r8, r5
 8008e94:	2000      	movs	r0, #0
 8008e96:	250a      	movs	r5, #10
 8008e98:	4641      	mov	r1, r8
 8008e9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e9e:	3b30      	subs	r3, #48	; 0x30
 8008ea0:	2b09      	cmp	r3, #9
 8008ea2:	d969      	bls.n	8008f78 <_vfiprintf_r+0x1a0>
 8008ea4:	b360      	cbz	r0, 8008f00 <_vfiprintf_r+0x128>
 8008ea6:	e024      	b.n	8008ef2 <_vfiprintf_r+0x11a>
 8008ea8:	4b50      	ldr	r3, [pc, #320]	; (8008fec <_vfiprintf_r+0x214>)
 8008eaa:	429c      	cmp	r4, r3
 8008eac:	d101      	bne.n	8008eb2 <_vfiprintf_r+0xda>
 8008eae:	68b4      	ldr	r4, [r6, #8]
 8008eb0:	e7a2      	b.n	8008df8 <_vfiprintf_r+0x20>
 8008eb2:	4b4f      	ldr	r3, [pc, #316]	; (8008ff0 <_vfiprintf_r+0x218>)
 8008eb4:	429c      	cmp	r4, r3
 8008eb6:	bf08      	it	eq
 8008eb8:	68f4      	ldreq	r4, [r6, #12]
 8008eba:	e79d      	b.n	8008df8 <_vfiprintf_r+0x20>
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f000 f978 	bl	80091b4 <__swsetup_r>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d09d      	beq.n	8008e04 <_vfiprintf_r+0x2c>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ecc:	b01d      	add	sp, #116	; 0x74
 8008ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ed2:	46a8      	mov	r8, r5
 8008ed4:	e7a2      	b.n	8008e1c <_vfiprintf_r+0x44>
 8008ed6:	4a44      	ldr	r2, [pc, #272]	; (8008fe8 <_vfiprintf_r+0x210>)
 8008ed8:	1a80      	subs	r0, r0, r2
 8008eda:	fa0b f000 	lsl.w	r0, fp, r0
 8008ede:	4318      	orrs	r0, r3
 8008ee0:	9004      	str	r0, [sp, #16]
 8008ee2:	4645      	mov	r5, r8
 8008ee4:	e7be      	b.n	8008e64 <_vfiprintf_r+0x8c>
 8008ee6:	9a03      	ldr	r2, [sp, #12]
 8008ee8:	1d11      	adds	r1, r2, #4
 8008eea:	6812      	ldr	r2, [r2, #0]
 8008eec:	9103      	str	r1, [sp, #12]
 8008eee:	2a00      	cmp	r2, #0
 8008ef0:	db01      	blt.n	8008ef6 <_vfiprintf_r+0x11e>
 8008ef2:	9207      	str	r2, [sp, #28]
 8008ef4:	e004      	b.n	8008f00 <_vfiprintf_r+0x128>
 8008ef6:	4252      	negs	r2, r2
 8008ef8:	f043 0302 	orr.w	r3, r3, #2
 8008efc:	9207      	str	r2, [sp, #28]
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	f898 3000 	ldrb.w	r3, [r8]
 8008f04:	2b2e      	cmp	r3, #46	; 0x2e
 8008f06:	d10e      	bne.n	8008f26 <_vfiprintf_r+0x14e>
 8008f08:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0e:	d138      	bne.n	8008f82 <_vfiprintf_r+0x1aa>
 8008f10:	9b03      	ldr	r3, [sp, #12]
 8008f12:	1d1a      	adds	r2, r3, #4
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	9203      	str	r2, [sp, #12]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	bfb8      	it	lt
 8008f1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f20:	f108 0802 	add.w	r8, r8, #2
 8008f24:	9305      	str	r3, [sp, #20]
 8008f26:	4d33      	ldr	r5, [pc, #204]	; (8008ff4 <_vfiprintf_r+0x21c>)
 8008f28:	f898 1000 	ldrb.w	r1, [r8]
 8008f2c:	2203      	movs	r2, #3
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f7f7 f95e 	bl	80001f0 <memchr>
 8008f34:	b140      	cbz	r0, 8008f48 <_vfiprintf_r+0x170>
 8008f36:	2340      	movs	r3, #64	; 0x40
 8008f38:	1b40      	subs	r0, r0, r5
 8008f3a:	fa03 f000 	lsl.w	r0, r3, r0
 8008f3e:	9b04      	ldr	r3, [sp, #16]
 8008f40:	4303      	orrs	r3, r0
 8008f42:	f108 0801 	add.w	r8, r8, #1
 8008f46:	9304      	str	r3, [sp, #16]
 8008f48:	f898 1000 	ldrb.w	r1, [r8]
 8008f4c:	482a      	ldr	r0, [pc, #168]	; (8008ff8 <_vfiprintf_r+0x220>)
 8008f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f52:	2206      	movs	r2, #6
 8008f54:	f108 0701 	add.w	r7, r8, #1
 8008f58:	f7f7 f94a 	bl	80001f0 <memchr>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	d037      	beq.n	8008fd0 <_vfiprintf_r+0x1f8>
 8008f60:	4b26      	ldr	r3, [pc, #152]	; (8008ffc <_vfiprintf_r+0x224>)
 8008f62:	bb1b      	cbnz	r3, 8008fac <_vfiprintf_r+0x1d4>
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	3307      	adds	r3, #7
 8008f68:	f023 0307 	bic.w	r3, r3, #7
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	9303      	str	r3, [sp, #12]
 8008f70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f72:	444b      	add	r3, r9
 8008f74:	9309      	str	r3, [sp, #36]	; 0x24
 8008f76:	e750      	b.n	8008e1a <_vfiprintf_r+0x42>
 8008f78:	fb05 3202 	mla	r2, r5, r2, r3
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	4688      	mov	r8, r1
 8008f80:	e78a      	b.n	8008e98 <_vfiprintf_r+0xc0>
 8008f82:	2300      	movs	r3, #0
 8008f84:	f108 0801 	add.w	r8, r8, #1
 8008f88:	9305      	str	r3, [sp, #20]
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	250a      	movs	r5, #10
 8008f8e:	4640      	mov	r0, r8
 8008f90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f94:	3a30      	subs	r2, #48	; 0x30
 8008f96:	2a09      	cmp	r2, #9
 8008f98:	d903      	bls.n	8008fa2 <_vfiprintf_r+0x1ca>
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0c3      	beq.n	8008f26 <_vfiprintf_r+0x14e>
 8008f9e:	9105      	str	r1, [sp, #20]
 8008fa0:	e7c1      	b.n	8008f26 <_vfiprintf_r+0x14e>
 8008fa2:	fb05 2101 	mla	r1, r5, r1, r2
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4680      	mov	r8, r0
 8008faa:	e7f0      	b.n	8008f8e <_vfiprintf_r+0x1b6>
 8008fac:	ab03      	add	r3, sp, #12
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4b13      	ldr	r3, [pc, #76]	; (8009000 <_vfiprintf_r+0x228>)
 8008fb4:	a904      	add	r1, sp, #16
 8008fb6:	4630      	mov	r0, r6
 8008fb8:	f7fc f9a0 	bl	80052fc <_printf_float>
 8008fbc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008fc0:	4681      	mov	r9, r0
 8008fc2:	d1d5      	bne.n	8008f70 <_vfiprintf_r+0x198>
 8008fc4:	89a3      	ldrh	r3, [r4, #12]
 8008fc6:	065b      	lsls	r3, r3, #25
 8008fc8:	f53f af7e 	bmi.w	8008ec8 <_vfiprintf_r+0xf0>
 8008fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008fce:	e77d      	b.n	8008ecc <_vfiprintf_r+0xf4>
 8008fd0:	ab03      	add	r3, sp, #12
 8008fd2:	9300      	str	r3, [sp, #0]
 8008fd4:	4622      	mov	r2, r4
 8008fd6:	4b0a      	ldr	r3, [pc, #40]	; (8009000 <_vfiprintf_r+0x228>)
 8008fd8:	a904      	add	r1, sp, #16
 8008fda:	4630      	mov	r0, r6
 8008fdc:	f7fc fc44 	bl	8005868 <_printf_i>
 8008fe0:	e7ec      	b.n	8008fbc <_vfiprintf_r+0x1e4>
 8008fe2:	bf00      	nop
 8008fe4:	08009788 	.word	0x08009788
 8008fe8:	080098d4 	.word	0x080098d4
 8008fec:	080097a8 	.word	0x080097a8
 8008ff0:	08009768 	.word	0x08009768
 8008ff4:	080098da 	.word	0x080098da
 8008ff8:	080098de 	.word	0x080098de
 8008ffc:	080052fd 	.word	0x080052fd
 8009000:	08008db3 	.word	0x08008db3

08009004 <_sbrk_r>:
 8009004:	b538      	push	{r3, r4, r5, lr}
 8009006:	4c06      	ldr	r4, [pc, #24]	; (8009020 <_sbrk_r+0x1c>)
 8009008:	2300      	movs	r3, #0
 800900a:	4605      	mov	r5, r0
 800900c:	4608      	mov	r0, r1
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	f7f9 f8ae 	bl	8002170 <_sbrk>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_sbrk_r+0x1a>
 8009018:	6823      	ldr	r3, [r4, #0]
 800901a:	b103      	cbz	r3, 800901e <_sbrk_r+0x1a>
 800901c:	602b      	str	r3, [r5, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	20001684 	.word	0x20001684

08009024 <__sread>:
 8009024:	b510      	push	{r4, lr}
 8009026:	460c      	mov	r4, r1
 8009028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800902c:	f000 faa8 	bl	8009580 <_read_r>
 8009030:	2800      	cmp	r0, #0
 8009032:	bfab      	itete	ge
 8009034:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009036:	89a3      	ldrhlt	r3, [r4, #12]
 8009038:	181b      	addge	r3, r3, r0
 800903a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800903e:	bfac      	ite	ge
 8009040:	6563      	strge	r3, [r4, #84]	; 0x54
 8009042:	81a3      	strhlt	r3, [r4, #12]
 8009044:	bd10      	pop	{r4, pc}

08009046 <__swrite>:
 8009046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800904a:	461f      	mov	r7, r3
 800904c:	898b      	ldrh	r3, [r1, #12]
 800904e:	05db      	lsls	r3, r3, #23
 8009050:	4605      	mov	r5, r0
 8009052:	460c      	mov	r4, r1
 8009054:	4616      	mov	r6, r2
 8009056:	d505      	bpl.n	8009064 <__swrite+0x1e>
 8009058:	2302      	movs	r3, #2
 800905a:	2200      	movs	r2, #0
 800905c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009060:	f000 f9d6 	bl	8009410 <_lseek_r>
 8009064:	89a3      	ldrh	r3, [r4, #12]
 8009066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800906a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800906e:	81a3      	strh	r3, [r4, #12]
 8009070:	4632      	mov	r2, r6
 8009072:	463b      	mov	r3, r7
 8009074:	4628      	mov	r0, r5
 8009076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800907a:	f000 b889 	b.w	8009190 <_write_r>

0800907e <__sseek>:
 800907e:	b510      	push	{r4, lr}
 8009080:	460c      	mov	r4, r1
 8009082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009086:	f000 f9c3 	bl	8009410 <_lseek_r>
 800908a:	1c43      	adds	r3, r0, #1
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	bf15      	itete	ne
 8009090:	6560      	strne	r0, [r4, #84]	; 0x54
 8009092:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009096:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800909a:	81a3      	strheq	r3, [r4, #12]
 800909c:	bf18      	it	ne
 800909e:	81a3      	strhne	r3, [r4, #12]
 80090a0:	bd10      	pop	{r4, pc}

080090a2 <__sclose>:
 80090a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a6:	f000 b8f3 	b.w	8009290 <_close_r>

080090aa <strncmp>:
 80090aa:	b510      	push	{r4, lr}
 80090ac:	b16a      	cbz	r2, 80090ca <strncmp+0x20>
 80090ae:	3901      	subs	r1, #1
 80090b0:	1884      	adds	r4, r0, r2
 80090b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80090b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d103      	bne.n	80090c6 <strncmp+0x1c>
 80090be:	42a0      	cmp	r0, r4
 80090c0:	d001      	beq.n	80090c6 <strncmp+0x1c>
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1f5      	bne.n	80090b2 <strncmp+0x8>
 80090c6:	1a98      	subs	r0, r3, r2
 80090c8:	bd10      	pop	{r4, pc}
 80090ca:	4610      	mov	r0, r2
 80090cc:	e7fc      	b.n	80090c8 <strncmp+0x1e>
	...

080090d0 <__swbuf_r>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	460e      	mov	r6, r1
 80090d4:	4614      	mov	r4, r2
 80090d6:	4605      	mov	r5, r0
 80090d8:	b118      	cbz	r0, 80090e2 <__swbuf_r+0x12>
 80090da:	6983      	ldr	r3, [r0, #24]
 80090dc:	b90b      	cbnz	r3, 80090e2 <__swbuf_r+0x12>
 80090de:	f7fe fc6b 	bl	80079b8 <__sinit>
 80090e2:	4b21      	ldr	r3, [pc, #132]	; (8009168 <__swbuf_r+0x98>)
 80090e4:	429c      	cmp	r4, r3
 80090e6:	d12a      	bne.n	800913e <__swbuf_r+0x6e>
 80090e8:	686c      	ldr	r4, [r5, #4]
 80090ea:	69a3      	ldr	r3, [r4, #24]
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	071a      	lsls	r2, r3, #28
 80090f2:	d52e      	bpl.n	8009152 <__swbuf_r+0x82>
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b363      	cbz	r3, 8009152 <__swbuf_r+0x82>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	6820      	ldr	r0, [r4, #0]
 80090fc:	1ac0      	subs	r0, r0, r3
 80090fe:	6963      	ldr	r3, [r4, #20]
 8009100:	b2f6      	uxtb	r6, r6
 8009102:	4283      	cmp	r3, r0
 8009104:	4637      	mov	r7, r6
 8009106:	dc04      	bgt.n	8009112 <__swbuf_r+0x42>
 8009108:	4621      	mov	r1, r4
 800910a:	4628      	mov	r0, r5
 800910c:	f000 f956 	bl	80093bc <_fflush_r>
 8009110:	bb28      	cbnz	r0, 800915e <__swbuf_r+0x8e>
 8009112:	68a3      	ldr	r3, [r4, #8]
 8009114:	3b01      	subs	r3, #1
 8009116:	60a3      	str	r3, [r4, #8]
 8009118:	6823      	ldr	r3, [r4, #0]
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	701e      	strb	r6, [r3, #0]
 8009120:	6963      	ldr	r3, [r4, #20]
 8009122:	3001      	adds	r0, #1
 8009124:	4283      	cmp	r3, r0
 8009126:	d004      	beq.n	8009132 <__swbuf_r+0x62>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	07db      	lsls	r3, r3, #31
 800912c:	d519      	bpl.n	8009162 <__swbuf_r+0x92>
 800912e:	2e0a      	cmp	r6, #10
 8009130:	d117      	bne.n	8009162 <__swbuf_r+0x92>
 8009132:	4621      	mov	r1, r4
 8009134:	4628      	mov	r0, r5
 8009136:	f000 f941 	bl	80093bc <_fflush_r>
 800913a:	b190      	cbz	r0, 8009162 <__swbuf_r+0x92>
 800913c:	e00f      	b.n	800915e <__swbuf_r+0x8e>
 800913e:	4b0b      	ldr	r3, [pc, #44]	; (800916c <__swbuf_r+0x9c>)
 8009140:	429c      	cmp	r4, r3
 8009142:	d101      	bne.n	8009148 <__swbuf_r+0x78>
 8009144:	68ac      	ldr	r4, [r5, #8]
 8009146:	e7d0      	b.n	80090ea <__swbuf_r+0x1a>
 8009148:	4b09      	ldr	r3, [pc, #36]	; (8009170 <__swbuf_r+0xa0>)
 800914a:	429c      	cmp	r4, r3
 800914c:	bf08      	it	eq
 800914e:	68ec      	ldreq	r4, [r5, #12]
 8009150:	e7cb      	b.n	80090ea <__swbuf_r+0x1a>
 8009152:	4621      	mov	r1, r4
 8009154:	4628      	mov	r0, r5
 8009156:	f000 f82d 	bl	80091b4 <__swsetup_r>
 800915a:	2800      	cmp	r0, #0
 800915c:	d0cc      	beq.n	80090f8 <__swbuf_r+0x28>
 800915e:	f04f 37ff 	mov.w	r7, #4294967295
 8009162:	4638      	mov	r0, r7
 8009164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009166:	bf00      	nop
 8009168:	08009788 	.word	0x08009788
 800916c:	080097a8 	.word	0x080097a8
 8009170:	08009768 	.word	0x08009768

08009174 <__ascii_wctomb>:
 8009174:	b149      	cbz	r1, 800918a <__ascii_wctomb+0x16>
 8009176:	2aff      	cmp	r2, #255	; 0xff
 8009178:	bf85      	ittet	hi
 800917a:	238a      	movhi	r3, #138	; 0x8a
 800917c:	6003      	strhi	r3, [r0, #0]
 800917e:	700a      	strbls	r2, [r1, #0]
 8009180:	f04f 30ff 	movhi.w	r0, #4294967295
 8009184:	bf98      	it	ls
 8009186:	2001      	movls	r0, #1
 8009188:	4770      	bx	lr
 800918a:	4608      	mov	r0, r1
 800918c:	4770      	bx	lr
	...

08009190 <_write_r>:
 8009190:	b538      	push	{r3, r4, r5, lr}
 8009192:	4c07      	ldr	r4, [pc, #28]	; (80091b0 <_write_r+0x20>)
 8009194:	4605      	mov	r5, r0
 8009196:	4608      	mov	r0, r1
 8009198:	4611      	mov	r1, r2
 800919a:	2200      	movs	r2, #0
 800919c:	6022      	str	r2, [r4, #0]
 800919e:	461a      	mov	r2, r3
 80091a0:	f7f8 ff95 	bl	80020ce <_write>
 80091a4:	1c43      	adds	r3, r0, #1
 80091a6:	d102      	bne.n	80091ae <_write_r+0x1e>
 80091a8:	6823      	ldr	r3, [r4, #0]
 80091aa:	b103      	cbz	r3, 80091ae <_write_r+0x1e>
 80091ac:	602b      	str	r3, [r5, #0]
 80091ae:	bd38      	pop	{r3, r4, r5, pc}
 80091b0:	20001684 	.word	0x20001684

080091b4 <__swsetup_r>:
 80091b4:	4b32      	ldr	r3, [pc, #200]	; (8009280 <__swsetup_r+0xcc>)
 80091b6:	b570      	push	{r4, r5, r6, lr}
 80091b8:	681d      	ldr	r5, [r3, #0]
 80091ba:	4606      	mov	r6, r0
 80091bc:	460c      	mov	r4, r1
 80091be:	b125      	cbz	r5, 80091ca <__swsetup_r+0x16>
 80091c0:	69ab      	ldr	r3, [r5, #24]
 80091c2:	b913      	cbnz	r3, 80091ca <__swsetup_r+0x16>
 80091c4:	4628      	mov	r0, r5
 80091c6:	f7fe fbf7 	bl	80079b8 <__sinit>
 80091ca:	4b2e      	ldr	r3, [pc, #184]	; (8009284 <__swsetup_r+0xd0>)
 80091cc:	429c      	cmp	r4, r3
 80091ce:	d10f      	bne.n	80091f0 <__swsetup_r+0x3c>
 80091d0:	686c      	ldr	r4, [r5, #4]
 80091d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	0715      	lsls	r5, r2, #28
 80091da:	d42c      	bmi.n	8009236 <__swsetup_r+0x82>
 80091dc:	06d0      	lsls	r0, r2, #27
 80091de:	d411      	bmi.n	8009204 <__swsetup_r+0x50>
 80091e0:	2209      	movs	r2, #9
 80091e2:	6032      	str	r2, [r6, #0]
 80091e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295
 80091ee:	e03e      	b.n	800926e <__swsetup_r+0xba>
 80091f0:	4b25      	ldr	r3, [pc, #148]	; (8009288 <__swsetup_r+0xd4>)
 80091f2:	429c      	cmp	r4, r3
 80091f4:	d101      	bne.n	80091fa <__swsetup_r+0x46>
 80091f6:	68ac      	ldr	r4, [r5, #8]
 80091f8:	e7eb      	b.n	80091d2 <__swsetup_r+0x1e>
 80091fa:	4b24      	ldr	r3, [pc, #144]	; (800928c <__swsetup_r+0xd8>)
 80091fc:	429c      	cmp	r4, r3
 80091fe:	bf08      	it	eq
 8009200:	68ec      	ldreq	r4, [r5, #12]
 8009202:	e7e6      	b.n	80091d2 <__swsetup_r+0x1e>
 8009204:	0751      	lsls	r1, r2, #29
 8009206:	d512      	bpl.n	800922e <__swsetup_r+0x7a>
 8009208:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800920a:	b141      	cbz	r1, 800921e <__swsetup_r+0x6a>
 800920c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009210:	4299      	cmp	r1, r3
 8009212:	d002      	beq.n	800921a <__swsetup_r+0x66>
 8009214:	4630      	mov	r0, r6
 8009216:	f7ff fbbb 	bl	8008990 <_free_r>
 800921a:	2300      	movs	r3, #0
 800921c:	6363      	str	r3, [r4, #52]	; 0x34
 800921e:	89a3      	ldrh	r3, [r4, #12]
 8009220:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009224:	81a3      	strh	r3, [r4, #12]
 8009226:	2300      	movs	r3, #0
 8009228:	6063      	str	r3, [r4, #4]
 800922a:	6923      	ldr	r3, [r4, #16]
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	89a3      	ldrh	r3, [r4, #12]
 8009230:	f043 0308 	orr.w	r3, r3, #8
 8009234:	81a3      	strh	r3, [r4, #12]
 8009236:	6923      	ldr	r3, [r4, #16]
 8009238:	b94b      	cbnz	r3, 800924e <__swsetup_r+0x9a>
 800923a:	89a3      	ldrh	r3, [r4, #12]
 800923c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009244:	d003      	beq.n	800924e <__swsetup_r+0x9a>
 8009246:	4621      	mov	r1, r4
 8009248:	4630      	mov	r0, r6
 800924a:	f000 f917 	bl	800947c <__smakebuf_r>
 800924e:	89a2      	ldrh	r2, [r4, #12]
 8009250:	f012 0301 	ands.w	r3, r2, #1
 8009254:	d00c      	beq.n	8009270 <__swsetup_r+0xbc>
 8009256:	2300      	movs	r3, #0
 8009258:	60a3      	str	r3, [r4, #8]
 800925a:	6963      	ldr	r3, [r4, #20]
 800925c:	425b      	negs	r3, r3
 800925e:	61a3      	str	r3, [r4, #24]
 8009260:	6923      	ldr	r3, [r4, #16]
 8009262:	b953      	cbnz	r3, 800927a <__swsetup_r+0xc6>
 8009264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009268:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800926c:	d1ba      	bne.n	80091e4 <__swsetup_r+0x30>
 800926e:	bd70      	pop	{r4, r5, r6, pc}
 8009270:	0792      	lsls	r2, r2, #30
 8009272:	bf58      	it	pl
 8009274:	6963      	ldrpl	r3, [r4, #20]
 8009276:	60a3      	str	r3, [r4, #8]
 8009278:	e7f2      	b.n	8009260 <__swsetup_r+0xac>
 800927a:	2000      	movs	r0, #0
 800927c:	e7f7      	b.n	800926e <__swsetup_r+0xba>
 800927e:	bf00      	nop
 8009280:	20000010 	.word	0x20000010
 8009284:	08009788 	.word	0x08009788
 8009288:	080097a8 	.word	0x080097a8
 800928c:	08009768 	.word	0x08009768

08009290 <_close_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4c06      	ldr	r4, [pc, #24]	; (80092ac <_close_r+0x1c>)
 8009294:	2300      	movs	r3, #0
 8009296:	4605      	mov	r5, r0
 8009298:	4608      	mov	r0, r1
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	f7f8 ff33 	bl	8002106 <_close>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_close_r+0x1a>
 80092a4:	6823      	ldr	r3, [r4, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_close_r+0x1a>
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20001684 	.word	0x20001684

080092b0 <__sflush_r>:
 80092b0:	898a      	ldrh	r2, [r1, #12]
 80092b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b6:	4605      	mov	r5, r0
 80092b8:	0710      	lsls	r0, r2, #28
 80092ba:	460c      	mov	r4, r1
 80092bc:	d458      	bmi.n	8009370 <__sflush_r+0xc0>
 80092be:	684b      	ldr	r3, [r1, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	dc05      	bgt.n	80092d0 <__sflush_r+0x20>
 80092c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	dc02      	bgt.n	80092d0 <__sflush_r+0x20>
 80092ca:	2000      	movs	r0, #0
 80092cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092d2:	2e00      	cmp	r6, #0
 80092d4:	d0f9      	beq.n	80092ca <__sflush_r+0x1a>
 80092d6:	2300      	movs	r3, #0
 80092d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80092dc:	682f      	ldr	r7, [r5, #0]
 80092de:	6a21      	ldr	r1, [r4, #32]
 80092e0:	602b      	str	r3, [r5, #0]
 80092e2:	d032      	beq.n	800934a <__sflush_r+0x9a>
 80092e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80092e6:	89a3      	ldrh	r3, [r4, #12]
 80092e8:	075a      	lsls	r2, r3, #29
 80092ea:	d505      	bpl.n	80092f8 <__sflush_r+0x48>
 80092ec:	6863      	ldr	r3, [r4, #4]
 80092ee:	1ac0      	subs	r0, r0, r3
 80092f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80092f2:	b10b      	cbz	r3, 80092f8 <__sflush_r+0x48>
 80092f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80092f6:	1ac0      	subs	r0, r0, r3
 80092f8:	2300      	movs	r3, #0
 80092fa:	4602      	mov	r2, r0
 80092fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80092fe:	6a21      	ldr	r1, [r4, #32]
 8009300:	4628      	mov	r0, r5
 8009302:	47b0      	blx	r6
 8009304:	1c43      	adds	r3, r0, #1
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	d106      	bne.n	8009318 <__sflush_r+0x68>
 800930a:	6829      	ldr	r1, [r5, #0]
 800930c:	291d      	cmp	r1, #29
 800930e:	d848      	bhi.n	80093a2 <__sflush_r+0xf2>
 8009310:	4a29      	ldr	r2, [pc, #164]	; (80093b8 <__sflush_r+0x108>)
 8009312:	40ca      	lsrs	r2, r1
 8009314:	07d6      	lsls	r6, r2, #31
 8009316:	d544      	bpl.n	80093a2 <__sflush_r+0xf2>
 8009318:	2200      	movs	r2, #0
 800931a:	6062      	str	r2, [r4, #4]
 800931c:	04d9      	lsls	r1, r3, #19
 800931e:	6922      	ldr	r2, [r4, #16]
 8009320:	6022      	str	r2, [r4, #0]
 8009322:	d504      	bpl.n	800932e <__sflush_r+0x7e>
 8009324:	1c42      	adds	r2, r0, #1
 8009326:	d101      	bne.n	800932c <__sflush_r+0x7c>
 8009328:	682b      	ldr	r3, [r5, #0]
 800932a:	b903      	cbnz	r3, 800932e <__sflush_r+0x7e>
 800932c:	6560      	str	r0, [r4, #84]	; 0x54
 800932e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009330:	602f      	str	r7, [r5, #0]
 8009332:	2900      	cmp	r1, #0
 8009334:	d0c9      	beq.n	80092ca <__sflush_r+0x1a>
 8009336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800933a:	4299      	cmp	r1, r3
 800933c:	d002      	beq.n	8009344 <__sflush_r+0x94>
 800933e:	4628      	mov	r0, r5
 8009340:	f7ff fb26 	bl	8008990 <_free_r>
 8009344:	2000      	movs	r0, #0
 8009346:	6360      	str	r0, [r4, #52]	; 0x34
 8009348:	e7c0      	b.n	80092cc <__sflush_r+0x1c>
 800934a:	2301      	movs	r3, #1
 800934c:	4628      	mov	r0, r5
 800934e:	47b0      	blx	r6
 8009350:	1c41      	adds	r1, r0, #1
 8009352:	d1c8      	bne.n	80092e6 <__sflush_r+0x36>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0c5      	beq.n	80092e6 <__sflush_r+0x36>
 800935a:	2b1d      	cmp	r3, #29
 800935c:	d001      	beq.n	8009362 <__sflush_r+0xb2>
 800935e:	2b16      	cmp	r3, #22
 8009360:	d101      	bne.n	8009366 <__sflush_r+0xb6>
 8009362:	602f      	str	r7, [r5, #0]
 8009364:	e7b1      	b.n	80092ca <__sflush_r+0x1a>
 8009366:	89a3      	ldrh	r3, [r4, #12]
 8009368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800936c:	81a3      	strh	r3, [r4, #12]
 800936e:	e7ad      	b.n	80092cc <__sflush_r+0x1c>
 8009370:	690f      	ldr	r7, [r1, #16]
 8009372:	2f00      	cmp	r7, #0
 8009374:	d0a9      	beq.n	80092ca <__sflush_r+0x1a>
 8009376:	0793      	lsls	r3, r2, #30
 8009378:	680e      	ldr	r6, [r1, #0]
 800937a:	bf08      	it	eq
 800937c:	694b      	ldreq	r3, [r1, #20]
 800937e:	600f      	str	r7, [r1, #0]
 8009380:	bf18      	it	ne
 8009382:	2300      	movne	r3, #0
 8009384:	eba6 0807 	sub.w	r8, r6, r7
 8009388:	608b      	str	r3, [r1, #8]
 800938a:	f1b8 0f00 	cmp.w	r8, #0
 800938e:	dd9c      	ble.n	80092ca <__sflush_r+0x1a>
 8009390:	4643      	mov	r3, r8
 8009392:	463a      	mov	r2, r7
 8009394:	6a21      	ldr	r1, [r4, #32]
 8009396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009398:	4628      	mov	r0, r5
 800939a:	47b0      	blx	r6
 800939c:	2800      	cmp	r0, #0
 800939e:	dc06      	bgt.n	80093ae <__sflush_r+0xfe>
 80093a0:	89a3      	ldrh	r3, [r4, #12]
 80093a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	e78e      	b.n	80092cc <__sflush_r+0x1c>
 80093ae:	4407      	add	r7, r0
 80093b0:	eba8 0800 	sub.w	r8, r8, r0
 80093b4:	e7e9      	b.n	800938a <__sflush_r+0xda>
 80093b6:	bf00      	nop
 80093b8:	20400001 	.word	0x20400001

080093bc <_fflush_r>:
 80093bc:	b538      	push	{r3, r4, r5, lr}
 80093be:	690b      	ldr	r3, [r1, #16]
 80093c0:	4605      	mov	r5, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	b1db      	cbz	r3, 80093fe <_fflush_r+0x42>
 80093c6:	b118      	cbz	r0, 80093d0 <_fflush_r+0x14>
 80093c8:	6983      	ldr	r3, [r0, #24]
 80093ca:	b90b      	cbnz	r3, 80093d0 <_fflush_r+0x14>
 80093cc:	f7fe faf4 	bl	80079b8 <__sinit>
 80093d0:	4b0c      	ldr	r3, [pc, #48]	; (8009404 <_fflush_r+0x48>)
 80093d2:	429c      	cmp	r4, r3
 80093d4:	d109      	bne.n	80093ea <_fflush_r+0x2e>
 80093d6:	686c      	ldr	r4, [r5, #4]
 80093d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093dc:	b17b      	cbz	r3, 80093fe <_fflush_r+0x42>
 80093de:	4621      	mov	r1, r4
 80093e0:	4628      	mov	r0, r5
 80093e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093e6:	f7ff bf63 	b.w	80092b0 <__sflush_r>
 80093ea:	4b07      	ldr	r3, [pc, #28]	; (8009408 <_fflush_r+0x4c>)
 80093ec:	429c      	cmp	r4, r3
 80093ee:	d101      	bne.n	80093f4 <_fflush_r+0x38>
 80093f0:	68ac      	ldr	r4, [r5, #8]
 80093f2:	e7f1      	b.n	80093d8 <_fflush_r+0x1c>
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <_fflush_r+0x50>)
 80093f6:	429c      	cmp	r4, r3
 80093f8:	bf08      	it	eq
 80093fa:	68ec      	ldreq	r4, [r5, #12]
 80093fc:	e7ec      	b.n	80093d8 <_fflush_r+0x1c>
 80093fe:	2000      	movs	r0, #0
 8009400:	bd38      	pop	{r3, r4, r5, pc}
 8009402:	bf00      	nop
 8009404:	08009788 	.word	0x08009788
 8009408:	080097a8 	.word	0x080097a8
 800940c:	08009768 	.word	0x08009768

08009410 <_lseek_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4c07      	ldr	r4, [pc, #28]	; (8009430 <_lseek_r+0x20>)
 8009414:	4605      	mov	r5, r0
 8009416:	4608      	mov	r0, r1
 8009418:	4611      	mov	r1, r2
 800941a:	2200      	movs	r2, #0
 800941c:	6022      	str	r2, [r4, #0]
 800941e:	461a      	mov	r2, r3
 8009420:	f7f8 fe98 	bl	8002154 <_lseek>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d102      	bne.n	800942e <_lseek_r+0x1e>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	b103      	cbz	r3, 800942e <_lseek_r+0x1e>
 800942c:	602b      	str	r3, [r5, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	20001684 	.word	0x20001684

08009434 <__swhatbuf_r>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	460e      	mov	r6, r1
 8009438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800943c:	2900      	cmp	r1, #0
 800943e:	b096      	sub	sp, #88	; 0x58
 8009440:	4614      	mov	r4, r2
 8009442:	461d      	mov	r5, r3
 8009444:	da07      	bge.n	8009456 <__swhatbuf_r+0x22>
 8009446:	2300      	movs	r3, #0
 8009448:	602b      	str	r3, [r5, #0]
 800944a:	89b3      	ldrh	r3, [r6, #12]
 800944c:	061a      	lsls	r2, r3, #24
 800944e:	d410      	bmi.n	8009472 <__swhatbuf_r+0x3e>
 8009450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009454:	e00e      	b.n	8009474 <__swhatbuf_r+0x40>
 8009456:	466a      	mov	r2, sp
 8009458:	f000 f8a4 	bl	80095a4 <_fstat_r>
 800945c:	2800      	cmp	r0, #0
 800945e:	dbf2      	blt.n	8009446 <__swhatbuf_r+0x12>
 8009460:	9a01      	ldr	r2, [sp, #4]
 8009462:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009466:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800946a:	425a      	negs	r2, r3
 800946c:	415a      	adcs	r2, r3
 800946e:	602a      	str	r2, [r5, #0]
 8009470:	e7ee      	b.n	8009450 <__swhatbuf_r+0x1c>
 8009472:	2340      	movs	r3, #64	; 0x40
 8009474:	2000      	movs	r0, #0
 8009476:	6023      	str	r3, [r4, #0]
 8009478:	b016      	add	sp, #88	; 0x58
 800947a:	bd70      	pop	{r4, r5, r6, pc}

0800947c <__smakebuf_r>:
 800947c:	898b      	ldrh	r3, [r1, #12]
 800947e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009480:	079d      	lsls	r5, r3, #30
 8009482:	4606      	mov	r6, r0
 8009484:	460c      	mov	r4, r1
 8009486:	d507      	bpl.n	8009498 <__smakebuf_r+0x1c>
 8009488:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	2301      	movs	r3, #1
 8009492:	6163      	str	r3, [r4, #20]
 8009494:	b002      	add	sp, #8
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	ab01      	add	r3, sp, #4
 800949a:	466a      	mov	r2, sp
 800949c:	f7ff ffca 	bl	8009434 <__swhatbuf_r>
 80094a0:	9900      	ldr	r1, [sp, #0]
 80094a2:	4605      	mov	r5, r0
 80094a4:	4630      	mov	r0, r6
 80094a6:	f7ff fac1 	bl	8008a2c <_malloc_r>
 80094aa:	b948      	cbnz	r0, 80094c0 <__smakebuf_r+0x44>
 80094ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094b0:	059a      	lsls	r2, r3, #22
 80094b2:	d4ef      	bmi.n	8009494 <__smakebuf_r+0x18>
 80094b4:	f023 0303 	bic.w	r3, r3, #3
 80094b8:	f043 0302 	orr.w	r3, r3, #2
 80094bc:	81a3      	strh	r3, [r4, #12]
 80094be:	e7e3      	b.n	8009488 <__smakebuf_r+0xc>
 80094c0:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <__smakebuf_r+0x7c>)
 80094c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	6020      	str	r0, [r4, #0]
 80094c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094cc:	81a3      	strh	r3, [r4, #12]
 80094ce:	9b00      	ldr	r3, [sp, #0]
 80094d0:	6163      	str	r3, [r4, #20]
 80094d2:	9b01      	ldr	r3, [sp, #4]
 80094d4:	6120      	str	r0, [r4, #16]
 80094d6:	b15b      	cbz	r3, 80094f0 <__smakebuf_r+0x74>
 80094d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094dc:	4630      	mov	r0, r6
 80094de:	f000 f873 	bl	80095c8 <_isatty_r>
 80094e2:	b128      	cbz	r0, 80094f0 <__smakebuf_r+0x74>
 80094e4:	89a3      	ldrh	r3, [r4, #12]
 80094e6:	f023 0303 	bic.w	r3, r3, #3
 80094ea:	f043 0301 	orr.w	r3, r3, #1
 80094ee:	81a3      	strh	r3, [r4, #12]
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	431d      	orrs	r5, r3
 80094f4:	81a5      	strh	r5, [r4, #12]
 80094f6:	e7cd      	b.n	8009494 <__smakebuf_r+0x18>
 80094f8:	08007981 	.word	0x08007981

080094fc <memmove>:
 80094fc:	4288      	cmp	r0, r1
 80094fe:	b510      	push	{r4, lr}
 8009500:	eb01 0302 	add.w	r3, r1, r2
 8009504:	d807      	bhi.n	8009516 <memmove+0x1a>
 8009506:	1e42      	subs	r2, r0, #1
 8009508:	4299      	cmp	r1, r3
 800950a:	d00a      	beq.n	8009522 <memmove+0x26>
 800950c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009510:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009514:	e7f8      	b.n	8009508 <memmove+0xc>
 8009516:	4283      	cmp	r3, r0
 8009518:	d9f5      	bls.n	8009506 <memmove+0xa>
 800951a:	1881      	adds	r1, r0, r2
 800951c:	1ad2      	subs	r2, r2, r3
 800951e:	42d3      	cmn	r3, r2
 8009520:	d100      	bne.n	8009524 <memmove+0x28>
 8009522:	bd10      	pop	{r4, pc}
 8009524:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009528:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800952c:	e7f7      	b.n	800951e <memmove+0x22>

0800952e <__malloc_lock>:
 800952e:	4770      	bx	lr

08009530 <__malloc_unlock>:
 8009530:	4770      	bx	lr

08009532 <_realloc_r>:
 8009532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009534:	4607      	mov	r7, r0
 8009536:	4614      	mov	r4, r2
 8009538:	460e      	mov	r6, r1
 800953a:	b921      	cbnz	r1, 8009546 <_realloc_r+0x14>
 800953c:	4611      	mov	r1, r2
 800953e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009542:	f7ff ba73 	b.w	8008a2c <_malloc_r>
 8009546:	b922      	cbnz	r2, 8009552 <_realloc_r+0x20>
 8009548:	f7ff fa22 	bl	8008990 <_free_r>
 800954c:	4625      	mov	r5, r4
 800954e:	4628      	mov	r0, r5
 8009550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009552:	f000 f849 	bl	80095e8 <_malloc_usable_size_r>
 8009556:	42a0      	cmp	r0, r4
 8009558:	d20f      	bcs.n	800957a <_realloc_r+0x48>
 800955a:	4621      	mov	r1, r4
 800955c:	4638      	mov	r0, r7
 800955e:	f7ff fa65 	bl	8008a2c <_malloc_r>
 8009562:	4605      	mov	r5, r0
 8009564:	2800      	cmp	r0, #0
 8009566:	d0f2      	beq.n	800954e <_realloc_r+0x1c>
 8009568:	4631      	mov	r1, r6
 800956a:	4622      	mov	r2, r4
 800956c:	f7fb fe1e 	bl	80051ac <memcpy>
 8009570:	4631      	mov	r1, r6
 8009572:	4638      	mov	r0, r7
 8009574:	f7ff fa0c 	bl	8008990 <_free_r>
 8009578:	e7e9      	b.n	800954e <_realloc_r+0x1c>
 800957a:	4635      	mov	r5, r6
 800957c:	e7e7      	b.n	800954e <_realloc_r+0x1c>
	...

08009580 <_read_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4c07      	ldr	r4, [pc, #28]	; (80095a0 <_read_r+0x20>)
 8009584:	4605      	mov	r5, r0
 8009586:	4608      	mov	r0, r1
 8009588:	4611      	mov	r1, r2
 800958a:	2200      	movs	r2, #0
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	f7f8 fd80 	bl	8002094 <_read>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	d102      	bne.n	800959e <_read_r+0x1e>
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	b103      	cbz	r3, 800959e <_read_r+0x1e>
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	20001684 	.word	0x20001684

080095a4 <_fstat_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4c07      	ldr	r4, [pc, #28]	; (80095c4 <_fstat_r+0x20>)
 80095a8:	2300      	movs	r3, #0
 80095aa:	4605      	mov	r5, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	4611      	mov	r1, r2
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	f7f8 fdb4 	bl	800211e <_fstat>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	d102      	bne.n	80095c0 <_fstat_r+0x1c>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	b103      	cbz	r3, 80095c0 <_fstat_r+0x1c>
 80095be:	602b      	str	r3, [r5, #0]
 80095c0:	bd38      	pop	{r3, r4, r5, pc}
 80095c2:	bf00      	nop
 80095c4:	20001684 	.word	0x20001684

080095c8 <_isatty_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4c06      	ldr	r4, [pc, #24]	; (80095e4 <_isatty_r+0x1c>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4605      	mov	r5, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	6023      	str	r3, [r4, #0]
 80095d4:	f7f8 fdb3 	bl	800213e <_isatty>
 80095d8:	1c43      	adds	r3, r0, #1
 80095da:	d102      	bne.n	80095e2 <_isatty_r+0x1a>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	b103      	cbz	r3, 80095e2 <_isatty_r+0x1a>
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	bd38      	pop	{r3, r4, r5, pc}
 80095e4:	20001684 	.word	0x20001684

080095e8 <_malloc_usable_size_r>:
 80095e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ec:	1f18      	subs	r0, r3, #4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	bfbc      	itt	lt
 80095f2:	580b      	ldrlt	r3, [r1, r0]
 80095f4:	18c0      	addlt	r0, r0, r3
 80095f6:	4770      	bx	lr

080095f8 <_init>:
 80095f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fa:	bf00      	nop
 80095fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095fe:	bc08      	pop	{r3}
 8009600:	469e      	mov	lr, r3
 8009602:	4770      	bx	lr

08009604 <_fini>:
 8009604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009606:	bf00      	nop
 8009608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800960a:	bc08      	pop	{r3}
 800960c:	469e      	mov	lr, r3
 800960e:	4770      	bx	lr
